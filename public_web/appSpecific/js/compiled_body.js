"use strict";







/*
	File: /usr/www/harendar.gameleon.co//public_web/components/helperInclude/resources/public/component.helperInclude.js
*/

	
	/*
		helperInclude JS
	*/
	
	Component.helperInclude = {
		
		componentName: "helperInclude",
		
		init: function( args )
		{
			for(var i=args.length-1;i>=0;i--)
			{
				new Component.helperInclude.create( args[i] );	
			}
		},
		
		create: function( args )
		{
			
		}
		
	};







/*
	File: /usr/www/harendar.gameleon.co//public_web/components/blankComponent/resources/public/component.blankComponent.js
*/

	
	/*
		blankComponent JS
	*/
	
	Component.blankComponent = {
		
		componentName: "blankComponent",
		
		init: function( args )
		{
			for(var i=args.length-1;i>=0;i--)
			{
				new Component.blankComponent.create( args[i] );	
			}
		},
		
		create: function( args )
		{
			
		}
		
	};



/*
	File: /usr/www/harendar.gameleon.co//public_web/components/appJS/resources/public/application.canvas.js
*/

	
	Application.canvas = {
		
		init: function()
		{
			
		},
		
		modelGroup: function( args )
		{
			var _areaWidth = parseInt(args.area.getAttribute("width"));
			var _areaHeight = parseInt(args.area.getAttribute("height"));
			
			if( isNaN( _areaWidth ) )
			{
				_areaWidth = Application.util.style.getCurrent( args.area, "width" ).toString().replace( /px/, "");
			}
			
			if( isNaN( _areaHeight ) )
			{
				_areaHeight = Application.util.style.getCurrent( args.area, "height" ).toString().replace( /px/, "");
			}
			
			function scene()
			{
				this.solid_number = 0;
				this.solid = new Array();
				this.distance = -650;
			}
			
			function rotate_solid_fast(parametri1, parametri2, solid)
			{
				var rotate = 	function(p, point)
									{
										var p_20_p_2 = p[20]*point[2];
										var p_19_p_1 = p[19]*point[1];
										var p_18_p_0 = p[18]*point[0];
										var u_x_p_v_y_p_w_z = p_18_p_0+p_19_p_1+p_20_p_2;
										
										var temp0 = point[0];
										var temp1 = point[1];

										point[0] = (p[4]+p[18]*(-p[7]+u_x_p_v_y_p_w_z)+((temp0-p[15])*p[1]+p[18]*(p[7]-p_19_p_1-p_20_p_2))*p[10]+p[11]*(p[12]-p[20]*temp1+p[19]*point[2]))/p[0];
										point[1] = (p[5]+p[19]*(-p[8]+u_x_p_v_y_p_w_z)+((temp1-p[16])*p[2]+p[19]*(p[8]-p_18_p_0-p_20_p_2))*p[10]+p[11]*(p[13]+p[20]*temp0-p[18]*point[2]))/p[0];
										point[2] = (p[6]+p[20]*(-p[9]+u_x_p_v_y_p_w_z)+((point[2]-p[17])*p[3]+p[20]*(p[9]-p_18_p_0-p_19_p_1))*p[10]+p[11]*(p[14]-p[19]*temp0+p[18]*temp1))/p[0];
									}
				
				rotate(parametri1, solid.center);
				rotate(parametri2, solid.axis_x);
				rotate(parametri2, solid.axis_y);
				rotate(parametri2, solid.axis_z);
				
				for (var i=0; i<solid.faces_number; i++)
				{
					rotate(parametri2, solid.normals[i]);
				}
					
				for (var j=0; j<solid.points_number; j++)
				{
					rotate(parametri1, solid.points[j]);					
				}
			}
			
			function sortfunction(a, b)
			{
				return(b.distance-a.distance);
			}
			
			function project(distance, point)
			{
				var result = new Array();

				result[0] = point[0]*distance/point[2] + (_areaWidth / 2);
				result[1] = (_areaHeight / 2) - point[1]*distance/point[2];
				result[2] = distance;

				return result;
			}
			
			var drawWorld = 	function()
									{
										if( !args.area.getContext )
										{
											return false;
										}
										
										var get_rotation_parameter = 	function(center, vector, teta)
																					{
																						var result = new Array();
																						
																						var u_u = vector[0]*vector[0];
																						var v_v = vector[1]*vector[1];
																						var w_w = vector[2]*vector[2]; 

																						var v_v_p_w_w = (v_v+w_w);
																						var u_u_p_w_w = (u_u+w_w);
																						var u_u_p_v_v = (u_u+v_v);

																						var b_v_p_c_w = center[1]*vector[1]+center[2]*vector[2];
																						var a_u_p_c_w = center[0]*vector[0]+center[2]*vector[2];
																						var a_u_p_b_v = center[0]*vector[0]+center[1]*vector[1];

																						var b_w_m_c_v = center[1]*vector[2]-center[2]*vector[1];
																						var c_u_m_a_w = center[2]*vector[0]-center[0]*vector[2];
																						var a_v_m_b_u = center[0]*vector[1]-center[1]*vector[0];

																						var den = v_v+u_u+w_w;

																						result[0] = den;

																						result[1] = v_v_p_w_w;
																						result[2] = u_u_p_w_w;
																						result[3] = u_u_p_v_v;

																						result[4] = center[0]*v_v_p_w_w;
																						result[5] = center[1]*u_u_p_w_w;
																						result[6] = center[2]*u_u_p_v_v;

																						result[7] = b_v_p_c_w;
																						result[8] = a_u_p_c_w;
																						result[9] = a_u_p_b_v;

																						result[10] = Math.cos(teta);

																						result[11] = Math.sin(teta)*Math.sqrt(den);

																						result[12] = b_w_m_c_v;
																						result[13] = c_u_m_a_w;
																						result[14] = a_v_m_b_u;

																						result[15] = center[0];
																						result[16] = center[1];
																						result[17] = center[2];
																						result[18] = vector[0];
																						result[19] = vector[1];
																						result[20] = vector[2];
																						
																						return result;
																					}
										
										var ctx = args.area.getContext("2d");
										
										ctx.clearRect(
														0,
														0,
														_areaWidth,
														_areaHeight
													);
													
										ctx.fillStyle = colore;
										ctx.strokeStyle = 'rgb(0,0,0)';
										ctx.lineWidth = 0.5;
										ctx.globalAlpha= alpha;

										var parametrig1 = get_rotation_parameter(centerCoords, [0, 1, 0], teta_y_global);
										var parametrig2 = get_rotation_parameter([0, 0, 0], [0, 1, 0], teta_y_global);
										var parametrig1a = get_rotation_parameter(centerCoords, [1, 0, 0], teta_x_global);
										var parametrig2a = get_rotation_parameter([0, 0, 0], [1, 0, 0], teta_x_global);
										
										for (var i=0; i<world.solid_number; i++)
										{
											rotate_solid_fast(parametrig1, parametrig2, world.solid[i]);
											rotate_solid_fast(parametrig1a, parametrig2a, world.solid[i]);
										}
										
										var contatore = 0;

										visible_polygons = new Array();

										var delta_x;
										var delta_y;
										var delta_z;
										for (var j=0; j<world.solid_number; j++)
										{
											for (var i=0; i<world.solid[j].points_number; i++)
											{
												world.solid[j].distances[i]= Math.pow(world.solid[j].points[i][0],2) + Math.pow(world.solid[j].points[i][1],2) + Math.pow(world.solid[j].points[i][2],2);
											}
										}
									
										for (var j=0; j<world.solid_number; j++)
										{
											for (var i=0; i<world.solid[j].faces_number; i++)
											{
												var max =world.solid[j].distances[world.solid[j].faces[i][0]];
												for (var w=1; w<world.solid[j].faces[i].length; w++)
												{
													if (world.solid[j].distances[world.solid[j].faces[i][w]]>max)
														max=world.solid[j].distances[world.solid[j].faces[i][w]]; 
												}  
												visible_polygons[contatore++] = {solid:j, vertex:world.solid[j].faces[i], fillcolor:world.solid[j].fillcolor, linecolor:world.solid[j].linecolor, distance:max};							
											}
										}
										
										visible_polygons.sort(sortfunction);
											  
										var projected_points = new Array();

										for (var j=0; j<world.solid_number; j++)
										{
											projected_points[j]=new Array();
											for (var i=0; i<world.solid[j].points.length; i++)
											{
												projected_points[j][i] = project(world.distance, world.solid[j].points[i]);
											}
										}
										
										for (var i=0; i<contatore; i++)
										{
											ctx.beginPath();
											var indice_solido = visible_polygons[i].solid;
											var indici_vertici = visible_polygons[i].vertex;

											ctx.moveTo(projected_points[indice_solido][indici_vertici[0]][0],projected_points[indice_solido][indici_vertici[0]][1]);
											for (var z=1;z<visible_polygons[i].vertex.length;z++)
											{
												ctx.lineTo(
														projected_points[indice_solido][indici_vertici[z]][0],
														projected_points[indice_solido][indici_vertici[z]][1]
													);
											}
											
											ctx.closePath();
											ctx.fill();
											ctx.stroke();
										}
										
										return true;
									};
			
			var world = new scene();
			
			var colore = 'rgb(255,255,255)';
			var alpha = 0.65;
			var teta_x_global = 0;
			var teta_y_global = 0;
			var _intervalPointer = 0;
			
			var centerCoords = [0, 0, -1100];
			
			var _bodyMove = 	function( evt )
										{
											var x = evt.pageX-args.area.offsetLeft;
											var y = evt.pageY-args.area.offsetTop;
											
											if ((x>0) && (x<_areaWidth) &&(y>0) && (y<_areaHeight))
											{
												teta_y_global = 0.10*(x-(_areaWidth / 2))/(_areaWidth / 2);
												teta_x_global = 0.10*(y-(_areaHeight / 2))/(_areaHeight / 2);
											}
										};
												
			this.disablePerception =	function()
												{
													clearInterval( _intervalPointer );
													Application.event.remove( document.body, "mousemove", _bodyMove );
												};
			
			this.enablePerception =	function()
												{
													this.disablePerception();
													
													Application.event.add( document.body, "mousemove", _bodyMove );
													_intervalPointer = setInterval( drawWorld, 50 );
												};
			
			this.rotateX = 	function()
									{
										var _rotate = 	function()
															{
																for(var i=0;i<world.solid_number;i++)
																{
																	Application.canvas.rotate_solid_x( [0, 0, -1100], 0.02, world.solid[ i ] );
																}
																
																drawWorld();
															}
										
										setInterval( _rotate, 50 );
									}
			
			this.rotateY = 	function()
									{
										var _rotate = 	function()
															{
																for(var i=0;i<world.solid_number;i++)
																{
																	Application.canvas.rotate_solid_y( [0, 0, -1100], 0.02, world.solid[ i ] );
																}
																
																drawWorld();
															}
										
										setInterval( _rotate, 50 );
									}
			
			this.addModel =	function( args )
									{
										world.solid[world.solid_number++] = new Application.canvas._model([255,255,255],[0,0,0], args.points, args.faces);
										world.solid[world.solid_number-1].scale_solid([args.scale, args.scale, args.scale]);
										Application.canvas.translate_solid([-world.solid[world.solid_number-1].center[0], -world.solid[world.solid_number-1].center[1], -world.solid[world.solid_number-1].center[2]],world.solid[world.solid_number-1]);
										Application.canvas.translate_solid([0,0,-1100],world.solid[world.solid_number-1]);
									};
			
			for(var i=0;i<args.data.model.length;i++)
			{
				this.addModel({
								points: args.data.model[i].points,
								faces: args.data.model[i].faces,
								scale: args.data.scales[ _areaWidth + "x" + _areaHeight ]
							});
			}
			
			drawWorld();
		},
		
		rotate_solid_x: function(center, angle, solid)
		{
			function rotate_x(center, sin_cos_angle, point)
			{
				var diff1 = point[1]-center[1];
				var diff2 = center[2]-point[2];

				point[1] = center[1]+diff1*sin_cos_angle[1]+diff2*sin_cos_angle[0];
				point[2] = center[2]-diff2*sin_cos_angle[1]+diff1*sin_cos_angle[0];
			}

			function rotate_x_normal(sin_cos_angle, point)
			{
				var temp = point[1];
				
				point[1] = temp*sin_cos_angle[1]-point[2]*sin_cos_angle[0];
				point[2] = point[2]*sin_cos_angle[1]+temp*sin_cos_angle[0];
			}
			
			var sin_cosin_teta = [Math.sin(angle), Math.cos(angle)];

			rotate_x(center, sin_cosin_teta, solid.center);
			rotate_x_normal(sin_cosin_teta, solid.axis_x);
			rotate_x_normal(sin_cosin_teta, solid.axis_y);
			rotate_x_normal(sin_cosin_teta, solid.axis_z);
			
			for (var i=0; i<solid.faces_number; i++)
			{
				rotate_x_normal(sin_cosin_teta, solid.normals[i]);
			}
				
			for (var j=0; j<solid.points_number; j++)
			{
				rotate_x(center, sin_cosin_teta, solid.points[j]);					
			}
		},
		
		rotate_solid_y: function(center, angle, solid)
		{
			function rotate_y(center, sin_cos_angle, point)
			{		
				var diff1 = point[0]-center[0];
				var diff2 = point[2]-center[2];

				point[0] = center[0]+diff1*sin_cos_angle[1]+diff2*sin_cos_angle[0];
				point[2] = center[2]+diff2*sin_cos_angle[1]-diff1*sin_cos_angle[0];
			}

			function rotate_y_normal(sin_cos_angle, point)
			{
				var temp = point[0];
				
				point[0] = temp*sin_cos_angle[1]+point[2]*sin_cos_angle[0];
				point[2] = point[2]*sin_cos_angle[1]-temp*sin_cos_angle[0];
			}
			
			var sin_cosin_teta = [Math.sin(angle), Math.cos(angle)];

			rotate_y(center, sin_cosin_teta, solid.center);
			rotate_y_normal(sin_cosin_teta, solid.axis_x);
			rotate_y_normal(sin_cosin_teta, solid.axis_y);
			rotate_y_normal(sin_cosin_teta, solid.axis_z);
			
			for (var i=0; i<solid.faces_number; i++)
			{
				rotate_y_normal(sin_cosin_teta, solid.normals[i]);
			}
				
			for (var j=0; j<solid.points_number; j++)
			{
				rotate_y(center, sin_cosin_teta, solid.points[j]);					
			}
		},
		
		rotate_solid_z: function(center, angle, solid)
		{
			function rotate_z(center, sin_cos_angle, point)
			{
				var diff1 = point[0]-center[0];
				var diff2 = point[1]-center[1];

				point[0] = center[0]+diff1*sin_cos_angle[1]-diff2*sin_cos_angle[0];
				point[1] = center[1]+diff2*sin_cos_angle[1]+diff1*sin_cos_angle[0];
			}
				
			function rotate_z_normal(sin_cos_angle, point)
			{
				var temp = point[0];
				
				point[0] = temp*sin_cos_angle[1]-point[1]*sin_cos_angle[0];
				point[1] = point[1]*sin_cos_angle[1]+temp*sin_cos_angle[0];
			}
			
			var sin_cosin_teta = [Math.sin(angle), Math.cos(angle)];

			rotate_z(center, sin_cosin_teta, solid.center);
			rotate_z_normal(sin_cosin_teta, solid.axis_x);
			rotate_z_normal(sin_cosin_teta, solid.axis_y);
			rotate_z_normal(sin_cosin_teta, solid.axis_z);
			
			for (var i=0; i<solid.faces_number; i++)
			{
				rotate_z_normal(sin_cosin_teta, solid.normals[i]);
			}
			
			for (var j=0; j<solid.points_number; j++)
			{
					rotate_z(center, sin_cosin_teta, solid.points[j]);					
			}
		},
		
		_model: function(fillcolor, linecolor, v_points, v_faces)
		{
			this.points = v_points;
			this.faces = v_faces;
			
			this.normals = new Array();

			for (var i=0; i<this.faces.length; i++)
			{
				this.normals[i] = [0, 0, 0];
			}
			
			this.center = [0, 0, 0];
					
			for (var i=0; i<this.points.length; i++)
			{
				this.center[0] += this.points[i][0];
				this.center[1] += this.points[i][1];
				this.center[2] += this.points[i][2];
			}
					
			this.distances = new Array();
			for (var i=1; i<this.points.length; i++)
			{
				this.distances[i] = 0;
			}
					
			this.points_number = this.points.length;
			this.center[0] = this.center[0]/(this.points_number-1);
			this.center[1] = this.center[1]/(this.points_number-1);
			this.center[2] = this.center[2]/(this.points_number-1);
			
			this.faces_number = this.faces.length;
			this.axis_x = [1, 0, 0];
			this.axis_y = [0, 1, 0];
			this.axis_z = [0, 0, 1];
			this.fillcolor = fillcolor;
			this.linecolor = linecolor;
			
			this.scale_solid = function(vector)
									{
										var da = this.center;
										var a = [-this.center[0], -this.center[1], -this.center[2]];
										
										Application.canvas.translate_solid(a, this);
										for (var i=0; i<this.points_number; i++)
										{
											this.points[i][0] *= vector[0];
											this.points[i][1] *= vector[1];
											this.points[i][2] *= vector[2];
										}
										
										Application.canvas.translate_solid(da, this);
									}
		},
		
		translate_solid: function(vector, solid)
		{
			var translate = 	function(vector, point)
									{
										point[0] = point[0] + vector[0];
										point[1] = point[1] + vector[1];
										point[2] = point[2] + vector[2];
									}
			
			for (var i=0; i<solid.points_number; i++)
			{
				translate(vector, solid.points[i]);
			}
			
			return true;
		}
	}
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/appJS/resources/public/application.compatibilityCheck.js
*/

	
	Application.compatibilityCheck = {
		
		_checkCompatibility: function()
		{
			var _cb = Application.configuration.compatibleBrowsers.browser, _b = Application.util.browserInformation.browser;
			
			for(var i=0;i<_cb.length;i++)
			{
				if( _cb[ i ].name != _b )
				{
					continue;
				}
				
				// this browser is in the compatible list
				
				if( parseInt( _cb[ i ].version ) > parseInt( Application.util.browserInformation.version ) )
				{
					return false;
				}
				
				return true;
			}
			
			// browser not found in the compatible list
			
			return false;
		},
		
		init: function( args )
		{
			if( this._checkCompatibility() )
			{
				args.afterInit();
				
				return;
			}
			
			var _incompatibleScreenObject = document.getElementById( "ascentBrowserIncompatibleScreen" );
			_incompatibleScreenObject.className = "ascentBrowserIncompatibleScreen";
			
			document.body.className = "incompatibleBodyBackground";
		}
		
	}
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/appJS/resources/public/application.connect.js
*/

	
	Application.connect = {
		
		ajax: null,
		component: null,
		validateXML: null,
		
		REQUEST_POST: "POST",
		REQUEST_GET: "GET",
		REQUEST_DELETE: "DELETE",
		REQUEST_PUT: "PUT",
		
		RESULT_XML: 1,
		RESULT_JSON: 2,
		RESULT_AUTO: 99,
		
		timeout: 30000,	//timeout in 30 seconds
		sendErrorReport: true,
		
		init: function()
		{
			// Init AjaxConn
			if(Application.util.browserInformation.browser == "Explorer")
			{
				if(!window.ActiveXObject)
				{
					Application.debug.addError(
													"AJAX: This browser does not support ActiveX controls calls",
													{
														sendErrorReport: false
													}
												);
					
					return false;
				}
				
				Application.connect.ajax = this.ajaxConnIE;
				Application.connect.validateXML = this.validateXMLIE;
			}
			else
			{
				if(!window.XMLHttpRequest)
				{
					Application.debug.addError(
													"AJAX: This browser does not support AJAX calls",
													{
														sendErrorReport: false
													}
												);
					
					return false;
				}
				
				Application.connect.ajax = this.ajaxConnFF;
				Application.connect.validateXML = this.validateXMLFF;
			}
		},
		
		validateXMLIE: function( contentXMLObject, sendErrorRepport )
		{
			if( !contentXMLObject )
			{
				return false;
			}
			
			var xmlDoc = new ActiveXObject("Microsoft.XMLDOM");
			xmlDoc.async = "false";
			xmlDoc.loadXML( contentXMLObject.xml );
			
			if( xmlDoc.parseError.errorCode !=0 )
			{
				Application.debug.addError(
											"AJAX: There was a problem validating the XML data:\nError Code: " + xmlDoc.parseError.errorCode + "\nReason: " + xmlDoc.parseError.reason + "Line: " + xmlDoc.parseError.line,
											{
												sendErrorReport: sendErrorRepport
											}
										);
				
				return false;
			}
			
			return true;
		},
		
		validateXMLFF: function( contentXMLObject, sendErrorRepport )
		{
			var serializeResult = Application.util.serialize.xml( contentXMLObject );
			
			if( !serializeResult )
			{
				return false;
			}
			
			var xmlDoc = (new DOMParser()).parseFromString( serializeResult, "text/xml" );
			
			if( xmlDoc.documentElement.nodeName == "parsererror" )
			{
				return false;
			}
			
			return true;
		},
		
		ajaxComponent: function( args )
		{
			if(
				!args.component ||
				!args.event
			)
			{
				return false;
			}
			
			args.requestType = Application.connect.REQUEST_POST;
			args.postVars = args.vars;
			args.url = "/component.php";
			args.vars = {
				component: args.component,
				event: args.event
			};
			
			if( typeof args.language != "undefined" )
			{
				args.vars.language = args.language;
			}
			
			Application.connect.ajax( args );
		},
		
		ajaxService: function( args )
		{
			if(
				!args.port
			)
			{
				return false;
			}
			
			connectArgs = {};
			
			connectArgs.successFunction = args.successFunction;
			connectArgs.url = document.location.protocol + "//" + document.location.hostname + ":" + args.port + "/";
			connectArgs.requestType = Application.connect.REQUEST_GET;
			connectArgs.vars = args.vars
			
			Application.connect.ajax( connectArgs );
		},
		
		/*
			--------
			AjaxConn
			--------
		*/
		
		/*
			Firefox, Opera, Safari, Netscape
		*/
		
		ajaxConnFF: function(args)
		{
			if(!args.url)
			{
				return false;
			}
			
			var variables = [];
			var headers = [];
			var xmlObj = null;
			
			if(!args.vars)
			{
				args.vars = [];
			}
			
			if(!args.headers)
			{
				args.headers = [];
			}
			
			try
			{
				var xmlObj = new XMLHttpRequest();
			}
			catch( e )
			{
				Application.debug.addError( 
										"AJAX: An error has occured while creating the XMLHTTP object:\nErrorName: " + e.name + "\nErrorMessage: " + e.message,
										{
											sendErrorReport: false
										}
									);
				
				return false;
			}
			
			this.cancel =	function()
								{
									xmlObj.abort();
								}
			
			this.addHeader = 	function( headerName, headerValue )
										{
											args.headers[ headerName ] = headerValue;
										};
			
			this.addVariable =	function( variableName, variableValue )
										{
											args.vars[ variableName ] = variableValue;
										};
			
			this.execute = 	function()
									{
										args.username = args.username ? args.username : null;
										args.password = args.password ? args.password : null;
										args.requestType = (typeof args.requestType == "undefined" ) ? Application.connect.REQUEST_GET : args.requestType;
										args.async = (typeof args.async == "undefined") ? true : args.async;
										args.resultType = (typeof args.resultType == "undefined") ? Application.connect.RESULT_AUTO : args.resultType;
										args.timeout = (typeof args.timeout == "undefined") ? Application.connect.timeout : args.timeout;
										args.sendErrorReport = (typeof args.sendErrorReport == "undefined") ? Application.connect.sendErrorReport : args.sendErrorReport;
										
										xmlObj.onerror = function( e ) { };
										xmlObj.onprogress = function( e ) { };
										
										args.onProgress = args.onProgress ? args.onProgress:	function( domEl ) { };
										
										args.successFunction = args.successFunction ? args.successFunction:	function()
																																			{
																																				Application.debug.add( "AJAX: URL:" + args.url + "\nStatus: " + xmlObj.status + "\nStatusText: " + xmlObj.statusText + "\nReturn value: " + domEl );
																																			};
										
										args.onError = args.onError ? args.onError :	function()
																											{
																												Application.debug.addError(
																																			"AJAX: There was a problem retrieving the XML data:\nServer: " + args.url + "\nServer status: " + xmlObj.status + "\nServer message: " + xmlObj.statusText,
																																			{
																																				sendErrorReport: args.sendErrorReport
																																			}
																																		);
																											}
										
										//
										//	Generate Args
										//
										
										var _urlArgs = "";
										
										var _recursiveVars = function( prefix, arg )
																		{
																			if( typeof arg != "object" )
																			{
																				_urlArgs += prefix + '[]=' + encodeURI( arg );
																				
																				return;
																			}
																			
																			for( var i in arg )
																			{
																				if( typeof arg[i] == "function" )
																				{
																					continue;
																				}
																				
																				if( /^[0-9]+$/.test( i ) )
																				{
																					_recursiveVars( prefix, arg[i] );
																				}
																				else
																				{
																					_recursiveVars( prefix + "[" + i + "]", arg[i] );
																				}
																			}
																		}
										
										for(var i in args.vars)
										{
											if( typeof args.vars[i] == "function" )
											{
												continue;
											}
											
											if( typeof args.vars[i] == "object" )
											{
												_recursiveVars( "&" + i, args.vars[i] );
											}
											else
											{
												_urlArgs = _urlArgs + '&' + (i) + '=' + encodeURI(args.vars[i]);
											}
										}
										
										//
										//	Send request
										//
										
										try
										{
											xmlObj.onreadystatechange = function()
																						{
																							switch( xmlObj.readyState )
																							{
																								case 0:
																								case 1:
																								case 2:
																								case 3:
																									
	//																									args.onProgress( xmlObj );
																									
																								break;
																								case 4:
																									
																									clearTimeout( _timeoutPointer );
																									
																									if (xmlObj.status != 200)
																									{
																										args.onError(xmlObj);
																										
																										return;
																									}
																									
																									if( args.resultType == Application.connect.RESULT_AUTO )
																									{
																										// Automatic result requested
																										
																										var contentType = xmlObj.getResponseHeader('Content-type').toString().split(";");
																										
																										switch( contentType[0].replace( / /g, "") )
																										{
																											case "application/xml":
																												
																												args.resultType = Application.connect.RESULT_XML;
																												
																											break;
																											case "application/json":
																												
																												args.resultType = Application.connect.RESULT_JSON;
																												
																											break;
																											default:
																												
																												args.resultType = Application.connect.RESULT_XML;
																										}
																									}
																									
																									switch( args.resultType )
																									{
																										case Application.connect.RESULT_XML:
																											
																											if( !Application.connect.validateXML( xmlObj.responseXML, args.sendErrorReport ) )
																											{
																												Application.debug.addError(
																																			"AJAX: Expected XML response but got invalid result on " + args.url + ". Response was: " + xmlObj.responseText,
																																			{
																																				sendErrorReport: args.sendErrorReport
																																			}
																																		);
																												
																												return;
																											}
																										
																											args.successFunction(
																														xmlObj.responseXML,
																														xmlObj.responseText
																													);
																											
																										break;
																										case Application.connect.RESULT_JSON:
																											
																											var interpretationResult = JSON.parse( xmlObj.responseText );
																											if( !interpretationResult )
																											{
																												Application.debug.addError(
																																			"AJAX: Expected JSON response but got invalid result on " + args.url + ". Response was: " + xmlObj.responseText,
																																			{
																																				sendErrorReport: args.sendErrorReport
																																			}
																																		);
																												
																												return;
																											}
																											
																											args.successFunction(
																														interpretationResult,
																														xmlObj.responseText
																													);
																											
																										break;
																										default:
																											
																											Application.debug.addError(
																																	"AJAX: invalid args.resultType: " + args.resultType,
																																	{
																																		sendErrorReport: args.sendErrorReport
																																	}
																																);
																									}
																									
																								break;
																								default:
																									
																									Application.debug.addError(
																																	"AJAX: Unforseen readyState encountered: " + xmlObj.readyState,
																																	{
																																		sendErrorReport: args.sendErrorReport
																																	}
																																);
																							}
																						};
											
											switch(args.requestType)
											{
												case Application.connect.REQUEST_GET:
													
													args.url += _urlArgs.replace(/&/, '?');
													
													var sendArguments = null;
													
												break;
												case Application.connect.REQUEST_POST:
													
													args.url += _urlArgs.replace(/&/, '?');
													
													if( args.postVars )
													{
														_urlArgs = "";
														
														for(var i in args.postVars)
														{
															if( typeof args.postVars[i] == "function" )
															{
																continue;
															}
															
															if( typeof args.postVars[i] == "object" )
															{
																_recursiveVars( "&" + i, args.postVars[i] );
															}
															else
															{
																_urlArgs = _urlArgs + '&' + (i) + '=' + encodeURI(args.postVars[i]);
															}
														}
														
														sendArguments = _urlArgs;
													}
													else
													{
														sendArguments = null;
													}
													
													this.addHeader("Content-Type", "application/x-www-form-urlencoded; charset=UTF-8");
													
												break;
											}
											
											// Add AJAX specific request header
											this.addHeader( "X-Requested-With", "XMLHTTPRequest" );
											
											xmlObj.open(args.requestType, args.url, args.async, args.username, args.password);
											
											for(var i in args.headers)
											{
												if(typeof args.headers[i] == "function")
												{
													continue;
												}
												
												xmlObj.setRequestHeader(i, args.headers[i]);
											}
											
											xmlObj.send(sendArguments);
											
											// Start the timeout function
											var _timeoutPointer = setTimeout( this.cancel, args.timeout );
											
											return true;
										}
										catch( e )
										{
											Application.debug.addError(
																		"AJAX: Unforseen error encountered in AJAX request execution: ErrorNumber: " + e.number + " " + e.message + " File: " + e.filename + " Line: " + e.lineNumber + " URL: " + args.url + " Args: " + sendArguments,
																		{
																			sendErrorReport: args.sendErrorReport
																		}
																	);
											
											return false;
										}
									}
			
			if( !args.dontExecute )
			{
				this.execute();
			}
		},
		
		/*
			Internet Explorer
		*/
		
		ajaxConnIE: function(args)
		{
			if(!args.url)
			{
				return false;
			}
			
			var variables = [];
			var headers = [];
			var xmlObj = null;
			
			if(!args.vars)
			{
				args.vars = [];
			}
			
			if(!args.headers)
			{
				args.headers = [];
			}
			
			try
			{
				//var xmlObj = new ActiveXObject("Msxml2.XMLHTTP");
				var xmlObj = new XMLHttpRequest();
			}
			catch(e)
			{
				Application.debug.addError(
												"AJAX: An error has occured while creating the XMLHTTP object\nErrorName: " + e.name + "\nErrorMessage: " + e.message,
												{
													sendErrorReport: false
												}
											);
				
				return false;
			}
			
			this.cancel =	function()
								{
									xmlObj.abort();
								}
			
			this.addHeader = 	function( headerName, headerValue )
										{
											args.headers[ headerName ] = headerValue;
										};
			
			this.addVariable =	function( variableName, variableValue )
										{
											args.vars[ variableName ] = variableValue;
										};
			
			this.execute = 	function()
									{
										args.username = args.username?args.username:null;
										args.password = args.password?args.password:null;
										args.requestType = (typeof args.requestType == "undefined") ? Application.connect.REQUEST_GET : args.requestType;
										args.resultType = (typeof args.resultType == "undefined") ? Application.connect.RESULT_AUTO : args.resultType;
										args.timeout = (typeof args.timeout == "undefined") ? Application.connect.timeout : args.timeout;
										
										args.onload = args.onload ? args.onload: function() { };
										args.successFunction = args.successFunction ? args.successFunction:	function(domEl)
																																			{
																																				Application.debug.add(
																																										"AJAX: URL:" + args.url + "\nStatus: " + xmlObj.status + "\nStatusText: " + xmlObj.statusText + "\nReturn value: " + domEl.xml,
																																										{
																																											sendErrorReport: args.sendErrorReport
																																										}
																																									);
																																			};
										
										args.onError = args.onError ? args.onError :	function()
																											{
																												Application.debug.addError(
																																			"AJAX: There was a problem retrieving the XML data:\nServer: " + args.url + "\nServer status: " + xmlObj.status + "\nServer message: " + xmlObj.statusText,
																																			{
																																				sendErrorReport: args.sendErrorReport
																																			}
																																		);
																											}
										
										//
										//	Generate Args
										//
										
										var _urlArgs = "";
										
										var _recursiveVars = function( prefix, arg )
																		{
																			if( typeof arg != "object" )
																			{
																				_urlArgs += prefix + '[]=' + encodeURI( arg );
																				
																				return;
																			}
																			
																			for( var i in arg )
																			{
																				if( typeof arg[i] == "function" )
																				{
																					continue;
																				}
																				
																				if( /^[0-9]+$/.test( i ) )
																				{
																					_recursiveVars( prefix, arg[i] );
																				}
																				else
																				{
																					_recursiveVars( prefix + "[" + i + "]", arg[i] );
																				}
																			}
																		}
										
										for(var i in args.vars)
										{
											if( typeof args.vars[i] == "function" )
											{
												continue;
											}
											
											if( typeof args.vars[i] == "object" )
											{
												_recursiveVars( "&" + i, args.vars[i] );
											}
											else
											{
												_urlArgs = _urlArgs + '&' + (i) + '=' + encodeURI(args.vars[i]);
											}
										}
										
										//
										//	Send request
										//
										
										try
										{
											xmlObj.onreadystatechange = function()
																						{
																							switch( xmlObj.readyState )
																							{
																								case 1:
																								case 2:
																								case 3:
																									
																									// Onload Event for IE
																									args.onload(xmlObj);
																									
																								break;
																								case 4:
																									
																									clearTimeout( _timeoutPointer );
																									
																									if (xmlObj.status != 200)
																									{
																										args.onError(xmlObj);
																										
																										return;
																									}
																									
																									if( args.resultType == Application.connect.RESULT_AUTO )
																									{
																										// Automatic result requested
																										
																										var contentType = xmlObj.getResponseHeader('Content-type').toString().split(";");
																										
																										switch( contentType[0].replace( / /g, "") )
																										{
																											case "application/xml":
																												
																												args.resultType = Application.connect.RESULT_XML;
																												
																											break;
																											case "application/json":
																												
																												args.resultType = Application.connect.RESULT_JSON;
																												
																											break;
																											default:
																												
																												args.resultType = Application.connect.RESULT_XML;
																										}
																									}
																									
																									switch( args.resultType )
																									{
																										case Application.connect.RESULT_XML:
																											
																											if( !Application.connect.validateXML( xmlObj.responseXML, args.sendErrorReport ) )
																											{
																												Application.debug.addError(
																																				"AJAX: Expected XML response but got invalid result on " + args.url + ". Response was: " + xmlObj.responseText,
																																				{
																																					sendErrorReport: args.sendErrorReport
																																				}
																																			);
																												
																												return;
																											}
																											
																											args.successFunction(
																														xmlObj.responseXML,
																														xmlObj.responseText
																													);
																											
																										break;
																										case Application.connect.RESULT_JSON:
																											
																											var interpretationResult = JSON.parse( xmlObj.responseText );
																											if( !interpretationResult )
																											{
																												Application.debug.addError(
																																			"AJAX: Expected JSON response but got invalid result on " + args.url + ". Response was: " + xmlObj.responseText,
																																			{
																																				sendErrorReport: args.sendErrorReport
																																			}
																																		);
																												
																												return;
																											}
																											
																											args.successFunction(
																														interpretationResult,
																														xmlObj.responseText
																													);
																											
																										break;
																										default:
																											
																											Application.debug.addError(
																																			"AJAX: invalid args.resultType: " + args.resultType,
																																			{
																																				sendErrorReport: args.sendErrorReport
																																			} 
																																		);
																									}
																									
																								break;
																								default:
																									
																									Application.debug.addError(
																																	"AJAX: Unforseen readyState encountered: " + xmlObj.readyState,
																																	{
																																		sendErrorReport: args.sendErrorReport
																																	}
																																);
																							}
																						};
											
											switch(args.requestType)
											{
												case Application.connect.REQUEST_GET:
													
													args.url += _urlArgs.replace(/&/, '?');
													
													var sendArguments = null;
													
												break;
												case Application.connect.REQUEST_POST:
													
													args.url += _urlArgs.replace(/&/, '?');
													
													if( args.postVars )
													{
														_urlArgs = "";
														
														for(var i in args.postVars)
														{
															if( typeof args.postVars[i] == "function" )
															{
																continue;
															}
															
															if( typeof args.postVars[i] == "object" )
															{
																_recursiveVars( "&" + i, args.postVars[i] );
															}
															else
															{
																_urlArgs = _urlArgs + '&' + (i) + '=' + encodeURI(args.postVars[i]);
															}
														}
														
														sendArguments = _urlArgs;
													}
													else
													{
														sendArguments = null;
													}
													
													this.addHeader("Content-Type", "application/x-www-form-urlencoded; charset=UTF-8");
													
												break;
											}
											
											// Add AJAX specific request header
											this.addHeader( "X-Requested-With", "XMLHTTPRequest" );
											
											xmlObj.open(args.requestType, args.url, args.async, args.username, args.password);
											
											for(var i in args.headers)
											{
												if( typeof args.headers[ i ] == "function" )
												{
													continue
												}
												
												xmlObj.setRequestHeader(i, args.headers[i]);
											}
											
											xmlObj.send(sendArguments);
											
											// Start the timeout function
											var _timeoutPointer = setTimeout( this.cancel, args.timeout );
											
											return true;
										}
										catch( e )
										{
											Application.debug.addError(
																			"AJAX: try/catch error: " + e.number + " " + e.description + " Path: " + args.url + " Args: " + sendArguments,
																			{
																				sendErrorReport: args.sendErrorReport
																			}
																		);
											
											return false;
										}
									};
			
			if( !args.dontExecute )
			{
				this.execute();
			}
		}
		
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/appJS/resources/public/application.debug.js
*/

	
	Application.debug = {
		
		windowVisible: false,
		windowObject: null,
		windowContentObject: null,
		windowContentCommandLineObject: null,
		windowCommandLineContainerObject: null,
		
		TYPE_INFO: "info",
		TYPE_WARNING: "warning",
		TYPE_ERROR: "error",
		
		init: function( args )
		{
			var _wID = document.body.getAttribute("globalID");
			
			var debugContainer = document.createElement("div");
			debugContainer.className = "ascentDebugWindowScreen hidden";
			debugContainer.innerHTML = '<div class="content" id="' + _wID + '_content"><![CDATA[ ]]></div><div class="commandLineContainer" id="' + _wID + '_commandLineContainer"><input class="commandLine" type="text" name="commandText" id="' + _wID + '_commandLine" /></div>';
			document.body.appendChild( debugContainer );
			
			/*
			Application.util.xslt.transform.fromXML({
								xmlString: '<component:debugWindow xmlns:component="http://component.emotionconcept.ro" />',
								xslFile: "/components/appJS/resources/public/debug.xsl",
								successFunction: function( newEl )
								{
								*/
									Application.debug.windowObject = debugContainer;
									Application.debug.windowContentObject = document.getElementById( _wID + "_content" );
									Application.debug.windowContentCommandLineObject = document.getElementById( _wID + "_commandLine" );
									Application.debug.windowCommandLineContainerObject = document.getElementById( _wID + "_commandLineContainer" );
									
									if( Application.configuration.debug.catchJSErrors == "true" )
									{
										// Set the production error reporting
										window.onerror = 	function( err, url, line )
																	{
																		Application.debug.addError( err + " on line " + line + "\n" + url + "\n" + Application.util.browserInformation.OS + " running " + Application.util.browserInformation.browser + " v" + Application.util.browserInformation.version );
																		
																		return true;
																	}
									}
									
									if( args.afterInit )
									{
										args.afterInit();
									}
									
									/*
									Application.connect.ajaxService({
																	port: 7000,
																	vars: {
																		requestVar1: 1,
																		requestVar2: 2
																	},
																	successFunction: function( domEl )
																							{
																								Application.debug.add(Application.util.serialize.xml(domEl.xml));
																							}
																});
									*/
									
									Application.debug.windowContentCommandLineObject.onkeyup = function( e )
									{
										switch( e.keyCode )
										{
											case 13:
												
												// Enter
												
												try
												{
													var commandLineObject = Application.debug.windowContentCommandLineObject;
													
													eval( commandLineObject.value );
													
													Application.debug.add( "Run: " + commandLineObject.value );
													
													commandLineObject.value = "";
												}
												catch( errorObject )
												{
													Application.debug.addError( errorObject.message );
												}
												
												return false;
												
											break;
											case 192:
											case 27:
												
												// Escape or "`"
												
												Application.debug.hide();
												
												// make sure global keybindings don't trigger
												e.cancelBubble = true;
												if( e.stopPropagation )
												{
													e.stopPropagation();
												}
												
												return false;
												
											break;
										}
										
										// make sure global keybindings don't trigger
										e.cancelBubble = true;
										if( e.stopPropagation )
										{
											e.stopPropagation();
										}
									}
									
									Application.effects.drag.attach({
																		object: Application.debug.windowObject,
																		saveName: "debugWindow"
																	});
									
									// Quake-style console
									Application.event.add(
														window,
														"keyup",
														function( e )
														{
															if( e.keyCode != 192 )
															{
																return;
															}
															
															// "`" key
															
															Application.debug.show( true );
														}
													);
								/*
								}
							});
							*/
		},
		
		hide: function()
		{
			Application.debug.windowObject.className = 'ascentDebugWindowScreen hidden';
			
			Application.debug.windowVisible = false;
			
			// lose the focus on the text field
			Application.debug.windowContentCommandLineObject.blur();
			
			// focus on the body to ensure global events (window.keyup, etc) continue to work
			document.body.focus();
			
			return true;
		},
		
		show: function( focus )
		{
			Application.debug.windowObject.className = 'ascentDebugWindowScreen visible';
//			Application.debug.windowObject.style.top = ( ( document.documentElement.clientHeight - Application.debug.windowObject.offsetHeight ) / 2 ) + "px";
			
			/*
			Application.sound.play({
									url: '/components/appJS/resources/public/mp3/debug_show.mp3'
								});
			*/
			
			if( focus )
			{
				Application.debug.windowContentCommandLineObject.focus();
			}
			
			Application.debug.windowVisible = true;
			
			return true;
		},
		
		clear: function()
		{
			Application.debug.windowContentObject.innerHTML = '';
		},
		
		addError: function( text, args )
		{
			if( !args )
			{
				args = {};
			}
			
			args.sendErrorReport = ( typeof args.sendErrorReport == "undefined" ) ? true : args.sendErrorReport;
			
			if(Application.debug.windowVisible == false)
			{
				Application.debug.show();
			}
			
			var d = new Date();
			
			var textContainer = document.createElement( "div" );
			textContainer.className = 'row';
			
			textContainer.innerHTML = '<span class="date">' + d.getMinutes() + ":" + d.getSeconds() + "." + d.getMilliseconds() + '</span><span class="error">' + ( text ? text.toString().replace(/\n/g, "<br/>") : text ) + '</span>';
			
			Application.debug.windowContentObject.appendChild(
																			textContainer
																		);
			
			if( Application.configuration.debug.logToServer == "true" && args.sendErrorReport )
			{
				args.component = ( typeof args.component == "undefined" ) ? "blankComponent" : args.component;
				args.title = ( typeof args.title == "undefined" ) ? "" : args.type;
				
				Application.connect.ajaxComponent({
											component: "serverError",
											event: "addDebugData",
											vars:
											{
												environmentBrowser: Application.util.browserInformation.browser,
												environmentVersion: Application.util.browserInformation.version,
												environmentOS: Application.util.browserInformation.OS,
												
												debugComponent: args.component,
												type: Application.debug.TYPE_ERROR,
												area: Application.configuration.areas['@attributes'].current.toString().substring( 7 ),
												
												description: text,
												title: args.title
											},
											sendErrorReport: false,
											successFunction: 	function( domEl )
																		{
																			var result = Application.util.xslt.xPath.search( domEl, "//component/header/result" );
																			
																			if( result[0].childNodes[0].nodeValue != "201" )
																			{
																				Application.debug.addError( "There was an error while sending the debug data to the server. The returned code was " + result[0].childNodes[0].nodeValue, { sendErrorReport: false } );
																			}
																		}
										});
			}
			
			// Scroll down
			Application.debug.windowContentObject.scrollTop = Application.debug.windowContentObject.scrollHeight;
		},
		
		str: function( text )
		{
			this.add( JSON.stringify( text ) );
		},
		
		add: function( text )
		{
			/*
			if(Application.debug.windowVisible == false)
			{
				Application.debug.show();
			}
			*/
			
			var d = new Date();
			
			var textContainer = document.createElement( "div" );
			textContainer.className = 'row';
			
			textContainer.innerHTML = '<span class="date">' + d.getMinutes() + ":" + d.getSeconds() + "." + d.getMilliseconds() + '</span>' + text;
			
			Application.debug.windowContentObject.appendChild(
																		textContainer
																	);
			
			// Scroll down
			Application.debug.windowContentObject.scrollTop = Application.debug.windowContentObject.scrollHeight;
		}
		
	}
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/appJS/resources/public/application.dijkstra.js
*/

	
	Application.dijkstra = {
	
	  infinity: 1000000000000,
	  
	  keys: function( vector )
	  {
		var indice = 0, keys = [];
		
		for(var i in vector)
		{
			if( typeof open[i] == "function" )
			{
				continue;
			}
			
			keys[ indice++ ] = i;
		}
		
		return keys;
	  },
	  
	  single_source_shortest_paths: function(graph, s, d, infinity)
	  {
		infinity = infinity || Application.dijkstra.infinity;

		// Costs of shortest paths from s to all nodes encountered
		var costs = {};
		costs[s] = 0;

		// cost => [bucket of nodes with cost from s]
		var open = {'0': [s]};

		// Predecessor of each node that has been encountered
		var predecessors = {/* node: predecessor, ... */};

		var sorter = function (a, b) {
		  parseFloat(a) - parseFloat(b);
		};

		var add_to_open =  function (cost, v) {
		  var key = '' + cost;
		  open[key] = open[key] || [];
		  open[key].push(v);
		};

		var keys, key, bucket, closest, w_of_s_to_u, u, adjacent_nodes, w_of_e;
		var w_of_s_to_u_plus_w_of_e, w_of_s_to_v, first_visit;
		while (open) {
		  // In the nodes remaining in graph that have a known cost from s,
		  // find the node, u, that currently has the shortest path from s.
		  
		  keys = Application.dijkstra.keys(open);
		  if (keys.length == 0) {
			// This means that open is empty, {}, so there's nowhere to go.
			break;
		  }
		  key = keys.sort(sorter)[0];
		  bucket = open[key];
		  u = bucket.shift();

		  if (bucket.length == 0) {
			delete open[key];
		  }

		  // Current cost of path from s to u.
		  w_of_s_to_u = parseFloat(key);

		  // Get nodes adjacent to u...
		  adjacent_nodes = graph[u] || {};

		  // ...and explore the edges that connect u to those nodes, updating
		  // the cost of the shortest paths to any or all of those nodes as
		  // necessary. v is the node across the current edge from u.
		  for (var v in adjacent_nodes) {
			// Get the cost of the edge running from u to v.
			w_of_e = adjacent_nodes[v];

			// Weight of s to u plus the cost of u to v across e--this is *a*
			// cost from s to v that may or may not be less than the current
			// known cost to v.
			w_of_s_to_u_plus_w_of_e = w_of_s_to_u + w_of_e;

			// If we haven't visited v yet OR if the current known cost from s to
			// v is greater than the new cost we just found (cost of s to u plus
			// cost of u to v across e), update v's cost in the cost list and
			// update v's predecessor in the predecessor list (it's now u).
			w_of_s_to_v = costs[v];
			first_visit = typeof(costs[v]) == 'undefined';
			if (first_visit || w_of_s_to_v > w_of_s_to_u_plus_w_of_e) {
			  costs[v] = w_of_s_to_u_plus_w_of_e;
			  add_to_open(w_of_s_to_u_plus_w_of_e, v);
			  predecessors[v] = u;
			}

			// If a destination node was specified and we reached it, we're done.
			if (v == d) {
			  open = null;
			  break;
			}
		  }
		}

		if (typeof(costs[d]) == 'undefined') {
		  
		  Application.debug.add( ['Could not find a path from ', s, ' to ', d, '.'].join('') );
//		  throw new Error(msg);
		}
		
		return predecessors;
	  },

	  extract_shortest_path_from_predecessor_list: function(predecessors, d) {
		var nodes = [];
		var u = d;
		var predecessor;
		while (u) {
		  nodes.push(u);
		  predecessor = predecessors[u];
		  u = predecessors[u];
		}
		nodes.reverse();
		return nodes;
	  },

	  find_path: function(graph, s, d) {
		var predecessors = Application.dijkstra.single_source_shortest_paths(graph, s, d);
		return Application.dijkstra.extract_shortest_path_from_predecessor_list(
		  predecessors, d);
	  },

	  test: function() {
		// A B C
		// D E F
		// G H I
		graph = {
		  a: {b: 10, d: 1},
		  b: {a: 1, c: 1, e: 1},
		  c: {b: 1, f: 1},
		  d: {a: 1, e: 1, g: 1},
		  e: {b: 1, d: 1, f: 1, h: 1},
		  f: {c: 1, e: 1, i: 1},
		  g: {d: 1, h: 1},
		  h: {e: 1, g: 1, i: 1},
		  i: {f: 1, h: 1}
		};
		var path = Application.dijkstra.find_path(graph, 'a', 'i');
		
		Application.debug.add( path );
		
		if (path.join() !== ['a', 'd', 'e', 'f', 'i'].join()) {
		  throw new Error('Path finding error!');
		}
	  }
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/appJS/resources/public/application.effects.js
*/

	
	// Effects Library
	
	Application.effects = {
		
		init: function()
		{
			
		},
		
		scroll:
		{
			init: function()
			{
			
			},
			
			scroller: function(o, w, h)
			{
				var self = this;
				var list = o.getElementsByTagName("div");
				for (var i = 0; i < list.length; i++) {
					if (list[i].className.indexOf("Scroller-Container") > -1) {
						o = list[i];
					}
				}
				
				//Private methods
				this._setPos = function (x, y) {
					
					if (x < this.viewableWidth - this.totalWidth) 
						x = this.viewableWidth - this.totalWidth;
					if (x > 0) x = 0;
					if (y < this.viewableHeight - this.totalHeight) 
						y = this.viewableHeight - this.totalHeight;
					if (y > 0) y = 0;
					this._x = x;
					this._y = y;
					o.style.left = this._x +"px";
					o.style.top  = this._y +"px";
				};
				
				this.resetDimensions = function()
				{
					this.totalHeight = o.offsetHeight;
					this.totalWidth	 = o.offsetWidth;
				}
				
				//Public Methods
				this.reset = function () {
					this.content = o;
					this.totalHeight = o.offsetHeight;
					this.totalWidth	 = o.offsetWidth;
					this._x = 0;
					this._y = 0;
					o.style.left = "0px";
					o.style.top  = "0px";
				};
				this.scrollBy = function (x, y) {
					this._setPos(this._x + x, this._y + y);
				};
				this.scrollTo = function (x, y) {
					this._setPos(-x, -y);
				};
				this.stopScroll = function () {
					if (this.scrollTimer) window.clearInterval(this.scrollTimer);
				};
				this.startScroll = function (x, y) {
					this.stopScroll();
					this.scrollTimer = window.setInterval(
						function(){ self.scrollBy(x, y); }, 40
					);
				};
				this.swapContent = function (c, w, h) {
					o = c;
					var list = o.getElementsByTagName("div");
					for (var i = 0; i < list.length; i++) {
						if (list[i].className.indexOf("Scroller-Container") > -1) {
							o = list[i];
						}
					}
					if (w) this.viewableWidth  = w;
					if (h) this.viewableHeight = h;
					this.reset();
				};
				
				//variables
				this.content = o;
				this.viewableWidth  = w;
				this.viewableHeight = h;
				this.totalWidth	 = o.offsetWidth;
				this.totalHeight = o.offsetHeight;
				this.scrollTimer = null;
				this.reset();
			},
			
			scrollbar: function(o, s, a, ev)
			{
				var self = this;
				
				this.resetHeight = function()
				{
					this._src.resetDimensions();
					this._ratio = (this._src.totalHeight - this._src.viewableHeight)/(this._trackHeight - this._handleHeight);
				}
				
				this.reset = function () {
					//Arguments that were passed
					this._parent = o;
					this._src    = s;
					this.auto    = a ? a : false;
					this.eventHandler = ev ? ev : function () {};
					//Component Objects
					this._up   = this._findComponent("Scrollbar-Up", this._parent);
					this._down = this._findComponent("Scrollbar-Down", this._parent);
					this._yTrack  = this._findComponent("Scrollbar-Track", this._parent);
					this._yHandle = this._findComponent("Scrollbar-Handle", this._yTrack);
					//Height and position properties
					this._trackTop = findOffsetTop(this._yTrack);
					this._trackHeight  = this._yTrack.offsetHeight;
					this._handleHeight = this._yHandle.offsetHeight;
					this._x = 0;
					this._y = 0;
					//Misc. variables
					this._scrollDist  = 5;
					this._scrollTimer = null;
					this._selectFunc  = null;
					this._grabPoint   = null;
					this._tempTarget  = null;
					this._tempDistX   = 0;
					this._tempDistY   = 0;
					this._disabled    = false;
					this._ratio = (this._src.totalHeight - this._src.viewableHeight)/(this._trackHeight - this._handleHeight);
					
					this._yHandle.ondragstart  = function () {return false;};
					this._yHandle.onmousedown = function () {return false;};
					
					this._addEvent(this._src.content, "mousewheel", this._scrollbarWheel);
					this._removeEvent(this._parent, "mousedown", this._scrollbarClick);
					this._addEvent(this._parent, "mousedown", this._scrollbarClick);
					
					this._src.reset();
					this._yHandle.style.top  = "0px";
					this._yHandle.style.left = "0px";
					this._moveContent();
					
					if (this._src.totalHeight < this._src.viewableHeight) {
						this._disabled = true;
						this._yHandle.style.visibility = "hidden";
						if (this.auto) this._parent.style.visibility = "hidden";
					} else {
						this._disabled = false;
						this._yHandle.style.visibility = "visible";
						this._parent.style.visibility  = "visible";
					}
				};
				this._addEvent = function (o, t, f) {
					if (o.addEventListener) o.addEventListener(t, f, false);
					else if (o.attachEvent) o.attachEvent('on'+ t, f);
					else o['on'+ t] = f;
				};
				this._removeEvent = function (o, t, f) {
					if (o.removeEventListener) o.removeEventListener(t, f, false);
					else if (o.detachEvent) o.detachEvent('on'+ t, f);
					else o['on'+ t] = null;
				};
				this._findComponent = function (c, o) {
					var kids = o.childNodes;
					for (var i = 0; i < kids.length; i++) {
						if (kids[i].className && kids[i].className == c) {
							return kids[i];
						}
					}
				};
				//Thank you, Quirksmode
				function findOffsetTop (o) {
					var t = 0;
					if (o.offsetParent) {
						while (o.offsetParent) {
							t += o.offsetTop;
							o  = o.offsetParent;
						}
					}
					return t;
				};
				this._scrollbarClick = function (e) {
					if (self._disabled) return false;
					
					e = e ? e : event;
					if (!e.target) e.target = e.srcElement;
					
					if (e.target.className.indexOf("Scrollbar-Up") > -1) self._scrollUp(e);
					else if (e.target.className.indexOf("Scrollbar-Down") > -1) self._scrollDown(e);
					else if (e.target.className.indexOf("Scrollbar-Track") > -1) self._scrollTrack(e);
					else if (e.target.className.indexOf("Scrollbar-Handle") > -1) self._scrollHandle(e);
					
					self._tempTarget = e.target;
					self._selectFunc = document.onselectstart;
					document.onselectstart = function () {return false;};
					
					self.eventHandler(e.target, "mousedown");
					self._addEvent(document, "mouseup", self._stopScroll, false);
					
					return false;
				};
				this._scrollbarDrag = function (e) {
					e = e ? e : event;
					var t = parseInt(self._yHandle.style.top);
					var v = e.clientY + document.body.scrollTop - self._trackTop;
					
					if (v >= self._trackHeight - self._handleHeight + self._grabPoint)
						top = self._trackHeight - self._handleHeight +"px";
					else if (v <= self._grabPoint) self._yHandle.style.top = "0px";
					else self._yHandle.style.top = v - self._grabPoint +"px";
					self._y = parseInt(self._yHandle.style.top);
					
					self._moveContent();
				};
				this._scrollbarWheel = function (e) {
					e = e ? e : event;
					var dir = 0;
					if (e.wheelDelta >= 120) dir = -1;
					if (e.wheelDelta <= -120) dir = 1;
					
					self.scrollBy(0, dir * 20);
					e.returnValue = false;
				};
				this._startScroll = function (x, y) {
					this._tempDistX = x;
					this._tempDistY = y;
					this._scrollTimer = window.setInterval(function () {
						self.scrollBy(self._tempDistX, self._tempDistY); 
					}, 40);
				};
				this._stopScroll = function () {
					self._removeEvent(document, "mousemove", self._scrollbarDrag, false);
					self._removeEvent(document, "mouseup", self._stopScroll, false);
					
					if (self._selectFunc) document.onselectstart = self._selectFunc;
					else document.onselectstart = function () { return true; };
					
					if (self._scrollTimer) window.clearInterval(self._scrollTimer);
					self.eventHandler (self._tempTarget, "mouseup");
				};
				this._scrollUp = function (e) {this._startScroll(0, -this._scrollDist);};
				this._scrollDown = function (e) {this._startScroll(0, this._scrollDist);};
				this._scrollTrack = function (e) {
					var curY = e.clientY + document.body.scrollTop;
					this._scroll(0, curY - this._trackTop - this._handleHeight/2);
				};
				this._scrollHandle = function (e) {
					var curY = e.clientY + document.body.scrollTop;
					this._grabPoint = curY - findOffsetTop(this._yHandle);
					this._addEvent(document, "mousemove", this._scrollbarDrag, false);
				};
				this._scroll = function (x, y) {
					if (y > this._trackHeight - this._handleHeight) 
						y = this._trackHeight - this._handleHeight;
					if (y < 0) y = 0;
					
					this._yHandle.style.top = y +"px";
					this._y = y;
					
					this._moveContent();
				};
				this._moveContent = function () {
					this._src.scrollTo(0, Math.round(this._y * this._ratio));
				};
				
				this.scrollBy = function (x, y) {
					this._scroll(0, (-this._src._y + y)/this._ratio);
				};
				this.scrollTo = function (x, y) {
					this._scroll(0, y/this._ratio);
				};
				this.swapContent = function (o, w, h) {
					this._removeEvent(this._src.content, "mousewheel", this._scrollbarWheel, false);
					this._src.swapContent(o, w, h);
					this.reset();
				};
				
				this.reset();
			}
		},
		
		drag:
		{
			init: function()
			{
				
			},
			
			attach: function( args )
			{
				if( !args.object )
				{
					return false;
				}
				
				args.targetObject = ( typeof args.targetObject == "undefined" ) ? args.object : args.targetObject;
				args.onmousemove = ( typeof args.onmousemove == "undefined" ) ? function() {}: args.onmousemove;
				args.onmouseup = ( typeof args.onmouseup == "undefined" ) ? function() {}: args.onmouseup;
				
				// Restore the old position, should a cookie be available
				if( args.saveName )
				{
					var result = Application.util.storage.cookie.get({
																name: args.saveName + "_position"
															});
					
					if( result != false )
					{
						result = result.split("_");
						
						args.targetObject.style.left = result[0] + "px";
						args.targetObject.style.top = result[1] + "px";
					}
				}
				
				if( Application.util.browserInformation.browser == "Explorer" )
				{
					var _moveFunction = function( e )
					{
						e = e ? e : window.event;	// Preserving the event is important
						
						var initX = e.clientX - args.targetObject.offsetLeft + document.body.scrollLeft - document.body.clientLeft;
						var initY = e.clientY - args.targetObject.offsetTop + document.body.scrollTop  - document.body.clientTop;
						
						var _x = 0;
						var _y = 0;
						var _oldX = 1;
						var _oldY = 1;
						var _moveInterval = setInterval( 	function()
																				{
																					if( ( _x == 0 && _y == 0 ) || ( _x == _oldX && _y == _oldY ) )
																					{
																						return;
																					}
																					
																					args.targetObject.style.left = _x + "px";
																					args.targetObject.style.top = _y + "px";
																				}, 75);
						
						var _mouseMoveFunction = 	function()
																		{
																			_oldX = _x;
																			_oldY = _y;
																			
																			_x = window.event.clientX - initX + document.body.scrollLeft - document.body.clientLeft;
																			_y = window.event.clientY - initY + document.body.scrollTop  - document.body.clientTop;
																			
																			args.onmousemove( window.event );
																		};
						
						var _mouseUpFunction = 	function()
																	{
																		clearInterval( _moveInterval );
																		
																		if( args.saveName )
																		{
																			Application.util.storage.cookie.add({
																														name: args.saveName + "_position",
																														value: args.targetObject.offsetLeft + "_" + args.targetObject.offsetTop
																													});
																		}
																		
																		args.onmouseup( window.event );
																		
																		Application.event.remove( document.body, "mouseup",  _mouseUpFunction );
																		Application.event.remove( document.body, "mousemove",  _mouseMoveFunction );
																	};
						
						Application.event.add( document.body, "mousemove", _mouseMoveFunction );
						Application.event.add( document.body, "mouseup",  _mouseUpFunction );
					}
				}
				else
				{
					var _moveFunction = function( e )
					{
						if( e.touches )
						{
							// iPad code
							e = e.touches[0];
						}
						
						if( Application.util.browserInformation.browser == "Firefox" )
						{
							var initX = e.clientX - args.targetObject.offsetLeft - window.pageXOffset;
							var initY = e.clientY - args.targetObject.offsetTop - window.pageYOffset;
						}
						else
						{
							var initX = e.clientX - args.targetObject.offsetLeft;
							var initY = e.clientY - args.targetObject.offsetTop;
						}
						
						var _x = 0;
						var _y = 0;
						var _oldX = 1;
						var _oldY = 1;
						var _moveInterval = setInterval( 	function()
																				{
																					if( ( _x == 0 && _y == 0 ) || ( _x == _oldX && _y == _oldY ) )
																					{
																						return;
																					}
																					
																					args.targetObject.style.left = _x + "px";
																					args.targetObject.style.top = _y + "px";
																				}, 75);
						
						var _mouseMoveFunction = 	function( e )
																		{
																			_oldX = _x;
																			_oldY = _y;
																			
																			_x = e.clientX - initX - window.pageXOffset;
																			_y = e.clientY - initY - window.pageYOffset;
																			
																			args.onmousemove( e );
																		};
						
						var _mouseUpFunction = 	function( e )
																	{
																		clearInterval( _moveInterval );
																		
																		if( args.saveName )
																		{
																			Application.util.storage.cookie.add({
																														name: args.saveName + "_position",
																														value: args.targetObject.offsetLeft + "_" + args.targetObject.offsetTop
																													});
																		}
																		
																		args.onmouseup( e );
																		
																		/*
																		Application.event.remove( args.targetObject, "touchend",  _mouseUpFunction );
																		Application.event.remove( args.targetObject, "touchmove",  _mouseMoveFunction );
																		*/
																		Application.event.remove( document.body, "mousemove", _mouseMoveFunction );
																		Application.event.remove( document.body, "mouseup",  _mouseUpFunction );
																	};
						
						/*
						Application.event.add( args.targetObject, "touchmove", _mouseMoveFunction );
						Application.event.add( args.targetObject, "touchend",  _mouseUpFunction );
						*/
						Application.event.add( document.body, "mousemove", _mouseMoveFunction );
						Application.event.add( document.body, "mouseup",  _mouseUpFunction );
					}
				}
				
				if( args.eventObject )
				{
					_moveFunction( args.eventObject );
				}
				else
				{
					// Set the events
					
					Application.event.add( args.object, "touchstart", _moveFunction);
					Application.event.add( args.object, "mousedown", _moveFunction);
				}
			},
			
			load: function( args )
			{
				if( !args.targetObject || !args.saveName )
				{
					return false;
				}
				
				// Restore the old position, should a cookie be available
				
				var result = Application.util.storage.cookie.get({
															name: args.saveName + "_position"
														});
				
				if( result == false )
				{
					return false;
				}
				
				result = result.split("_");
				
				args.targetObject.style.left = result[0] + "px";
				args.targetObject.style.top = result[1] + "px";
				
				return true;
			}
		},
		
		slide:
		{
			amount: 20,
			delay: 10,
			
			absolute: function( args )
			{
				
			},
			
			fromRight: function( args )
			{
				
			},
			
			fromLeft: function( args )
			{
				if(!args.object)
				{
					return false;
				}
				
				var amount = ((typeof args.amount) != "undefined") ? args.amount : Application.effects.slide.amount;
				var delay = ((typeof args.delay) != "undefined") ? args.delay : Application.effects.slide.delay;
				
				var endClass = Application.util.style.getMatchingRules( '.' + args.object.className.toString().replace( / /g, '.' ) + " .endEffect" )[0];
				
				var startX = args.object.offsetLeft;
				var endX = parseFloat(endClass.style.left.replace( /px/, '' ));
				
				var intervalPointer = setInterval( 	function()
													{
														startX += amount;
														
														if( startX > endX )
														{
															startX = endX;
														}
														
														args.object.style.left = (startX) + "px";
														
														if( startX == endX)
														{
															clearInterval( intervalPointer );
															
															return;
														}
													}, 50);
			}
		},
		
		fade:
		{
			amount: 10,
			delay: 50,
			
			fadeIn: function( args )
			{
				if(!args.object)
				{
					return false;
				}
				
				var amount = ((typeof args.amount) != "undefined") ? args.amount : Application.effects.fade.amount;
				var delay = ((typeof args.delay) != "undefined") ? args.delay : Application.effects.fade.delay;
				var minOpacity = ((typeof args.minOpacity) != "undefined") ? args.minOpacity : 0;
				var maxOpacity = ((typeof args.maxOpacity) != "undefined") ? args.maxOpacity : 100;
				
				if(Application.util.style.getCurrent(args.object, "filter").length == 0)
				{
					args.object.style.filter = "progid:DXImageTransform.Microsoft.Alpha(opacity=" + minOpacity + ")";
				}
				
				var intervalPointer = setInterval( 	function()
													{
														minOpacity += amount;
														
														if(minOpacity > maxOpacity)
														{
															minOpacity = maxOpacity;
														}
														
														args.object.style.MozOpacity = minOpacity / 100;
														//ImageObj.style.filters.alpha.opacity=90
														args.object.style.filter = Application.util.style.getCurrent(args.object, "filter").replace( /opacity\=[0-9]+/, "opacity=" + minOpacity );
														args.object.style.opacity = minOpacity / 100;
														
														if( minOpacity == maxOpacity )
														{
															clearInterval( intervalPointer );
															
															if(args.onComplete)
															{
																args.onComplete();
															}
															
															return;
														}
													}, delay);
				
				return intervalPointer;
			},
			
			fadeOut: function ( args )
			{
				if(!args.object)
				{
					return false;
				}
				
				var amount = ((typeof args.amount) != "undefined") ? args.amount : Application.effects.fade.amount;
				var delay = ((typeof args.delay) != "undefined") ? args.delay : Application.effects.fade.delay;
				var minOpacity = ((typeof args.minOpacity) != "undefined") ? args.minOpacity : 100;
				var maxOpacity = ((typeof args.maxOpacity) != "undefined") ? args.maxOpacity : 0;
				
				var intervalPointer = setInterval( 	function()
													{
														minOpacity -= amount;
														
														if(minOpacity < maxOpacity)
														{
															minOpacity = maxOpacity;
														}
														
														args.object.style.MozOpacity = minOpacity / 100;
														//ImageObj.style.filters.alpha.opacity=90
														args.object.style.filter = Application.util.style.getCurrent(args.object, "filter").replace( /opacity\=[0-9]+/, "opacity=" + minOpacity );
														args.object.style.opacity = minOpacity / 100;
														
														if( minOpacity == maxOpacity )
														{
															clearInterval( intervalPointer );
															
															if(args.onComplete)
															{
																args.onComplete();
															}
															
															return;
														}
													}, delay);
				
				return intervalPointer;
			}
		}
		
	};
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/appJS/resources/public/application.event.js
*/

	
	Application.event = {
		
		add: null,
		remove: null,
		
		init: function()
		{
			// Init Events based on the current browser
			
			// IE
			if(Application.util.browserInformation.browser == "Explorer")
			{
				Application.event.add = Application.event.IE.add;
				Application.event.remove = Application.event.IE.remove;
				
				return;
			}
			
			// Firefox
			Application.event.add = Application.event.FF.add;
			Application.event.remove = Application.event.FF.remove;
			
			return;
		},
		
		IE:
		{
			add: function(element, type, handler)
			{
				element.attachEvent("on" + type, handler);
			},
			
			remove: function(element, type, handler)
			{
				element.detachEvent("on" + type, handler);
			}
		},
		
		FF:
		{
			add: function(element, type, handler)
			{
				element.addEventListener(type, handler, false);
			},
			
			remove: function(element, type, handler)
			{
				element.removeEventListener(type, handler, false);
			}
		}
		
	}
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/appJS/resources/public/application.facebook.js
*/

	
	Application.facebook = {
		
		permissions: new Array(),
		
		init: function( args )
		{
			window.fbAsyncInit =	function()
												{
													FB.Canvas.setAutoResize();
													
													FB.init({
														appId: Application.configuration.facebook.appID, 
														status: true,
														cookie: true,
														xfbml: true
													});
													
													// Set the permissions as array
													Application.facebook.permissions = Application.configuration.facebook.permissions.split(",");
													
													/*
													var _facebookConnected = function()
													{
														FB.Canvas.setAutoResize();
														
														var query = FB.Data.query('select name, uid from user where uid={0}', FB._session.uid);
														
														query.wait(function(rows)
														{
															alert( 'Your name is ' + rows[0].name );
														});
													}
													*/
													
													FB.getLoginStatus( function( response )
													{
														if( response.session )
														{
															// logged in and connected user, someone you know
															
															var _noPermissions =	function()
																								{
																									if( args.afterFunction )
																									{
																										args.afterFunction({
																															facebookID: FB._session.uid,
																															hasRights: false,
																															isLoggedIn: true
																														});
																									}
																									
//																																Application.facebook.redirectToSubscribe();
																								};
															
															var _hasPermissions = 	function()
																									{
																										if( args.afterFunction )
																										{
																											args.afterFunction({
																																facebookID: FB._session.uid,
																																hasRights: true,
																																isLoggedIn: true
																															});
																										}
																										
//																																	_facebookConnected();
//																																	Application.facebook.addBookmark();
//																																	Application.facebook.inviteFriends();
																									}
															
															Application.facebook.hasPermissions(
																								_hasPermissions,
																								_noPermissions
																							);
														}
														else
														{
															if( args.afterFunction )
															{
																args.afterFunction({
																					facebookID: null,
																					hasRights: false,
																					isLoggedIn: false
																				});
															}
															
//																						Application.facebook.redirectToSubscribe();
														}
													});
												};
			
			/*
				Create facebook specific DIV
			*/
			
			var facebookDiv = document.createElement("div");
			facebookDiv.setAttribute("id", "fb-root");
			
			document.body.appendChild( facebookDiv );
			
			/*
				Load external Facebook Script
			*/
			
			(function()
			{
				var e = document.createElement('script');
				
				e.async = true;
				e.src = document.location.protocol + '//connect.facebook.net/en_US/all.js';
				
				facebookDiv.appendChild(e);
			}());
		},
		
		login: function()
		{
			FB.login(	function(response)
			{
				if (response.session)
				{
					if (response.perms)
					{
						// user is logged in and granted some permissions.
						// perms is a comma separated list of granted permissions
						
						document.location.reload();
					}
					else
					{
						// user is logged in, but did not grant any permissions
						
						// must log the data for statistics purposes
						alert('no perms');
					}
				}
				else
				{
					// user cancelled login
					
					// must log the data for statistics purposes
					alert('no login');
				}
			},
			{
				perms: Application.configuration.facebook.permissions
			});
 		},
		
		redirectToLogin: function( requestPermissions )
		{
//			document.location.href = 'http://www.facebook.com/connect/uiserver.php?app_id=' + Application.configuration.facebook.appID + '&method=permissions.request&display=page&next=http%3A%2F%2Fapps.facebook.com%2Fbugcraft%2F&type=user_agent&canvas=1#
			
			var newLocation = 'https://graph.facebook.com/oauth/authorize?client_id=' + Application.configuration.facebook.appID + '&redirect_uri=' + encodeURIComponent( Application.configuration.facebook.appURL + "/index.php?page=profile&component=bugcraft&event=facebookPostAuthorize" ) + '&type=user_agent&scope=' + ( requestPermissions ? Application.configuration.facebook.permissions : '' ) + '&display=page';
			
			if( parent )
			{
				parent.location.href = newLocation;
			}
			else
			{
				document.location.href = newLocation;
			}
			
		},
		
		publishToWall: function()
		{
			FB.ui(
				{
					method: 'stream.publish',
					message: 'Check out this great app! http://apps.facebook.com/bugcraft/'
				}
			);
		},
		
		addBookmark: function()
		{
			FB.api(
				{
					method: 'fql.query',
					query: 'select bookmarked from permissions where uid=' + FB._session.uid
				},
				function( perms )
				{
					if( perms[0].bookmarked == '1' )
					{
						return false;
					}
					
					FB.ui(
						{
							method: 'bookmark.add'
						},
						function( perms )
						{
							alert('Thanks');
						}
					);
				}
			);
		},
		
		hasPermissions: function( trueFunction, falseFunction )
		{
			FB.api(
				{
					method: 'fql.query',
					query: 'select ' + Application.configuration.facebook.permissions + ' from permissions where uid=' + FB._session.uid
				},
				function( perms )
				{
					var fetchedPermissions = new Array();
					
					for(var perm in perms[0])
					{
						if( perms[0][perm] != '1' )
						{
							continue;
						}
						
						fetchedPermissions.push( perm );
					}
					
					if( fetchedPermissions.join(',') != Application.configuration.facebook.permissions )
					{
						falseFunction();
						
						return false;
					}
					
					trueFunction();
					
					return true;
				}
			);
		},
		
		inviteFriends: function()
		{
			FB.api(
				{
					method: 'fql.query',
					query: 'SELECT uid FROM user WHERE uid IN (SELECT uid2 FROM friend WHERE uid1=' + FB._session.uid + ') AND has_added_app = 1'
				},
				function(response)
				{
					var excludedIDs = new Array();
					
					for(var i=0;i<response.length;i++)
					{
						excludedIDs.push( response[ i ].uid );
					}
					
					var tempHTML = '<fb:serverFbml><script type="text/fbml">'
					tempHTML += '<fb:request-form action="http://' + Application.configuration.siteURL + '" method="POST" invite="true" type="bugcraft" content="';
						tempHTML += Application.util.html.htmlentities('<fb:name uid="' + FB._session.uid + '" firstnameonly="true" shownetwork="false"/> invited you to BugCraft! <fb:req-choice url="http://' + Application.configuration.siteURL + '" label="Add BugCraft!"/>');
					tempHTML += '">';
					tempHTML += '<fb:multi-friend-selector max="20" actiontext="Here are your friends who haven\'t added BugCraft to their profile." showborder="false" rows="5" exclude_ids="' + excludedIDs.join(',') + '"></fb:request-form>';
					tempHTML += '</script></fb:serverFbml>';
					
					var newDivObject = document.createElement("div");
					newDivObject.className = "facebookInviteContainer";
					newDivObject.innerHTML = tempHTML;
					document.body.appendChild( newDivObject );
					
					FB.XFBML.parse( newDivObject );
				}
			);
		}
		
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	 

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/appJS/resources/public/application.sound.js
*/

	
	Application.sound = {
		
		_soundsPlaying: {},
		_soundCache: {},
		
		lastNumericID: 0,
		
		mute: function()
		{
			Application.sound.play = function() { return false; };
		},
		
		unMute: function()
		{
			// overwrite the play event
			Application.sound.play = function( args )
			{
				var smSound = soundManager.createSound({
					id: "sound_" + ( ++Application.sound.lastNumericID ),
					url: [ args.url, args.url.replace( /\.mp3$/, ".ogg" ) ]
				});
				
				smSound.play({
							multiShotEvents: true
						});
				
				return smSound;
			}
			
			// will play a random sound from a group of sounds, but excluding from the group of sounds the ones already playing
			Application.sound.playRandomExclusive = function( args )
			{
				var _eligibleSounds = [];
				
				for(var i=0;i<args.url.length;i++)
				{
					if( Application.sound._soundsPlaying[ args.url[ i ] ] )
					{
						continue;
					}
					
					_eligibleSounds.push( args.url[ i ] );
				}
				
				if( _eligibleSounds.length == 0 )
				{
					return false;
				}
				
				// we have a sound
				return Application.sound.playExclusive({
																url: _eligibleSounds[ Math.round( Math.random() * ( _eligibleSounds.length - 1 ) ) ],
																onFinish: args.onFinish,
																volume: args.volume
															});
			}
			
			var _playFunction = function( args )
			{
				args.smSound.play({
								multiShotEvents: true,
								volume: args.volume,
								onplay: function()
								{
									Application.sound._soundsPlaying[ args.url ] = args.smSound;
								},
								onstop: function()
								{
									delete Application.sound._soundsPlaying[ args.url ];
								},
								onfinish: function()
								{
									//Application.sound._soundsPlaying[ args.url ].destruct();
									
									args.onFinish();
									
									//delete args.smSound;
									delete Application.sound._soundsPlaying[ args.url ];
								}
							});
			}
			
			// will play the sound only if an identical sound (url) is not playing
			Application.sound.playExclusive = function( args )
			{
				if( Application.sound._soundsPlaying[ args.url ] )
				{
					return false;
				}
				
				var smSound = null;
				
				args.onFinish = args.onFinish ? args.onFinish : function() { };
				args.volume = ( typeof args.volume != "undefined" ) ? args.volume : 100;
				
				if( !Application.sound._soundCache[ args.url ] )
				{
					Application.sound._soundsPlaying[ args.url ] = Application.sound._soundCache[ args.url ] = soundManager.createSound({
						id: "sound_" + ( ++Application.sound.lastNumericID ),
						url: [ args.url, args.url.replace( /\.mp3$/, ".ogg" ) ]
					});
				}
				else
				{
					Application.sound._soundsPlaying[ args.url ] = Application.sound._soundCache[ args.url ];
				}
				
				_playFunction({
								url: args.url,
								smSound: Application.sound._soundCache[ args.url ],
								volume: args.volume,
								onFinish: function()
								{
									delete Application.sound._soundsPlaying[ args.url ];
									
									args.onFinish()
								}
							});
				
				return Application.sound._soundCache[ args.url ];
			}
			
			// will overwrite the sound, if it is already playing (e.g.: stop the previous one and play the new one )
			Application.sound.playOverwrite = function( args )
			{
				if( Application.sound._soundsPlaying[ args.url ] )
				{
					Application.sound._soundsPlaying[ args.url ].stop();
				}
				
				var smSound = null;
				
				args.onFinish = args.onFinish ? args.onFinish : function() { };
				args.volume = ( typeof args.volume != "undefined" ) ? args.volume : 100;
				
				Application.sound._soundsPlaying[ args.url ] = smSound = soundManager.createSound({
					id: "sound_" + ( ++Application.sound.lastNumericID ),
					url: [ args.url, args.url.replace( /\.mp3$/, ".ogg" ) ]
				});
				
				smSound.play({
							multiShotEvents: true,
							waitForWindowLoad: false,
							volume: args.volume,
							onfinish: function()
							{
								delete Application.sound._soundsPlaying[ args.url ];
								
								smSound.destruct();
								
								args.onFinish();
							}
						});
				
				return smSound;
			}
		},
		
		playOverwrite: function()
		{
			return false;
		},
		
		playRandomExclusive: function()
		{
			return false;
		},
		
		playExclusive: function()
		{
			return false;
		},
		
		play: function()
		{
			return false;
		},
		
		init: function( args )
		{
			Application.sound._soundLibrary();
			
			soundManager.onready( function()
			{
				Application.sound.unMute();
				
				Application.debug.add( "Sound System Initialized" );
				
				// move forward with the flow
				args.afterFunction();
			});
			
			soundManager.ontimeout( function()
			{
				//Application.debug.addError( "Unable to load sound system" );
			});
		}
	};
	
	
	
	
	
	
	
	
	Application.sound._soundLibrary = function()
	{
		var soundManager = null;

		/**
		 * The SoundManager constructor.
		 *
		 * @constructor
		 * @param {string} smURL Optional: Path to SWF files
		 * @param {string} smID Optional: The ID to use for the SWF container element
		 * @this {SoundManager}
		 * @return {SoundManager} The new SoundManager instance
		 */

		function SoundManager(smURL, smID) {

		 // Top-level configuration options

		 this.flashVersion = 8;       // flash build to use (8 or 9.) Some API features require 9.
		 this.debugMode = false;       // enable debugging output (console.log() with HTML fallback)
		 this.debugFlash = false;      // enable debugging output inside SWF, troubleshoot Flash/browser issues
		 this.useConsole = true;      // use console.log() if available (otherwise, writes to #soundmanager-debug element)
		 this.consoleOnly = true;      // if console is being used, do not create/write to #soundmanager-debug
		 this.waitForWindowLoad = false;  // force SM2 to wait for window.onload() before trying to call soundManager.onload()
		 this.bgColor = '#ffffff';     // SWF background color. N/A when wmode = 'transparent'
		 this.useHighPerformance = false;  // position:fixed flash movie can help increase js/flash speed, minimize lag
		 this.flashPollingInterval = null; // msec affecting whileplaying/loading callback frequency. If null, default of 50 msec is used.
		 this.html5PollingInterval = null; // msec affecting whileplaying() for HTML5 audio, excluding mobile devices. If null, native HTML5 update events are used.
		 this.flashLoadTimeout = 1000;   // msec to wait for flash movie to load before failing (0 = infinity)
		 this.wmode = null;         // flash rendering mode - null, 'transparent', or 'opaque' (last two allow z-index to work)
		 this.allowScriptAccess = 'always'; // for scripting the SWF (object/embed property), 'always' or 'sameDomain'
		 this.useFlashBlock = false;    // *requires flashblock.css, see demos* - allow recovery from flash blockers. Wait indefinitely and apply timeout CSS to SWF, if applicable.
		 this.useHTML5Audio = true;     // use HTML5 Audio() where API is supported (most Safari, Chrome versions), Firefox (no MP3/MP4.) Ideally, transparent vs. Flash API where possible.
		 this.html5Test = /^(probably|maybe)$/i; // HTML5 Audio() format support test. Use /^probably$/i; if you want to be more conservative.
		 this.preferFlash = false;      // overrides useHTML5audio. if true and flash support present, will try to use flash for MP3/MP4 as needed since HTML5 audio support is still quirky in browsers.
		 this.noSWFCache = false;      // if true, appends ?ts={date} to break aggressive SWF caching.

		 this.audioFormats = {

			/**
			 * determines HTML5 support + flash requirements.
			 * if no support (via flash and/or HTML5) for a "required" format, SM2 will fail to start.
			 * flash fallback is used for MP3 or MP4 if HTML5 can't play it (or if preferFlash = true)
			 * multiple MIME types may be tested while trying to get a positive canPlayType() response.
			 */

			'mp3': {
			 'type': ['audio/mpeg; codecs="mp3"', 'audio/mpeg', 'audio/mp3', 'audio/MPA', 'audio/mpa-robust'],
			 'required': false
			},

			'mp4': {
			 'related': ['aac','m4a'], // additional formats under the MP4 container
			 'type': ['audio/mp4; codecs="mp4a.40.2"', 'audio/aac', 'audio/x-m4a', 'audio/MP4A-LATM', 'audio/mpeg4-generic'],
			 'required': false
			},

			'ogg': {
			 'type': ['audio/ogg; codecs=vorbis'],
			 'required': false
			},

			'wav': {
			 'type': ['audio/wav; codecs="1"', 'audio/wav', 'audio/wave', 'audio/x-wav'],
			 'required': false
			}

		 };

		 this.defaultOptions = {

			/**
			 * the default configuration for sound objects made with createSound() and related methods
			 * eg., volume, auto-load behaviour and so forth
			 */

			'autoLoad': false,    // enable automatic loading (otherwise .load() will be called on demand with .play(), the latter being nicer on bandwidth - if you want to .load yourself, you also can)
			'autoPlay': false,    // enable playing of file as soon as possible (much faster if "stream" is true)
			'from': null,       // position to start playback within a sound (msec), default = beginning
			'loops': 1,        // how many times to repeat the sound (position will wrap around to 0, setPosition() will break out of loop when >0)
			'onid3': null,      // callback function for "ID3 data is added/available"
			'onload': null,      // callback function for "load finished"
			'whileloading': null,   // callback function for "download progress update" (X of Y bytes received)
			'onplay': null,      // callback for "play" start
			'onpause': null,     // callback for "pause"
			'onresume': null,     // callback for "resume" (pause toggle)
			'whileplaying': null,   // callback during play (position update)
			'onposition': null,    // object containing times and function callbacks for positions of interest
			'onstop': null,      // callback for "user stop"
			'onfailure': null,    // callback function for when playing fails
			'onfinish': null,     // callback function for "sound finished playing"
			'multiShot': true,    // let sounds "restart" or layer on top of each other when played multiple times, rather than one-shot/one at a time
			'multiShotEvents': false, // fire multiple sound events (currently onfinish() only) when multiShot is enabled
			'position': null,     // offset (milliseconds) to seek to within loaded sound data.
			'pan': 0,         // "pan" settings, left-to-right, -100 to 100
			'stream': true,      // allows playing before entire file has loaded (recommended)
			'to': null,        // position to end playback within a sound (msec), default = end
			'type': null,       // MIME-like hint for file pattern / canPlay() tests, eg. audio/mp3
			'usePolicyFile': false,  // enable crossdomain.xml request for audio on remote domains (for ID3/waveform access)
			'volume': 100       // self-explanatory. 0-100, the latter being the max.

		 };

		 this.flash9Options = {

			/**
			 * flash 9-only options,
			 * merged into defaultOptions if flash 9 is being used
			 */

			'isMovieStar': null,   // "MovieStar" MPEG4 audio mode. Null (default) = auto detect MP4, AAC etc. based on URL. true = force on, ignore URL
			'usePeakData': false,   // enable left/right channel peak (level) data
			'useWaveformData': false, // enable sound spectrum (raw waveform data) - NOTE: May increase CPU load.
			'useEQData': false,    // enable sound EQ (frequency spectrum data) - NOTE: May increase CPU load.
			'onbufferchange': null,  // callback for "isBuffering" property change
			'ondataerror': null    // callback for waveform/eq data access error (flash playing audio in other tabs/domains)

		 };

		 this.movieStarOptions = {

			/**
			 * flash 9.0r115+ MPEG4 audio options,
			 * merged into defaultOptions if flash 9+movieStar mode is enabled
			 */

			'bufferTime': 3,     // seconds of data to buffer before playback begins (null = flash default of 0.1 seconds - if AAC playback is gappy, try increasing.)
			'serverURL': null,    // rtmp: FMS or FMIS server to connect to, required when requesting media via RTMP or one of its variants
			'onconnect': null,    // rtmp: callback for connection to flash media server
			'duration': null     // rtmp: song duration (msec)

		 };

		 // HTML attributes (id + class names) for the SWF container

		 this.movieID = 'sm2-container';
		 this.id = (smID || 'sm2movie');

		 this.debugID = 'soundmanager-debug';
		 this.debugURLParam = /([#?&])debug=1/i;

		 // dynamic attributes

		 this.versionNumber = 'V2.97a.20120318';
		 this.version = null;
		 this.movieURL = null;
		 this.url = (smURL || null);
		 this.altURL = null;
		 this.swfLoaded = false;
		 this.enabled = false;
		 this.oMC = null;
		 this.sounds = {};
		 this.soundIDs = [];
		 this.muted = false;
		 this.didFlashBlock = false;
		 this.filePattern = null;

		 this.filePatterns = {

			'flash8': /\.mp3(\?.*)?$/i,
			'flash9': /\.mp3(\?.*)?$/i

		 };

		 // support indicators, set at init

		 this.features = {

			'buffering': false,
			'peakData': false,
			'waveformData': false,
			'eqData': false,
			'movieStar': false

		 };

		 // flash sandbox info, used primarily in troubleshooting

		 this.sandbox = {

			// <d>
			'type': null,
			'types': {
			 'remote': 'remote (domain-based) rules',
			 'localWithFile': 'local with file access (no internet access)',
			 'localWithNetwork': 'local with network (internet access only, no local access)',
			 'localTrusted': 'local, trusted (local+internet access)'
			},
			'description': null,
			'noRemote': null,
			'noLocal': null
			// </d>

		 };

		 /**
		  * basic HTML5 Audio() support test
		  * try...catch because of IE 9 "not implemented" nonsense
		  * https://github.com/Modernizr/Modernizr/issues/224
		  */

		 this.hasHTML5 = (function() {
			try {
			 return (typeof Audio !== 'undefined' && typeof new Audio().canPlayType !== 'undefined');
			} catch(e) {
			 return false;
			}
		 }());

		 /**
		  * format support (html5/flash)
		  * stores canPlayType() results based on audioFormats.
		  * eg. { mp3: boolean, mp4: boolean }
		  * treat as read-only.
		  */

		 this.html5 = {
			'usingFlash': null // set if/when flash fallback is needed
		 };

		 this.flash = {}; // file type support hash

		 this.html5Only = false;  // determined at init time
		 this.ignoreFlash = false; // used for special cases (eg. iPad/iPhone/palm OS?)

		 /**
		  * a few private internals (OK, a lot. :D)
		  */

		 var SMSound,
		 _s = this, _flash = null, _sm = 'soundManager', _smc = _sm+'::', _h5 = 'HTML5::', _id, _ua = navigator.userAgent, _win = window, _wl = _win.location.href.toString(), _doc = document, _doNothing, _init, _fV, _on_queue = [], _debugOpen = true, _debugTS, _didAppend = false, _appendSuccess = false, _didInit = false, _disabled = false, _windowLoaded = false, _wDS, _wdCount = 0, _initComplete, _mixin, _addOnEvent, _processOnEvents, _initUserOnload, _delayWaitForEI, _waitForEI, _setVersionInfo, _handleFocus, _strings, _initMovie, _domContentLoaded, _winOnLoad, _didDCLoaded, _getDocument, _createMovie, _catchError, _setPolling, _initDebug, _debugLevels = ['log', 'info', 'warn', 'error'], _defaultFlashVersion = 8, _disableObject, _failSafely, _normalizeMovieURL, _oRemoved = null, _oRemovedHTML = null, _str, _flashBlockHandler, _getSWFCSS, _swfCSS, _toggleDebug, _loopFix, _policyFix, _complain, _idCheck, _waitingForEI = false, _initPending = false, _startTimer, _stopTimer, _timerExecute, _h5TimerCount = 0, _h5IntervalTimer = null, _parseURL,
		 _needsFlash = null, _featureCheck, _html5OK, _html5CanPlay, _html5Ext, _html5Unload, _domContentLoadedIE, _testHTML5, _event, _slice = Array.prototype.slice, _useGlobalHTML5Audio = false, _hasFlash, _detectFlash, _badSafariFix, _html5_events, _showSupport,
		 _is_iDevice = _ua.match(/(ipad|iphone|ipod)/i), _is_firefox = _ua.match(/firefox/i), _is_android = _ua.match(/droid/i), _isIE = _ua.match(/msie/i), _isWebkit = _ua.match(/webkit/i), _isSafari = (_ua.match(/safari/i) && !_ua.match(/chrome/i)), _isOpera = (_ua.match(/opera/i)), 
		 _likesHTML5 = (_ua.match(/(mobile|pre\/|xoom)/i) || _is_iDevice),
		 _isBadSafari = (!_wl.match(/usehtml5audio/i) && !_wl.match(/sm2\-ignorebadua/i) && _isSafari && !_ua.match(/silk/i) && _ua.match(/OS X 10_6_([3-7])/i)), // Safari 4 and 5 (excluding Kindle Fire, "Silk") occasionally fail to load/play HTML5 audio on Snow Leopard 10.6.3 through 10.6.7 due to bug(s) in QuickTime X and/or other underlying frameworks. :/ Confirmed bug. https://bugs.webkit.org/show_bug.cgi?id=32159
		 _hasConsole = (typeof console !== 'undefined' && typeof console.log !== 'undefined'), _isFocused = (typeof _doc.hasFocus !== 'undefined'?_doc.hasFocus():null), _tryInitOnFocus = (_isSafari && typeof _doc.hasFocus === 'undefined'), _okToDisable = !_tryInitOnFocus, _flashMIME = /(mp3|mp4|mpa)/i,
		 _emptyURL = 'about:blank', // safe URL to unload, or load nothing from (flash 8 + most HTML5 UAs)
		 _overHTTP = (_doc.location?_doc.location.protocol.match(/http/i):null),
		 _http = (!_overHTTP ? 'http:/'+'/' : ''),
		 // mp3, mp4, aac etc.
		 _netStreamMimeTypes = /^\s*audio\/(?:x-)?(?:mpeg4|aac|flv|mov|mp4||m4v|m4a|mp4v|3gp|3g2)\s*(?:$|;)/i,
		 // Flash v9.0r115+ "moviestar" formats
		 _netStreamTypes = ['mpeg4', 'aac', 'flv', 'mov', 'mp4', 'm4v', 'f4v', 'm4a', 'mp4v', '3gp', '3g2'],
		 _netStreamPattern = new RegExp('\\.(' + _netStreamTypes.join('|') + ')(\\?.*)?$', 'i');

		 this.mimePattern = /^\s*audio\/(?:x-)?(?:mp(?:eg|3))\s*(?:$|;)/i; // default mp3 set

		 // use altURL if not "online"
		 this.useAltURL = !_overHTTP;
		 this._global_a = null;

		 _swfCSS = {

			'swfBox': 'sm2-object-box',
			'swfDefault': 'movieContainer',
			'swfError': 'swf_error', // SWF loaded, but SM2 couldn't start (other error)
			'swfTimedout': 'swf_timedout',
			'swfLoaded': 'swf_loaded',
			'swfUnblocked': 'swf_unblocked', // or loaded OK
			'sm2Debug': 'sm2_debug',
			'highPerf': 'high_performance',
			'flashDebug': 'flash_debug'

		 };

		 if (_likesHTML5) {

			// prefer HTML5 for mobile + tablet-like devices, probably more reliable vs. flash at this point.
			_s.useHTML5Audio = true;
			_s.preferFlash = false;

			if (_is_iDevice) {
			 // by default, use global feature. iOS onfinish() -> next may fail otherwise.
			 _s.ignoreFlash = true;
			 _useGlobalHTML5Audio = true;
			}

		 }

		 /**
		  * Public SoundManager API
		  * -----------------------
		  */

		 this.ok = function() {

			return (_needsFlash?(_didInit && !_disabled):(_s.useHTML5Audio && _s.hasHTML5));

		 };

		 this.supported = this.ok; // legacy

		 this.getMovie = function(smID) {

			// safety net: some old browsers differ on SWF references, possibly related to ExternalInterface / flash version
			return _id(smID) || _doc[smID] || _win[smID];

		 };

		 /**
		  * Creates a SMSound sound object instance.
		  *
		  * @param {object} oOptions Sound options (at minimum, id and url are required.)
		  * @return {object} SMSound The new SMSound object.
		  */

		 this.createSound = function(oOptions) {

			var _cs, _cs_string,
			thisOptions = null, oSound = null, _tO = null;

			// <d>
			_cs = _sm+'.createSound(): ';
			_cs_string = _cs + _str(!_didInit?'notReady':'notOK');
			// </d>

			if (!_didInit || !_s.ok()) {
			 _complain(_cs_string);
			 return false;
			}

			if (arguments.length === 2) {
			 // function overloading in JS! :) ..assume simple createSound(id,url) use case
			 oOptions = {
				'id': arguments[0],
				'url': arguments[1]
			 };
			}

			// inherit from defaultOptions
			thisOptions = _mixin(oOptions);

			thisOptions.url = _parseURL(thisOptions.url);

			// local shortcut
			_tO = thisOptions;

			// <d>
			if (_tO.id.toString().charAt(0).match(/^[0-9]$/)) {
			 _s._wD(_cs + _str('badID', _tO.id), 2);
			}

			_s._wD(_cs + _tO.id + ' (' + _tO.url + ')', 1);
			// </d>

			if (_idCheck(_tO.id, true)) {
			 _s._wD(_cs + _tO.id + ' exists', 1);
			 return _s.sounds[_tO.id];
			}

			function make() {

			 thisOptions = _loopFix(thisOptions);
			 _s.sounds[_tO.id] = new SMSound(_tO);
			 _s.soundIDs.push(_tO.id);
			 return _s.sounds[_tO.id];

			}

			if (_html5OK(_tO)) {

			 oSound = make();
			 _s._wD('Loading sound '+_tO.id+' via HTML5');
			 oSound._setup_html5(_tO);

			} else {

			 if (_fV > 8) {
				if (_tO.isMovieStar === null) {
				 // attempt to detect MPEG-4 formats
				 _tO.isMovieStar = (_tO.serverURL || (_tO.type ? _tO.type.match(_netStreamMimeTypes) : false) || _tO.url.match(_netStreamPattern));
				}
				// <d>
				if (_tO.isMovieStar) {
				 _s._wD(_cs + 'using MovieStar handling');
				}
				// </d>
				if (_tO.isMovieStar) {
				 if (_tO.usePeakData) {
					_wDS('noPeak');
					_tO.usePeakData = false;
				 }
				 // <d>
				 if (_tO.loops > 1) {
					_wDS('noNSLoop');
				 }
				 // </d>
				}
			 }

			 _tO = _policyFix(_tO, _cs);
			 oSound = make();

			 if (_fV === 8) {
				_flash._createSound(_tO.id, _tO.loops||1, _tO.usePolicyFile);
			 } else {
				_flash._createSound(_tO.id, _tO.url, _tO.usePeakData, _tO.useWaveformData, _tO.useEQData, _tO.isMovieStar, (_tO.isMovieStar?_tO.bufferTime:false), _tO.loops||1, _tO.serverURL, _tO.duration||null, _tO.autoPlay, true, _tO.autoLoad, _tO.usePolicyFile);
				if (!_tO.serverURL) {
				 // We are connected immediately
				 oSound.connected = true;
				 if (_tO.onconnect) {
					_tO.onconnect.apply(oSound);
				 }
				}
			 }

			 if (!_tO.serverURL && (_tO.autoLoad || _tO.autoPlay)) {
				// call load for non-rtmp streams
				oSound.load(_tO);
			 }

			}

			// rtmp will play in onconnect
			if (!_tO.serverURL && _tO.autoPlay) {
			 oSound.play();
			}

			return oSound;

		 };

		 /**
		  * Destroys a SMSound sound object instance.
		  *
		  * @param {string} sID The ID of the sound to destroy
		  */

		 this.destroySound = function(sID, _bFromSound) {

			// explicitly destroy a sound before normal page unload, etc.

			if (!_idCheck(sID)) {
			 return false;
			}

			var oS = _s.sounds[sID], i;

			// Disable all callbacks while the sound is being destroyed
			oS._iO = {};

			oS.stop();
			oS.unload();

			for (i = 0; i < _s.soundIDs.length; i++) {
			 if (_s.soundIDs[i] === sID) {
				_s.soundIDs.splice(i, 1);
				break;
			 }
			}

			if (!_bFromSound) {
			 // ignore if being called from SMSound instance
			 oS.destruct(true);
			}

			oS = null;
			delete _s.sounds[sID];

			return true;

		 };

		 /**
		  * Calls the load() method of a SMSound object by ID.
		  *
		  * @param {string} sID The ID of the sound
		  * @param {object} oOptions Optional: Sound options
		  */

		 this.load = function(sID, oOptions) {

			if (!_idCheck(sID)) {
			 return false;
			}
			return _s.sounds[sID].load(oOptions);

		 };

		 /**
		  * Calls the unload() method of a SMSound object by ID.
		  *
		  * @param {string} sID The ID of the sound
		  */

		 this.unload = function(sID) {

			if (!_idCheck(sID)) {
			 return false;
			}
			return _s.sounds[sID].unload();

		 };

		 /**
		  * Calls the onPosition() method of a SMSound object by ID.
		  *
		  * @param {string} sID The ID of the sound
		  * @param {number} nPosition The position to watch for
		  * @param {function} oMethod The relevant callback to fire
		  * @param {object} oScope Optional: The scope to apply the callback to
		  * @return {SMSound} The SMSound object
		  */

		 this.onPosition = function(sID, nPosition, oMethod, oScope) {

			if (!_idCheck(sID)) {
			 return false;
			}
			return _s.sounds[sID].onposition(nPosition, oMethod, oScope);

		 };

		 // legacy/backwards-compability: lower-case method name
		 this.onposition = this.onPosition;

		 /**
		  * Calls the clearOnPosition() method of a SMSound object by ID.
		  *
		  * @param {string} sID The ID of the sound
		  * @param {number} nPosition The position to watch for
		  * @param {function} oMethod Optional: The relevant callback to fire
		  * @return {SMSound} The SMSound object
		  */

		 this.clearOnPosition = function(sID, nPosition, oMethod) {

			if (!_idCheck(sID)) {
			 return false;
			}
			return _s.sounds[sID].clearOnPosition(nPosition, oMethod);

		 };

		 /**
		  * Calls the play() method of a SMSound object by ID.
		  *
		  * @param {string} sID The ID of the sound
		  * @param {object} oOptions Optional: Sound options
		  * @return {SMSound} The SMSound object
		  */

		 this.play = function(sID, oOptions) {

			if (!_didInit || !_s.ok()) {
			 _complain(_sm+'.play(): ' + _str(!_didInit?'notReady':'notOK'));
			 return false;
			}

			if (!_idCheck(sID)) {
			 if (!(oOptions instanceof Object)) {
				// overloading use case: play('mySound','/path/to/some.mp3');
				oOptions = {
				 url: oOptions
				};
			 }
			 if (oOptions && oOptions.url) {
				// overloading use case, create+play: .play('someID',{url:'/path/to.mp3'});
				_s._wD(_sm+'.play(): attempting to create "' + sID + '"', 1);
				oOptions.id = sID;
				return _s.createSound(oOptions).play();
			 } else {
				return false;
			 }
			}

			return _s.sounds[sID].play(oOptions);

		 };

		 this.start = this.play; // just for convenience

		 /**
		  * Calls the setPosition() method of a SMSound object by ID.
		  *
		  * @param {string} sID The ID of the sound
		  * @param {number} nMsecOffset Position (milliseconds)
		  * @return {SMSound} The SMSound object
		  */

		 this.setPosition = function(sID, nMsecOffset) {

			if (!_idCheck(sID)) {
			 return false;
			}
			return _s.sounds[sID].setPosition(nMsecOffset);

		 };

		 /**
		  * Calls the stop() method of a SMSound object by ID.
		  *
		  * @param {string} sID The ID of the sound
		  * @return {SMSound} The SMSound object
		  */

		 this.stop = function(sID) {

			if (!_idCheck(sID)) {
			 return false;
			}

			_s._wD(_sm+'.stop(' + sID + ')', 1);
			return _s.sounds[sID].stop();

		 };

		 /**
		  * Stops all currently-playing sounds.
		  */

		 this.stopAll = function() {

			var oSound;
			_s._wD(_sm+'.stopAll()', 1);

			for (oSound in _s.sounds) {
			 if (_s.sounds.hasOwnProperty(oSound)) {
				// apply only to sound objects
				_s.sounds[oSound].stop();
			 }
			}

		 };

		 /**
		  * Calls the pause() method of a SMSound object by ID.
		  *
		  * @param {string} sID The ID of the sound
		  * @return {SMSound} The SMSound object
		  */

		 this.pause = function(sID) {

			if (!_idCheck(sID)) {
			 return false;
			}
			return _s.sounds[sID].pause();

		 };

		 /**
		  * Pauses all currently-playing sounds.
		  */

		 this.pauseAll = function() {

			var i;
			for (i = _s.soundIDs.length-1; i >= 0; i--) {
			 _s.sounds[_s.soundIDs[i]].pause();
			}

		 };

		 /**
		  * Calls the resume() method of a SMSound object by ID.
		  *
		  * @param {string} sID The ID of the sound
		  * @return {SMSound} The SMSound object
		  */

		 this.resume = function(sID) {

			if (!_idCheck(sID)) {
			 return false;
			}
			return _s.sounds[sID].resume();

		 };

		 /**
		  * Resumes all currently-paused sounds.
		  */

		 this.resumeAll = function() {

			var i;
			for (i = _s.soundIDs.length-1; i >= 0; i--) {
			 _s.sounds[_s.soundIDs[i]].resume();
			}

		 };

		 /**
		  * Calls the togglePause() method of a SMSound object by ID.
		  *
		  * @param {string} sID The ID of the sound
		  * @return {SMSound} The SMSound object
		  */

		 this.togglePause = function(sID) {

			if (!_idCheck(sID)) {
			 return false;
			}
			return _s.sounds[sID].togglePause();

		 };

		 /**
		  * Calls the setPan() method of a SMSound object by ID.
		  *
		  * @param {string} sID The ID of the sound
		  * @param {number} nPan The pan value (-100 to 100)
		  * @return {SMSound} The SMSound object
		  */

		 this.setPan = function(sID, nPan) {

			if (!_idCheck(sID)) {
			 return false;
			}
			return _s.sounds[sID].setPan(nPan);

		 };

		 /**
		  * Calls the setVolume() method of a SMSound object by ID.
		  *
		  * @param {string} sID The ID of the sound
		  * @param {number} nVol The volume value (0 to 100)
		  * @return {SMSound} The SMSound object
		  */

		 this.setVolume = function(sID, nVol) {

			if (!_idCheck(sID)) {
			 return false;
			}
			return _s.sounds[sID].setVolume(nVol);

		 };

		 /**
		  * Calls the mute() method of either a single SMSound object by ID, or all sound objects.
		  *
		  * @param {string} sID Optional: The ID of the sound (if omitted, all sounds will be used.)
		  */

		 this.mute = function(sID) {

			var i = 0;

			if (typeof sID !== 'string') {
			 sID = null;
			}

			if (!sID) {
			 _s._wD(_sm+'.mute(): Muting all sounds');
			 for (i = _s.soundIDs.length-1; i >= 0; i--) {
				_s.sounds[_s.soundIDs[i]].mute();
			 }
			 _s.muted = true;
			} else {
			 if (!_idCheck(sID)) {
				return false;
			 }
			 _s._wD(_sm+'.mute(): Muting "' + sID + '"');
			 return _s.sounds[sID].mute();
			}

			return true;

		 };

		 /**
		  * Mutes all sounds.
		  */

		 this.muteAll = function() {

			_s.mute();

		 };

		 /**
		  * Calls the unmute() method of either a single SMSound object by ID, or all sound objects.
		  *
		  * @param {string} sID Optional: The ID of the sound (if omitted, all sounds will be used.)
		  */

		 this.unmute = function(sID) {

			var i;

			if (typeof sID !== 'string') {
			 sID = null;
			}

			if (!sID) {

			 _s._wD(_sm+'.unmute(): Unmuting all sounds');
			 for (i = _s.soundIDs.length-1; i >= 0; i--) {
				_s.sounds[_s.soundIDs[i]].unmute();
			 }
			 _s.muted = false;

			} else {

			 if (!_idCheck(sID)) {
				return false;
			 }
			 _s._wD(_sm+'.unmute(): Unmuting "' + sID + '"');
			 return _s.sounds[sID].unmute();

			}

			return true;

		 };

		 /**
		  * Unmutes all sounds.
		  */

		 this.unmuteAll = function() {

			_s.unmute();

		 };

		 /**
		  * Calls the toggleMute() method of a SMSound object by ID.
		  *
		  * @param {string} sID The ID of the sound
		  * @return {SMSound} The SMSound object
		  */

		 this.toggleMute = function(sID) {

			if (!_idCheck(sID)) {
			 return false;
			}
			return _s.sounds[sID].toggleMute();

		 };

		 /**
		  * Retrieves the memory used by the flash plugin.
		  *
		  * @return {number} The amount of memory in use
		  */

		 this.getMemoryUse = function() {

			// flash-only
			var ram = 0;

			if (_flash && _fV !== 8) {
			 ram = parseInt(_flash._getMemoryUse(), 10);
			}

			return ram;

		 };

		 /**
		  * Undocumented: NOPs soundManager and all SMSound objects.
		  */

		 this.disable = function(bNoDisable) {

			// destroy all functions
			var i;

			if (typeof bNoDisable === 'undefined') {
			 bNoDisable = false;
			}

			if (_disabled) {
			 return false;
			}

			_disabled = true;
			_wDS('shutdown', 1);

			for (i = _s.soundIDs.length-1; i >= 0; i--) {
			 _disableObject(_s.sounds[_s.soundIDs[i]]);
			}

			// fire "complete", despite fail
			_initComplete(bNoDisable);
			_event.remove(_win, 'load', _initUserOnload);

			return true;

		 };

		 /**
		  * Determines playability of a MIME type, eg. 'audio/mp3'.
		  */

		 this.canPlayMIME = function(sMIME) {

			var result;

			if (_s.hasHTML5) {
			 result = _html5CanPlay({type:sMIME});
			}

			if (!_needsFlash || result) {
			 // no flash, or OK
			 return result;
			} else {
			 // if flash 9, test netStream (movieStar) types as well.
			 return (sMIME && _s.ok() ? !!((_fV > 8 ? sMIME.match(_netStreamMimeTypes) : null) || sMIME.match(_s.mimePattern)) : null);
			}

		 };

		 /**
		  * Determines playability of a URL based on audio support.
		  *
		  * @param {string} sURL The URL to test
		  * @return {boolean} URL playability
		  */

		 this.canPlayURL = function(sURL) {

			var result;

			if (_s.hasHTML5) {
			 result = _html5CanPlay({url: sURL});
			}

			if (!_needsFlash || result) {
			 // no flash, or OK
			 return result;
			} else {
			 return (sURL && _s.ok() ? !!(sURL.match(_s.filePattern)) : null);
			}

		 };

		 /**
		  * Determines playability of an HTML DOM &lt;a&gt; object (or similar object literal) based on audio support.
		  *
		  * @param {object} oLink an HTML DOM &lt;a&gt; object or object literal including href and/or type attributes
		  * @return {boolean} URL playability
		  */

		 this.canPlayLink = function(oLink) {

			if (typeof oLink.type !== 'undefined' && oLink.type) {
			 if (_s.canPlayMIME(oLink.type)) {
				return true;
			 }
			}

			return _s.canPlayURL(oLink.href);

		 };

		 /**
		  * Retrieves a SMSound object by ID.
		  *
		  * @param {string} sID The ID of the sound
		  * @return {SMSound} The SMSound object
		  */

		 this.getSoundById = function(sID, _suppressDebug) {

			if (!sID) {
			 throw new Error(_sm+'.getSoundById(): sID is null/undefined');
			}

			var result = _s.sounds[sID];

			// <d>
			if (!result && !_suppressDebug) {
			 _s._wD('"' + sID + '" is an invalid sound ID.', 2);
			}
			// </d>

			return result;

		 };

		 /**
		  * Queues a callback for execution when SoundManager has successfully initialized.
		  *
		  * @param {function} oMethod The callback method to fire
		  * @param {object} oScope Optional: The scope to apply to the callback
		  */

		 this.onready = function(oMethod, oScope) {

			var sType = 'onready';

			if (oMethod && oMethod instanceof Function) {

			 // <d>
			 if (_didInit) {
				_s._wD(_str('queue', sType));
			 }
			 // </d>

			 if (!oScope) {
				oScope = _win;
			 }

			 _addOnEvent(sType, oMethod, oScope);
			 _processOnEvents();

			 return true;

			} else {

			 throw _str('needFunction', sType);

			}

		 };

		 /**
		  * Queues a callback for execution when SoundManager has failed to initialize.
		  *
		  * @param {function} oMethod The callback method to fire
		  * @param {object} oScope Optional: The scope to apply to the callback
		  */

		 this.ontimeout = function(oMethod, oScope) {

			var sType = 'ontimeout';

			if (oMethod && oMethod instanceof Function) {

			 // <d>
			 if (_didInit) {
				_s._wD(_str('queue', sType));
			 }
			 // </d>

			 if (!oScope) {
				oScope = _win;
			 }

			 _addOnEvent(sType, oMethod, oScope);
			 _processOnEvents({type:sType});

			 return true;

			} else {

			 throw _str('needFunction', sType);

			}

		 };

		 /**
		  * Writes console.log()-style debug output to a console or in-browser element.
		  * Applies when SoundManager.debugMode = true
		  *
		  * @param {string} sText The console message
		  * @param {string} sType Optional: Log type of 'info', 'warn' or 'error'
		  * @param {object} Optional: The scope to apply to the callback
		  */

		 this._writeDebug = function(sText, sType, _bTimestamp) {

			// pseudo-private console.log()-style output
			// <d>

			var sDID = 'soundmanager-debug', o, oItem, sMethod;

			if (!_s.debugMode) {
			 return false;
			}

			if (typeof _bTimestamp !== 'undefined' && _bTimestamp) {
			 sText = sText + ' | ' + new Date().getTime();
			}

			if (_hasConsole && _s.useConsole) {
			 sMethod = _debugLevels[sType];
			 if (typeof console[sMethod] !== 'undefined') {
				console[sMethod](sText);
			 } else {
				console.log(sText);
			 }
			 if (_s.consoleOnly) {
				return true;
			 }
			}

			try {

			 o = _id(sDID);

			 if (!o) {
				return false;
			 }

			 oItem = _doc.createElement('div');

			 if (++_wdCount % 2 === 0) {
				oItem.className = 'sm2-alt';
			 }

			 if (typeof sType === 'undefined') {
				sType = 0;
			 } else {
				sType = parseInt(sType, 10);
			 }

			 oItem.appendChild(_doc.createTextNode(sText));

			 if (sType) {
				if (sType >= 2) {
				 oItem.style.fontWeight = 'bold';
				}
				if (sType === 3) {
				 oItem.style.color = '#ff3333';
				}
			 }

			 // top-to-bottom
			 // o.appendChild(oItem);

			 // bottom-to-top
			 o.insertBefore(oItem, o.firstChild);

			} catch(e) {
			 // oh well
			}

			o = null;
			// </d>

			return true;

		 };

		 // alias
		 this._wD = this._writeDebug;

		 /**
		  * Provides debug / state information on all SMSound objects.
		  */

		 this._debug = function() {

			// <d>
			var i, j;
			_wDS('currentObj', 1);

			for (i = 0, j = _s.soundIDs.length; i < j; i++) {
			 _s.sounds[_s.soundIDs[i]]._debug();
			}
			// </d>

		 };

		 /**
		  * Restarts and re-initializes the SoundManager instance.
		  */

		 this.reboot = function() {

			// attempt to reset and init SM2
			_s._wD(_sm+'.reboot()');

			// <d>
			if (_s.soundIDs.length) {
			 _s._wD('Destroying ' + _s.soundIDs.length + ' SMSound objects...');
			}
			// </d>

			var i, j;

			for (i = _s.soundIDs.length-1; i >= 0; i--) {
			 _s.sounds[_s.soundIDs[i]].destruct();
			}

			// trash ze flash

			try {
			 if (_isIE) {
				_oRemovedHTML = _flash.innerHTML;
			 }
			 _oRemoved = _flash.parentNode.removeChild(_flash);
			 _s._wD('Flash movie removed.');
			} catch(e) {
			 // uh-oh.
			 _wDS('badRemove', 2);
			}

			// actually, force recreate of movie.
			_oRemovedHTML = _oRemoved = _needsFlash = null;

			_s.enabled = _didDCLoaded = _didInit = _waitingForEI = _initPending = _didAppend = _appendSuccess = _disabled = _s.swfLoaded = false;
			_s.soundIDs = [];
			_s.sounds = {};
			_flash = null;

			for (i in _on_queue) {
			 if (_on_queue.hasOwnProperty(i)) {
				for (j = _on_queue[i].length-1; j >= 0; j--) {
				 _on_queue[i][j].fired = false;
				}
			 }
			}

			_s._wD(_sm + ': Rebooting...');
			_win.setTimeout(_s.beginDelayedInit, 20);

		 };

		 /**
		  * Undocumented: Determines the SM2 flash movie's load progress.
		  *
		  * @return {number or null} Percent loaded, or if invalid/unsupported, null.
		  */

		 this.getMoviePercent = function() {

			return (_flash && typeof _flash.PercentLoaded !== 'undefined' ? _flash.PercentLoaded() : null);

		 };

		 /**
		  * Additional helper for manually invoking SM2's init process after DOM Ready / window.onload().
		  */

		 this.beginDelayedInit = function() {

			_windowLoaded = true;
			_domContentLoaded();

			setTimeout(function() {

			 if (_initPending) {
				return false;
			 }

			 _createMovie();
			 _initMovie();
			 _initPending = true;

			 return true;

			}, 20);

			_delayWaitForEI();

		 };

		 /**
		  * Destroys the SoundManager instance and all SMSound instances.
		  */

		 this.destruct = function() {

			_s._wD(_sm+'.destruct()');
			_s.disable(true);

		 };

		 /**
		  * SMSound() (sound object) constructor
		  * ------------------------------------
		  *
		  * @param {object} oOptions Sound options (id and url are required attributes)
		  * @return {SMSound} The new SMSound object
		  */

		 SMSound = function(oOptions) {

			var _t = this, _resetProperties, _add_html5_events, _remove_html5_events, _stop_html5_timer, _start_html5_timer, _attachOnPosition, _onplay_called = false, _onPositionItems = [], _onPositionFired = 0, _detachOnPosition, _applyFromTo, _lastURL = null, _lastHTML5State;

			_lastHTML5State = {
			 // tracks duration + position (time)
			 duration: null,
			 time: null
			};

			this.sID = oOptions.id;
			this.url = oOptions.url;
			this.options = _mixin(oOptions);

			// per-play-instance-specific options
			this.instanceOptions = this.options;

			// short alias
			this._iO = this.instanceOptions;

			// assign property defaults
			this.pan = this.options.pan;
			this.volume = this.options.volume;
			this.isHTML5 = false;
			this._a = null;

			/**
			 * SMSound() public methods
			 * ------------------------
			 */

			this.id3 = {};

			/**
			 * Writes SMSound object parameters to debug console
			 */

			this._debug = function() {

			 // <d>
			 // pseudo-private console.log()-style output

			 if (_s.debugMode) {

				var stuff = null, msg = [], sF, sfBracket, maxLength = 64;

				for (stuff in _t.options) {
				 if (_t.options[stuff] !== null) {
					if (_t.options[stuff] instanceof Function) {
					 // handle functions specially
					 sF = _t.options[stuff].toString();
					 // normalize spaces
					 sF = sF.replace(/\s\s+/g, ' ');
					 sfBracket = sF.indexOf('{');
					 msg.push(' ' + stuff + ': {' + sF.substr(sfBracket + 1, (Math.min(Math.max(sF.indexOf('\n') - 1, maxLength), maxLength))).replace(/\n/g, '') + '... }');
					} else {
					 msg.push(' ' + stuff + ': ' + _t.options[stuff]);
					}
				 }
				}

				_s._wD('SMSound() merged options: {\n' + msg.join(', \n') + '\n}');

			 }
			 // </d>

			};

			// <d>
			this._debug();
			// </d>

			/**
			 * Begins loading a sound per its *url*.
			 *
			 * @param {object} oOptions Optional: Sound options
			 * @return {SMSound} The SMSound object
			 */

			this.load = function(oOptions) {

			 var oS = null, _iO;

			 if (typeof oOptions !== 'undefined') {
				_t._iO = _mixin(oOptions, _t.options);
				_t.instanceOptions = _t._iO;
			 } else {
				oOptions = _t.options;
				_t._iO = oOptions;
				_t.instanceOptions = _t._iO;
				if (_lastURL && _lastURL !== _t.url) {
				 _wDS('manURL');
				 _t._iO.url = _t.url;
				 _t.url = null;
				}
			 }

			 if (!_t._iO.url) {
				_t._iO.url = _t.url;
			 }

			 _t._iO.url = _parseURL(_t._iO.url);

			 _s._wD('SMSound.load(): ' + _t._iO.url, 1);

			 if (_t._iO.url === _t.url && _t.readyState !== 0 && _t.readyState !== 2) {
				_wDS('onURL', 1);
				// if loaded and an onload() exists, fire immediately.
				if (_t.readyState === 3 && _t._iO.onload) {
				 // assume success based on truthy duration.
				 _t._iO.onload.apply(_t, [(!!_t.duration)]);
				}
				return _t;
			 }

			 // local shortcut
			 _iO = _t._iO;

			 _lastURL = _t.url;
			 _t.loaded = false;
			 _t.readyState = 1;
			 _t.playState = 0;

			 // TODO: If switching from HTML5 -> flash (or vice versa), stop currently-playing audio.

			 if (_html5OK(_iO)) {

				oS = _t._setup_html5(_iO);

				if (!oS._called_load) {

				 _s._wD(_h5+'load: '+_t.sID);
				 _t._html5_canplay = false;

				 // given explicit load call, try to get whole file.
				 // early HTML5 implementation (non-standard)
				 _t._a.autobuffer = 'auto';

				 // standard
				 _t._a.preload = 'auto';

				 oS.load();
				 oS._called_load = true;

				 if (_iO.autoPlay) {
					_t.play();
				 }

				} else {
				 _s._wD(_h5+'ignoring request to load again: '+_t.sID);
				}

			 } else {

				try {
				 _t.isHTML5 = false;
				 _t._iO = _policyFix(_loopFix(_iO));
				 // re-assign local shortcut
				 _iO = _t._iO;
				 if (_fV === 8) {
					_flash._load(_t.sID, _iO.url, _iO.stream, _iO.autoPlay, (_iO.whileloading?1:0), _iO.loops||1, _iO.usePolicyFile);
				 } else {
					_flash._load(_t.sID, _iO.url, !!(_iO.stream), !!(_iO.autoPlay), _iO.loops||1, !!(_iO.autoLoad), _iO.usePolicyFile);
				 }
				} catch(e) {
				 _wDS('smError', 2);
				 _debugTS('onload', false);
				 _catchError({type:'SMSOUND_LOAD_JS_EXCEPTION', fatal:true});

				}

			 }

			 return _t;

			};

			/**
			 * Unloads a sound, canceling any open HTTP requests.
			 *
			 * @return {SMSound} The SMSound object
			 */

			this.unload = function() {

			 // Flash 8/AS2 can't "close" a stream - fake it by loading an empty URL
			 // Flash 9/AS3: Close stream, preventing further load
			 // HTML5: Most UAs will use empty URL

			 if (_t.readyState !== 0) {

				_s._wD('SMSound.unload(): "' + _t.sID + '"');

				if (!_t.isHTML5) {
				 if (_fV === 8) {
					_flash._unload(_t.sID, _emptyURL);
				 } else {
					_flash._unload(_t.sID);
				 }
				} else {
				 _stop_html5_timer();
				 if (_t._a) {
					_t._a.pause();
					_html5Unload(_t._a);
				 }
				}

				// reset load/status flags
				_resetProperties();

			 }

			 return _t;

			};

			/**
			 * Unloads and destroys a sound.
			 */

			this.destruct = function(_bFromSM) {

			 _s._wD('SMSound.destruct(): "' + _t.sID + '"');

			 if (!_t.isHTML5) {

				// kill sound within Flash
				// Disable the onfailure handler
				_t._iO.onfailure = null;
				_flash._destroySound(_t.sID);

			 } else {

				_stop_html5_timer();

				if (_t._a) {
				 _t._a.pause();
				 _html5Unload(_t._a);
				 if (!_useGlobalHTML5Audio) {
					_remove_html5_events();
				 }
				 // break obvious circular reference
				 _t._a._t = null;
				 _t._a = null;
				}

			 }

			 if (!_bFromSM) {
				// ensure deletion from controller
				_s.destroySound(_t.sID, true);

			 }

			};

			/**
			 * Begins playing a sound.
			 *
			 * @param {object} oOptions Optional: Sound options
			 * @return {SMSound} The SMSound object
			 */

			this.play = function(oOptions, _updatePlayState) {

			 var fN, allowMulti, a, onready;

			 // <d>
			 fN = 'SMSound.play(): ';
			 // </d>

			 _updatePlayState = _updatePlayState === undefined ? true : _updatePlayState; // default to true

			 if (!oOptions) {
				oOptions = {};
			 }

			 _t._iO = _mixin(oOptions, _t._iO);
			 _t._iO = _mixin(_t._iO, _t.options);
			 _t._iO.url = _parseURL(_t._iO.url);
			 _t.instanceOptions = _t._iO;

			 // RTMP-only
			 if (_t._iO.serverURL && !_t.connected) {
				if (!_t.getAutoPlay()) {
				 _s._wD(fN+' Netstream not connected yet - setting autoPlay');
				 _t.setAutoPlay(true);
				}
				// play will be called in _onconnect()
				return _t;
			 }

			 if (_html5OK(_t._iO)) {
				_t._setup_html5(_t._iO);
				_start_html5_timer();
			 }

			 if (_t.playState === 1 && !_t.paused) {
				allowMulti = _t._iO.multiShot;
				if (!allowMulti) {
				 _s._wD(fN + '"' + _t.sID + '" already playing (one-shot)', 1);
				 return _t;
				} else {
				 _s._wD(fN + '"' + _t.sID + '" already playing (multi-shot)', 1);
				}
			 }

			 if (!_t.loaded) {

				if (_t.readyState === 0) {

				 _s._wD(fN + 'Attempting to load "' + _t.sID + '"', 1);

				 // try to get this sound playing ASAP
				 if (!_t.isHTML5) {
					// assign directly because setAutoPlay() increments the instanceCount
					_t._iO.autoPlay = true;
				 }

				 _t.load(_t._iO);

				} else if (_t.readyState === 2) {

				 _s._wD(fN + 'Could not load "' + _t.sID + '" - exiting', 2);
				 return _t;

				} else {

				 _s._wD(fN + '"' + _t.sID + '" is loading - attempting to play..', 1);

				}

			 } else {

				_s._wD(fN + '"' + _t.sID + '"');

			 }

			 if (!_t.isHTML5 && _fV === 9 && _t.position > 0 && _t.position === _t.duration) {
				// flash 9 needs a position reset if play() is called while at the end of a sound.
				_s._wD(fN + '"' + _t.sID + '": Sound at end, resetting to position:0');
				oOptions.position = 0;
			 }

			 /**
			  * Streams will pause when their buffer is full if they are being loaded.
			  * In this case paused is true, but the song hasn't started playing yet.
			  * If we just call resume() the onplay() callback will never be called.
			  * So only call resume() if the position is > 0.
			  * Another reason is because options like volume won't have been applied yet.
			  */

			 if (_t.paused && _t.position && _t.position > 0) {

				// https://gist.github.com/37b17df75cc4d7a90bf6
				_s._wD(fN + '"' + _t.sID + '" is resuming from paused state',1);
				_t.resume();

			 } else {

				_t._iO = _mixin(oOptions, _t._iO);

				// apply from/to parameters, if they exist (and not using RTMP)
				if (_t._iO.from !== null && _t._iO.to !== null && _t.instanceCount === 0 && _t.playState === 0 && !_t._iO.serverURL) {

				 onready = function() {
					// sound "canplay" or onload()
					// re-apply from/to to instance options, and start playback
					_t._iO = _mixin(oOptions, _t._iO);
					_t.play(_t._iO);
				 };

				 // HTML5 needs to at least have "canplay" fired before seeking.
				 if (_t.isHTML5 && !_t._html5_canplay) {

					// this hasn't been loaded yet. load it first, and then do this again.
					_s._wD(fN+'Beginning load of "'+ _t.sID+'" for from/to case');

					_t.load({
					 _oncanplay: onready
					});

					return false;

				 } else if (!_t.isHTML5 && !_t.loaded && (!_t.readyState || _t.readyState !== 2)) {

					// to be safe, preload the whole thing in Flash.

					_s._wD(fN+'Preloading "'+ _t.sID+'" for from/to case');

					_t.load({
					 onload: onready
					});

					return false;

				 }

				 // otherwise, we're ready to go. re-apply local options, and continue

				 _t._iO = _applyFromTo();

				}

				_s._wD(fN+'"'+ _t.sID+'" is starting to play');

				if (!_t.instanceCount || _t._iO.multiShotEvents || (!_t.isHTML5 && _fV > 8 && !_t.getAutoPlay())) {
				 _t.instanceCount++;
				}

				// if first play and onposition parameters exist, apply them now
				if (_t.playState === 0 && _t._iO.onposition) {
				 _attachOnPosition(_t);
				}

				_t.playState = 1;
				_t.paused = false;

				_t.position = (typeof _t._iO.position !== 'undefined' && !isNaN(_t._iO.position) ? _t._iO.position : 0);

				if (!_t.isHTML5) {
				 _t._iO = _policyFix(_loopFix(_t._iO));
				}

				if (_t._iO.onplay && _updatePlayState) {
				 _t._iO.onplay.apply(_t);
				 _onplay_called = true;
				}

				_t.setVolume(_t._iO.volume, true);
				_t.setPan(_t._iO.pan, true);

				if (!_t.isHTML5) {

				 _flash._start(_t.sID, _t._iO.loops || 1, (_fV === 9?_t._iO.position:_t._iO.position / 1000));

				} else {

				 _start_html5_timer();
				 a = _t._setup_html5();
				 _t.setPosition(_t._iO.position);
				 a.play();

				}

			 }

			 return _t;

			};

			// just for convenience
			this.start = this.play;

			/**
			 * Stops playing a sound (and optionally, all sounds)
			 *
			 * @param {boolean} bAll Optional: Whether to stop all sounds
			 * @return {SMSound} The SMSound object
			 */

			this.stop = function(bAll) {

			 var _iO = _t._iO, _oP;

			 if (_t.playState === 1) {

				_t._onbufferchange(0);
				_t._resetOnPosition(0);
				_t.paused = false;

				if (!_t.isHTML5) {
				 _t.playState = 0;
				}

				// remove onPosition listeners, if any
				_detachOnPosition();

				// and "to" position, if set
				if (_iO.to) {
				 _t.clearOnPosition(_iO.to);
				}

				if (!_t.isHTML5) {

				 _flash._stop(_t.sID, bAll);

				 // hack for netStream: just unload
				 if (_iO.serverURL) {
					_t.unload();
				 }

				} else {

				 if (_t._a) {

					_oP = _t.position;

					// act like Flash, though
					_t.setPosition(0);

					// hack: reflect old position for onstop() (also like Flash)
					_t.position = _oP;

					// html5 has no stop()
					// NOTE: pausing means iOS requires interaction to resume.
					_t._a.pause();

					_t.playState = 0;

					// and update UI
					_t._onTimer();

					_stop_html5_timer();

				 }

				}

				_t.instanceCount = 0;
				_t._iO = {};

				if (_iO.onstop) {
				 _iO.onstop.apply(_t);
				}

			 }

			 return _t;

			};

			/**
			 * Undocumented/internal: Sets autoPlay for RTMP.
			 *
			 * @param {boolean} autoPlay state
			 */

			this.setAutoPlay = function(autoPlay) {

			 _s._wD('sound '+_t.sID+' turned autoplay ' + (autoPlay ? 'on' : 'off'));
			 _t._iO.autoPlay = autoPlay;

			 if (!_t.isHTML5) {
				_flash._setAutoPlay(_t.sID, autoPlay);
				if (autoPlay) {
				 // only increment the instanceCount if the sound isn't loaded (TODO: verify RTMP)
				 if (!_t.instanceCount && _t.readyState === 1) {
					_t.instanceCount++;
					_s._wD('sound '+_t.sID+' incremented instance count to '+_t.instanceCount);
				 }
				}
			 }

			};

			/**
			 * Undocumented/internal: Returns the autoPlay boolean.
			 *
			 * @return {boolean} The current autoPlay value
			 */

			this.getAutoPlay = function() {

			 return _t._iO.autoPlay;

			};

			/**
			 * Sets the position of a sound.
			 *
			 * @param {number} nMsecOffset Position (milliseconds)
			 * @return {SMSound} The SMSound object
			 */

			this.setPosition = function(nMsecOffset) {

			 if (nMsecOffset === undefined) {
				nMsecOffset = 0;
			 }

			 var original_pos,
				 position, position1K,
				 // Use the duration from the instance options, if we don't have a track duration yet.
				 // position >= 0 and <= current available (loaded) duration
				 offset = (_t.isHTML5 ? Math.max(nMsecOffset,0) : Math.min(_t.duration || _t._iO.duration, Math.max(nMsecOffset, 0)));

			 original_pos = _t.position;
			 _t.position = offset;
			 position1K = _t.position/1000;
			 _t._resetOnPosition(_t.position);
			 _t._iO.position = offset;

			 if (!_t.isHTML5) {

				position = (_fV === 9 ? _t.position : position1K);
				if (_t.readyState && _t.readyState !== 2) {
				 // if paused or not playing, will not resume (by playing)
				 _flash._setPosition(_t.sID, position, (_t.paused || !_t.playState));
				}

			 } else if (_t._a) {

				// Set the position in the canplay handler if the sound is not ready yet
				if (_t._html5_canplay) {
				 if (_t._a.currentTime !== position1K) {
					/**
					 * DOM/JS errors/exceptions to watch out for:
					 * if seek is beyond (loaded?) position, "DOM exception 11"
					 * "INDEX_SIZE_ERR": DOM exception 1
					 */
					_s._wD('setPosition('+position1K+'): setting position');
					try {
					 _t._a.currentTime = position1K;
					 if (_t.playState === 0 || _t.paused) {
						// allow seek without auto-play/resume
						_t._a.pause();
					 }
					} catch(e) {
					 _s._wD('setPosition('+position1K+'): setting position failed: '+e.message, 2);
					}
				 }
				} else {
				 _s._wD('setPosition('+position1K+'): delaying, sound not ready');
				}

			 }

			 if (_t.isHTML5) {
				if (_t.paused) {
				 // if paused, refresh UI right away
				 // force update
				 _t._onTimer(true);
				}
			 }

			 return _t;

			};

			/**
			 * Pauses sound playback.
			 *
			 * @return {SMSound} The SMSound object
			 */

			this.pause = function(_bCallFlash) {

			 if (_t.paused || (_t.playState === 0 && _t.readyState !== 1)) {
				return _t;
			 }

			 _s._wD('SMSound.pause()');
			 _t.paused = true;

			 if (!_t.isHTML5) {
				if (_bCallFlash || _bCallFlash === undefined) {
				 _flash._pause(_t.sID);
				}
			 } else {
				_t._setup_html5().pause();
				_stop_html5_timer();
			 }

			 if (_t._iO.onpause) {
				_t._iO.onpause.apply(_t);
			 }

			 return _t;

			};

			/**
			 * Resumes sound playback.
			 *
			 * @return {SMSound} The SMSound object
			 */

			/**
			 * When auto-loaded streams pause on buffer full they have a playState of 0.
			 * We need to make sure that the playState is set to 1 when these streams "resume".
			 * When a paused stream is resumed, we need to trigger the onplay() callback if it
			 * hasn't been called already. In this case since the sound is being played for the
			 * first time, I think it's more appropriate to call onplay() rather than onresume().
			 */

			this.resume = function() {

			 var _iO = _t._iO;

			 if (!_t.paused) {
				return _t;
			 }

			 _s._wD('SMSound.resume()');
			 _t.paused = false;
			 _t.playState = 1;

			 if (!_t.isHTML5) {
				if (_iO.isMovieStar && !_iO.serverURL) {
				 // Bizarre Webkit bug (Chrome reported via 8tracks.com dudes): AAC content paused for 30+ seconds(?) will not resume without a reposition.
				 _t.setPosition(_t.position);
				}
				// flash method is toggle-based (pause/resume)
				_flash._pause(_t.sID);
			 } else {
				_t._setup_html5().play();
				_start_html5_timer();
			 }

			 if (!_onplay_called && _iO.onplay) {
				_iO.onplay.apply(_t);
				_onplay_called = true;
			 } else if (_iO.onresume) {
				_iO.onresume.apply(_t);
			 }

			 return _t;

			};

			/**
			 * Toggles sound playback.
			 *
			 * @return {SMSound} The SMSound object
			 */

			this.togglePause = function() {

			 _s._wD('SMSound.togglePause()');

			 if (_t.playState === 0) {
				_t.play({
				 position: (_fV === 9 && !_t.isHTML5 ? _t.position : _t.position / 1000)
				});
				return _t;
			 }

			 if (_t.paused) {
				_t.resume();
			 } else {
				_t.pause();
			 }

			 return _t;

			};

			/**
			 * Sets the panning (L-R) effect.
			 *
			 * @param {number} nPan The pan value (-100 to 100)
			 * @return {SMSound} The SMSound object
			 */

			this.setPan = function(nPan, bInstanceOnly) {

			 if (typeof nPan === 'undefined') {
				nPan = 0;
			 }

			 if (typeof bInstanceOnly === 'undefined') {
				bInstanceOnly = false;
			 }

			 if (!_t.isHTML5) {
				_flash._setPan(_t.sID, nPan);
			 } // else { no HTML5 pan? }

			 _t._iO.pan = nPan;

			 if (!bInstanceOnly) {
				_t.pan = nPan;
				_t.options.pan = nPan;
			 }

			 return _t;

			};

			/**
			 * Sets the volume.
			 *
			 * @param {number} nVol The volume value (0 to 100)
			 * @return {SMSound} The SMSound object
			 */

			this.setVolume = function(nVol, _bInstanceOnly) {

			 /**
			  * Note: Setting volume has no effect on iOS "special snowflake" devices.
			  * Hardware volume control overrides software, and volume
			  * will always return 1 per Apple docs. (iOS 4 + 5.)
			  * http://developer.apple.com/library/safari/documentation/AudioVideo/Conceptual/HTML-canvas-guide/AddingSoundtoCanvasAnimations/AddingSoundtoCanvasAnimations.html
			  */

			 if (typeof nVol === 'undefined') {
				nVol = 100;
			 }

			 if (typeof _bInstanceOnly === 'undefined') {
				_bInstanceOnly = false;
			 }

			 if (!_t.isHTML5) {
				_flash._setVolume(_t.sID, (_s.muted && !_t.muted) || _t.muted?0:nVol);
			 } else if (_t._a) {
				// valid range: 0-1
				_t._a.volume = Math.max(0, Math.min(1, nVol/100));
			 }

			 _t._iO.volume = nVol;

			 if (!_bInstanceOnly) {
				_t.volume = nVol;
				_t.options.volume = nVol;
			 }

			 return _t;

			};

			/**
			 * Mutes the sound.
			 *
			 * @return {SMSound} The SMSound object
			 */

			this.mute = function() {

			 _t.muted = true;

			 if (!_t.isHTML5) {
				_flash._setVolume(_t.sID, 0);
			 } else if (_t._a) {
				_t._a.muted = true;
			 }

			 return _t;

			};

			/**
			 * Unmutes the sound.
			 *
			 * @return {SMSound} The SMSound object
			 */

			this.unmute = function() {

			 _t.muted = false;
			 var hasIO = typeof _t._iO.volume !== 'undefined';

			 if (!_t.isHTML5) {
				_flash._setVolume(_t.sID, hasIO?_t._iO.volume:_t.options.volume);
			 } else if (_t._a) {
				_t._a.muted = false;
			 }

			 return _t;

			};

			/**
			 * Toggles the muted state of a sound.
			 *
			 * @return {SMSound} The SMSound object
			 */

			this.toggleMute = function() {

			 return (_t.muted?_t.unmute():_t.mute());

			};

			/**
			 * Registers a callback to be fired when a sound reaches a given position during playback.
			 *
			 * @param {number} nPosition The position to watch for
			 * @param {function} oMethod The relevant callback to fire
			 * @param {object} oScope Optional: The scope to apply the callback to
			 * @return {SMSound} The SMSound object
			 */

			this.onPosition = function(nPosition, oMethod, oScope) {

			 // TODO: basic dupe checking?

			 _onPositionItems.push({
				position: parseInt(nPosition, 10),
				method: oMethod,
				scope: (typeof oScope !== 'undefined' ? oScope : _t),
				fired: false
			 });

			 return _t;

			};

			// legacy/backwards-compability: lower-case method name
			this.onposition = this.onPosition;

			/**
			 * Removes registered callback(s) from a sound, by position and/or callback.
			 *
			 * @param {number} nPosition The position to clear callback(s) for
			 * @param {function} oMethod Optional: Identify one callback to be removed when multiple listeners exist for one position
			 * @return {SMSound} The SMSound object
			 */

			this.clearOnPosition = function(nPosition, oMethod) {

			 var i;

			 nPosition = parseInt(nPosition, 10);

			 if (isNaN(nPosition)) {
				// safety check
				return false;
			 }

			 for (i=0; i < _onPositionItems.length; i++) {

				if (nPosition === _onPositionItems[i].position) {
				 // remove this item if no method was specified, or, if the method matches
				 if (!oMethod || (oMethod === _onPositionItems[i].method)) {
					if (_onPositionItems[i].fired) {
					 // decrement "fired" counter, too
					 _onPositionFired--;
					}
					_onPositionItems.splice(i, 1);
				 }
				}

			 }

			};

			this._processOnPosition = function() {

			 var i, item, j = _onPositionItems.length;

			 if (!j || !_t.playState || _onPositionFired >= j) {
				return false;
			 }

			 for (i=j-1; i >= 0; i--) {
				item = _onPositionItems[i];
				if (!item.fired && _t.position >= item.position) {
				 item.fired = true;
				 _onPositionFired++;
				 item.method.apply(item.scope, [item.position]);
				}
			 }

			 return true;

			};

			this._resetOnPosition = function(nPosition) {

			 // reset "fired" for items interested in this position
			 var i, item, j = _onPositionItems.length;

			 if (!j) {
				return false;
			 }

			 for (i=j-1; i >= 0; i--) {
				item = _onPositionItems[i];
				if (item.fired && nPosition <= item.position) {
				 item.fired = false;
				 _onPositionFired--;
				}
			 }

			 return true;

			};

			/**
			 * SMSound() private internals
			 * --------------------------------
			 */

			_applyFromTo = function() {

			 var _iO = _t._iO,
				 f = _iO.from,
				 t = _iO.to,
				 start, end;

			 end = function() {

				// end has been reached.
				_s._wD(_t.sID + ': "to" time of ' + t + ' reached.');

				// detach listener
				_t.clearOnPosition(t, end);

				// stop should clear this, too
				_t.stop();

			 };

			 start = function() {

				_s._wD(_t.sID + ': playing "from" ' + f);

				// add listener for end
				if (t !== null && !isNaN(t)) {
				 _t.onPosition(t, end);
				}

			 };

			 if (f !== null && !isNaN(f)) {

				// apply to instance options, guaranteeing correct start position.
				_iO.position = f;

				// multiShot timing can't be tracked, so prevent that.
				_iO.multiShot = false;

				start();

			 }

			 // return updated instanceOptions including starting position
			 return _iO;

			};

			_attachOnPosition = function() {

			 var item,
				 op = _t._iO.onposition;

			 // attach onposition things, if any, now.

			 if (op) {

				for (item in op) {
				 if (op.hasOwnProperty(item)) {
					_t.onPosition(parseInt(item, 10), op[item]); 
				 }
				}

			 }

			};

			_detachOnPosition = function() {

			 var item,
				 op = _t._iO.onposition;

			 // detach any onposition()-style listeners.

			 if (op) {

				for (item in op) {
				 if (op.hasOwnProperty(item)) {
					_t.clearOnPosition(parseInt(item, 10));
				 }
				}

			 }

			};

			_start_html5_timer = function() {

			 if (_t.isHTML5) {
				_startTimer(_t);
			 }

			};

			_stop_html5_timer = function() {

			 if (_t.isHTML5) {
				_stopTimer(_t);
			 }

			};

			_resetProperties = function() {

			 _onPositionItems = [];
			 _onPositionFired = 0;
			 _onplay_called = false;

			 _t._hasTimer = null;
			 _t._a = null;
			 _t._html5_canplay = false;
			 _t.bytesLoaded = null;
			 _t.bytesTotal = null;
			 _t.duration = (_t._iO && _t._iO.duration ? _t._iO.duration : null);
			 _t.durationEstimate = null;

			 // legacy: 1D array
			 _t.eqData = [];

			 _t.eqData.left = [];
			 _t.eqData.right = [];

			 _t.failures = 0;
			 _t.isBuffering = false;
			 _t.instanceOptions = {};
			 _t.instanceCount = 0;
			 _t.loaded = false;
			 _t.metadata = {};

			 // 0 = uninitialised, 1 = loading, 2 = failed/error, 3 = loaded/success
			 _t.readyState = 0;

			 _t.muted = false;
			 _t.paused = false;

			 _t.peakData = {
				left: 0,
				right: 0
			 };

			 _t.waveformData = {
				left: [],
				right: []
			 };

			 _t.playState = 0;
			 _t.position = null;

			};

			_resetProperties();

			/**
			 * Pseudo-private SMSound internals
			 * --------------------------------
			 */

			this._onTimer = function(bForce) {

			 /**
			  * HTML5-only _whileplaying() etc.
			  * called from both HTML5 native events, and polling/interval-based timers
			  * mimics flash and fires only when time/duration change, so as to be polling-friendly
			  */

			 var duration, isNew = false, time, x = {};

			 if (_t._hasTimer || bForce) {

				// TODO: May not need to track readyState (1 = loading)

				if (_t._a && (bForce || ((_t.playState > 0 || _t.readyState === 1) && !_t.paused))) {

				 duration = _t._get_html5_duration();

				 if (duration !== _lastHTML5State.duration) {

					_lastHTML5State.duration = duration;
					_t.duration = duration;
					isNew = true;

				 }

				 // TODO: investigate why this goes wack if not set/re-set each time.
				 _t.durationEstimate = _t.duration;

				 time = (_t._a.currentTime * 1000 || 0);

				 if (time !== _lastHTML5State.time) {

					_lastHTML5State.time = time;
					isNew = true;

				 }

				 if (isNew || bForce) {

					_t._whileplaying(time,x,x,x,x);

				 }

				 return isNew;

				} else {

				 // _s._wD('_onTimer: Warn for "'+_t.sID+'": '+(!_t._a?'Could not find element. ':'')+(_t.playState === 0?'playState bad, 0?':'playState = '+_t.playState+', OK'));

				 return false;

				}

			 }

			};

			this._get_html5_duration = function() {

			 var _iO = _t._iO,
				 d = (_t._a ? _t._a.duration*1000 : (_iO ? _iO.duration : undefined)),
				 result = (d && !isNaN(d) && d !== Infinity ? d : (_iO ? _iO.duration : null));

			 return result;

			};

			this._setup_html5 = function(oOptions) {

			 var _iO = _mixin(_t._iO, oOptions), d = decodeURI,
				 _a = _useGlobalHTML5Audio ? _s._global_a : _t._a,
				 _dURL = d(_iO.url),
				 _oldIO = (_a && _a._t ? _a._t.instanceOptions : null);

			 if (_a) {

				if (_a._t) {

				 if (!_useGlobalHTML5Audio && _dURL === d(_lastURL)) {
					// same url, ignore request
					return _a; 
				 } else if (_useGlobalHTML5Audio && _oldIO.url === _iO.url && (!_lastURL || (_lastURL === _oldIO.url))) {
					// iOS-type reuse case
					return _a;
				 }

				}

				_s._wD('setting new URL on existing object: ' + _dURL + (_lastURL ? ', old URL: ' + _lastURL : ''));

				/**
				 * "First things first, I, Poppa.." (reset the previous state of the old sound, if playing)
				 * Fixes case with devices that can only play one sound at a time
				 * Otherwise, other sounds in mid-play will be terminated without warning and in a stuck state
				 */

				if (_useGlobalHTML5Audio && _a._t && _a._t.playState && _iO.url !== _oldIO.url) {
				 _a._t.stop();
				}

				// new URL, so reset load/playstate and so on
				_resetProperties();

				_a.src = _iO.url;
				_t.url = _iO.url;
				_lastURL = _iO.url;
				_a._called_load = false;

			 } else {

				_s._wD('creating HTML5 Audio() element with URL: '+_dURL);
				_a = new Audio(_iO.url);

				_a._called_load = false;

				// android (seen in 2.3/Honeycomb) sometimes fails first .load() -> .play(), results in playback failure and ended() events?
				if (_is_android) {
				 _a._called_load = true;
				}

				if (_useGlobalHTML5Audio) {
				 _s._global_a = _a;
				}

			 }

			 _t.isHTML5 = true;

			 // store a ref on the track
			 _t._a = _a;

			 // store a ref on the audio
			 _a._t = _t;

			 _add_html5_events();
			 _a.loop = (_iO.loops>1?'loop':'');

			 if (_iO.autoLoad || _iO.autoPlay) {

				_t.load();

			 } else {

				// early HTML5 implementation (non-standard)
				_a.autobuffer = false;

				// standard
				_a.preload = 'none';

			 }

			 // boolean instead of "loop", for webkit? - spec says string. http://www.w3.org/TR/html-markup/audio.html#audio.attrs.loop
			 _a.loop = (_iO.loops > 1 ? 'loop' : '');

			 return _a;

			};

			_add_html5_events = function() {

			 if (_t._a._added_events) {
				return false;
			 }

			 var f;

			 function add(oEvt, oFn, bCapture) {
				return _t._a ? _t._a.addEventListener(oEvt, oFn, bCapture||false) : null;
			 }

			 _s._wD(_h5+'adding event listeners: '+_t.sID);
			 _t._a._added_events = true;

			 for (f in _html5_events) {
				if (_html5_events.hasOwnProperty(f)) {
				 add(f, _html5_events[f]);
				}
			 }

			 return true;

			};

			_remove_html5_events = function() {

			 // Remove event listeners

			 var f;

			 function remove(oEvt, oFn, bCapture) {
				return (_t._a ? _t._a.removeEventListener(oEvt, oFn, bCapture||false) : null);
			 }

			 _s._wD(_h5+'removing event listeners: '+_t.sID);
			 _t._a._added_events = false;

			 for (f in _html5_events) {
				if (_html5_events.hasOwnProperty(f)) {
				 remove(f, _html5_events[f]);
				}
			 }

			};

			/**
			 * Pseudo-private event internals
			 * ------------------------------
			 */

			this._onload = function(nSuccess) {


			 var fN, loadOK = !!(nSuccess);

			 // <d>
			 fN = 'SMSound._onload(): ';
			 _s._wD(fN + '"' + _t.sID + '"' + (loadOK?' loaded.':' failed to load? - ' + _t.url), (loadOK?1:2));
			 if (!loadOK && !_t.isHTML5) {
				if (_s.sandbox.noRemote === true) {
				 _s._wD(fN + _str('noNet'), 1);
				}
				if (_s.sandbox.noLocal === true) {
				 _s._wD(fN + _str('noLocal'), 1);
				}
			 }
			 // </d>

			 _t.loaded = loadOK;
			 _t.readyState = loadOK?3:2;
			 _t._onbufferchange(0);

			 if (_t._iO.onload) {
				_t._iO.onload.apply(_t, [loadOK]);
			 }

			 return true;

			};

			this._onbufferchange = function(nIsBuffering) {

			 if (_t.playState === 0) {
				// ignore if not playing
				return false;
			 }

			 if ((nIsBuffering && _t.isBuffering) || (!nIsBuffering && !_t.isBuffering)) {
				return false;
			 }

			 _t.isBuffering = (nIsBuffering === 1);
			 if (_t._iO.onbufferchange) {
				_s._wD('SMSound._onbufferchange(): ' + nIsBuffering);
				_t._iO.onbufferchange.apply(_t);
			 }

			 return true;

			};

			/**
			 * Notify Mobile Safari that user action is required
			 * to continue playing / loading the audio file.
			 */

			this._onsuspend = function() {

			 if (_t._iO.onsuspend) {
				_s._wD('SMSound._onsuspend()');
				_t._iO.onsuspend.apply(_t);
			 }

			 return true;

			};

			/**
			 * flash 9/movieStar + RTMP-only method, should fire only once at most
			 * at this point we just recreate failed sounds rather than trying to reconnect
			 */

			this._onfailure = function(msg, level, code) {

			 _t.failures++;
			 _s._wD('SMSound._onfailure(): "'+_t.sID+'" count '+_t.failures);

			 if (_t._iO.onfailure && _t.failures === 1) {
				_t._iO.onfailure(_t, msg, level, code);
			 } else {
				_s._wD('SMSound._onfailure(): ignoring');
			 }

			};

			this._onfinish = function() {

			 // store local copy before it gets trashed..
			 var _io_onfinish = _t._iO.onfinish;

			 _t._onbufferchange(0);
			 _t._resetOnPosition(0);

			 // reset some state items
			 if (_t.instanceCount) {

				_t.instanceCount--;

				if (!_t.instanceCount) {

				 // remove onPosition listeners, if any
				 _detachOnPosition();

				 // reset instance options
				 _t.playState = 0;
				 _t.paused = false;
				 _t.instanceCount = 0;
				 _t.instanceOptions = {};
				 _t._iO = {};
				 _stop_html5_timer();

				}

				if (!_t.instanceCount || _t._iO.multiShotEvents) {
				 // fire onfinish for last, or every instance
				 if (_io_onfinish) {
					_s._wD('SMSound._onfinish(): "' + _t.sID + '"');
					_io_onfinish.apply(_t);
				 }
				}

			 }

			};

			this._whileloading = function(nBytesLoaded, nBytesTotal, nDuration, nBufferLength) {

			 var _iO = _t._iO;

			 _t.bytesLoaded = nBytesLoaded;
			 _t.bytesTotal = nBytesTotal;
			 _t.duration = Math.floor(nDuration);
			 _t.bufferLength = nBufferLength;

			 if (!_iO.isMovieStar) {

				if (_iO.duration) {
				 // use options, if specified and larger
				 _t.durationEstimate = (_t.duration > _iO.duration) ? _t.duration : _iO.duration;
				} else {
				 _t.durationEstimate = parseInt((_t.bytesTotal / _t.bytesLoaded) * _t.duration, 10);

				}

				if (_t.durationEstimate === undefined) {
				 _t.durationEstimate = _t.duration;
				}

				if (_t.readyState !== 3 && _iO.whileloading) {
				 _iO.whileloading.apply(_t);
				}

			 } else {

				_t.durationEstimate = _t.duration;
				if (_t.readyState !== 3 && _iO.whileloading) {
				 _iO.whileloading.apply(_t);
				}

			 }

			};

			this._whileplaying = function(nPosition, oPeakData, oWaveformDataLeft, oWaveformDataRight, oEQData) {

			 var _iO = _t._iO,
				 eqLeft;

			 if (isNaN(nPosition) || nPosition === null) {
				// flash safety net
				return false;
			 }

			 _t.position = nPosition;
			 _t._processOnPosition();

			 if (!_t.isHTML5 && _fV > 8) {

				if (_iO.usePeakData && typeof oPeakData !== 'undefined' && oPeakData) {
				 _t.peakData = {
					left: oPeakData.leftPeak,
					right: oPeakData.rightPeak
				 };
				}

				if (_iO.useWaveformData && typeof oWaveformDataLeft !== 'undefined' && oWaveformDataLeft) {
				 _t.waveformData = {
					left: oWaveformDataLeft.split(','),
					right: oWaveformDataRight.split(',')
				 };
				}

				if (_iO.useEQData) {
				 if (typeof oEQData !== 'undefined' && oEQData && oEQData.leftEQ) {
					eqLeft = oEQData.leftEQ.split(',');
					_t.eqData = eqLeft;
					_t.eqData.left = eqLeft;
					if (typeof oEQData.rightEQ !== 'undefined' && oEQData.rightEQ) {
					 _t.eqData.right = oEQData.rightEQ.split(',');
					}
				 }
				}

			 }

			 if (_t.playState === 1) {

				// special case/hack: ensure buffering is false if loading from cache (and not yet started)
				if (!_t.isHTML5 && _fV === 8 && !_t.position && _t.isBuffering) {
				 _t._onbufferchange(0);
				}

				if (_iO.whileplaying) {
				 // flash may call after actual finish
				 _iO.whileplaying.apply(_t);
				}

			 }

			 return true;

			};

			this._onmetadata = function(oMDProps, oMDData) {

			 /**
			  * internal: flash 9 + NetStream (MovieStar/RTMP-only) feature
			  * RTMP may include song title, MovieStar content may include encoding info
			  * 
			  * @param {array} oMDProps (names)
			  * @param {array} oMDData (values)
			  */

			 _s._wD('SMSound._onmetadata(): "' + this.sID + '" metadata received.');

			 var oData = {}, i, j;

			 for (i = 0, j = oMDProps.length; i < j; i++) {
				oData[oMDProps[i]] = oMDData[i];
			 }
			 _t.metadata = oData;

			 if (_t._iO.onmetadata) {
				_t._iO.onmetadata.apply(_t);
			 }

			};

			this._onid3 = function(oID3Props, oID3Data) {

			 /**
			  * internal: flash 8 + flash 9 ID3 feature
			  * may include artist, song title etc.
			  * 
			  * @param {array} oID3Props (names)
			  * @param {array} oID3Data (values)
			  */

			 _s._wD('SMSound._onid3(): "' + this.sID + '" ID3 data received.');

			 var oData = [], i, j;

			 for (i = 0, j = oID3Props.length; i < j; i++) {
				oData[oID3Props[i]] = oID3Data[i];
			 }
			 _t.id3 = _mixin(_t.id3, oData);

			 if (_t._iO.onid3) {
				_t._iO.onid3.apply(_t);
			 }

			};

			// flash/RTMP-only

			this._onconnect = function(bSuccess) {

			 bSuccess = (bSuccess === 1);
			 _s._wD('SMSound._onconnect(): "'+_t.sID+'"'+(bSuccess?' connected.':' failed to connect? - '+_t.url), (bSuccess?1:2));
			 _t.connected = bSuccess;

			 if (bSuccess) {

				_t.failures = 0;

				if (_idCheck(_t.sID)) {
				 if (_t.getAutoPlay()) {
					// only update the play state if auto playing
					_t.play(undefined, _t.getAutoPlay());
				 } else if (_t._iO.autoLoad) {
					_t.load();
				 }
				}

				if (_t._iO.onconnect) {
				 _t._iO.onconnect.apply(_t, [bSuccess]);
				}

			 }

			};

			this._ondataerror = function(sError) {

			 // flash 9 wave/eq data handler
			 // hack: called at start, and end from flash at/after onfinish()
			 if (_t.playState > 0) {
				_s._wD('SMSound._ondataerror(): ' + sError);
				if (_t._iO.ondataerror) {
				 _t._iO.ondataerror.apply(_t);
				}
			 }

			};

		 }; // SMSound()

		 /**
		  * Private SoundManager internals
		  * ------------------------------
		  */

		 _getDocument = function() {

			return (_doc.body || _doc._docElement || _doc.getElementsByTagName('div')[0]);

		 };

		 _id = function(sID) {

			return _doc.getElementById(sID);

		 };

		 _mixin = function(oMain, oAdd) {

			// non-destructive merge
			var o1 = {}, i, o2, o;

			// clone c1
			for (i in oMain) {
			 if (oMain.hasOwnProperty(i)) {
				o1[i] = oMain[i];
			 }
			}

			o2 = (typeof oAdd === 'undefined'?_s.defaultOptions:oAdd);
			for (o in o2) {
			 if (o2.hasOwnProperty(o) && typeof o1[o] === 'undefined') {
				o1[o] = o2[o];
			 }
			}
			return o1;

		 };

		 _event = (function() {

			var old = (_win.attachEvent),
			evt = {
			 add: (old?'attachEvent':'addEventListener'),
			 remove: (old?'detachEvent':'removeEventListener')
			};

			function getArgs(oArgs) {

			 var args = _slice.call(oArgs), len = args.length;

			 if (old) {
				// prefix
				args[1] = 'on' + args[1];
				if (len > 3) {
				 // no capture
				 args.pop();
				}
			 } else if (len === 3) {
				args.push(false);
			 }

			 return args;

			}

			function apply(args, sType) {

			 var element = args.shift(),
				 method = [evt[sType]];

			 if (old) {
				element[method](args[0], args[1]);
			 } else {
				element[method].apply(element, args);
			 }

			}

			function add() {

			 apply(getArgs(arguments), 'add');

			}

			function remove() {

			 apply(getArgs(arguments), 'remove');

			}

			return {
			 'add': add,
			 'remove': remove
			};

		 }());

		 /**
		  * Internal HTML5 event handling
		  * -----------------------------
		  */

		 function _html5_event(oFn) {

			// wrap html5 event handlers so we don't call them on destroyed sounds

			return function(e) {

			 var t = this._t;

			 if (!t || !t._a) {
				// <d>
				if (t && t.sID) {
				 _s._wD(_h5+'ignoring '+e.type+': '+t.sID);
				} else {
				 _s._wD(_h5+'ignoring '+e.type);
				}
				// </d>
				return null;
			 } else {
				return oFn.call(this, e);
			 }

			};

		 }

		 _html5_events = {

			// HTML5 event-name-to-handler map

			abort: _html5_event(function() {

			 _s._wD(_h5+'abort: '+this._t.sID);

			}),

			// enough has loaded to play

			canplay: _html5_event(function() {

			 var t = this._t,
				 position1K;

			 if (t._html5_canplay) {
				// this event has already fired. ignore.
				return true;
			 }

			 t._html5_canplay = true;
			 _s._wD(_h5+'canplay: '+t.sID+', '+t.url);
			 t._onbufferchange(0);
			 position1K = (!isNaN(t.position)?t.position/1000:null);

			 // set the position if position was set before the sound loaded
			 if (t.position && this.currentTime !== position1K) {
				_s._wD(_h5+'canplay: setting position to '+position1K);
				try {
				 this.currentTime = position1K;
				} catch(ee) {
				 _s._wD(_h5+'setting position failed: '+ee.message, 2);
				}
			 }

			 // hack for HTML5 from/to case
			 if (t._iO._oncanplay) {
				t._iO._oncanplay();
			 }

			}),

			load: _html5_event(function() {

			 var t = this._t;

			 if (!t.loaded) {
				t._onbufferchange(0);
				// should be 1, and the same
				t._whileloading(t.bytesTotal, t.bytesTotal, t._get_html5_duration());
				t._onload(true);
			 }

			}),

			// TODO: Reserved for potential use
			/*
			emptied: _html5_event(function() {

			 _s._wD(_h5+'emptied: '+this._t.sID);

			}),
			*/

			ended: _html5_event(function() {

			 var t = this._t;

			 _s._wD(_h5+'ended: '+t.sID);
			 t._onfinish();

			}),

			error: _html5_event(function() {

			 _s._wD(_h5+'error: '+this.error.code);
			 // call load with error state?
			 this._t._onload(false);

			}),

			loadeddata: _html5_event(function() {

			 var t = this._t,
				 // at least 1 byte, so math works
				 bytesTotal = t.bytesTotal || 1;

			 _s._wD(_h5+'loadeddata: '+this._t.sID);

			 // safari seems to nicely report progress events, eventually totalling 100%
			 if (!t._loaded && !_isSafari) {
				t.duration = t._get_html5_duration();
				// fire whileloading() with 100% values
				t._whileloading(bytesTotal, bytesTotal, t._get_html5_duration());
				t._onload(true);
			 }

			}),

			loadedmetadata: _html5_event(function() {

			 _s._wD(_h5+'loadedmetadata: '+this._t.sID);

			}),

			loadstart: _html5_event(function() {

			 _s._wD(_h5+'loadstart: '+this._t.sID);
			 // assume buffering at first
			 this._t._onbufferchange(1);

			}),

			play: _html5_event(function() {

			 _s._wD(_h5+'play: '+this._t.sID+', '+this._t.url);
			 // once play starts, no buffering
			 this._t._onbufferchange(0);

			}),

			playing: _html5_event(function() {

			 _s._wD(_h5+'playing: '+this._t.sID);

			 // once play starts, no buffering
			 this._t._onbufferchange(0);

			}),

			progress: _html5_event(function(e) {

			 var t = this._t,
				 i, j, str, buffered = 0,
				 isProgress = (e.type === 'progress'),
				 ranges = e.target.buffered,
				 // firefox 3.6 implements e.loaded/total (bytes)
				 loaded = (e.loaded||0),
				 total = (e.total||1);

			 if (t.loaded) {
				return false;
			 }

			 if (ranges && ranges.length) {

				// if loaded is 0, try TimeRanges implementation as % of load
				// https://developer.mozilla.org/en/DOM/TimeRanges

				for (i=ranges.length-1; i >= 0; i--) {
				 buffered = (ranges.end(i) - ranges.start(i));
				}

				// linear case, buffer sum; does not account for seeking and HTTP partials / byte ranges
				loaded = buffered/e.target.duration;

				// <d>
				if (isProgress && ranges.length > 1) {
				 str = [];
				 j = ranges.length;
				 for (i=0; i<j; i++) {
					str.push(e.target.buffered.start(i) +'-'+ e.target.buffered.end(i));
				 }
				 _s._wD(_h5+'progress: timeRanges: '+str.join(', '));
				}

				if (isProgress && !isNaN(loaded)) {
				 _s._wD(_h5+'progress: '+t.sID+': ' + Math.floor(loaded*100)+'% loaded');
				}
				// </d>

			 }

			 if (!isNaN(loaded)) {

				// if progress, likely not buffering
				t._onbufferchange(0);
				t._whileloading(loaded, total, t._get_html5_duration());
				if (loaded && total && loaded === total) {
				 // in case "onload" doesn't fire (eg. gecko 1.9.2)
				 _html5_events.load.call(this, e);
				}

			 }

			}),

			ratechange: _html5_event(function() {

			 _s._wD(_h5+'ratechange: '+this._t.sID);

			}),

			suspend: _html5_event(function(e) {

			 // download paused/stopped, may have finished (eg. onload)
			 var t = this._t;

			 _s._wD(_h5+'suspend: '+t.sID);
			 _html5_events.progress.call(this, e);
			 t._onsuspend();

			}),

			stalled: _html5_event(function() {

			 _s._wD(_h5+'stalled: '+this._t.sID);

			}),

			timeupdate: _html5_event(function() {

			 this._t._onTimer();

			}),

			waiting: _html5_event(function() {

			 var t = this._t;

			 // see also: seeking
			 _s._wD(_h5+'waiting: '+t.sID);

			 // playback faster than download rate, etc.
			 t._onbufferchange(1);

			})

		 };

		 _html5OK = function(iO) {

			// Use type, if specified. If HTML5-only mode, no other options, so just give 'er
			return (!iO.serverURL && (iO.type?_html5CanPlay({type:iO.type}):_html5CanPlay({url:iO.url})||_s.html5Only));

		 };

		 _html5Unload = function(oAudio) {

			/**
			 * Internal method: Unload media, and cancel any current/pending network requests.
			 * Firefox can load an empty URL, which allegedly destroys the decoder and stops the download.
			 * https://developer.mozilla.org/En/Using_audio_and_video_in_Firefox#Stopping_the_download_of_media
			 * Other UA behaviour is unclear, so everyone else gets an about:blank-style URL.
			 */

			if (oAudio) {
			 // Firefox likes '' for unload, most other UAs don't and fail to unload.
			 oAudio.src = (_is_firefox ? '' : _emptyURL);
			}

		 };

		 _html5CanPlay = function(o) {

			/**
			 * Try to find MIME, test and return truthiness
			 * o = {
			 * url: '/path/to/an.mp3',
			 * type: 'audio/mp3'
			 * }
			 */

			if (!_s.useHTML5Audio || !_s.hasHTML5) {
			 return false;
			}

			var url = (o.url || null),
				mime = (o.type || null),
				aF = _s.audioFormats,
				result,
				offset,
				fileExt,
				item;

			function preferFlashCheck(kind) {

			 // whether flash should play a given type
			 return (_s.preferFlash && _hasFlash && !_s.ignoreFlash && (typeof _s.flash[kind] !== 'undefined' && _s.flash[kind]));

			}

			// account for known cases like audio/mp3

			if (mime && typeof _s.html5[mime] !== 'undefined') {
			 return (_s.html5[mime] && !preferFlashCheck(mime));
			}

			if (!_html5Ext) {
			 _html5Ext = [];
			 for (item in aF) {
				if (aF.hasOwnProperty(item)) {
				 _html5Ext.push(item);
				 if (aF[item].related) {
					_html5Ext = _html5Ext.concat(aF[item].related);
				 }
				}
			 }
			 _html5Ext = new RegExp('\\.('+_html5Ext.join('|')+')(\\?.*)?$','i');
			}

			// TODO: Strip URL queries, etc.
			fileExt = (url ? url.toLowerCase().match(_html5Ext) : null);

			if (!fileExt || !fileExt.length) {
			 if (!mime) {
				return false;
			 } else {
				// audio/mp3 -> mp3, result should be known
				offset = mime.indexOf(';');
				// strip "audio/X; codecs.."
				fileExt = (offset !== -1?mime.substr(0,offset):mime).substr(6);
			 }
			} else {
			 // match the raw extension name - "mp3", for example
			 fileExt = fileExt[1];
			}

			if (fileExt && typeof _s.html5[fileExt] !== 'undefined') {
			 // result known
			 return (_s.html5[fileExt] && !preferFlashCheck(fileExt));
			} else {
			 mime = 'audio/'+fileExt;
			 result = _s.html5.canPlayType({type:mime});
			 _s.html5[fileExt] = result;
			 // _s._wD('canPlayType, found result: '+result);
			 return (result && _s.html5[mime] && !preferFlashCheck(mime));
			}

		 };

		 _testHTML5 = function() {

			if (!_s.useHTML5Audio || typeof Audio === 'undefined') {
			 return false;
			}

			// double-whammy: Opera 9.64 throws WRONG_ARGUMENTS_ERR if no parameter passed to Audio(), and Webkit + iOS happily tries to load "null" as a URL. :/
			var a = (typeof Audio !== 'undefined' ? (_isOpera ? new Audio(null) : new Audio()) : null),
				item, support = {}, aF, i;

			function _cp(m) {

			 var canPlay, i, j, isOK = false;

			 if (!a || typeof a.canPlayType !== 'function') {
				return false;
			 }

			 if (m instanceof Array) {
				// iterate through all mime types, return any successes
				for (i=0, j=m.length; i<j && !isOK; i++) {
				 if (_s.html5[m[i]] || a.canPlayType(m[i]).match(_s.html5Test)) {
					isOK = true;
					_s.html5[m[i]] = true;

					// if flash can play and preferred, also mark it for use.
					_s.flash[m[i]] = !!(_s.preferFlash && _hasFlash && m[i].match(_flashMIME));

				 }
				}
				return isOK;
			 } else {
				canPlay = (a && typeof a.canPlayType === 'function' ? a.canPlayType(m) : false);
				return !!(canPlay && (canPlay.match(_s.html5Test)));
			 }

			}

			// test all registered formats + codecs

			aF = _s.audioFormats;

			for (item in aF) {
			 if (aF.hasOwnProperty(item)) {
				support[item] = _cp(aF[item].type);

				// write back generic type too, eg. audio/mp3
				support['audio/'+item] = support[item];

				// assign flash
				if (_s.preferFlash && !_s.ignoreFlash && item.match(_flashMIME)) {
				 _s.flash[item] = true;
				} else {
				 _s.flash[item] = false;
				}

				// assign result to related formats, too
				if (aF[item] && aF[item].related) {
				 for (i=aF[item].related.length-1; i >= 0; i--) {
					// eg. audio/m4a
					support['audio/'+aF[item].related[i]] = support[item];
					_s.html5[aF[item].related[i]] = support[item];
					_s.flash[aF[item].related[i]] = support[item];
				 }
				}
			 }
			}

			support.canPlayType = (a?_cp:null);
			_s.html5 = _mixin(_s.html5, support);

			return true;

		 };

		 _strings = {

			// <d>
			notReady: 'Not loaded yet - wait for soundManager.onload()/onready()',
			notOK: 'Audio support is not available.',
			domError: _smc + 'createMovie(): appendChild/innerHTML call failed. DOM not ready or other error.',
			spcWmode: _smc + 'createMovie(): Removing wmode, preventing known SWF loading issue(s)',
			swf404: _sm + ': Verify that %s is a valid path.',
			tryDebug: 'Try ' + _sm + '.debugFlash = true for more security details (output goes to SWF.)',
			checkSWF: 'See SWF output for more debug info.',
			localFail: _sm + ': Non-HTTP page (' + _doc.location.protocol + ' URL?) Review Flash player security settings for this special case:\nhttp://www.macromedia.com/support/documentation/en/flashplayer/help/settings_manager04.html\nMay need to add/allow path, eg. c:/sm2/ or /users/me/sm2/',
			waitFocus: _sm + ': Special case: Waiting for focus-related event..',
			waitImpatient: _sm + ': Getting impatient, still waiting for Flash%s...',
			waitForever: _sm + ': Waiting indefinitely for Flash (will recover if unblocked)...',
			needFunction: _sm + ': Function object expected for %s',
			badID: 'Warning: Sound ID "%s" should be a string, starting with a non-numeric character',
			currentObj: '--- ' + _sm + '._debug(): Current sound objects ---',
			waitEI: _smc + 'initMovie(): Waiting for ExternalInterface call from Flash..',
			waitOnload: _sm + ': Waiting for window.onload()',
			docLoaded: _sm + ': Document already loaded',
			onload: _smc + 'initComplete(): calling soundManager.onload()',
			onloadOK: _sm + '.onload() complete',
			init: _smc + 'init()',
			didInit: _smc + 'init(): Already called?',
			flashJS: _sm + ': Attempting to call Flash from JS..',
			secNote: 'Flash security note: Network/internet URLs will not load due to security restrictions. Access can be configured via Flash Player Global Security Settings Page: http://www.macromedia.com/support/documentation/en/flashplayer/help/settings_manager04.html',
			badRemove: 'Warning: Failed to remove flash movie.',
			noPeak: 'Warning: peakData features unsupported for movieStar formats',
			shutdown: _sm + '.disable(): Shutting down',
			queue: _sm + ': Queueing %s handler',
			smFail: _sm + ': Failed to initialise.',
			smError: 'SMSound.load(): Exception: JS-Flash communication failed, or JS error.',
			fbTimeout: 'No flash response, applying .'+_swfCSS.swfTimedout+' CSS..',
			fbLoaded: 'Flash loaded',
			fbHandler: _smc+'flashBlockHandler()',
			manURL: 'SMSound.load(): Using manually-assigned URL',
			onURL: _sm + '.load(): current URL already assigned.',
			badFV: _sm + '.flashVersion must be 8 or 9. "%s" is invalid. Reverting to %s.',
			as2loop: 'Note: Setting stream:false so looping can work (flash 8 limitation)',
			noNSLoop: 'Note: Looping not implemented for MovieStar formats',
			needfl9: 'Note: Switching to flash 9, required for MP4 formats.',
			mfTimeout: 'Setting flashLoadTimeout = 0 (infinite) for off-screen, mobile flash case',
			mfOn: 'mobileFlash::enabling on-screen flash repositioning',
			policy: 'Enabling usePolicyFile for data access'
			// </d>

		 };

		 _str = function() {

			// internal string replace helper.
			// arguments: o [,items to replace]
			// <d>

			// real array, please
			var args = _slice.call(arguments),

			// first arg
			o = args.shift(),

			str = (_strings && _strings[o]?_strings[o]:''), i, j;
			if (str && args && args.length) {
			 for (i = 0, j = args.length; i < j; i++) {
				str = str.replace('%s', args[i]);
			 }
			}

			return str;
			// </d>

		 };

		 _loopFix = function(sOpt) {

			// flash 8 requires stream = false for looping to work
			if (_fV === 8 && sOpt.loops > 1 && sOpt.stream) {
			 _wDS('as2loop');
			 sOpt.stream = false;
			}

			return sOpt;

		 };

		 _policyFix = function(sOpt, sPre) {

			if (sOpt && !sOpt.usePolicyFile && (sOpt.onid3 || sOpt.usePeakData || sOpt.useWaveformData || sOpt.useEQData)) {
			 _s._wD((sPre || '') + _str('policy'));
			 sOpt.usePolicyFile = true;
			}

			return sOpt;

		 };

		 _complain = function(sMsg) {

			// <d>
			if (typeof console !== 'undefined' && typeof console.warn !== 'undefined') {
			 console.warn(sMsg);
			} else {
			 _s._wD(sMsg);
			}
			// </d>

		 };

		 _doNothing = function() {

			return false;

		 };

		 _disableObject = function(o) {

			var oProp;

			for (oProp in o) {
			 if (o.hasOwnProperty(oProp) && typeof o[oProp] === 'function') {
				o[oProp] = _doNothing;
			 }
			}

			oProp = null;

		 };

		 _failSafely = function(bNoDisable) {

			// general failure exception handler

			if (typeof bNoDisable === 'undefined') {
			 bNoDisable = false;
			}

			if (_disabled || bNoDisable) {
			 _wDS('smFail', 2);
			 _s.disable(bNoDisable);
			}

		 };

		 _normalizeMovieURL = function(smURL) {

			var urlParams = null, url;

			if (smURL) {
			 if (smURL.match(/\.swf(\?.*)?$/i)) {
				urlParams = smURL.substr(smURL.toLowerCase().lastIndexOf('.swf?') + 4);
				if (urlParams) {
				 // assume user knows what they're doing
				 return smURL;
				}
			 } else if (smURL.lastIndexOf('/') !== smURL.length - 1) {
				// append trailing slash, if needed
				smURL += '/';
			 }
			}

			url = (smURL && smURL.lastIndexOf('/') !== - 1 ? smURL.substr(0, smURL.lastIndexOf('/') + 1) : './') + _s.movieURL;

			if (_s.noSWFCache) {
			 url += ('?ts=' + new Date().getTime());
			}

			return url;

		 };

		 _setVersionInfo = function() {

			// short-hand for internal use

			_fV = parseInt(_s.flashVersion, 10);

			if (_fV !== 8 && _fV !== 9) {
			 _s._wD(_str('badFV', _fV, _defaultFlashVersion));
			 _s.flashVersion = _fV = _defaultFlashVersion;
			}

			// debug flash movie, if applicable

			var isDebug = (_s.debugMode || _s.debugFlash?'_debug.swf':'.swf');

			if (_s.useHTML5Audio && !_s.html5Only && _s.audioFormats.mp4.required && _fV < 9) {
			 _s._wD(_str('needfl9'));
			 _s.flashVersion = _fV = 9;
			}

			_s.version = _s.versionNumber + (_s.html5Only?' (HTML5-only mode)':(_fV === 9?' (AS3/Flash 9)':' (AS2/Flash 8)'));

			// set up default options
			if (_fV > 8) {
			 // +flash 9 base options
			 _s.defaultOptions = _mixin(_s.defaultOptions, _s.flash9Options);
			 _s.features.buffering = true;
			 // +moviestar support
			 _s.defaultOptions = _mixin(_s.defaultOptions, _s.movieStarOptions);
			 _s.filePatterns.flash9 = new RegExp('\\.(mp3|' + _netStreamTypes.join('|') + ')(\\?.*)?$', 'i');
			 _s.features.movieStar = true;
			} else {
			 _s.features.movieStar = false;
			}

			// regExp for flash canPlay(), etc.
			_s.filePattern = _s.filePatterns[(_fV !== 8?'flash9':'flash8')];

			// if applicable, use _debug versions of SWFs
			_s.movieURL = (_fV === 8?'soundmanager2.swf':'soundmanager2_flash9.swf').replace('.swf', isDebug);

			_s.features.peakData = _s.features.waveformData = _s.features.eqData = (_fV > 8);

		 };

		 _setPolling = function(bPolling, bHighPerformance) {

			if (!_flash) {
			 return false;
			}

			_flash._setPolling(bPolling, bHighPerformance);

		 };

		 _initDebug = function() {

			// starts debug mode, creating output <div> for UAs without console object

			// allow force of debug mode via URL
			if (_s.debugURLParam.test(_wl)) {
			 _s.debugMode = true;
			}

			// <d>
			if (_id(_s.debugID)) {
			 return false;
			}

			var oD, oDebug, oTarget, oToggle, tmp;

			if (_s.debugMode && !_id(_s.debugID) && (!_hasConsole || !_s.useConsole || !_s.consoleOnly)) {

			 oD = _doc.createElement('div');
			 oD.id = _s.debugID + '-toggle';

			 oToggle = {
				'position': 'fixed',
				'bottom': '0px',
				'right': '0px',
				'width': '1.2em',
				'height': '1.2em',
				'lineHeight': '1.2em',
				'margin': '2px',
				'textAlign': 'center',
				'border': '1px solid #999',
				'cursor': 'pointer',
				'background': '#fff',
				'color': '#333',
				'zIndex': 10001
			 };

			 oD.appendChild(_doc.createTextNode('-'));
			 oD.onclick = _toggleDebug;
			 oD.title = 'Toggle SM2 debug console';

			 if (_ua.match(/msie 6/i)) {
				oD.style.position = 'absolute';
				oD.style.cursor = 'hand';
			 }

			 for (tmp in oToggle) {
				if (oToggle.hasOwnProperty(tmp)) {
				 oD.style[tmp] = oToggle[tmp];
				}
			 }

			 oDebug = _doc.createElement('div');
			 oDebug.id = _s.debugID;
			 oDebug.style.display = (_s.debugMode?'block':'none');

			 if (_s.debugMode && !_id(oD.id)) {
				try {
				 oTarget = _getDocument();
				 oTarget.appendChild(oD);
				} catch(e2) {
				 throw new Error(_str('domError')+' \n'+e2.toString());
				}
				oTarget.appendChild(oDebug);
			 }

			}

			oTarget = null;
			// </d>

		 };

		 _idCheck = this.getSoundById;

		 // <d>
		 _wDS = function(o, errorLevel) {

			if (!o) {
			 return '';
			} else {
			 return _s._wD(_str(o), errorLevel);
			}

		 };

		 // last-resort debugging option

		 if (_wl.indexOf('sm2-debug=alert') + 1 && _s.debugMode) {
			_s._wD = function(sText) {window.alert(sText);};
		 }

		 _toggleDebug = function() {

			var o = _id(_s.debugID),
			oT = _id(_s.debugID + '-toggle');

			if (!o) {
			 return false;
			}

			if (_debugOpen) {
			 // minimize
			 oT.innerHTML = '+';
			 o.style.display = 'none';
			} else {
			 oT.innerHTML = '-';
			 o.style.display = 'block';
			}

			_debugOpen = !_debugOpen;

		 };

		 _debugTS = function(sEventType, bSuccess, sMessage) {

			// troubleshooter debug hooks

			if (typeof sm2Debugger !== 'undefined') {
			 try {
				sm2Debugger.handleEvent(sEventType, bSuccess, sMessage);
			 } catch(e) {
				// oh well
			 }
			}

			return true;

		 };
		 // </d>

		 _getSWFCSS = function() {

			var css = [];

			if (_s.debugMode) {
			 css.push(_swfCSS.sm2Debug);
			}

			if (_s.debugFlash) {
			 css.push(_swfCSS.flashDebug);
			}

			if (_s.useHighPerformance) {
			 css.push(_swfCSS.highPerf);
			}

			return css.join(' ');

		 };

		 _flashBlockHandler = function() {

			// *possible* flash block situation.

			var name = _str('fbHandler'),
				p = _s.getMoviePercent(),
				css = _swfCSS,
				error = {type:'FLASHBLOCK'};

			if (_s.html5Only) {
			 return false;
			}

			if (!_s.ok()) {

			 if (_needsFlash) {
				// make the movie more visible, so user can fix
				_s.oMC.className = _getSWFCSS() + ' ' + css.swfDefault + ' ' + (p === null?css.swfTimedout:css.swfError);
				_s._wD(name+': '+_str('fbTimeout')+(p?' ('+_str('fbLoaded')+')':''));
			 }

			 _s.didFlashBlock = true;

			 // fire onready(), complain lightly
			 _processOnEvents({type:'ontimeout', ignoreInit:true, error:error});
			 _catchError(error);

			} else {

			 // SM2 loaded OK (or recovered)

			 // <d>
			 if (_s.didFlashBlock) {
				_s._wD(name+': Unblocked');
			 }
			 // </d>

			 if (_s.oMC) {
				_s.oMC.className = [_getSWFCSS(), css.swfDefault, css.swfLoaded + (_s.didFlashBlock?' '+css.swfUnblocked:'')].join(' ');
			 }

			}

		 };

		 _addOnEvent = function(sType, oMethod, oScope) {

			if (typeof _on_queue[sType] === 'undefined') {
			 _on_queue[sType] = [];
			}

			_on_queue[sType].push({
			 'method': oMethod,
			 'scope': (oScope || null),
			 'fired': false
			});

		 };

		 _processOnEvents = function(oOptions) {

			// assume onready, if unspecified

			if (!oOptions) {
			 oOptions = {
				type: 'onready'
			 };
			}

			if (!_didInit && oOptions && !oOptions.ignoreInit) {
			 // not ready yet.
			 return false;
			}

			if (oOptions.type === 'ontimeout' && _s.ok()) {
			 // invalid case
			 return false;
			}

			var status = {
				 success: (oOptions && oOptions.ignoreInit?_s.ok():!_disabled)
				},

				// queue specified by type, or none
				srcQueue = (oOptions && oOptions.type?_on_queue[oOptions.type]||[]:[]),

				queue = [], i, j,
				args = [status],
				canRetry = (_needsFlash && _s.useFlashBlock && !_s.ok());

			if (oOptions.error) {
			 args[0].error = oOptions.error;
			}

			for (i = 0, j = srcQueue.length; i < j; i++) {
			 if (srcQueue[i].fired !== true) {
				queue.push(srcQueue[i]);
			 }
			}

			if (queue.length) {
			 _s._wD(_sm + ': Firing ' + queue.length + ' '+oOptions.type+'() item' + (queue.length === 1?'':'s'));
			 for (i = 0, j = queue.length; i < j; i++) {
				if (queue[i].scope) {
				 queue[i].method.apply(queue[i].scope, args);
				} else {
				 queue[i].method.apply(this, args);
				}
				if (!canRetry) {
				 // flashblock case doesn't count here
				 queue[i].fired = true;
				}
			 }
			}

			return true;

		 };

		 _initUserOnload = function() {

			_win.setTimeout(function() {

			 if (_s.useFlashBlock) {
				_flashBlockHandler();
			 }

			 _processOnEvents();

			 // call user-defined "onload", scoped to window

			 if (_s.onload instanceof Function) {
				_wDS('onload', 1);
				_s.onload.apply(_win);
				_wDS('onloadOK', 1);
			 }

			 if (_s.waitForWindowLoad) {
				_event.add(_win, 'load', _initUserOnload);
			 }

			},1);

		 };

		 _detectFlash = function() {

			// hat tip: Flash Detect library (BSD, (C) 2007) by Carl "DocYes" S. Yestrau - http://featureblend.com/javascript-flash-detection-library.html / http://featureblend.com/license.txt

			if (_hasFlash !== undefined) {
			 // this work has already been done.
			 return _hasFlash;
			}

			var hasPlugin = false, n = navigator, nP = n.plugins, obj, type, types, AX = _win.ActiveXObject;

			if (nP && nP.length) {
			 type = 'application/x-shockwave-flash';
			 types = n.mimeTypes;
			 if (types && types[type] && types[type].enabledPlugin && types[type].enabledPlugin.description) {
				hasPlugin = true;
			 }
			} else if (typeof AX !== 'undefined') {
			 try {
				obj = new AX('ShockwaveFlash.ShockwaveFlash');
			 } catch(e) {
				// oh well
			 }
			 hasPlugin = (!!obj);
			}

			_hasFlash = hasPlugin;

			return hasPlugin;

		 };

		 _featureCheck = function() {

			var needsFlash, item,

				// iPhone <= 3.1 has broken HTML5 audio(), but firmware 3.2 (iPad) + iOS4 works.
				isSpecial = (_is_iDevice && !!(_ua.match(/os (1|2|3_0|3_1)/i)));

			if (isSpecial) {

			 // has Audio(), but is broken; let it load links directly.
			 _s.hasHTML5 = false;

			 // ignore flash case, however
			 _s.html5Only = true;

			 if (_s.oMC) {
				_s.oMC.style.display = 'none';
			 }

			 return false;

			}

			if (_s.useHTML5Audio) {

			 if (!_s.html5 || !_s.html5.canPlayType) {
				_s._wD('SoundManager: No HTML5 Audio() support detected.');
				_s.hasHTML5 = false;
				return true;
			 } else {
				_s.hasHTML5 = true;
			 }
			 if (_isBadSafari) {
				_s._wD(_smc+'Note: Buggy HTML5 Audio in Safari on this OS X release, see https://bugs.webkit.org/show_bug.cgi?id=32159 - '+(!_hasFlash?' would use flash fallback for MP3/MP4, but none detected.':'will use flash fallback for MP3/MP4, if available'),1);
				if (_detectFlash()) {
				 return true;
				}
			 }
			} else {

			 // flash needed (or, HTML5 needs enabling.)
			 return true;

			}

			for (item in _s.audioFormats) {
			 if (_s.audioFormats.hasOwnProperty(item)) {
				if ((_s.audioFormats[item].required && !_s.html5.canPlayType(_s.audioFormats[item].type)) || _s.flash[item] || _s.flash[_s.audioFormats[item].type]) {
				 // flash may be required, or preferred for this format
				 needsFlash = true;
				}
			 }
			}

			// sanity check..
			if (_s.ignoreFlash) {
			 needsFlash = false;
			}

			_s.html5Only = (_s.hasHTML5 && _s.useHTML5Audio && !needsFlash);

			return (!_s.html5Only);

		 };

		 _parseURL = function(url) {

			/**
			 * Internal: Finds and returns the first playable URL (or failing that, the first URL.)
			 * @param {string or array} url A single URL string, OR, an array of URL strings or {url:'/path/to/resource', type:'audio/mp3'} objects.
			 */

			var i, j, result = 0;

			if (url instanceof Array) {

			 // find the first good one
			 for (i=0, j=url.length; i<j; i++) {

				if (url[i] instanceof Object) {
				 // MIME check
				 if (_s.canPlayMIME(url[i].type)) {
					result = i;
					break;
				 }

				} else if (_s.canPlayURL(url[i])) {
				 // URL string check
				 result = i;
				 break;
				}

			 }

			 // normalize to string
			 if (url[result].url) {
				url[result] = url[result].url;
			 }

			 return url[result];

			} else {

			 // single URL case
			 return url;

			}

		 };


		 _startTimer = function(oSound) {

			/**
			 * attach a timer to this sound, and start an interval if needed
			 */

			if (!oSound._hasTimer) {

			 oSound._hasTimer = true;

			 if (!_likesHTML5 && _s.html5PollingInterval) {

				if (_h5IntervalTimer === null && _h5TimerCount === 0) {

				 _h5IntervalTimer = window.setInterval(_timerExecute, _s.html5PollingInterval);
		  
				}

				_h5TimerCount++;

			 }

			}

		 };

		 _stopTimer = function(oSound) {

			/**
			 * detach a timer
			 */

			if (oSound._hasTimer) {

			 oSound._hasTimer = false;

			 if (!_likesHTML5 && _s.html5PollingInterval) {

				// interval will stop itself at next execution.

				_h5TimerCount--;

			 }

			}

		 };

		 _timerExecute = function() {

			/**
			 * manual polling for HTML5 progress events, ie., whileplaying() (can achieve greater precision than conservative default HTML5 interval)
			 */

			var i;

			if (_h5IntervalTimer !== null && !_h5TimerCount) {

			 // no active timers, stop polling interval.

			 window.clearInterval(_h5IntervalTimer);

			 _h5IntervalTimer = null;

			 return false;

			}

			// check all HTML5 sounds with timers

			for (i = _s.soundIDs.length-1; i >= 0; i--) {

			 if (_s.sounds[_s.soundIDs[i]].isHTML5 && _s.sounds[_s.soundIDs[i]]._hasTimer) {

				_s.sounds[_s.soundIDs[i]]._onTimer();

			 }

			}

		 };

		 _catchError = function(options) {

			options = (typeof options !== 'undefined' ? options : {});

			if (_s.onerror instanceof Function) {
			 _s.onerror.apply(_win, [{type:(typeof options.type !== 'undefined' ? options.type : null)}]);
			}

			if (typeof options.fatal !== 'undefined' && options.fatal) {
			 _s.disable();
			}

		 };

		 _badSafariFix = function() {

			// special case: "bad" Safari (OS X 10.3 - 10.7) must fall back to flash for MP3/MP4
			if (!_isBadSafari || !_detectFlash()) {
			 // doesn't apply
			 return false;
			}

			var aF = _s.audioFormats, i, item;

			for (item in aF) {
			 if (aF.hasOwnProperty(item)) {
				if (item === 'mp3' || item === 'mp4') {
				 _s._wD(_sm+': Using flash fallback for '+item+' format');
				 _s.html5[item] = false;
				 // assign result to related formats, too
				 if (aF[item] && aF[item].related) {
					for (i = aF[item].related.length-1; i >= 0; i--) {
					 _s.html5[aF[item].related[i]] = false;
					}
				 }
				}
			 }
			}

		 };

		 /**
		  * Pseudo-private flash/ExternalInterface methods
		  * ----------------------------------------------
		  */

		 this._setSandboxType = function(sandboxType) {

			// <d>
			var sb = _s.sandbox;

			sb.type = sandboxType;
			sb.description = sb.types[(typeof sb.types[sandboxType] !== 'undefined'?sandboxType:'unknown')];

			_s._wD('Flash security sandbox type: ' + sb.type);

			if (sb.type === 'localWithFile') {

			 sb.noRemote = true;
			 sb.noLocal = false;
			 _wDS('secNote', 2);

			} else if (sb.type === 'localWithNetwork') {

			 sb.noRemote = false;
			 sb.noLocal = true;

			} else if (sb.type === 'localTrusted') {

			 sb.noRemote = false;
			 sb.noLocal = false;

			}
			// </d>

		 };

		 this._externalInterfaceOK = function(flashDate, swfVersion) {

			// flash callback confirming flash loaded, EI working etc.
			// flashDate = approx. timing/delay info for JS/flash bridge
			// swfVersion: SWF build string

			if (_s.swfLoaded) {
			 return false;
			}

			var e, eiTime = new Date().getTime();

			_s._wD(_smc+'externalInterfaceOK()' + (flashDate?' (~' + (eiTime - flashDate) + ' ms)':''));
			_debugTS('swf', true);
			_debugTS('flashtojs', true);
			_s.swfLoaded = true;
			_tryInitOnFocus = false;

			if (_isBadSafari) {
			 _badSafariFix();
			}

			// complain if JS + SWF build/version strings don't match, excluding +DEV builds
			// <d>
			if (!swfVersion || swfVersion.replace(/\+dev/i,'') !== _s.versionNumber.replace(/\+dev/i, '')) {

			 e = _sm + ': Fatal: JavaScript file build "' + _s.versionNumber + '" does not match Flash SWF build "' + swfVersion + '" at ' + _s.url + '. Ensure both are up-to-date.';

			 // escape flash -> JS stack so this error fires in window.
			 setTimeout(function versionMismatch() {
				throw new Error(e);
			 }, 0);

			 // exit, init will fail with timeout
			 return false;

			}
			// </d>

			if (_isIE) {
			 // IE needs a timeout OR delay until window.onload - may need TODO: investigating
			 setTimeout(_init, 100);
			} else {
			 _init();
			}

		 };

		 /**
		  * Private initialization helpers
		  * ------------------------------
		  */

		 _createMovie = function(smID, smURL) {

			if (_didAppend && _appendSuccess) {
			 // ignore if already succeeded
			 return false;
			}

			function _initMsg() {
			 _s._wD('-- SoundManager 2 ' + _s.version + (!_s.html5Only && _s.useHTML5Audio?(_s.hasHTML5?' + HTML5 audio':', no HTML5 audio support'):'') + (!_s.html5Only ? (_s.useHighPerformance?', high performance mode, ':', ') + (( _s.flashPollingInterval ? 'custom (' + _s.flashPollingInterval + 'ms)' : 'normal') + ' polling') + (_s.wmode?', wmode: ' + _s.wmode:'') + (_s.debugFlash?', flash debug mode':'') + (_s.useFlashBlock?', flashBlock mode':'') : '') + ' --', 1);
			}

			if (_s.html5Only) {

			 // 100% HTML5 mode
			 _setVersionInfo();

			 _initMsg();
			 _s.oMC = _id(_s.movieID);
			 _init();

			 // prevent multiple init attempts
			 _didAppend = true;

			 _appendSuccess = true;

			 return false;

			}

			// flash path
			var remoteURL = (smURL || _s.url),
			localURL = (_s.altURL || remoteURL),
			swfTitle = 'JS/Flash audio component (SoundManager 2)',
			oEmbed, oMovie, oTarget = _getDocument(), tmp, movieHTML, oEl, extraClass = _getSWFCSS(),
			s, x, sClass, side = null, isRTL = null,
			html = _doc.getElementsByTagName('html')[0];

			isRTL = (html && html.dir && html.dir.match(/rtl/i));
			smID = (typeof smID === 'undefined'?_s.id:smID);

			function param(name, value) {
			 return '<param name="'+name+'" value="'+value+'" />';
			}

			// safety check for legacy (change to Flash 9 URL)
			_setVersionInfo();
			_s.url = _normalizeMovieURL(_overHTTP?remoteURL:localURL);
			smURL = _s.url;

			_s.wmode = (!_s.wmode && _s.useHighPerformance ? 'transparent' : _s.wmode);

			if (_s.wmode !== null && (_ua.match(/msie 8/i) || (!_isIE && !_s.useHighPerformance)) && navigator.platform.match(/win32|win64/i)) {
			 /**
			  * extra-special case: movie doesn't load until scrolled into view when using wmode = anything but 'window' here
			  * does not apply when using high performance (position:fixed means on-screen), OR infinite flash load timeout
			  * wmode breaks IE 8 on Vista + Win7 too in some cases, as of January 2011 (?)
			  */
			 _wDS('spcWmode');
			 _s.wmode = null;
			}

			oEmbed = {
			 'name': smID,
			 'id': smID,
			 'src': smURL,
			 'quality': 'high',
			 'allowScriptAccess': _s.allowScriptAccess,
			 'bgcolor': _s.bgColor,
			 'pluginspage': _http+'www.macromedia.com/go/getflashplayer',
			 'title': swfTitle,
			 'type': 'application/x-shockwave-flash',
			 'wmode': _s.wmode,
			 // http://help.adobe.com/en_US/as3/mobile/WS4bebcd66a74275c36cfb8137124318eebc6-7ffd.html
			 'hasPriority': 'true'
			};

			if (side !== null) {
			 // don't specify width/height if null.
			 oEmbed.width = side;
			 oEmbed.height = side;
			}

			if (_s.debugFlash) {
			 oEmbed.FlashVars = 'debug=1';
			}

			if (!_s.wmode) {
			 // don't write empty attribute
			 delete oEmbed.wmode;
			}

			if (_isIE) {

			 // IE is "special".
			 oMovie = _doc.createElement('div');
			 movieHTML = [
				'<object id="' + smID + '" data="' + smURL + '" type="' + oEmbed.type + '" title="' + oEmbed.title +'" classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000" codebase="' + _http+'download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=6,0,40,0" width="' + oEmbed.width + '" height="' + oEmbed.height + '">',
				param('movie', smURL),
				param('AllowScriptAccess', _s.allowScriptAccess),
				param('quality', oEmbed.quality),
				(_s.wmode? param('wmode', _s.wmode): ''),
				param('bgcolor', _s.bgColor),
				param('hasPriority', 'true'),
				(_s.debugFlash ? param('FlashVars', oEmbed.FlashVars) : ''),
				'</object>'
			 ].join('');

			} else {

			 oMovie = _doc.createElement('embed');
			 for (tmp in oEmbed) {
				if (oEmbed.hasOwnProperty(tmp)) {
				 oMovie.setAttribute(tmp, oEmbed[tmp]);
				}
			 }

			}

			_initDebug();
			extraClass = _getSWFCSS();
			oTarget = _getDocument();

			if (oTarget) {

			 _s.oMC = (_id(_s.movieID) || _doc.createElement('div'));

			 if (!_s.oMC.id) {

				_s.oMC.id = _s.movieID;
				_s.oMC.className = _swfCSS.swfDefault + ' ' + extraClass;
				s = null;
				oEl = null;

				if (!_s.useFlashBlock) {
				 if (_s.useHighPerformance) {
					// on-screen at all times
					s = {
					 'position': 'fixed',
					 'width': '8px',
					 'height': '8px',
					 // >= 6px for flash to run fast, >= 8px to start up under Firefox/win32 in some cases. odd? yes.
					 'bottom': '0px',
					 'left': '0px',
					 'overflow': 'hidden'
					};
				 } else {
					// hide off-screen, lower priority
					s = {
					 'position': 'absolute',
					 'width': '6px',
					 'height': '6px',
					 'top': '-9999px',
					 'left': '-9999px'
					};
					if (isRTL) {
					 s.left = Math.abs(parseInt(s.left,10))+'px';
					}
				 }
				}

				if (_isWebkit) {
				 // soundcloud-reported render/crash fix, safari 5
				 _s.oMC.style.zIndex = 10000;
				}

				if (!_s.debugFlash) {
				 for (x in s) {
					if (s.hasOwnProperty(x)) {
					 _s.oMC.style[x] = s[x];
					}
				 }
				}

				try {
				 if (!_isIE) {
					_s.oMC.appendChild(oMovie);
				 }
				 oTarget.appendChild(_s.oMC);
				 if (_isIE) {
					oEl = _s.oMC.appendChild(_doc.createElement('div'));
					oEl.className = _swfCSS.swfBox;
					oEl.innerHTML = movieHTML;
				 }
				 _appendSuccess = true;
				} catch(e) {
				 throw new Error(_str('domError')+' \n'+e.toString());
				}

			 } else {

				// SM2 container is already in the document (eg. flashblock use case)
				sClass = _s.oMC.className;
				_s.oMC.className = (sClass?sClass+' ':_swfCSS.swfDefault) + (extraClass?' '+extraClass:'');
				_s.oMC.appendChild(oMovie);
				if (_isIE) {
				 oEl = _s.oMC.appendChild(_doc.createElement('div'));
				 oEl.className = _swfCSS.swfBox;
				 oEl.innerHTML = movieHTML;
				}
				_appendSuccess = true;

			 }

			}

			_didAppend = true;
			_initMsg();
			_s._wD(_smc+'createMovie(): Trying to load ' + smURL + (!_overHTTP && _s.altURL?' (alternate URL)':''), 1);

			return true;

		 };

		 _initMovie = function() {

			if (_s.html5Only) {
			 _createMovie();
			 return false;
			}

			// attempt to get, or create, movie
			// may already exist
			if (_flash) {
			 return false;
			}

			// inline markup case
			_flash = _s.getMovie(_s.id);

			if (!_flash) {
			 if (!_oRemoved) {
				// try to create
				_createMovie(_s.id, _s.url);
			 } else {
				// try to re-append removed movie after reboot()
				if (!_isIE) {
				 _s.oMC.appendChild(_oRemoved);
				} else {
				 _s.oMC.innerHTML = _oRemovedHTML;
				}
				_oRemoved = null;
				_didAppend = true;
			 }
			 _flash = _s.getMovie(_s.id);
			}

			// <d>
			if (_flash) {
			 _wDS('waitEI');
			}
			// </d>

			if (_s.oninitmovie instanceof Function) {
			 setTimeout(_s.oninitmovie, 1);
			}

			return true;

		 };

		 _delayWaitForEI = function() {

			setTimeout(_waitForEI, 1000);

		 };

		 _waitForEI = function() {

			if (_waitingForEI) {
			 return false;
			}

			_waitingForEI = true;
			_event.remove(_win, 'load', _delayWaitForEI);

			if (_tryInitOnFocus && !_isFocused) {
			 // giant Safari 3.1 hack - assume mousemove = focus given lack of focus event
			 _wDS('waitFocus');
			 return false;
			}

			var p;
			if (!_didInit) {
			 p = _s.getMoviePercent();
			 _s._wD(_str('waitImpatient', (p === 100?' (SWF loaded)':(p > 0?' (SWF ' + p + '% loaded)':''))));
			}

			setTimeout(function() {

			 p = _s.getMoviePercent();

			 // <d>
			 if (!_didInit) {
				_s._wD(_sm + ': No Flash response within expected time.\nLikely causes: ' + (p === 0?'Loading ' + _s.movieURL + ' may have failed (and/or Flash ' + _fV + '+ not present?), ':'') + 'Flash blocked or JS-Flash security error.' + (_s.debugFlash?' ' + _str('checkSWF'):''), 2);
				if (!_overHTTP && p) {
				 _wDS('localFail', 2);
				 if (!_s.debugFlash) {
					_wDS('tryDebug', 2);
				 }
				}
				if (p === 0) {
				 // if 0 (not null), probably a 404.
				 _s._wD(_str('swf404', _s.url));
				}
				_debugTS('flashtojs', false, ': Timed out' + _overHTTP?' (Check flash security or flash blockers)':' (No plugin/missing SWF?)');
			 }
			 // </d>

			 // give up / time-out, depending

			 if (!_didInit && _okToDisable) {
				if (p === null) {
				 // SWF failed. Maybe blocked.
				 if (_s.useFlashBlock || _s.flashLoadTimeout === 0) {
					if (_s.useFlashBlock) {
					 _flashBlockHandler();
					}
					_wDS('waitForever');
				 } else {
					// old SM2 behaviour, simply fail
					_failSafely(true);
				 }
				} else {
				 // flash loaded? Shouldn't be a blocking issue, then.
				 if (_s.flashLoadTimeout === 0) {
					 _wDS('waitForever');
				 } else {
					_failSafely(true);
				 }
				}
			 }

			}, _s.flashLoadTimeout);

		 };

		 _handleFocus = function() {

			function cleanup() {
			 _event.remove(_win, 'focus', _handleFocus);
			 _event.remove(_win, 'load', _handleFocus);
			}

			if (_isFocused || !_tryInitOnFocus) {
			 cleanup();
			 return true;
			}

			_okToDisable = true;
			_isFocused = true;
			_s._wD(_smc+'handleFocus()');

			if (_isSafari && _tryInitOnFocus) {
			 _event.remove(_win, 'mousemove', _handleFocus);
			}

			// allow init to restart
			_waitingForEI = false;

			cleanup();
			return true;

		 };

		 _showSupport = function() {

			var item, tests = [];

			if (_s.useHTML5Audio && _s.hasHTML5) {
			 for (item in _s.audioFormats) {
				if (_s.audioFormats.hasOwnProperty(item)) {
				 tests.push(item + ': ' + _s.html5[item] + (!_s.html5[item] && _hasFlash && _s.flash[item] ? ' (using flash)' : (_s.preferFlash && _s.flash[item] && _hasFlash ? ' (preferring flash)': (!_s.html5[item] ? ' (' + (_s.audioFormats[item].required ? 'required, ':'') + 'and no flash support)' : ''))));
				}
			 }
			 _s._wD('-- SoundManager 2: HTML5 support tests ('+_s.html5Test+'): '+tests.join(', ')+' --',1);
			}

		 };

		 _initComplete = function(bNoDisable) {

			if (_didInit) {
			 return false;
			}

			if (_s.html5Only) {
			 // all good.
			 _s._wD('-- SoundManager 2: loaded --');
			 _didInit = true;
			 _initUserOnload();
			 _debugTS('onload', true);
			 return true;
			}

			var wasTimeout = (_s.useFlashBlock && _s.flashLoadTimeout && !_s.getMoviePercent()),
				error;

			if (!wasTimeout) {
			 _didInit = true;
			 if (_disabled) {
				error = {type: (!_hasFlash && _needsFlash ? 'NO_FLASH' : 'INIT_TIMEOUT')};
			 }
			}

			_s._wD('-- SoundManager 2 ' + (_disabled?'failed to load':'loaded') + ' (' + (_disabled?'security/load error':'OK') + ') --', 1);

			if (_disabled || bNoDisable) {
			 if (_s.useFlashBlock && _s.oMC) {
				_s.oMC.className = _getSWFCSS() + ' ' + (_s.getMoviePercent() === null?_swfCSS.swfTimedout:_swfCSS.swfError);
			 }
			 _processOnEvents({type:'ontimeout', error:error});
			 _debugTS('onload', false);
			 _catchError(error);
			 return false;
			} else {
			 _debugTS('onload', true);
			}

			if (_s.waitForWindowLoad && !_windowLoaded) {
			 _wDS('waitOnload');
			 _event.add(_win, 'load', _initUserOnload);
			 return false;
			} else {
			 // <d>
			 if (_s.waitForWindowLoad && _windowLoaded) {
				_wDS('docLoaded');
			 }
			 // </d>
			 _initUserOnload();
			}

			return true;

		 };

		 _init = function() {

			_wDS('init');

			// called after onload()

			if (_didInit) {
			 _wDS('didInit');
			 return false;
			}

			function _cleanup() {
			 _event.remove(_win, 'load', _s.beginDelayedInit);
			}

			if (_s.html5Only) {
			 if (!_didInit) {
				// we don't need no steenking flash!
				_cleanup();
				_s.enabled = true;
				_initComplete();
			 }
			 return true;
			}

			// flash path
			_initMovie();

			try {

			 _wDS('flashJS');

			 // attempt to talk to Flash
			 _flash._externalInterfaceTest(false);

			 // apply user-specified polling interval, OR, if "high performance" set, faster vs. default polling
			 // (determines frequency of whileloading/whileplaying callbacks, effectively driving UI framerates)
			 _setPolling(true, (_s.flashPollingInterval || (_s.useHighPerformance ? 10 : 50)));

			 if (!_s.debugMode) {
				// stop the SWF from making debug output calls to JS
				_flash._disableDebug();
			 }

			 _s.enabled = true;
			 _debugTS('jstoflash', true);

			 if (!_s.html5Only) {
				// prevent browser from showing cached page state (or rather, restoring "suspended" page state) via back button, because flash may be dead
				// http://www.webkit.org/blog/516/webkit-page-cache-ii-the-unload-event/
				_event.add(_win, 'unload', _doNothing);
			 }

			} catch(e) {

			 _s._wD('js/flash exception: ' + e.toString());
			 _debugTS('jstoflash', false);
			 _catchError({type:'JS_TO_FLASH_EXCEPTION', fatal:true});
			 // don't disable, for reboot()
			 _failSafely(true);
			 _initComplete();

			 return false;

			}

			_initComplete();

			// disconnect events
			_cleanup();

			return true;

		 };

		 _domContentLoaded = function() {

			if (_didDCLoaded) {
			 return false;
			}

			_didDCLoaded = true;
			_initDebug();

			/**
			 * Temporary feature: allow force of HTML5 via URL params: sm2-usehtml5audio=0 or 1
			 * Ditto for sm2-preferFlash, too.
			 */
			// <d>
			(function(){

			 var a = 'sm2-usehtml5audio=', l = _wl.toLowerCase(), b = null,
			 a2 = 'sm2-preferflash=', b2 = null, hasCon = (typeof console !== 'undefined' && typeof console.log !== 'undefined');

			 if (l.indexOf(a) !== -1) {
				b = (l.charAt(l.indexOf(a)+a.length) === '1');
				if (hasCon) {
				 console.log((b?'Enabling ':'Disabling ')+'useHTML5Audio via URL parameter');
				}
				_s.useHTML5Audio = b;
			 }

			 if (l.indexOf(a2) !== -1) {
				b2 = (l.charAt(l.indexOf(a2)+a2.length) === '1');
				if (hasCon) {
				 console.log((b2?'Enabling ':'Disabling ')+'preferFlash via URL parameter');
				}
				_s.preferFlash = b2;
			 }

			}());
			// </d>

			if (!_hasFlash && _s.hasHTML5) {
			 _s._wD('SoundManager: No Flash detected'+(!_s.useHTML5Audio?', enabling HTML5.':'. Trying HTML5-only mode.'));
			 _s.useHTML5Audio = true;
			 // make sure we aren't preferring flash, either
			 // TODO: preferFlash should not matter if flash is not installed. Currently, stuff breaks without the below tweak.
			 _s.preferFlash = false;
			}

			_testHTML5();
			_s.html5.usingFlash = _featureCheck();
			_needsFlash = _s.html5.usingFlash;
			_showSupport();

			if (!_hasFlash && _needsFlash) {
			 _s._wD('SoundManager: Fatal error: Flash is needed to play some required formats, but is not available.');
			 // TODO: Fatal here vs. timeout approach, etc.
			 // hack: fail sooner.
			 _s.flashLoadTimeout = 1;
			}

			if (_doc.removeEventListener) {
			 _doc.removeEventListener('DOMContentLoaded', _domContentLoaded, false);
			}

			_initMovie();
			return true;

		 };

		 _domContentLoadedIE = function() {

			if (_doc.readyState === 'complete') {
			 _domContentLoaded();
			 _doc.detachEvent('onreadystatechange', _domContentLoadedIE);
			}

			return true;

		 };

		 _winOnLoad = function() {
			// catch edge case of _initComplete() firing after window.load()
			_windowLoaded = true;
			_event.remove(_win, 'load', _winOnLoad);
		 };

		 // sniff up-front
		 _detectFlash();

		 // focus and window load, init (primarily flash-driven)
		 _event.add(_win, 'focus', _handleFocus);
		 _event.add(_win, 'load', _handleFocus);
		 _event.add(_win, 'load', _delayWaitForEI);
		 _event.add(_win, 'load', _winOnLoad);
		 
		 if (_isSafari && _tryInitOnFocus) {
			// massive Safari 3.1 focus detection hack
			_event.add(_win, 'mousemove', _handleFocus);
		 }
		 
		 /*
		 if (_doc.addEventListener) {

			_doc.addEventListener('DOMContentLoaded', _domContentLoaded, false);

		 } else if (_doc.attachEvent) {

			_doc.attachEvent('onreadystatechange', _domContentLoadedIE);

		 } else {

			// no add/attachevent support - safe to assume no JS -> Flash either
			_debugTS('onload', false);
			_catchError({type:'NO_DOM2_EVENTS', fatal:true});

		 }

		 if (_doc.readyState === 'complete') {
			// DOMReady has already happened.
			setTimeout(_domContentLoaded,100);
		 }
		 */
		 
		 _domContentLoaded();
		 
		} // SoundManager()

		// SM2_DEFER details: http://www.schillmania.com/projects/soundmanager2/doc/getstarted/#lazy-loading

		if (typeof SM2_DEFER === 'undefined' || !SM2_DEFER) {
		 soundManager = new SoundManager();
		}

		/**
		 * SoundManager public interfaces
		 * ------------------------------
		 */

		window.SoundManager = SoundManager; // constructor
		window.soundManager = soundManager; // public API, flash callbacks etc.

	}
	
	
	
	
	
	
	
	
	
	
	
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/appJS/resources/public/application.util.js
*/

	
	Application.util = {
		
		init: function()
		{
			// Browser information
			this.browserInformation.init();
			
			// Storage facility
			this.storage.init();
			
			if(Application.util.browserInformation.browser == "Explorer")
			{
				// XML serialization
				Application.util.serialize.xml = Application.util.serialize.IE.xml;
				
				//. HTML Node remover
				Application.util.html.removeNode = Application.util.html.removeNodeIE;
				
				// CSS manipulation
				Application.util.style.getCurrent = Application.util.style.IE.getCurrent;
				Application.util.style.getPos = Application.util.style.IE.getPos;
				Application.util.style.getRule = Application.util.style.IE.getRule;
				Application.util.style.getMatchingRules = Application.util.style.IE.getMatchingRules;
				Application.util.style.getWindowSize = Application.util.style.IE.getWindowSize;
				
				// XSLT
				Application.util.xslt.disableOutputEscaping.correct = Application.util.xslt.disableOutputEscaping.correctIE;
				Application.util.xslt.disableOutputEscaping.correctObject = Application.util.xslt.disableOutputEscaping.correctObjectIE;
				Application.util.xslt.xPath.search = Application.util.xslt.xPath.IE;
				Application.util.xslt.transform.fromFile = Application.util.xslt.transform.IE.fromFile;
				Application.util.xslt.transform.fromXML = Application.util.xslt.transform.IE.fromXML;
				
				// Text selection
				Application.util.selectText.range = Application.util.selectText.IE.range;
				
				// Screen
				Application.util.screen.getSize = Application.util.screen.IE.getSize;
			}
			else
			{
				// XML serialization
				Application.util.serialize.xml = Application.util.serialize.FF.xml;
				
				//. HTML Node remover
				Application.util.html.removeNode = Application.util.html.removeNodeFF;
				
				// CSS manipulation
				Application.util.style.getCurrent = Application.util.style.FF.getCurrent;
				Application.util.style.getPos = Application.util.style.FF.getPos;
				Application.util.style.getRule = Application.util.style.FF.getRule;
				Application.util.style.getMatchingRules = Application.util.style.FF.getMatchingRules;
				Application.util.style.getWindowSize = Application.util.style.FF.getWindowSize;
				
				// XSLT
				Application.util.xslt.disableOutputEscaping.correct = Application.util.xslt.disableOutputEscaping.correctFF;
				Application.util.xslt.disableOutputEscaping.correctObject = Application.util.xslt.disableOutputEscaping.correctObjectFF;
				Application.util.xslt.xPath.search = Application.util.xslt.xPath.FF;
				Application.util.xslt.transform.fromFile = Application.util.xslt.transform.FF.fromFile;
				Application.util.xslt.transform.fromXML = Application.util.xslt.transform.FF.fromXML;
				
				// Text selection
				Application.util.selectText.range = Application.util.selectText.FF.range;
				
				// Screen
				Application.util.screen.getSize = Application.util.screen.FF.getSize;
			}
			
			// URL information
			this.urlInformation.init();
			
			// Default Objects Enhancements
			this.objectsEnhancements.init();
		},
		
		/*
			-------------------------
			Local storage manipulation
			-------------------------
		*/
		
		storage:
		{
			init: function()
			{
				Application.util.storage.cookie.set = Application.util.storage.cookie.add;
			},
			
			cookie:
			{
				set: null,
				
				add: function( args )
				{
					if( typeof args != "object" || !args.name || !args.value )
					{
						return false;
					}
					
					// set time, it's in milliseconds
					var today = new Date();
					today.setTime( today.getTime() );
					
					if ( args.expiresMinutes )
					{
						var expires_date = new Date( today.getTime() + ( args.expiresMinutes * 1000 * 60 ) );
					}
					else
					{
						var expires_date = new Date( today.getTime() + 31536000000 );	// 1 year
					}
					
					document.cookie = args.name + "=" + escape( args.value ) + ";expires=" + expires_date.toGMTString() +
					( ( args.path ) ? ";path=" + args.path : "" ) +
					( ( args.domain ) ? ";domain=" + args.domain : "" ) +
					( ( args.secure ) ? ";secure" : "" );
					
//					Application.debug.add( args.name + " " + args.value );
					
					return true;
				},
				
				get: function( args )
				{
					if( typeof args != "object" || !args.name )
					{
						return false;
					}
					
					// first we'll split this cookie up into name/value pairs
					// note: document.cookie only returns name=value, not the other components
					var a_all_cookies = document.cookie.split( ';' );
					var cookie_value = null;
					
					for ( var i = 0; i < a_all_cookies.length; i++ )
					{
						// now we'll split apart each name=value pair
						var a_temp_cookie = a_all_cookies[i].split( '=' );
						
						// and trim left/right whitespace while we're at it
						var cookie_name = a_temp_cookie[0].replace(/^\s+|\s+$/g, '');

						// if the extracted name matches passed args.name
						if ( cookie_name != args.name )
						{
							continue;
						}
						
						// we need to handle case where cookie has no value but exists (no = sign, that is):
						if ( a_temp_cookie.length > 1 )
						{
							cookie_value = unescape( a_temp_cookie[1].replace(/^\s+|\s+$/g, '') );
						}
						
						// note that in cases where cookie is initialized but no value, null is returned
						return cookie_value;
					}
					
					return false;
				},
				
				del: function( args )
				{
					if( typeof args != "object" || !args.name )
					{
						return false;
					}
					
					if(
						!Application.util.storage.cookie.get({
																name: args.name
															})
					)
					{
						return false;
					}
					
					Application.util.storage.cookie.add({
															name: args.name,
															expiresMinutes: -1
														});
					
					return true;
				}
			},
			
			gears:
			{
			
			},
			
			flash:
			{
			
			}
		},
		
		/*
			-----------
			XML to Text
			-----------
		*/
		
		serialize:
		{
			xml: null,
			
			init: function()
			{
				
			},
			
			IE:
			{
				xml: function(xmlNode)
				{
					if( xmlNode == null )
					{
						return false;
					}
					
					return xmlNode.xml;
				}
			},
			
			FF:
			{
				xml: function(xmlNode)
				{
					if( xmlNode == null )
					{
						return false;
					}
					
					return ( new XMLSerializer() ).serializeToString(xmlNode);
				}
			}
		},
		
		/*
			-----------
			Select Text
			-----------
		*/
		
		selectText:
		{
			range: null,
			
			init: function()
			{
				
			},
			
			IE:
			{
				range: function(element, start, end)
				{
					var sel = element.createTextRange();
					sel.collapse(true);
					sel.moveStart("character", start);
					sel.moveEnd("character", end);
					sel.select();
				}
			},
			
			FF:
			{
				range: function(element, start, end)
				{
					element.selectionStart = start;
					element.selectionEnd = end;
				}
			}
		},
		
		/*
			---------
			Style Lib
			---------
		*/
		
		style:
		{
			getCurrent: null,
			getPos: null,
			getRule: null,
			getMatchingRules: null,
			
			init: function()
			{
				
			},
			
			IE:
			{
				getWindowSize: function()
				{
					return {
							width: document.documentElement.clientWidth,
							height: document.documentElement.clientHeight
						};
				},
				
				getCurrent: function(block, property)
				{
					return block.currentStyle[property];
				},
				
				getPos: function( obj )
				{
					var curleft = 0,
							curtop = 0;
					
					if (!obj.offsetParent)
					{
						return false;
					}
					
					do
					{
						curleft += obj.offsetLeft;
						curtop += obj.offsetTop;
					} while (obj = obj.offsetParent);
					
					return { left: curleft, top: curtop };
				},
				
				getMatchingRules: function( ruleName )
				{
					var rules = document.styleSheets[0].rules;
					var matchingRules = [];
					
					ruleName = ruleName.toLowerCase();
					
					for (i=rules.length-1;i>=0;i--)
					{
						if(rules.item(i).selectorText.toLowerCase().indexOf( ruleName ) == -1)
						{
							continue;
						}
						
						matchingRules[ matchingRules.length ] = rules[i];
					}
					
					return matchingRules;
				},
				
				getRule: function( ruleName )
				{
					var rules = document.styleSheets[0].rules;
					ruleName = ruleName.toLowerCase();
					
					for (i=rules.length-1;i>=0;i--)
					{
						if(rules[i].selectorText.toLowerCase() == ruleName)
						{
							continue;
						}
						
						return rules[i];
					}
					
					return false;
				}
			},
			
			FF:
			{
				getWindowSize: function()
				{
					return {
							width: window.innerWidth,
							height: window.innerHeight
						};
				},
				
				getCurrent: function(block, property)
				{
					return document.defaultView.getComputedStyle(block, null).getPropertyValue(property);
				},
				
				getPos: function( obj )
				{
					var curleft = 0,
							curtop = 0;
					
					if( !obj.offsetParent )
					{
						return { left: obj.offsetLeft, top: obj.offsetTop };
					}
					
					do
					{
						curleft += obj.offsetLeft;
						curtop += obj.offsetTop;
					} while (obj = obj.offsetParent);
					
					return { left: curleft, top: curtop };
				},
				
				getMatchingRules: function( ruleName )
				{
					var rules = document.styleSheets[0].cssRules;
					var matchingRules = [];
					
					for (i=rules.length-1;i>=0;i--)
					{
						if(rules.item(i).selectorText.indexOf( ruleName ) == -1)
						{
							continue;
						}
						
						matchingRules[ matchingRules.length ] = rules[i];
					}
					
					return matchingRules;
				},
				
				getRule: function( ruleName )
				{
					var rules = document.styleSheets[0].cssRules;
					
					for (i=rules.length-1;i>=0;i--)
					{
						if(rules[i].selectorText == ruleName)
						{
							continue;
						}
						
						return rules[i];
					}
					
					return false;
				}
			}
		},
		
		/*
			------------------
			BrowserInformation
			------------------
		*/
		
		browserInformation:
		{
			init: function ()
			{
				this.browser = this.searchString(this.dataBrowser) || "An unknown browser";
				this.version = this.searchVersion(navigator.userAgent)
					|| this.searchVersion(navigator.appVersion)
					|| "an unknown version";
				this.OS = this.searchString(this.dataOS) || "an unknown OS";
			},
			
			searchString: function (data)
			{
				for (var i=0;i<data.length;i++)
				{
					var dataString = data[i].string;
					var dataProp = data[i].prop;
					this.versionSearchString = data[i].versionSearch || data[i].identity;
					if (dataString)
					{
						if (dataString.indexOf(data[i].subString) != -1)
						{
							return data[i].identity;
						}
					}
					else if (dataProp)
					{
						return data[i].identity;
					}
				}
			},
			
			searchVersion: function (dataString)
			{
				var index = dataString.indexOf(this.versionSearchString);
				if (index == -1) return;
				return parseFloat(dataString.substring( index + this.versionSearchString.length+1));
			},
			
			dataBrowser: [
				{
					string: navigator.userAgent,
					subString: "Chrome",
					identity: "Chrome"
				},
				{ 	string: navigator.userAgent,
					subString: "OmniWeb",
					versionSearch: "OmniWeb/",
					identity: "OmniWeb"
				},
				{
					string: navigator.vendor,
					subString: "Apple",
					identity: "Safari",
					versionSearch: "Version"
				},
				{
					prop: window.opera,
					identity: "Opera",
					versionSearch: "Version"
				},
				{
					string: navigator.vendor,
					subString: "iCab",
					identity: "iCab"
				},
				{
					string: navigator.vendor,
					subString: "KDE",
					identity: "Konqueror"
				},
				{
					string: navigator.userAgent,
					subString: "Firefox",
					identity: "Firefox"
				},
				{
					string: navigator.vendor,
					subString: "Camino",
					identity: "Camino"
				},
				{		// for newer Netscapes (6+)
					string: navigator.userAgent,
					subString: "Netscape",
					identity: "Netscape"
				},
				{
					string: navigator.userAgent,
					subString: "MSIE",
					identity: "Explorer",
					versionSearch: "MSIE"
				},
				{
					string: navigator.userAgent,
					subString: "Gecko",
					identity: "Mozilla",
					versionSearch: "rv"
				},
				{ 		// for older Netscapes (4-)
					string: navigator.userAgent,
					subString: "Mozilla",
					identity: "Netscape",
					versionSearch: "Mozilla"
				}
			],
			dataOS : [
				{
					string: navigator.platform,
					subString: "Win",
					identity: "Windows"
				},
				{
					string: navigator.platform,
					subString: "Mac",
					identity: "Mac"
				},
				{
					   string: navigator.userAgent,
					   subString: "iPhone",
					   identity: "iPhone/iPod"
				},
				{
					   string: navigator.userAgent,
					   subString: "iPad",
					   identity: "iPad"
				},
				{
					string: navigator.platform,
					subString: "Linux",
					identity: "Linux"
				}
			]
		},
		
		/*
			--------------------
			XSL Transformations
			--------------------
		*/
		
		xslt:
		{
			init: function()
			{
				
			},
			
			xPath:
			{
				search: null,
				
				IE: function( xmlObject, expression )
				{
					return xmlObject.selectNodes( expression );
				},
				
				FF: function( xmlObject, expression )
				{
					var result = [];
					var i = -1;
					
					var nodes = xmlObject.evaluate( expression, xmlObject, null, XPathResult.ANY_TYPE, null );
					
					result[ ++i ] = nodes.iterateNext();
					
					while( result[ i ] )
					{
						result[ ++i ] = nodes.iterateNext();
					}
					
					result[ i ] = null;
					
					return result;
				}
			},
			
			transform:
			{
				fromFile: null,
				fromXML: null,
				
				xslCache: [],
				
				IE:
				{
					fromXML: function( args )
					{
						if(
							typeof args != "object" ||
							!args.xmlString ||
							!args.xslFile
						)
						{
							return false;
						}
						
						// Default append to the body
						args.targetNode = args.targetNode ? args.targetNode : document.body;
						
						var xmlEl = new ActiveXObject("Microsoft.XMLDOM");
						xmlEl.async = "false";
						xmlEl.loadXML( args.xmlString );
						
						// Load XSL File
						
						if( Application.util.xslt.transform.xslCache[ args.xslFile ] )
						{
							var htmlResult = xmlEl.transformNode( Application.util.xslt.transform.xslCache[ args.xslFile ] );
							
							var newNode = document.createElement("div");
							newNode.innerHTML = htmlResult;
							
							args.targetNode.appendChild( newNode.childNodes[0] );
							
							if( args.successFunction )
							{
								var childNodesCollection = args.targetNode.childNodes;
								
								args.successFunction( childNodesCollection[ childNodesCollection.length - 1 ] );
							}
						}
						else
						{
							new Application.connect.ajax({
															url: args.xslFile,
															successFunction: function( xslEl )
																					{
																						// Cache the xsl file
																						Application.util.xslt.transform.xslCache[ args.xslFile ] = xslEl;
																						
																						// Perform the transformation
																						var htmlResult = xmlEl.transformNode( xslEl );
																						
																						var newNode = document.createElement("div");
																						newNode.innerHTML = htmlResult;
																						
																						args.targetNode.appendChild( newNode.childNodes[0] );
																						
																						// Exec post transformation success function
																						if( args.successFunction )
																						{
																							var childNodesCollection = args.targetNode.childNodes;
																							
																							args.successFunction( childNodesCollection[ childNodesCollection.length - 1 ] );
																						}
																					}
														});
						}
					},
					
					fromFile: function( args )
					{
						if(
							typeof args != "object" ||
							!args.xmlFile ||
							!args.xslFile
						)
						{
							return false;
						}
						
						// Default append to the body
						args.targetNode = args.targetNode ? args.targetNode : document.body;
						
						// Load XML File
						
						new Application.connect.ajax({
														url: args.xmlFile,
														successFunction: function( xmlEl )
																				{
																					// Load XSL File
																					
																					if( Application.util.xslt.transform.xslCache[ args.xslFile ] )
																					{
																						var htmlResult = xmlEl.transformNode( Application.util.xslt.transform.xslCache[ args.xslFile ] );
																						
																						var newNode = document.createElement("div");
																						newNode.innerHTML = htmlResult;
																						
																						args.targetNode.appendChild( newNode.childNodes[0] );
																						
																						if( args.successFunction )
																						{
																							var childNodesCollection = args.targetNode.childNodes;
																							
																							args.successFunction( childNodesCollection[ childNodesCollection.length - 1 ] );
																						}
																					}
																					else
																					{
																						new Application.connect.ajax({
																														url: args.xslFile,
																														successFunction: function( xslEl )
																																				{
																																					// Cache the xsl file
																																					Application.util.xslt.transform.xslCache[ args.xslFile ] = xslEl;
																																					
																																					// Perform the transformation
																																					var htmlResult = xmlEl.transformNode( xslEl );
																																					
																																					var newNode = document.createElement("div");
																																					newNode.innerHTML = htmlResult;
																																					
																																					args.targetNode.appendChild( newNode.childNodes[0] );
																																					
																																					// Exec post transformation success function
																																					if( args.successFunction )
																																					{
																																						var childNodesCollection = args.targetNode.childNodes;
																																						
																																						args.successFunction( childNodesCollection[ childNodesCollection.length - 1 ] );
																																					}
																																				}
																													});
																					}
																				}
												});
					}
				},
				
				FF:
				{
					fromXML: function( args )
					{
						if(
							typeof args != "object" ||
							!args.xmlString ||
							!args.xslFile
						)
						{
							return false;
						}
						
						// Default append to the body
						args.targetNode = args.targetNode ? args.targetNode : document.body;
						
						var xmlEl = ( new DOMParser() ).parseFromString(args.xmlString, "text/xml");
						
						if( !xmlEl )
						{
							return false;
						}
						
						// Load XSL File
						
						if( Application.util.xslt.transform.xslCache[ args.xslFile ] )
						{
							// Perform the transformation
							
							var xsltProcessor = new XSLTProcessor();
							xsltProcessor.importStylesheet( Application.util.xslt.transform.xslCache[ args.xslFile ] );
							
							var fragment = xsltProcessor.transformToFragment(xmlEl, document);
							
							args.targetNode.appendChild( fragment );
							
							// Exec post transformation success function
							if( args.successFunction )
							{
								var childNodesCollection = args.targetNode.childNodes;
								
								args.successFunction( childNodesCollection[ childNodesCollection.length - 1 ] );
							}
						}
						else
						{
							new Application.connect.ajax({
															url: args.xslFile,
															successFunction: function( xslEl )
																					{
																						// Cache the xsl file
																						Application.util.xslt.transform.xslCache[ args.xslFile ] = xslEl;
																						
																						// Perform the transformation
																						
																						var xsltProcessor = new XSLTProcessor();
																						xsltProcessor.importStylesheet( xslEl );
																						
																						var fragment = xsltProcessor.transformToFragment(xmlEl, document);
																						
																						args.targetNode.appendChild( fragment );
																						
																						// Exec post transformation success function
																						if( args.successFunction )
																						{
																							var childNodesCollection = args.targetNode.childNodes;
																							
																							args.successFunction( childNodesCollection[ childNodesCollection.length - 1 ] );
																						}
																					}
														});
						}
					},
					
					fromFile: function( args )
					{
						if(
							typeof args != "object" ||
							!args.xmlFile ||
							!args.xslFile
						)
						{
							return false;
						}
						
						// Default append to the body
						args.targetNode = args.targetNode ? args.targetNode : document.body;
						
						// Load XML File
						
						new Application.connect.ajax({
														url: args.xmlFile,
														successFunction: function( xmlEl )
																				{
																					// Load XSL File
																					
																					if( Application.util.xslt.transform.xslCache[ args.xslFile ] )
																					{
																						// Perform the transformation
																						
																						var xmlRef = document.implementation.createDocument("", "", null);
																						xmlRef.appendChild( xmlRef.importNode( xmlEl.childNodes.item(0), true ) );
																						
																						var xsltProcessor = new XSLTProcessor();
																						xsltProcessor.importStylesheet( Application.util.xslt.transform.xslCache[ args.xslFile ] );
																						
																						var fragment = xsltProcessor.transformToFragment(xmlRef, document);
																						
																						args.targetNode.appendChild( fragment );
																						
																						// Exec post transformation success function
																						if( args.successFunction )
																						{
																							var childNodesCollection = args.targetNode.childNodes;
																							
																							args.successFunction( childNodesCollection[ childNodesCollection.length - 1 ] );
																						}
																					}
																					else
																					{
																						new Application.connect.ajax({
																														url: args.xslFile,
																														successFunction: function( xslEl )
																																				{
																																					// Cache the xsl file
																																					Application.util.xslt.transform.xslCache[ args.xslFile ] = xslEl;
																																					
																																					// Perform the transformation
																																					
																																					var xmlRef = document.implementation.createDocument("", "", null);
																																					xmlRef.appendChild( xmlRef.importNode( xmlEl.childNodes.item(0), true ) );
																																					
																																					var xsltProcessor = new XSLTProcessor();
																																					xsltProcessor.importStylesheet( xslEl );
																																					
																																					var fragment = xsltProcessor.transformToFragment(xmlRef, document);
																																					
																																					args.targetNode.appendChild( fragment );
																																					
																																					// Exec post transformation success function
																																					if( args.successFunction )
																																					{
																																						var childNodesCollection = args.targetNode.childNodes;
																																						
																																						args.successFunction( childNodesCollection[ childNodesCollection.length - 1 ] );
																																					}
																																				}
																													});
																					}
																				}
												});
					}
				}
			},
			
			disableOutputEscaping:
			{
				correct: null,
				correctObject: null,
				
				init: function()
				{
					
				},
				
				correctIE: function( args )
				{
					return true;
				},
				
				correctObjectIE: function( args )
				{
					return true;
				},
				
				correctFF: function( args )
				{
					var area = document.getElementById( args.id );
					
					area.innerHTML = area.textContent;
					
					return true;
				},
				
				correctObjectFF: function( args )
				{
					args.object.innerHTML = args.object.textContent;
					
					return true;
				}
			}
		},
		
		urlInformation:
		{
			siteName: null,
			protocol: null,
			page: null,
			
			params: null,
			
			init: function()
			{
				var paramsLocation = document.location.href.toString().indexOf( "#" );
				
				if( paramsLocation != -1 )
				{
					var url = document.location.href.toString().substring(0, paramsLocation ).split("://");
				}
				else
				{
					var url = document.location.href.toString().split("://");
				}
				
				this.protocol = url[0];
				
				// Replace multiple consecutive slashes
				var tokens = url[1].replace(/\/\/+/g, '/').split("/");
				
				this.siteName = tokens[0];
				this.page = tokens[1] ? tokens[1] : null;
				
				this.params = document.location.href.toString().substring( paramsLocation + 1 );
				
				return true;
			}
		},
		
		/*
			-------------
			HTML Entities
			-------------
		*/
		
		html:
		{
			removeNode: null,
			
			removeNodeFF: function( node )
			{
				node.parentNode.removeChild( node );
			},
			
			removeNodeIE: function( node )
			{
				node.removeNode( true );
			},
			
			htmlentities: function(string, quote_style)
			{
				// Convert all applicable characters to HTML entities  
				// 
				// version: 1006.1915
				// discuss at: http://phpjs.org/functions/htmlentities
				// +   original by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)
				// +    revised by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)
				// +   improved by: nobbler
				// +    tweaked by: Jack
				// +   bugfixed by: Onno Marsman
				// +    revised by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)
				// +    bugfixed by: Brett Zamir (http://brett-zamir.me)
				// +      input by: Ratheous
				// -    depends on: get_html_translation_table
				// *     example 1: htmlentities('Kevin & van Zonneveld');
				// *     returns 1: 'Kevin &amp; van Zonneveld'
				// *     example 2: htmlentities("foo'bar","ENT_QUOTES");
				// *     returns 2: 'foo&#039;bar'
				var hash_map = {}, symbol = '', tmp_str = '', entity = '';
				tmp_str = string.toString();
				
				if (false === (hash_map = Application.util.html.get_html_translation_table('HTML_ENTITIES', quote_style))) {
					return false;
				}
				hash_map["'"] = '&#039;';
				for (symbol in hash_map) {
					entity = hash_map[symbol];
					tmp_str = tmp_str.split(symbol).join(entity);
				}
				
				return tmp_str;
			},
			
			get_html_translation_table: function(table, quote_style)
			{
				// Returns the internal translation table used by htmlspecialchars and htmlentities  
				// 
				// version: 1006.1915
				// discuss at: http://phpjs.org/functions/get_html_translation_table
				// +   original by: Philip Peterson
				// +    revised by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)
				// +   bugfixed by: noname
				// +   bugfixed by: Alex
				// +   bugfixed by: Marco
				// +   bugfixed by: madipta
				// +   improved by: KELAN
				// +   improved by: Brett Zamir (http://brett-zamir.me)
				// +   bugfixed by: Brett Zamir (http://brett-zamir.me)
				// +      input by: Frank Forte
				// +   bugfixed by: T.Wild
				// +      input by: Ratheous
				// %          note: It has been decided that we're not going to add global
				// %          note: dependencies to php.js, meaning the constants are not
				// %          note: real constants, but strings instead. Integers are also supported if someone
				// %          note: chooses to create the constants themselves.
				// *     example 1: get_html_translation_table('HTML_SPECIALCHARS');
				// *     returns 1: {'"': '&quot;', '&': '&amp;', '<': '&lt;', '>': '&gt;'}

				var entities = {}, hash_map = {}, decimal = 0, symbol = '';
				var constMappingTable = {}, constMappingQuoteStyle = {};
				var useTable = {}, useQuoteStyle = {};

				// Translate arguments
				constMappingTable[0]      = 'HTML_SPECIALCHARS';
				constMappingTable[1]      = 'HTML_ENTITIES';
				constMappingQuoteStyle[0] = 'ENT_NOQUOTES';
				constMappingQuoteStyle[2] = 'ENT_COMPAT';
				constMappingQuoteStyle[3] = 'ENT_QUOTES';

				useTable       = !isNaN(table) ? constMappingTable[table] : table ? table.toUpperCase() : 'HTML_SPECIALCHARS';
				useQuoteStyle = !isNaN(quote_style) ? constMappingQuoteStyle[quote_style] : quote_style ? quote_style.toUpperCase() : 'ENT_COMPAT';

				if (useTable !== 'HTML_SPECIALCHARS' && useTable !== 'HTML_ENTITIES') {
				throw new Error("Table: "+useTable+' not supported');
				// return false;
				}

				entities['38'] = '&amp;';
				if (useTable === 'HTML_ENTITIES') {
				entities['160'] = '&nbsp;';
				entities['161'] = '&iexcl;';
				entities['162'] = '&cent;';
				entities['163'] = '&pound;';
				entities['164'] = '&curren;';
				entities['165'] = '&yen;';
				entities['166'] = '&brvbar;';
				entities['167'] = '&sect;';
				entities['168'] = '&uml;';
				entities['169'] = '&copy;';
				entities['170'] = '&ordf;';
				entities['171'] = '&laquo;';
				entities['172'] = '&not;';
				entities['173'] = '&shy;';
				entities['174'] = '&reg;';
				entities['175'] = '&macr;';
				entities['176'] = '&deg;';
				entities['177'] = '&plusmn;';
				entities['178'] = '&sup2;';
				entities['179'] = '&sup3;';
				entities['180'] = '&acute;';
				entities['181'] = '&micro;';
				entities['182'] = '&para;';
				entities['183'] = '&middot;';
				entities['184'] = '&cedil;';
				entities['185'] = '&sup1;';
				entities['186'] = '&ordm;';
				entities['187'] = '&raquo;';
				entities['188'] = '&frac14;';
				entities['189'] = '&frac12;';
				entities['190'] = '&frac34;';
				entities['191'] = '&iquest;';
				entities['192'] = '&Agrave;';
				entities['193'] = '&Aacute;';
				entities['194'] = '&Acirc;';
				entities['195'] = '&Atilde;';
				entities['196'] = '&Auml;';
				entities['197'] = '&Aring;';
				entities['198'] = '&AElig;';
				entities['199'] = '&Ccedil;';
				entities['200'] = '&Egrave;';
				entities['201'] = '&Eacute;';
				entities['202'] = '&Ecirc;';
				entities['203'] = '&Euml;';
				entities['204'] = '&Igrave;';
				entities['205'] = '&Iacute;';
				entities['206'] = '&Icirc;';
				entities['207'] = '&Iuml;';
				entities['208'] = '&ETH;';
				entities['209'] = '&Ntilde;';
				entities['210'] = '&Ograve;';
				entities['211'] = '&Oacute;';
				entities['212'] = '&Ocirc;';
				entities['213'] = '&Otilde;';
				entities['214'] = '&Ouml;';
				entities['215'] = '&times;';
				entities['216'] = '&Oslash;';
				entities['217'] = '&Ugrave;';
				entities['218'] = '&Uacute;';
				entities['219'] = '&Ucirc;';
				entities['220'] = '&Uuml;';
				entities['221'] = '&Yacute;';
				entities['222'] = '&THORN;';
				entities['223'] = '&szlig;';
				entities['224'] = '&agrave;';
				entities['225'] = '&aacute;';
				entities['226'] = '&acirc;';
				entities['227'] = '&atilde;';
				entities['228'] = '&auml;';
				entities['229'] = '&aring;';
				entities['230'] = '&aelig;';
				entities['231'] = '&ccedil;';
				entities['232'] = '&egrave;';
				entities['233'] = '&eacute;';
				entities['234'] = '&ecirc;';
				entities['235'] = '&euml;';
				entities['236'] = '&igrave;';
				entities['237'] = '&iacute;';
				entities['238'] = '&icirc;';
				entities['239'] = '&iuml;';
				entities['240'] = '&eth;';
				entities['241'] = '&ntilde;';
				entities['242'] = '&ograve;';
				entities['243'] = '&oacute;';
				entities['244'] = '&ocirc;';
				entities['245'] = '&otilde;';
				entities['246'] = '&ouml;';
				entities['247'] = '&divide;';
				entities['248'] = '&oslash;';
				entities['249'] = '&ugrave;';
				entities['250'] = '&uacute;';
				entities['251'] = '&ucirc;';
				entities['252'] = '&uuml;';
				entities['253'] = '&yacute;';
				entities['254'] = '&thorn;';
				entities['255'] = '&yuml;';
				}

				if (useQuoteStyle !== 'ENT_NOQUOTES') {
				entities['34'] = '&quot;';
				}
				if (useQuoteStyle === 'ENT_QUOTES') {
				entities['39'] = '&#39;';
				}
				entities['60'] = '&lt;';
				entities['62'] = '&gt;';
				
				// ascii decimals to real symbols
				for (decimal in entities) {
				symbol = String.fromCharCode(decimal);
				hash_map[symbol] = entities[decimal];
				}
				
				return hash_map;
			}
		
		},
		
		/*
			-------------------------
			Screen Manipulation
			-------------------------
		*/
		
		screen:
		{
			getSize: null,
			
			IE:
			{
				getSize: function()
				{
					return { width: document.documentElement.clientWidth, height: document.documentElement.clientHeight };
				}
			},
			
			FF:
			{
				getSize: function()
				{
					return { width: window.innerWidth, height: window.innerHeight };
				}
			}
		},
		
		/*
			----------------------
			Prototype Manipulation
			----------------------
		*/
		
		objectsEnhancements:
		{
			init: function()
			{
				this.array();
			},
			
			array: function()
			{
				Array.prototype.inArray = 	function(value)
															{
																for (var i=(this.length-1); i>=0; i--)
																{
																	if (this[i] !== value)
																	{
																		continue;
																	}
																	
																	return true;
																}
																
																return false;
															};
				
				Array.prototype.indexOf = 	function(value)
															{
																for (var i=(this.length-1); i>=0; i--)
																{
																	if (this[i] !== value)
																	{
																		continue;
																	}
																	
																	return i;
																}
																
																return -1;
															};
			}
		}
		
	}
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/appJS/resources/public/application.websocket.js
*/


	Application.websocket = {
		
		socket: null,
		reconnectTimeout: 1000,
		handlers: {},
		
		reconnects: 0,
		
		URI: null,
		
		// Event handling
		
		event:
		{
			_events: {},
			
			add: function( eventName, callBack )
			{
				if( !this._events[ eventName ] )
				{
					this._events[ eventName ] = [];
				}
				
				this._events[ eventName ].push( callBack );
			},
			
			remove: function( eventName, callBack )
			{
				var _e = this._events[ eventName ];
				
				for(var i in _e )
				{
					if( _e[ i ] != callBack )
					{
						continue;
					}
					
					delete this._events[ eventName ][ i ];
					
					return true;
				}
				
				return false;
			},
			
			run: function( eventName, params )
			{
				var _e = this._events[ eventName ];
				
				for(var i in _e )
				{
					_e[ i ]( params, Application.websocket.socket );
				}
			}
		},
		
		// Default functions
		
		_onclose: function()
		{
			// automatically reconnect
			
			Component.bugcraft.pageLoader.setDisconnected();
			
			//Application.debug.addError( "Unable to connect to realm " + Application.websocket.URI );
			
			setTimeout(
					Application.websocket._connect,
					Application.websocket.reconnectTimeout
				);
		},
		
		_onerror: function( e )
		{
			Component.bugcraft.pageLoader.setDisconnected();
			
			//Application.debug.addError( "Unable to connect to realm " + Application.websocket.URI );
		},
		
		_onmessage: function( e )
		{
			var _result = JSON.parse( e.data ), _h = Application.websocket.handlers[ _result.c ];
			
			if( _h )
			{
				_h( _result, Application.websocket.socket );
			}
			else
			{
				Application.debug.addError( "no handler found for " + _result.c );
				
				Application.websocket.event.run( _result.c, _result );
			}
			
			/*
			try
			{
				Application.websocket.handlers[ _result.c ]( _result, Application.websocket.socket );
				
				return;
			}
			catch( e )
			{
				Application.debug.addError( "WS Error @ handler " + _result.c + " - " + e);
			}
			*/
		},
		
		_onopen: function()
		{
			Application.websocket.reconnects++;
			
			if( Application.websocket.reconnects > 1 )
			{
				// refresh to ensure proper variables reinitialization
				
				document.location.reload();
			}
			
			//Application.debug.add("Connected to realm");
		},
		
		_connect: function()
		{
			//Application.debug.add( "Connecting to realm" );
			
			Application.websocket.URI = "ws://" + Application.configuration.siteURL + ":10080/";
			
			Application.websocket.socket = new WebSocket( Application.websocket.URI );
			
			Application.websocket.socket.onopen = Application.websocket._onopen;
			Application.websocket.socket.onmessage = Application.websocket._onmessage;
			Application.websocket.socket.onclose = Application.websocket._onclose;
			Application.websocket.socket.onerror = Application.websocket._onerror;
		},
		
		init: function( args )
		{
			if (window.WebSocket)
			{
				args.afterFunction();
				
				return;
			};
			
			if( window.MozWebSocket )
			{
				window.WebSocket = window.MozWebSocket;
				
				args.afterFunction();
				
				return;
			};
			
			Application.debug.addError( "No websocket support. Unable to continue" );
		}
	};
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/appJS/resources/public/objects.js
*/

	
	/*
		Objects prototype
	*/
	
	var $ = function( objectName )
	{
		if(typeof objectName != "string")
		{
			return false;
		}
		
		this._object = document.getElementById( objectName );
		
		if( !this._object )
		{
			return false;
		}
	}
	
	switch( Application.util.browserInformation.browser )
	{
		case "Firefox":
			
			/**
			*		Correct XSLT Output
			*/
			
			$.prototype.correctOutputEscaping = function()
			{
				this._object.innerHTML = this._object.textContent;
				
				return true;
			}
			
		break;
		default:
			
			/**
			*		Correct XSLT Output
			*/
			
			$.prototype.correctOutputEscaping = function()
			{
				return true;
			}
			
	}
	
	/**
	*		Load XSLT transformation 
	*/
	
	$.prototype.loadTransformation = function( args )
	{
		if( typeof args != "object" )
		{
			return false;
		}
		
		if( !args.xmlFile )
		{
			Application.debug.addRow({
								text: '$.loadTransformation No XML file specified'
						});
			
			return false;
		}
		
		if( !args.xslFile )
		{
			Application.debug.addRow({
								text: '$.loadTransformation No XSL file specified'
						});
			
			return false;
		}
		
		new Application.connect.ajax({
										url: args.xmlFile,
										successFunction: 	function( xmlEl )
																	{
																		new Application.connect.ajax({
																										url: args.xslFile,
																										successFunction: 	function( xslEl )
																																	{
																																		
																																	}
																							});
																	}
								});
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	









/*
	File: /usr/www/harendar.gameleon.co//public_web/components/serverError/resources/public/component.serverError.js
*/

	
	/*
		serverError JS
	*/
	
	Component.serverError = {
		
		componentName: "serverError",
		
		init: function( args )
		{
			for(var i=args.length-1;i>=0;i--)
			{
				new Component.serverError.create( args[i] );	
			}
		},
		
		create: function( args )
		{
			
		}
		
	};





/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.js
*/

	
	/*
		bugcraft JS
		
		Th3 3p|( 54g4
	*/
	
	Component.bugcraft = {
		
		componentName: "bugcraft",
		
		currentCharacterBuffs: {},
		currentCharacterBuffObjects: {},
		currentCharacterBuffsHotkeys: [],
		currentCharacterObject: null,
		currentCharacterTarget: null,
		inventorySlots: [],
		
		_instance_tic_interval: null,
		
		initializedPages: {},
		
		npcScript: [],
		
		socketObject: null,
		
		init: function( args )
		{
			for(var i=args.length-1;i>=0;i--)
			{
				new Component.bugcraft.create( args[i] );	
			}
		},
		
		// Canvas mesh rendering
		_renderItem: function( args )
		{
			Application.connect.ajax({
										url: "/components/bugcraft/resources/public/items/" + args.itemID + ".json",
										resultType: Application.connect.RESULT_JSON,
										successFunction:	function( jsonEl, jsonText )
																{
																	var _model = new Application.canvas.modelGroup({
																													area: args.area,
																													data: jsonEl.data,
																													fitArea: true
																												});
																	_model.rotateY();
																}
									});
		},
		
		// Progress bar rendering
		_renderProgressBar: function( args )
		{
			if( args.base )
			{
				args.numbersObject.innerHTML = ( args.number - args.base ) + " / " + ( args.total - args.base );
				
				args.fillingObject.style.width = ( ( ( args.numbersObject.parentNode.offsetWidth - 2 * args.endingObject.offsetWidth ) / 100 ) * ( ( args.number - args.base ) / ( ( args.total - args.base ) / 100 ) ) + args.endingObject.offsetWidth ) + "px";
			}
			else
			{
				args.numbersObject.innerHTML = args.number + " / " + args.total;
				
				args.fillingObject.style.width = ( ( ( args.numbersObject.parentNode.offsetWidth - 2 * args.endingObject.offsetWidth ) / 100 ) * ( args.number / ( args.total / 100 ) ) + args.endingObject.offsetWidth ) + "px";
			}
		},
		
		// Progress bar rendering without text
		_renderProgressBarWithText: function( args )
		{
			args.numbersObject.innerHTML = args.text;
			
			args.fillingObject.style.width = ( ( ( args.numbersObject.parentNode.offsetWidth - 2 * args.endingObject.offsetWidth ) / 100 ) * ( args.number / ( args.total / 100 ) ) + args.endingObject.offsetWidth ) + "px";
		},
		
		// Progress bar rendering with text 
		_renderProgressBarStatic: function( args )
		{
			args.numbersObject.innerHTML = args.text;
			
			args.fillingObject.style.width = ( args.numbersObject.parentNode.offsetWidth - args.endingObject.offsetWidth ) + "px";
		},
		
		// position the window relative to the character and target
		positionRelativeWindow: function( windowContainerObject )
		{
			var _cx = Component.bugcraft.currentCharacterObject.characterData.character_zone_x,
				_tx = Component.bugcraft.currentCharacterTarget.characterData.character_zone_x,
				_windowWidth = Application.util.screen.getSize().width, _browserCenterX = _windowWidth / 2,
				_scaleSize = windowContainerObject._scaleSize ? ( Math.sqrt( windowContainerObject._scaleSize ) ) : 1;
			
			if( _cx - _tx > 0 )
			{
				// character is on the right-hand side of the target
				
				if(
					Math.abs( _browserCenterX - _cx ) < Math.abs( _browserCenterX - _tx )
				)
				{
					// character is closer to the center of the screen
					
					windowContainerObject.style.left = Math.max( ( Map.viewPortX + _cx ) * _scaleSize, 0 ) + "px";
				}
				else
				{
					// target is closer to the center of the screen
					
					windowContainerObject.style.left = Math.max( Math.min(
																			( Map.viewPortX + _tx - windowContainerObject.offsetWidth - 80 ) * _scaleSize,
																			( _windowWidth - windowContainerObject.offsetWidth - 80 ) * _scaleSize
																		), 0 ) + "px";
				}
				
				return;
			}
			
			// character is on the left-hand side of the target
			
			if(
				Math.abs( _browserCenterX - _cx ) < Math.abs( _browserCenterX - _tx )
			)
			{
				// character is closer to the center of the screen
				
				windowContainerObject.style.left = Math.min(
																			( Map.viewPortX + _cx - windowContainerObject.offsetWidth - 80 ) * _scaleSize,
																			( _windowWidth - windowContainerObject.offsetWidth - 80 ) * _scaleSize
																		) + "px";
			}
			else
			{
				// target is closer to the center of the screen
				
				windowContainerObject.style.left = Math.max( ( Map.viewPortX + _tx + 100 ) * _scaleSize, 0 ) + "px";
			}
		},
		
		// scale window
		scaleWindow: function( windowContainerObject )
		{
			var _windowHeight = parseInt( Application.util.style.getCurrent( windowContainerObject, "height" ).replace( /px/, "" ) ),
				_lo = Component.bugcraft._layoutObjects,
				_occupiedSpace = _lo.topAreaContainerObject.offsetHeight + _lo.bottomBarObject.offsetHeight - 50,	// the 50 is for the space the leaves are using and some of the top content. it is perceived free space compensation
				_browserWindowSize = Application.util.screen.getSize();
			
			if( _browserWindowSize.height >= _occupiedSpace + _windowHeight )
			{
				// no need to scale
				
				return;
			}
			
			// scale the window
			
			var _scaleSize = ( _browserWindowSize.height - _occupiedSpace ) / _windowHeight;
			
			//windowContainerObject.style.marginTop = _lo.topAreaContainerObject.offsetHeight + "px";
			windowContainerObject.style.transform = 'scale(' + _scaleSize + ')';
			windowContainerObject.style.MozTransform = 'scale(' + _scaleSize + ')';
			windowContainerObject.style.WebkitTransform = 'scale(' + _scaleSize + ')';
			windowContainerObject._scaleSize = _scaleSize;
		},
		
		/*
			Redirects
		*/
		
		redirectToRealmListPage: function()
		{
			// in future versions it should be replaced with a XSL transformation
			document.location.href = 'http://' + Application.configuration.loginURL + '/realmList#noAutoRealmAssign';
		},
		
		redirectToSelectCharacterPage: function()
		{
			// in future versions it should be replaced with a XSL transformation
			document.location.href = 'http://' + Application.configuration.siteURL + '/selectCharacter';
		},
		
		redirectToProfilePage: function()
		{
			// in future versions it should be replaced with a XSL transformation
			document.location.href = 'http://' + Application.configuration.siteURL + '/profile';
		},
		
		redirectToLoginPage: function()
		{
			// in future versions it should be replaced with a XSL transformation
			document.location.href = 'http://' + Application.configuration.loginURL + '/login';
		},
		
		redirectToMainPage: function()
		{
			// in future versions it should be replaced with a XSL transformation
			document.location.href = 'http://' + Application.configuration.siteURL + '/';
		},
		
		enterFullScreen: function( args )
		{
			document.getElementById( args.id + '_chatInput' ).webkitRequestFullScreen();
		},
		
		/*
			Environment initialize
		*/
		
		create: function( args )
		{
			// prevent selection
			document.onselectstart = function()
			{
				return false;
			};
			
			var _positiveAction = 	function()
											{
												// Default layout
												
												var switchCharacterPageObject = document.getElementById( args.id + '_switchCharacterPage' );
												var battlePageObject = document.getElementById( args.id + '_battlePage' );
												var vendorsPageObject = document.getElementById( args.id + '_vendorsPage' );
												var marketPageObject = document.getElementById( args.id + '_marketPage' );
												
												// Top of the page
												//Component.bugcraft.pageTopMenu( args );
												
												if( switchCharacterPageObject )
												{
													Component.bugcraft.pageSwitchCharacter( args );
													
													return;
												}
												
												// attempt to enter full screen mode
												//Component.bugcraft.enterFullScreen( args );
												
												// Show the battle page
												Component.bugcraft.pageBattle( args );
												Component.bugcraft.pageLoader.addPercentage( 10 );
												
												// Show the chat container
												Component.bugcraft.pageChat( args );
												Component.bugcraft.pageLoader.addPercentage( 10 );
												
												// Show the messages container
												Component.bugcraft.messages.init( args );
												Component.bugcraft.pageLoader.addPercentage( 10 );
												
												// Initialize the skins
												Component.bugcraft.skinsStructure.init( args );
												Component.bugcraft.pageLoader.addPercentage( 10 );
												
												// Listen to hotkeys to show various options
												
												var _requestMoveTimeout = null;
												var _handleMove = function( oX, oY )
												{
													if( _requestMoveTimeout )
													{
														return;
													}
													
													var _ccO = Component.bugcraft.currentCharacterObject;
													
													if( !_ccO )
													{
														return;
													}
													
													var _rm = function()
													{
														_ccO.requestMove(
																			_ccO.characterData.character_zone_x + oX,
																			_ccO.characterData.character_zone_y + oY,
																			0
																		);
														
														_requestMoveTimeout = setTimeout( _rm, 333 );
													};
													
													_rm();
												}
												
												Application.event.add( window, "keyup", function( e )
												{
													if( e.keyCode != 37 && e.keyCode != 38 && e.keyCode != 39 && e.keyCode != 40 )
													{
														return;
													}
													
													// a movement key is no longer being pressed
													clearTimeout( _requestMoveTimeout );
													_requestMoveTimeout = null;
												});
												
												Application.event.add( window, "keydown", function( e )
												{
													switch( e.keyCode )
													{
														case 38:
															
															// up arrow
															
															_handleMove( 0, -60 );
															
														break;
														case 40:
															
															// down arrow
															
															_handleMove( 0, 60 );
															
														break;
														case 37:
															
															// left arrow
															
															_handleMove( -60, 0 );
															
														break;
														case 39:
															
															// right arrow
															
															_handleMove( 60, 0 );
															
														break;
													}
												});
												
												Application.event.add( window, "keyup",	function( e )
												{
													// hotkeys binding
													
													switch( e.keyCode )
													{
														case 27:
															
															// escape
															
															Component.bugcraft.pageSettings( args );
															
														break;
														case 13:
															
															// enter
															
															Component.bugcraft.pageChatFocusOnTextfield();
															
														break;
														case 191:
															
															// /
															
															Component.bugcraft.pageChatFocusOnTextfield( "/" );
															
														break;
														case 67:
															
															// c
															
															Component.bugcraft.pageProfile( args );
															
														break;
														case 86:
															
															// v
															
															Component.bugcraft.pageVendor( null, { id: args.id, isAmberStore: true } ); 
															
														break;
														case 77:
															
															// m
															
															Component.bugcraft.pageMarket( args );
															
														break;
														case 81:
															
															// q
															
															Component.bugcraft.pageQuestLog( args );
															
														break;
														case 83:
															
															// s
															
															Component.bugcraft.pageSpellBook( args );
															
														break;
														case 84:
															
															// t
															
															Component.bugcraft.pageTalentTree( args );
															
														break;
														case 71:
															
															// g
															
															Component.bugcraft.pageLookingForBattleground( args );
															
														break;
														case 66:
															
															// b
															
															Component.bugcraft.pageBags( args );
															
														break;
														case 65:
															
															// a
															
															Component.bugcraft.pageAchievementLog( args );
															
														break;
														default:
															
													}
												});
											};
			
			var checkForMapLink = function()
			{
				var results =  ( new RegExp( "[\\?&]map=([^&#]*)" ).exec( window.location.href ) );

				if( results == null )
				{
					return false;
				}
				
				Application.websocket.socket.send( '{"c":"joinMapEditorMap", "bid": ' + results[ 1 ] + ' }' )
			}
			
			checkForMapLink();
			
			//
			// check if we have a valid user ID in the session
			//
			
			if( !Application.sessionData.userID )
			{
				// no currently logged in user
				
				Component.bugcraft.redirectToLoginPage();
				
				return;
			}
			
			//
			// check if we have a valid character ID in the session
			//
			
			if(
				!Application.sessionData.characterID ||
				Application.util.urlInformation.page == "selectCharacter"
			)
			{
				if( Application.util.urlInformation.page != "selectCharacter" )
				{
					Component.bugcraft.redirectToSelectCharacterPage();
				}
				else
				{
					Component.bugcraft.pageSelectCharacter( args );
				}
				
				return;
			}
			
			//
			// we have an authenticated user who wants to enter the game
			//
			
			/*
			Application.event.add( window, "unload", 	function()
																				{
																					Application.websocket.socket.send( '{"c":"characterInactive"}' );
																				});
			
			Application.websocket.handlers.characterActive = function( jsonEl, ws )
			{
				if( jsonEl.r != 200 )
				{
					Application.debug.add( "character get error: " + jsonEl.r );
					
					return;
				}
				
				Component.bugcraft.currentCharacterData = jsonEl.characterData;
				
				_positiveAction();
			}
			
			Application.websocket.socket.send( '{"c":"characterActive"}' );
			*/
			
			Component.bugcraft.pageLoader.init( args );
			
			Application.websocket.handlers.updateQueueMembers = function( jsonEl, ws )
			{
				// dummy function until we're ready for processing
			}
			
			Application.websocket.handlers.updateBattleField = function( jsonEl, ws )
			{
				// dummy function until we're ready for processing
			}
			
			Application.websocket.handlers.disconnectCharacter = function( jsonEl, ws )
			{
				Component.bugcraft.redirectToSelectCharacterPage();
			}
			
			// delay the next action in order that it does not intervene with the UI refresh
			setTimeout( function()
			{
				_positiveAction();
			}, 10 );
		},
		
		/*
			Notification popup
		*/
		
		notificationPopup:
		{
			_popups: {},
			
			disconnectCountdown: function( args )
			{
				var popupNotificationAreaObject = document.getElementById( args.id + '_popupNotificationArea' ), _secTimeout = Math.floor( args.timeoutMiliseconds / 1000 ), _t = null, self = this;
				
				this.isVisible = true;
				
				this.show = function()
				{
					self.isVisible = true;
					
					notificationDivObject.className = "battlegroundNotificationArea";
				}
				
				this.hide = function()
				{
					self.isVisible = false;
					
					notificationDivObject.className = "hidden";
				}
				
				this.remove = function()
				{
					self.hide();
					
					clearTimeout( _t );
					
					Application.util.html.removeNode( notificationDivObject );
				}
				
				// container
				var notificationDivObject = document.createElement("div");
				notificationDivObject.className = "battlegroundNotificationArea";
				
				// text
				var notificationTextObject = document.createElement("span");
				notificationDivObject.appendChild( notificationTextObject );
				
				// accept button
				var cancelButton = document.createElement("div");
				cancelButton.className = "buttonDeny";
				cancelButton.innerHTML = args.cancelLogoutText;
				notificationDivObject.appendChild( cancelButton );
				
				popupNotificationAreaObject.appendChild( notificationDivObject );
				
				Application.event.add( cancelButton, "click", function()
				{
					Component.bugcraft.sound.ui.playEvent( "window", "buttonClick" );
					args.onCancel();
				});
				
				var _textFunction = function()
				{
					notificationTextObject.innerHTML = "<div class='battlegroundNotificationText'>" + args.notificationText.replace( "[seconds]", _secTimeout-- ) + "</div>";
					
					_t = setTimeout( _textFunction, 1000 );
				};
				
				_textFunction();
			},
			
			yesNoPopup: function( args )
			{
				var popupNotificationAreaObject = document.getElementById( args.id + '_popupNotificationArea' ), self = this;
				
				Component.bugcraft.notificationPopup._popups[ args.name ] = self;
				
				this.isVisible = true;
				
				this.show = function()
				{
					self.isVisible = true;
					
					notificationDivObject.className = "battlegroundNotificationArea";
				}
				
				this.hide = function()
				{
					self.isVisible = false;
					
					notificationDivObject.className = "hidden";
				}
				
				this.remove = function()
				{
					self.hide();
					
					Application.util.html.removeNode( notificationDivObject );
				}
				
				// container
				var notificationDivObject = document.createElement("div");
				notificationDivObject.className = "battlegroundNotificationArea";
				notificationDivObject.innerHTML = "<div class='battlegroundNotificationText'>" + args.questionText + "</div>";
				
				// accept button
				var battlegroundAcceptButton = document.createElement("div");
				battlegroundAcceptButton.className = "buttonAccept";
				battlegroundAcceptButton.innerHTML = args.acceptText;
				notificationDivObject.appendChild( battlegroundAcceptButton );
				
				// deny button
				var battlegroundDenyButton = document.createElement("div");
				battlegroundDenyButton.className = "buttonDeny";
				battlegroundDenyButton.innerHTML = args.denyText;
				notificationDivObject.appendChild( battlegroundDenyButton );
				
				Application.event.add( battlegroundAcceptButton, "click", function()
				{
					Component.bugcraft.sound.ui.playEvent( "window", "buttonClick" );
					args.onAccept();
				});
				
				Application.event.add( battlegroundDenyButton, "click", function()
				{
					Component.bugcraft.sound.ui.playEvent( "window", "buttonClick" );
					args.onDeny();
				});
				
				popupNotificationAreaObject.appendChild( notificationDivObject );
			},
			
			inviteToInstance: function( args )
			{
				var popupNotificationAreaObject = document.getElementById( args.id + '_popupNotificationArea' ), _t = null, self = this;
				
				this.hide = function()
				{
					notificationDivObject.className = "hidden";
				}
				
				this.remove = function()
				{
					clearTimeout( _t );
					
					Application.util.html.removeNode( notificationDivObject );
				}
				
				// container
				var notificationDivObject = document.createElement("div");
				notificationDivObject.className = "battlegroundNotificationArea";
				notificationDivObject.innerHTML = "<div class='battlegroundNotificationText'>You are now ready to join " + args.zoneData.zp_name + "!</div>";
				
				// accept button
				var battlegroundAcceptButton = document.createElement("div");
				battlegroundAcceptButton.className = "buttonAccept";
				battlegroundAcceptButton.innerHTML = "Enter now";
				notificationDivObject.appendChild( battlegroundAcceptButton );
				
				// deny button
				var battlegroundDenyButton = document.createElement("div");
				battlegroundDenyButton.className = "buttonDeny";
				notificationDivObject.appendChild( battlegroundDenyButton );
				
				var _timeoutUpdate = function()
				{
					battlegroundDenyButton.innerHTML = "Leave Queue ( " + ( --args.t ) + " )";
					
					if( args.t <= 0 )
					{
						return;
					}
					
					_t = setTimeout( _timeoutUpdate, 1000 );
				}
				
				_timeoutUpdate();
				
				Application.event.add( battlegroundAcceptButton, "click", function()
				{
					Component.bugcraft.sound.ui.playEvent( "window", "buttonClick" );
					args.onAccept();
				});
				
				Application.event.add( battlegroundDenyButton, "click", function()
				{
					Component.bugcraft.sound.ui.playEvent( "window", "buttonClick" );
					args.onDeny();
				});
				
				popupNotificationAreaObject.appendChild( notificationDivObject );
			}
		},
		
		/*
			Top menu
		*/
		
		pageTopMenu: function( args )
		{
			var topMenuLinkObject = document.getElementById( args.id + '_topMenuLink' );
			var switchCharacterLinkObject = document.getElementById( args.id + '_switchCharacterLink' );
			var topMenuObject = document.getElementById( args.id + '_topMenu' );
			
			switchCharacterLinkObject.onclick = function()
			{
				var _dc = new Component.bugcraft.notificationPopup.disconnectCountdown({
																																	id: args.id
																																});
				
				Application.websocket.handlers.cancelDisconnect = function( jsonEl, ws )
				{
					_dc.hide();
				}
				
				Application.websocket.socket.send( '{"c":"characterDisconnect"}' );
			}
			
			topMenuLinkObject.onclick = 	function( e )
															{
																e = e ? e : window.event;
																
																topMenuObject.className = "menu";
																topMenuLinkObject.className = "menuLink hidden";
																
																e.cancelBubble = true;
																
																Application.event.add( document.body, "click", _click );
																Application.event.add( document.body, "contextmenu", _click );
															};
			
			var _click =	function()
								{
									topMenuObject.className = "menu hidden";
									topMenuLinkObject.className = "menuLink";
									
									Application.event.remove( document.body, "click", _click );
									Application.event.remove( document.body, "contextmenu", _click );
								};
		},
		
		/*
			Pages
		*/
		
		pageVendors: function( args )
		{
			
		},
		
		pageMarket: function( args )
		{
			
		},
		
		/*
			Battle
		*/
		pageBattle: function( args )
		{
			
		},
		
		pageJourney: function( args )
		{
			
		},
		
		pageLogin: function( args )
		{
			
		},
		
		populateInventory: function( args )
		{
			// Inventory slot methods definer
			var setSlotMethods = 	function( slotObject )
												{
													slotObject.attachedLootObject = null;
													slotObject.lastAttachedLootObject = null;
													slotObject.classSelected = slotObject.getAttribute("classSelected");
													slotObject.classNotSelected = slotObject.getAttribute("classNotSelected");
													slotObject.slotType = slotObject.getAttribute("slotType");
													
													slotObject.swapItemWith = function( targetSlot )
																								{
																									if( targetSlot.extraArea == false && slotObject.extraArea == false)
																									{
																										Application.connect.ajax({
																																		url: "component.php",
																																		vars:
																																		{
																																			component: "bugcraft",
																																			event: "itemSwap",
																																			sourceBag: slotObject.bag_slot_number,
																																			sourceSlot: slotObject.bag_slot_order,
																																			targetBag: targetSlot.bag_slot_number,
																																			targetSlot: targetSlot.bag_slot_order
																																		},
																																		successFunction: function( jsonEl )
																																		{
																																			var result = jsonEl.content["@attributes"].databaseResult;
																																			
																																			if( result != 200)
																																			{
																																				Application.debug.addError( "Database swap item error: " + result );
																																				
																																				return;
																																			}
																																			
																																			targetSlot.setLoot({
																																									lootObject: slotObject.attachedLootObject
																																								});
																																			
																																			slotObject.setLoot({
																																									lootObject: targetSlot.lastAttachedLootObject
																																								});
																																		}
																																	});
																									}
																									else
																									{
																										targetSlot.setLoot({
																																lootObject: slotObject.attachedLootObject
																															});
																																			
																										slotObject.setLoot({
																																lootObject: targetSlot.lastAttachedLootObject
																															});
																									}
																								}
													
													slotObject.removeLoot = 	function()
																								{
																									
																									slotObject.lastAttachedLootObject = slotObject.attachedLootObject;
																									slotObject.attachedLootObject = null;
																									
																									
																									// Remove this node
																									if( slotObject.removeNode )
																									{
																										slotObject.childNodes[0].removeNode( true );
																									}
																									else if( slotObject.childNodes.length == 1 )
																									{
																										slotObject.removeChild(
																																	slotObject.childNodes[0]
																																);
																									}
																									
																									slotObject.className = slotObject.classNotSelected;
																								}
													
													slotObject.setLoot = 	function( args )
																						{
																							if( args.lootObject == null )
																							{
																								slotObject.removeLoot();
																								
																								return false;
																							}
																							
																							if( slotObject.attachedLootObject != null )
																							{
																								slotObject.removeLoot();
																							}
																							else
																							{
																								slotObject.lastAttachedLootObject = null;
																							}
																							
																							slotObject.attachedLootObject = args.lootObject;
																							
																							slotObject.className = slotObject.classSelected;
																							slotObject.loot_type = args.lootObject.loot_type;
																							
																							var objectImage = document.createElement("img");
																							objectImage.src = "/components/bugcraft/resources/public/items/" + ( args.lootObject.loot_id ) + "_inventory_" + slotObject.slotType + ".png";
																							slotObject.appendChild( objectImage );
																							
																							// Movement events
																							objectImage.onmousedown = Component.bugcraft._dragFunction;
																							// iX devices
																							Application.event.add( objectImage, "touchstart", 	function( e )
																																											{
																																												_dragFunction( e.touches[0] );
																																											});
																							
																							return true;
																						}
												}
			
			Application.connect.ajax({
											url: args.path + Component.bugcraft.currentCharacterData.character_id,
											successFunction: function( jsonEl )
											{
												var items = jsonEl.content.item;
												
												for(var i=0;i<items.length;i++)
												{
													var item = items[i]["@attributes"];
													
													// Set Item properties
													item.loot_type = parseInt( item.loot_type );
													
													// Set slot properties
													var slotObject = document.getElementById( args.id + "_item_" + item.ci_slot_bag + "_" + item.ci_slot_order );
													slotObject.position = Application.util.style.getPos( slotObject );
													slotObject.bag_slot_number = item.ci_slot_bag;
													slotObject.bag_slot_order = item.ci_slot_order;
													slotObject.bag_slot_accept = parseInt( item.ci_slot_accept );
													slotObject.extraArea = false;
													
													Component.bugcraft.inventorySlots[ i ] = slotObject;
													
													setSlotMethods( slotObject );
													
													if( item.loot_id.length > 0 )
													{
														slotObject.setLoot({
																				lootObject: item,
																				updateDB: false
																			});
													}
													
													
													/*
													Component.bugcraft._renderItem({
																								area: canvasObject,
																								itemID: items[i]["@attributes"].loot_id
																							});
													*/
												}
												
												if( args.extraArea )
												{
													for( var i = 0; i < args.extraArea.length; i++ )
													{
														var slotObject = document.getElementById( args.id + "_" + args.extraArea[i] );
														slotObject.position = Application.util.style.getPos( slotObject );
														slotObject.bag_slot_number = 1;
														slotObject.bag_slot_order = i;
														slotObject.bag_slot_accept = 127;
														slotObject.extraArea = true;
														
														Component.bugcraft.inventorySlots[ Component.bugcraft.inventorySlots.length ] = slotObject;
														setSlotMethods( slotObject );
													}
													
												}
											}
										});
			
		},
		
		// General profile information
		populateProfileTab: function( args )
		{
			var avatarObject = document.getElementById( args.id + "_avatar" );
			
			var happiness = parseInt( Component.bugcraft.currentCharacterData.character_happiness );
			
			avatarObject.className = "avatar avatar_" + Component.bugcraft.currentCharacterData.character_race + "_" + ( ( happiness < 100 ) ? "sad" : ( ( happiness < 200 ) ? "neutral" : "happy" ) );
		}
	};
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft._shared_.astar.js
*/


	Component.bugcraft.astar = function()
	{
		var _getIndex = function( elt, object )
		{
			var len = object.length;
			var from = Number(arguments[1]) || 0;
			from = (from < 0) ? Math.ceil(from) : Math.floor(from);
			if (from < 0) {
				from += len;
			}
			for (; from < len; ++from) {
				if (from in object && object[from] === elt) {
					return from;
				}
			}
			return -1;
		};
		
		/*
			-------------
			Graph Object
			-------------
		*/
		
		var GraphNodeType = { OPEN: 0, WALL: 1 };
		
		this.Graph = function(grid)
		{
			this.elements = grid;
			this.nodes = [];
			
			function GraphNode(x,y,type)
			{
				this.data = { };
				this.x = x;
				this.y = y;
				this.pos = {x:x, y:y};
				this.type = type;
			}
			
			GraphNode.prototype.toString = function()
			{
				return "[" + this.x + " " + this.y + "]";
			};
			
			GraphNode.prototype.isWall = function()
			{
				return this.type == GraphNodeType.WALL;
			};
			
			for (var x = 0, len = grid.length; x < len; ++x)
			{
				var row = grid[x];
				this.nodes[x] = [];
				for (var y = 0, l = row.length; y < l; ++y) {
					this.nodes[x].push(new GraphNode(x, y, row[y]));
				}
			}
		}
		
		this.Graph.prototype.toString = function() {
			var graphString = "\n";
			var nodes = this.nodes;
			for (var x = 0, len = nodes.length; x < len; ++x) {
				var rowDebug = "";
				var row = nodes[x];
				for (var y = 0, l = row.length; y < l; ++y) {
					rowDebug += row[y].type + " ";
				}
				graphString = graphString + rowDebug + "\n";
			}
			return graphString;
		};
		
		/*
			------------
			A* Structure
			------------
		*/
		
		this.astar = function(grid, start, end, heuristic)
		{
			// init
			
			for(var x = 0, xl = grid.length; x < xl; x++) {
				for(var y = 0, yl = grid[x].length; y < yl; y++) {
					var node = grid[x][y];
					node.f = 0;
					node.g = 0;
					node.h = 0;
					node.visited = false;
					node.closed = false;
					node.debug = "";
					node.parent = null;
				}
			}
			
			// choose the path - heuristic | manhattan
			
			heuristic = heuristic || 	function(pos0, pos1)
											{
												// See list of heuristics: http://theory.stanford.edu/~amitp/GameProgramming/Heuristics.html

												var d1 = Math.abs (pos1.x - pos0.x);
												var d2 = Math.abs (pos1.y - pos0.y);
												return d1 + d2;
											};
			
			function BinaryHeap(scoreFunction)
			{
				this.content = [];
				this.scoreFunction = scoreFunction;
			}
			
			BinaryHeap.prototype = {
			  push: function(element) {
				// Add the new element to the end of the array.
				this.content.push(element);
				// Allow it to sink down.
				this.sinkDown(this.content.length - 1);
			  },

			  pop: function() {
				// Store the first element so we can return it later.
				var result = this.content[0];
				// Get the element at the end of the array.
				var end = this.content.pop();
				// If there are any elements left, put the end element at the
				// start, and let it bubble up.
				if (this.content.length > 0) {
				  this.content[0] = end;
				  this.bubbleUp(0);
				}
				return result;
			  },
			  remove: function(node) {

				var i = _getIndex( node, this.content);

				// When it is found, the process seen in 'pop' is repeated
				// to fill up the hole.
				var end = this.content.pop();
				if (i != this.content.length - 1) {
				  this.content[i] = end;
				  if (this.scoreFunction(end) < this.scoreFunction(node))
					this.sinkDown(i);
				  else
					this.bubbleUp(i);
				}
			  },

			  size: function() {
				return this.content.length;
			  },

			  rescoreElement: function(node) {
				this.sinkDown(_getIndex(node, this.content));
			  },
			  sinkDown: function(n) {
				// Fetch the element that has to be sunk.
				var element = this.content[n];
				// When at 0, an element can not sink any further.
				while (n > 0) {
				  // Compute the parent element's index, and fetch it.
				  var parentN = ((n + 1) >> 1) - 1,
					  parent = this.content[parentN];
				  // Swap the elements if the parent is greater.
				  if (this.scoreFunction(element) < this.scoreFunction(parent)) {
					this.content[parentN] = element;
					this.content[n] = parent;
					// Update 'n' to continue at the new position.
					n = parentN;
				  }
				  // Found a parent that is less, no need to sink any further.
				  else {
					break;
				  }
				}
			  },

			  bubbleUp: function(n)
			  {
				// Look up the target element and its score.
				var length = this.content.length,
					element = this.content[n],
					elemScore = this.scoreFunction(element);

				while(true) {
				  // Compute the indices of the child elements.
				  var child2N = (n + 1) << 1, child1N = child2N - 1;
				  // This is used to store the new position of the element,
				  // if any.
				  var swap = null;
				  // If the first child exists (is inside the array)...
				  if (child1N < length) {
					// Look it up and compute its score.
					var child1 = this.content[child1N],
						child1Score = this.scoreFunction(child1);
					// If the score is less than our element's, we need to swap.
					if (child1Score < elemScore)
					  swap = child1N;
				  }
				  // Do the same checks for the other child.
				  if (child2N < length) {
					var child2 = this.content[child2N],
						child2Score = this.scoreFunction(child2);
					if (child2Score < (swap == null ? elemScore : child1Score))
					  swap = child2N;
				  }

				  // If the element needs to be moved, swap it, and continue.
				  if (swap != null) {
					this.content[n] = this.content[swap];
					this.content[swap] = element;
					n = swap;
				  }
				  // Otherwise, we are done.
				  else {
					break;
				  }
				}
			  }
			};
			
			var openHeap = new BinaryHeap(function(node){return node.f;});
			openHeap.push(start);

			while(openHeap.size() > 0 && openHeap.size() < 130 )			// empiric limit to ensure minimal search time
			{
				// Grab the lowest f(x) to process next.  Heap keeps this sorted for us.
				var currentNode = openHeap.pop();

				// End case -- result has been found, return the traced path
				if(currentNode === end) {
					var curr = currentNode;
					var ret = [];
					while(curr.parent) {
						ret.push(curr);
						curr = curr.parent;
					}
					return ret.reverse();
				}

				// Normal case -- move currentNode from open to closed, process each of its neighbors
				currentNode.closed = true;

				var neighbors = (function(grid, node)
										{
											var ret = [];
											var x = node.x;
											var y = node.y;

											if(grid[x-1] && grid[x-1][y]) {
												ret.push(grid[x-1][y]);
											}
											if(grid[x+1] && grid[x+1][y]) {
												ret.push(grid[x+1][y]);
											}
											if(grid[x] && grid[x][y-1]) {
												ret.push(grid[x][y-1]);
											}
											if(grid[x] && grid[x][y+1]) {
												ret.push(grid[x][y+1]);
											}
											return ret;
										})(grid, currentNode);
				
				for(var i=0, il = neighbors.length; i < il; i++) {
					var neighbor = neighbors[i];

					if(neighbor.closed || neighbor.isWall()) {
						// not a valid node to process, skip to next neighbor
						continue;
					}

					// g score is the shortest distance from start to current node, we need to check if
					//   the path we have arrived at this neighbor is the shortest one we have seen yet
					// 1 is the distance from a node to it's neighbor.  This could be variable for weighted paths.
					var gScore = currentNode.g + 1;
					var beenVisited = neighbor.visited;

					if(!beenVisited || gScore < neighbor.g)
					{
						// Found an optimal (so far) path to this node.  Take score for node to see how good it is.
						neighbor.visited = true;
						neighbor.parent = currentNode;
						neighbor.h = neighbor.h || heuristic(neighbor.pos, end.pos);
						neighbor.g = gScore;
						neighbor.f = neighbor.g + neighbor.h;
						//neighbor.debug = "F: " + neighbor.f + "<br />G: " + neighbor.g + "<br />H: " + neighbor.h;
						
						if (!beenVisited) {
							// Pushing to heap will put it in proper place based on the 'f' value.
							openHeap.push(neighbor);
						}
						else {
							// Already seen the node, but since it has been rescored we need to reorder it in the heap
							openHeap.rescoreElement(neighbor);
						}
					}
				}
			}

			// No result was found -- empty array signifies failure to find path
			return [];
		}
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft._shared_.character.js
*/

	
	/*
		--------------------------
		BattleField Character
		--------------------------
	*/
	
	Component.bugcraft._characterIDs = [];
	Component.bugcraft._characterData = [];
	
	Component.bugcraft.character = function( characterData, pageContext )
	{
		Component.bugcraft._characterIDs.push( characterData.cid );		// fast backtrace
		
		var self = this, _currentTargetCharacter = null, _oldDistance = 0, _skinObject = null,
				_moveTimeoutPointer = null, _updateDistancePointer = null,
				_currentPath = [], afterEndOfPath = function() {},
				idleTimeoutSeconds = 90, _evaluateDistanceMS = 1000, _idleTimeoutPointer = null, _followTimeoutPointer = null;
		
		//
		// Radial sounds
		//
		
		this.disableRadialSounds = function()
		{
			self.removeVisualEffect( spellEffects.ambientRadialSounds );
		}
		
		//
		// Skin management
		//
		
		this.setSkin = function( skinName )
		{
			if( self.characterData.character_skin == skinName )
			{
				return;
			}
			
			if( _skinObject != null )
			{
				// already have a skin on this object
				
				_skinObject.eventStop();
			}
			
			// set the new values
			
			self.characterData.character_skin = skinName;
			
			_skinObject = new Component.bugcraft.skinsStructure.skinObject({
																								skinName: skinName,
																								characterObject: self
																							});
			
			// my character's avatar
			_skinObject.getStartFrame();
		}
		
		this.getSkin = function()
		{
			return _skinObject;
		}
		
		//
		// Character data merging
		//
		
		this.mergeMinimalCharacterData = function( newData )
		{
			// init the skin object
			
			self.characterData.character_id = newData.cid;
			self.characterData.character_id_object_pool = newData.op;
			self.characterData.character_id_owner_character = newData.ow;
			self.characterData.character_id_corpse_character = newData.co;
			
			self.characterData.character_guild_name = newData.cg;
			self.characterData.character_name = newData.n;
			self.characterData.character_zone_x = newData.x;
			self.characterData.character_zone_x_target = newData.xt;
			self.characterData.character_zone_y = newData.y;
			self.characterData.character_zone_y_target = newData.yt;
			self.characterData.character_width = newData.w;
			self.characterData.character_height = newData.h;
			self.characterData.character_rotation = newData.ro;
			self.characterData.character_speed = newData.s;
			self.characterData.character_hp_current = newData.h_c;
			self.characterData.character_hp_max = newData.h_m;
			self.characterData.character_race = newData.r;
			self.characterData.character_class = newData.cl;
			self.characterData.character_faction = newData.f;
			self.characterData.character_faction_binary = newData.fb;
			self.characterData.character_level = newData.l;
			self.characterData.character_is_alive = newData.d;
			self.characterData.character_type = newData.ty;
			self.characterData.character_reacts_to_binary = newData.rtb;
			self.characterData.character_is_stealth = newData.st;
			self.characterData.character_is_vendor = newData.iv;
			self.characterData.character_is_questgiver = newData.iq;
			self.characterData.character_is_usable = newData.iu;
			self.characterData.character_is_targetable = newData.ta;
			
			self.setSkin( newData.sk );
		}
		
		// voice
		this.isSpeaking = false;
		
		// UI and login relationships
		this.isMain = false;
		this.isTarget = false;
		this.isVisible = false;
		this.isHovered = false;
		this.isCasting = false;
		this.isInSameLayer = true;
		this.isInside = false;
		this.currentPolyIndex = 0;
		
		// "use" windows
		this.isShowingQuests = false;
		this.isShowingInventory = false;
		
		// UI objects
		this._internal = {
			spellEffects: [],
			soundEffects: [],
			characterImage: new Image()
		};
		
		this.characterData = {};
		this.characterScript = null,
		
		this.questsData = {},
		
		this.mergeMinimalCharacterData( characterData ); // init the character data structure based on the init parameters
		
		this.appliedBuffs = characterData.b;
		this.appliedEffects = [ 0, 0, 0, 0, 0, 0 ]; // cleanse, bleed, stun, heal, disarm, modifier
		
		// attributes required only for graphical purposes
		this.characterData.character_previous_x = this.characterData.character_zone_x;
		this.characterData.character_previous_y = this.characterData.character_zone_y;
		this.characterData.character_deleteRange = 166;
		this.characterData.characterImageAlpha = 0;
		
		//
		// Events
		//
		
		this.events = {
			
			use: [],
			die: [],
			hide: [],
			show: [],
			setUnusable: [],
			setUsable: [],
			damageTake: [],
			
			_add: function( eventName, callBack )
			{
				return {
						index: self.events[ eventName ].push( callBack ) - 1,
						eventName: eventName
					}
			},
			
			_exists: function( eventName, callBack )
			{
				var _e = self.events[ eventName ];
				
				for(var i in _e)
				{
					if( _e[ i ] != callBack )
					{
						continue;
					}
					
					return true;
				}
				
				return false;
			},
			
			_removeByFunction: function( eventName, callBack )
			{
				var _e = self.events[ eventName ];
				
				for(var i in _e)
				{
					if( _e[ i ] != callBack )
					{
						continue;
					}
					
					delete self.events[ eventName ][ i ];
					
					return true;
				}
				
				return false;
			},
			
			_remove: function( eventObjectReturn )
			{
				delete self.events[ eventObjectReturn.eventName ][ eventObjectReturn.index ];
			},
			
			_run: function( eventName, eventParams )
			{
				var _e = self.events[ eventName ];
				
				for(var i in _e)
				{
					_e[ i ]( eventParams );
				}
			}
			
		};
		
		//
		// Un(Usable)
		//
		
		this.command_set_unusable = function( updateData )
		{
			self.characterData.character_is_usable = null;
			
			self.removeVisualEffect( spellEffects.lootableComplete );
			
			self.events._run( "setUnusable", { } );
		}
		
		this.command_set_usable = function( updateData )
		{
			if( ! (self.characterData.character_reacts_to_binary & Component.bugcraft.currentCharacterObject.characterData.character_faction_binary ) )
			{
				// doesn't react to the main character. useless.
				
				return;
			}
			
			self.characterData.character_is_usable = '';
			
			new spellEffects.lootableComplete({
													sourceCharacter: self,
													targetCharacter: self
												});
			
			self.events._run( "setUsable", { } );
		}
		
		//
		// Cast specific
		//
		
		var _castAnimationPointer = null;
		this.command_cast_start_self = function( updateData )
		{
			self.isCasting = true;
			
			var _lO = Component.bugcraft._layoutObjects,
					_currentProgress = 0,
					_castUpdateTimeoutPointer = null,
					_bCO = _lO.barCastTimeContainerObject,
					_bCOS = _bCO.style,
					_updateInterval = Math.max( 45, updateData.t / 100 ),
					_progressIncrement = 100 / ( updateData.t / _updateInterval );
			
			var _setAlpha = function( alphaIndex )
			{
				_bCOS.opacity = alphaIndex;
				_bCOS.MozOpacity = alphaIndex;
				_bCOS.filter = "alpha(opacity=" + ( alphaIndex * 100 ) + ")";
			}
			
			new spellEffects.castAnimationComplete({
														targetCharacter: self
													});
			
			var _periodicUpdate = function()
			{
				_currentProgress += _progressIncrement;
				
				Component.bugcraft._renderProgressBarWithText({
																	text: updateData.d,
																	number: _currentProgress > 100 ? 100 : _currentProgress,
																	total: 100,
																	numbersObject: _lO.barCastTimeNumbersObject,
																	fillingObject: _lO.barCastTimeFillingObject,
																	endingObject: _lO.barCastTimeEndingObject
																});
				
				if( _currentProgress >= 100 )
				{
					return;
				}
				
				_castUpdateTimeoutPointer = setTimeout( _periodicUpdate, _updateInterval );
			};
			
			var _fadeOutBar = function()
			{
				var _currentAlpha = 1;
				
				var _changeAlpha = function()
				{
					_currentAlpha -= 0.1;
					
					if( _currentAlpha < 0 )
					{
						_bCO.className = "hidden";
						
						return;
					}
					
					_setAlpha( _currentAlpha );
					
					_castAnimationPointer = setTimeout( _changeAlpha, 45 );
				}
				
				_changeAlpha();
			}
			
			self.command_cast_interrupt = function( updateData )
			{
				self.isCasting = false;
				
				self.removeVisualEffect( spellEffects.castAnimationComplete );
				
				// ensure the bar updates are no longer being done
				clearTimeout( _castUpdateTimeoutPointer );
				
				_bCO.className = "barCastTimeInterrupted";
				Component.bugcraft._renderProgressBarStatic({
																text: "interrupted",
																numbersObject: _lO.barCastTimeNumbersObject,
																fillingObject: _lO.barCastTimeFillingObject,
																endingObject: _lO.barCastTimeEndingObject
															});
				
				_castAnimationPointer = setTimeout( _fadeOutBar, 1500 );
				
				Component.bugcraft.ui.updateBuffsStatusConsideringTarget();
			}
			
			self.command_cast_complete = function( updateData )
			{
				self.isCasting = false;
				
				self.removeVisualEffect( spellEffects.castAnimationComplete );
				
				_currentProgress = 100;
				
				_fadeOutBar();
				
				Component.bugcraft.ui.updateBuffsStatusConsideringTarget();
			}
			
			clearTimeout( _castAnimationPointer );
			_bCO.className = "barCastTime";
			
			_setAlpha( 1 );
			_periodicUpdate();
			
			Component.bugcraft.ui.updateBuffsStatusConsideringTarget();
		}
		
		this.command_cast_interrupt_self = function( updateData )
		{
			self.isCasting = false;
		}
		
		this.command_cast_complete_self = function( updateData )
		{
			self.isCasting = false;
		}
		
		this.command_cast_start_third_party = function( updateData )
		{
			self.isCasting = true;
		}
		
		this.command_cast_interrupt_third_party = function( updateData )
		{
			self.isCasting = false;
		}
		
		this.command_cast_complete_third_party = function( updateData )
		{
			self.isCasting = false;
		}
		
		//
		// Effects management
		//
		
		var _randomNPCEffectPeriodicPointer = null, _randomChosenNPCEffect = null;
		this.showRandomNPCEffectPeriodically = function()
		{
			var _randomEffectFunction = function()
			{
				var _NPCEffect = [
									spellEffects.buffTacticsComplete,
									spellEffects.auraMagicPurpleComplete,
									spellEffects.buffShield,
									spellEffects.auraBlue133Complete,
									spellEffects.buffRallyComplete,
									spellEffects.shieldWater,
									spellEffects.buffHerbalShieldYellow,
									spellEffects.buffPolishShell,
									spellEffects.auraSpin3,
									spellEffects.auraTime151Complete,
									spellEffects.buffInspiringVigorComplete,
									spellEffects.buffAwarenessComplete,
									spellEffects.buffCunningComplete
								],
				_chosenEffect = _NPCEffect[ Math.floor( Math.random() * _NPCEffect.length ) ];
				
				_randomChosenNPCEffect = new _chosenEffect({
																		targetCharacter: self
																	});
				
				_randomNPCEffectPeriodicPointer = setTimeout( _randomEffectFunction, 180000 + Math.random() * 300000 );
			}
			
			_randomNPCEffectPeriodicPointer = setTimeout( _randomEffectFunction, Math.random() * 60000 );
		}
		
		this.stopRandomNPCEffects = function()
		{
			if( _randomChosenNPCEffect )
			{
				_randomChosenNPCEffect.remove();
			}
			
			clearTimeout( _randomNPCEffectPeriodicPointer );
		}
		
		this.removeAllVisualEffects = function()
		{
			// remove old effect
			var _iSpellEffects = self._internal.spellEffects;
			
			for( var i in _iSpellEffects )
			{
				// effect needs to be removed
				
				if( typeof _iSpellEffects[ i ] != "object" )
				{
					continue;
				}
				
				_iSpellEffects[ i ].remove();
			}
		}
		
		this.showRandomDamageEffect = function()
		{
			var _damageEffects = [
												spellEffects.debrisBlood,
												spellEffects.debrisBloodStain1,
												spellEffects.debrisBloodStain2,
												spellEffects.debrisBloodStain3,
												spellEffects.debrisBloodStain4,
												spellEffects.debrisGrey,
												spellEffects.debrisMeat,
												spellEffects.debrisMeat2,
												spellEffects.debrisSplatter1,
												spellEffects.debrisSplatter2,
												spellEffects.debrisSplatter3,
												spellEffects.debrisYellow,
												spellEffects.damageChemicalCorrosive,
												spellEffects.damageChemicalPoison,
												spellEffects.damagePhysicalBloodSplatter,
												spellEffects.damagePhysicalExplodeBits,
												spellEffects.damagePhysicalExplodeGore,
												spellEffects.damagePhysicalHitExplode,
												spellEffects.damagePhysicalShards,
												spellEffects.damageMeatExplode
											],
					_chosenEffect = _damageEffects[ Math.floor( Math.random() * _damageEffects.length ) ];
			
			new _chosenEffect({
									targetCharacter: self
								});
		}
		
		this.removeVisualEffect = function( effectDefinition )
		{
			// remove old effect
			var _iSpellEffects = self._internal.spellEffects;
			
			for( var i in _iSpellEffects )
			{
				var spellEffectObject = _iSpellEffects[i].constructor;
				
				if( spellEffectObject != effectDefinition )
				{
					continue;
				}
				
				// effect needs to be removed
				
				_iSpellEffects[i].remove();
				
				return true;
			}
			
			return false;
		}
		
		//
		// Targetable specific
		//
		
		
		
		//
		// Stealth specific
		//
		
		this.command_stealth_enter_third_party = function()
		{
			if( self.characterData.character_is_friendly_to_main == true )
			{
				// friendly
				
				new spellEffects.characterInvisibility({
															targetCharacter: self
														});
			}
			else
			{
				// enemy
				
				self.hide(function()
				{
					
				});
			}
		}
		
		this.command_stealth_enter_self = function()
		{
			new spellEffects.characterInvisibility({
														targetCharacter: self
													});
		}
		
		this.command_stealth_leave_third_party = function( characterData )
		{
			// update properties
			self.mergeMinimalCharacterData( characterData );
			
			if( self.characterData.character_is_friendly_to_main )
			{
				// friendly
				
				new spellEffects.characterFadeIn({
															targetCharacter: self
														});
			}
			else
			{
				self.show();
			}
		}
		
		this.command_stealth_leave_self = function()
		{
			self.removeVisualEffect( spellEffects.characterInvisibility );
			
			new spellEffects.characterFadeIn({
														targetCharacter: self
													});
		}
		
		//
		// chat specific
		//
		
		this.showChatBubbleSay = function( chatText )
		{
			// remove old effect
			var _iSpellEffects = self._internal.spellEffects;
			
			for( var i in _iSpellEffects )
			{
				var spellEffectObject = _iSpellEffects[i].constructor;
				
				if(
					spellEffectObject != spellEffects.floatingChatImageBubble
					&& spellEffectObject != spellEffects.floatingChatTextBubble
				)
				{
					continue;
				}
				
				// effect needs to be removed
				
				_iSpellEffects[i].remove();
			}
			
			// create new chat bubble
			new spellEffects.floatingChatTextBubble({
															targetCharacter: self,
															text: chatText
														});
		}
		
		// yell
		this.showChatBubbleYell = function( chatText )
		{
			// remove old effect
			var _iSpellEffects = self._internal.spellEffects;
			
			for( var i in _iSpellEffects )
			{
				var spellEffectObject = _iSpellEffects[i].constructor;
				
				if(
					spellEffectObject != spellEffects.floatingChatImageBubble
					&& spellEffectObject != spellEffects.floatingChatTextBubble
				)
				{
					continue;
				}
				
				// effect needs to be removed
				
				_iSpellEffects[i].remove();
			}
			
			// create new chat bubble
			new spellEffects.floatingChatTextBubble({
														targetCharacter: self,
														text: chatText,
														color: "#f94c00"
													});
		}
		
		// yell
		this.showChatBubbleEmote = function( emoteName )
		{
			// remove old effect
			var _iSpellEffects = self._internal.spellEffects;
			
			for( var i in _iSpellEffects )
			{
				var spellEffectObject = _iSpellEffects[i].constructor;
				
				if(
					spellEffectObject != spellEffects.floatingChatImageBubble
					&& spellEffectObject != spellEffects.floatingChatTextBubble
				)
				{
					continue;
				}
				
				// effect needs to be removed
				
				_iSpellEffects[i].remove();
			}
			
			// create new chat bubble
			new spellEffects.floatingChatImageBubble({
															targetCharacter: self,
															image: Application.configuration.cdn.location[ 0 ].url + "/img/chat/emotes/" + emoteName + ".png"
														});
		}
		
		// emotes treatment
		this.command_emote = function( emoteName, emoteText )
		{
			// add to the chat window
			Component.bugcraft.pageChatInsertMessage( "Emote", emoteText );
			
			// decide which sound should be played
			switch( emoteName )
			{
				case "as":
				case "assist":
					
					Component.bugcraft.sound.characters.playCharacterVoiceExclusive( self, "assist" );
					self.showChatBubbleEmote( "assist" );
					
				break;
				case "ch":
				case "charge":
					
					Component.bugcraft.sound.characters.playCharacterVoiceExclusive( self, "charge" );
					self.showChatBubbleEmote( "charge" );
					
				break;
				case "attack":
				case "att":
				case "fire":
					
					Component.bugcraft.sound.characters.playCharacterVoiceExclusive( self, "attack" );
					self.showChatBubbleEmote( "attack" );
					
				break;
				case "flee":
				case "retreat":
					
					Component.bugcraft.sound.characters.playCharacterVoiceExclusive( self, "flee" );
					self.showChatBubbleEmote( "flee" );
					
				break;
				case "f":
				case "follow":
					
					Component.bugcraft.sound.characters.playCharacterVoiceExclusive( self, "follow" );
					self.showChatBubbleEmote( "follow" );
					
				break;
				case "bye":
				case "goodbye":
					
					Component.bugcraft.sound.characters.playCharacterVoiceExclusive( self, "goodbye" );
					self.showChatBubbleEmote( "goodbye" );
					
				break;
				case "heal":
					
					Component.bugcraft.sound.characters.playCharacterVoiceExclusive( self, "heal" );
					self.showChatBubbleEmote( "heal" );
					
				break;
				case "hi":
				case "hello":
				case "greetings":
				case "greet":
					
					Component.bugcraft.sound.characters.playCharacterVoiceExclusive( self, "hello" );
					self.showChatBubbleEmote( "hello" );
					
				break;
				case "help":
				case "aid":
					
					Component.bugcraft.sound.characters.playCharacterVoiceExclusive( self, "help" );
					self.showChatBubbleEmote( "help" );
					
				break;
				case "no":
					
					Component.bugcraft.sound.characters.playCharacterVoiceExclusive( self, "no" );
					self.showChatBubbleEmote( "no" );
					
				break;
				case "thank":
				case "thanks":
				case "thankyou":
					
					Component.bugcraft.sound.characters.playCharacterVoiceExclusive( self, "thanks" );
					self.showChatBubbleEmote( "thanks" );
					
				break;
				case "wait":
					
					Component.bugcraft.sound.characters.playCharacterVoiceExclusive( self, "wait" );
					self.showChatBubbleEmote( "wait" );
					
				break;
				case "yes":
				case "agree":
					
					Component.bugcraft.sound.characters.playCharacterVoiceExclusive( self, "yes" );
					self.showChatBubbleEmote( "yes" );
					
				break;
				case "laugh":
				case "rofl":
				case "lol":
					
					Component.bugcraft.sound.characters.playCharacterVoiceExclusive( self, "laugh" );
					self.showChatBubbleEmote( "laugh" );
					
				break;
				case "wave":
					
					self.showChatBubbleEmote( "wave" );
					
				break;
				case "point":
					
					self.showChatBubbleEmote( "point" );
					
				break;
				case "hug":
					
					self.showChatBubbleEmote( "hug" );
					
				break;
				case "dance":
					
					self.showChatBubbleEmote( "dance" );
					
				break;
				case "flirt":
					
					Component.bugcraft.sound.characters.playCharacterVoiceExclusive( self, "flirt" );
					self.showChatBubbleEmote( "flirt" );
					
				break;
				case "sad":
					
					self.showChatBubbleEmote( "sad" );
					
				break;
				case "kiss":
					
					self.showChatBubbleEmote( "kiss" );
					
				break;
				case "boo":
					
					self.showChatBubbleEmote( "boo" );
					
				break;
				case "cheer":
					
					self.showChatBubbleEmote( "cheer" );
					
				break;
				case "clap":
					
					self.showChatBubbleEmote( "clap" );
					
				break;
				case "applaud":
					
					self.showChatBubbleEmote( "applaud" );
					
				break;
				case "love":
					
					self.showChatBubbleEmote( "love" );
					
				break;
				case "slap":
					
					self.showChatBubbleEmote( "slap" );
					
				break;
				case "salute":
					
					self.showChatBubbleEmote( "salute" );
					
				break;
				case "smile":
					
					self.showChatBubbleEmote( "smile" );
					
				break;
				case "sad":
					
					self.showChatBubbleEmote( "sad" );
					
				break;
				case "funny":
				case "joke":
					
					Component.bugcraft.sound.characters.playCharacterVoiceExclusive( self, "funny" );
					self.showChatBubbleEmote( "funny" );
					
				break;
			}
		}
		
		this.command_use = function( byCharacterObject )
		{
			// stop any idle movement
			self.stopIdleMovement();
			
			if( self.characterData.character_type != 2 )
			{
				var _cd = byCharacterObject.characterData;
				
				self.changeRotation( _cd.character_zone_x, _cd.character_zone_y );
			}
			
			self.events._run( "use", pageContext );
		}
		
		// set the character's initial state
		this.initialState = function()
		{
			// death and taxes
			
			( self.characterData.character_is_alive == null ) ? self.command_die() : null;//self.command_resurrect();
		}
		
		// more data about the current character has been received
		this.mergeCharacterData = function( newData )
		{
			for(var i in newData)
			{
				self.characterData[ i ] = newData[ i ];
			}
			
			return true;
		}
		
		this.evaluateRelationshipToMain = function()
		{
			self.characterData.character_is_friendly_to_main = Map._evaluateRelationshipToCharacter( self );
		}
		
		// post initialize function. will check if any existing actions are in progress
		this.checkExistingActions = function()
		{
			// if the character was moving already, initialize the movement
			
			if(
				_moveTimeoutPointer == null && self.characterData.character_zone_x_target != null && self.characterData.character_zone_y_target != null
				&& ( self.characterData.character_zone_x_target != self.characterData.character_zone_x || self.characterData.character_zone_y_target != self.characterData.character_zone_y )
			)
			{
				self.command_move( self.characterData.character_zone_x_target, self.characterData.character_zone_y_target );
				
				self.characterData.character_zone_x_target = null;
				self.characterData.character_zone_y_target = null;
			}
		}
		
		this.setTargetToMain = function()
		{
			if(
				self.isTarget == true
				&& !Component.bugcraft.currentCharacterTarget
			)
			{
				return false;
			}
			
			var _t = Component.bugcraft.currentCharacterTarget;
			
			//remove the target focus from the old target
			_t.removeFocusPointerEffect();
			
			if( self.characterData.character_id != _t.characterData.character_id )
			{
				_t.isTarget = false;
				_t.clearAppliedBuffsOnTarget();
			}
			
			Map.minimap.show();
			
			// ensure nothing will happen after the current path is done
			afterEndOfPath = function() { };
			
			if( self.isTarget == false )
			{
				Component.bugcraft.currentCharacterTarget = self;
				self.isTarget = true;
				
				self.stopUpdateDistanceToTarget();
			
				// update bottom bar buffs
				Component.bugcraft.ui.updateBuffsStatusConsideringTarget();
				
				Application.debug.add( "Target set to (3): " + Component.bugcraft.currentCharacterTarget.characterData.character_id );
			}
		}
		
		this.setTarget = function( characterObject )
		{
			var _currentTargetCharacter = Component.bugcraft.currentCharacterTarget;
			
			// we've clicked on a character. set it as a target
			if( _currentTargetCharacter )
			{
				// we already had a target character. mark it as not being the target anymore
				
				//remove the target focus from the old target
				_currentTargetCharacter.removeFocusPointerEffect();
				
				_currentTargetCharacter.isTarget = false;
				_currentTargetCharacter.clearAppliedBuffsOnTarget();
			}
			
			// ensure nothing will happen after the current path is done
			afterEndOfPath = function() { };
			
			// specific for the main character
			Component.bugcraft.currentCharacterTarget = characterObject;
			
			_currentTargetCharacter = characterObject;
			_currentTargetCharacter.isTarget = true;
			
			_currentTargetCharacter.updateOnTarget();
			
			// start updating the distance to the target
			self.updateDistanceToTargetPeriodically();
			
			// update bottom bar buffs
			Component.bugcraft.ui.updateBuffsStatusConsideringTarget();
		}
		
		//
		// Movement
		//
		
		var _attackAnimationTimeout = null, _attackAnimationFramesDisplayed = 0;
		this.performAttackAnimation = function( targetRange )
		{
			Component.bugcraft.sound.characters.playCharacterVoiceExclusive( self, "groans_attack" );
			
			if( targetRange * 8 > 90 )
			{
				return false;
			}
			
			_skinObject.setState( "attackMelee" );
			
			var _animation = function()
			{
				_skinObject.getNextFrame();
				
				_attackAnimationFramesDisplayed++;
				
				if( _attackAnimationFramesDisplayed > 4 )
				{
					_skinObject.setState( "idle" );
					
					return;
				}
				
				_attackAnimationTimeout = setTimeout( _animation, 150 );
			}
			
			_attackAnimationFramesDisplayed = 0;
			clearTimeout( _attackAnimationTimeout );
			_animation();
			
			return true;
		}
		
		//
		// Distance Evaluation
		//
		
		this.evaluateDistanceToTarget = function( characterObject )
		{
			
		}
		
		this.updateDistanceToTargetPeriodically = function()
		{
			self.stopUpdateDistanceToTarget();
			
			var cd = self.characterData, ct = Component.bugcraft.currentCharacterTarget.characterData;
			
			if( !Map.getStraightPath(
									cd.character_zone_x,
									cd.character_zone_y,
									ct.character_zone_x,
									ct.character_zone_y,
									0,
									function( _path )
									{
									
									}
								) )
			{
				// not in line of sight
				
				self.characterData.character_distance_to_target = Infinity;
			}
			else
			{
				self.characterData.character_distance_to_target = Math.sqrt( Math.pow( cd.character_zone_y - ct.character_zone_y, 2 ) + Math.pow( cd.character_zone_x - ct.character_zone_x, 2 ) );
			}
			
			if( self.characterData.character_distance_to_target != _oldDistance )
			{
				_oldDistance = self.characterData.character_distance_to_target;
				
				Component.bugcraft.ui.updateBuffsStatusConsideringTarget();
			}
			
			_updateDistancePointer= setTimeout( self.updateDistanceToTargetPeriodically, 166 ); // for 8 calculations / second
			
			return self.characterData.character_distance_to_target;
		}
		
		this.stopUpdateDistanceToTarget = function()
		{
			// distance is zero because i have no target, hence i target myself
			self.characterData.character_distance_to_target = 0;
			
			clearTimeout( _updateDistancePointer );
		}
		
		// function will change the character rotation considering the target points
		this.changeRotation = function( newX, newY )
		{
			self.characterData.character_rotation = Math.atan2( ( self.characterData.character_zone_y - newY ), ( self.characterData.character_zone_x - newX ) ) * 57.2957;
		}
		
		this.stopFollow = function()
		{
			afterEndOfPath = function() { };
			clearTimeout( _followTimeoutPointer );
		}
		
		this.followCharacter = function( characterObject )
		{
			var cd = characterObject.characterData;
			
			// issue the next movement action
			var _issueNextMovement = function()
			{
				if( self.updateDistanceToTargetPeriodically() == Infinity )
				{
					return;
				}
				
				self.requestMove(
								cd.character_zone_x,
								cd.character_zone_y,
								cd.character_width + 15
							);
				
				_followTimeoutPointer = setTimeout( _issueNextMovement, _evaluateDistanceMS );
			}
			
			_issueNextMovement();
		}
		
		this.interactWith = function( characterObject )
		{
			var _cd = characterObject.characterData;
			
			afterEndOfPath = function()
			{
				Application.websocket.socket.send( '{"c":"useObject","target_id":' + _cd.character_id + '}' );
				
				afterEndOfPath = function() { };
			}
			
			// issue the next movement action
			var _issueNextMovement = function()
			{
				self.requestMove(
								_cd.character_zone_x,
								_cd.character_zone_y,
								_cd.character_width * 0.75
							);
				
				_followTimeoutPointer = setTimeout( _issueNextMovement, _evaluateDistanceMS );
			}
			
			_issueNextMovement();
		}
		
		this.interactWithTarget = function()
		{
			var _cct = Component.bugcraft.currentCharacterTarget, _cd = _cct.characterData;
			
			afterEndOfPath = function()
			{
				afterEndOfPath = function() { };
				
				if( self.updateDistanceToTargetPeriodically() == Infinity )
				{
					return;
				}
				
				if( _cd.character_is_usable != null )
				{
					Application.websocket.socket.send( '{"c":"useObject","target_id":' + _cd.character_id + '}' );
				}
				else if( _cd.character_is_questgiver != null )
				{
					_cct.command_use( self );
				}
				else if( _cd.character_is_vendor != null )
				{
					_cct.command_use( self );
				}
			}
			
			// issue the next movement action
			var _issueNextMovement = function()
			{
				self.requestMove(
								_cd.character_zone_x,
								_cd.character_zone_y,
								75
							);
				
				_followTimeoutPointer = setTimeout( _issueNextMovement, _evaluateDistanceMS );
			}
			
			_issueNextMovement();
		}
		
		var _enableAutoAttackTimeout = null;
		this.enableAutoAttack = function( characterObject )
		{
			// using buff 75 (strike) which should be enabled by default
			var cd = characterObject.characterData, _b = Component.bugcraft.ui.buffObjects[ 75 ], _s = _b.args.buff.buff_cooldown_seconds * 1000;
			
			var _attackPeriodic = function()
			{
				if(
					self.characterData.character_distance_to_target > _b.args.buff.buff_target_range
					|| characterObject.isTarget == false	// set the target to something else
				)
				{
					// target moved too far away
					
					afterEndOfPath = function() { };
					
					return;
				}
				
				if( _b.isOnCooldown() )
				{
					_enableAutoAttackTimeout = setTimeout(
																	_attackPeriodic,
																	_b.args.buff.cs_cooldown_remaining_seconds * 1000
																);
					
					return;
				}
				
				Application.websocket.socket.send( '{"c":"cast","buff_id":75,"target_id":' + cd.character_id + '}' );
				
				_enableAutoAttackTimeout = setTimeout( _attackPeriodic, _s );
			}
			
			self.stopIdleMovement();
			_attackPeriodic();
		}
		
		this.attackCharacterInMelee = function( characterObject, _x, _y )
		{
			var cd = characterObject.characterData, _b = Component.bugcraft.ui.buffObjects[ 75 ];
			
			afterEndOfPath = function()
			{
				clearTimeout( _followTimeoutPointer );
				
				if( self.characterData.character_distance_to_target > _b.args.buff.buff_target_range )
				{
					// still too far away
					
					_issueNextMovement();
				}
				else
				{
					// we're in range for the auto attack
					
					afterEndOfPath = function() { };
					self.enableAutoAttack( characterObject );
				}
			};
			
			clearTimeout( _followTimeoutPointer );
			
			// issue the next movement action
			var _issueNextMovement = function()
			{
				self.requestMove(
								_x,
								_y,
								0
							);
				
				_followTimeoutPointer = setTimeout( _issueNextMovement, _evaluateDistanceMS );
			}
			
			_issueNextMovement();
		}
		
		this.requestMove = function( targetX, targetY, range )
		{
			var cd = self.characterData;
			
			Map.getMinimalPath(
							Math.round( cd.character_zone_x ),
							Math.round( cd.character_zone_y ),
							targetX,
							targetY,
							range,
							function( path )
							{
								// set this character's path
								
								if(
									path.length == 0
									|| _currentPath.toString() == path.toString()
									|| ( path[ 0 ][ 0 ] == cd.character_zone_x && path[ 0 ][ 1 ] == cd.character_zone_y )
								)
								{
									// we're already there
									
									afterEndOfPath();
									
									return;
								}
								
								// this is a new path
								
								_currentPath = path;
								
								// issue the first movement step
								
								self.changeRotation( path[0][0], path[0][1] );
								
								Application.websocket.socket.send( '{"c":"move","r":' + Math.round( cd.character_rotation ) + ',"x":' + ( path[0][0] ) + ',"y":' + ( path[0][1] ) + '}' );
								
								_currentPath.shift();		// remove this from the path
							}
						);
		}
		
		// show the pointer ( x arrow ) on the target place
		this.showMovementPointer = function( x, y )
		{
			var _iSpellEffects = self._internal.spellEffects;
			
			for( var i in _iSpellEffects )
			{
				var spellEffectObject = _iSpellEffects[i].constructor;
				
				if( spellEffectObject != spellEffects.moveAnimation )
				{
					continue;
				}
				
				// effect needs to be removed
				
				_iSpellEffects[i].remove();
			}
			
			// show the cursor for the target point
			new spellEffects.moveAnimation({
													targetCharacter: self,
													x: x,
													y: y
												});
		}
		
		this.command_rotate = function( r )
		{
			self.characterData.character_rotation = r;
		}
		
		// specific main character movement
		this.command_move_self = function( x, y )
		{
			//clearTimeout( _enableAutoAttackTimeout );
			clearTimeout( _idleTimeoutPointer );
			clearTimeout( _moveTimeoutPointer );
			_moveTimeoutPointer = null;
			
			_skinObject.setState( "walk" );
			
			this.showMovementPointer( x, y );
			
			var _w = x - self.characterData.character_zone_x,
				_h = y - self.characterData.character_zone_y,
				_phy = Math.atan2( _h, _w ),
				_vx = self.characterData.character_speed * Math.cos( _phy ),
				_vy = self.characterData.character_speed * Math.sin( _phy ),
				_distance = Math.round( Math.sqrt( Math.pow( _w, 2) + Math.pow( _h, 2 ) ) ),
				_movement = 0, _frameChangeMilestone = 12, _footStep = 0,
				_delay = Component.bugcraft._instance_tic_interval,
				_startDate = ( new Date() ).getTime();
			
			// start the walking audio
			_skinObject.getNextAudio();
			
			var _timeoutFunction = function()
			{
				var _r = ( ( ( ( new Date() ).getTime() - _startDate ) * self.characterData.character_speed ) / _delay ) / self.characterData.character_speed,
						_xOffset = _vx * _r,
						_yOffset = _vy * _r;
				
				self.characterData.character_zone_x += _xOffset;
				self.characterData.character_zone_y += _yOffset;
				
				// calculate the relative sound volume for each effect around
				
				for(var i in Component.bugcraft._characterData)
				{
					var cd = Component.bugcraft._characterData[ i ];
					
					if( typeof cd != "object" || cd.isMain == true )
					{
						continue;
					}
					
					var _iSoundEffects = cd._internal.soundEffects;
					
					for( var j in _iSoundEffects )
					{
						if( typeof _iSoundEffects[ j ] != "object" || _iSoundEffects[j] == null )
						{
							continue;
						}
						
						_iSoundEffects[ j ].setVolume(
													spellEffects.volumeByRange(
																				cd.characterData.character_zone_x, 
																				cd.characterData.character_zone_y, 
																				self.characterData.character_zone_x, 
																				self.characterData.character_zone_y, 
																				spellEffects.volumeRangeLong 
																			)
												);
						
						/*
						_iSoundEffects[ j ].setPan(
													spellEffects.soundPan(
																				cd.characterData.character_zone_x, 
																				self.characterData.character_zone_x,  
																				spellEffects.volumeRangeLong 
																			)
												);
						*/
					}
				}
				
				// calculate the movement so far
				
				_movement += _r * self.characterData.character_speed;
				
				//change the frames to give the impressin the character is walking
				if( _movement > _frameChangeMilestone )
				{
					_frameChangeMilestone += 15;
					
					_skinObject.getNextFrame();
				}
				
				if( _movement < _distance )
				{
					_startDate = ( new Date() ).getTime();
					
					// iterate again in _delay time
					_moveTimeoutPointer = setTimeout( _timeoutFunction, _delay );
					
					return;
				}
				
				_skinObject.setState( "idle" );
				
				// make sure we're spot on
				self.characterData.character_zone_x = x;
				self.characterData.character_zone_y = y;
				
				// start the random movement
				//self.startIdleMovementCountdown();
				
				//
				// issue the next movement step. only if the character is me
				//
				
				if(
					_currentPath.length > 0
				)
				{
					//orient character towards the moving direction
					
					self.changeRotation( _currentPath[0][0], _currentPath[0][1] );
					
					Application.websocket.socket.send( '{"c":"move","r":' + Math.round( self.characterData.character_rotation ) + ',"x":' + ( _currentPath[0][0] ) + ',"y":' + ( _currentPath[0][1] ) + '}' );
					
					_currentPath.shift();
				}
				else
				{
					// reached the end of the path
					
					_skinObject.stopAudio();
					
					afterEndOfPath();
				}
			};
			
			_timeoutFunction();
		};
		
		this.command_move_third_party =	function( x, y )
		{
			clearTimeout( _moveTimeoutPointer );
			_moveTimeoutPointer = null;
			
			self.changeRotation( x, y );
			
			_skinObject.setState( "walk" );
			
			//change the frames to give the impression the character is walking
			//self._internal.characterImage = _skinObject.getStartFrame();
			
			var _w = x - self.characterData.character_zone_x,
				_h = y - self.characterData.character_zone_y,
				_phy = Math.atan2( _h, _w ),
				_vx = self.characterData.character_speed * Math.cos( _phy ),
				_vy = self.characterData.character_speed * Math.sin( _phy ),
				_distance = Math.round( Math.sqrt( Math.pow( _w, 2) + Math.pow( _h, 2 ) ) ),
				_movement = 0, _frameChangeMilestone = 0,
				_delay = Component.bugcraft._instance_tic_interval,
				_startDate = ( new Date() ).getTime(),
				_ccOD = Component.bugcraft.currentCharacterObject.characterData;
			
			var _timeoutFunction = function()
			{
				var _r = ( ( ( ( new Date() ).getTime()  - _startDate ) * self.characterData.character_speed ) / _delay ) / self.characterData.character_speed,
					_xOffset = _vx * _r,
					_yOffset = _vy * _r,
					_iSoundEffects = self._internal.soundEffects;
				
				self.characterData.character_zone_x += _xOffset;
				self.characterData.character_zone_y += _yOffset;
				
				_movement += _r * self.characterData.character_speed;
				
				// calculate the relative sound volume, to the main character, for each effect this character has
				
				/*
				for( var i in _iSoundEffects )
				{
					if ( typeof _iSoundEffects[i] != "object" || _iSoundEffects[i] == null )
					{
						continue;
					}
					
					_iSoundEffects[ i ].setVolume(
												spellEffects.volumeByRange(
																			self.characterData.character_zone_x, 
																			self.characterData.character_zone_y, 
																			Component.bugcraft.currentCharacterObject.characterData.character_zone_x, 
																			Component.bugcraft.currentCharacterObject.characterData.character_zone_y, 
																			spellEffects.volumeRangeLong 
																		)
											);
					
					
					_iSoundEffects[ i ].setPan(
												spellEffects.soundPan(
																			self.characterData.character_zone_x, 
																			Component.bugcraft.currentCharacterObject.characterData.character_zone_x, 
																			spellEffects.volumeRangeLong 
																		)
											);
				}
				*/
				
				//change the frames to give the impressin the character is walking
				if( _movement > _frameChangeMilestone )
				{
					_frameChangeMilestone += 10;
					
					_skinObject.getNextFrame();
				}
				
				if( _movement < _distance )
				{
					_startDate = ( new Date() ).getTime();
					
					// iterate again in _delay time
					_moveTimeoutPointer = setTimeout( _timeoutFunction, _delay );
					
					return;
				}
				
				_skinObject.setState( "idle" );
				
				// make sure we're spot on
				self.characterData.character_zone_x = x;
				self.characterData.character_zone_y = y;
				
				if( self.characterData.character_type == 1 || self.characterData.character_type == 3 )
				{
					// for NPCs and Characters only
					
					//self.startIdleMovementCountdown();
				}
				
				// mark the fact that we've ended the cycle
				_moveTimeoutPointer = null;
			};
			
			_timeoutFunction();
		}
		
		this.command_move_stop_self = function( x, y )
		{
			clearTimeout( _enableAutoAttackTimeout );
			clearTimeout( _idleTimeoutPointer );
			clearTimeout( _moveTimeoutPointer );
			
			self.characterData.character_zone_x = x;
			self.characterData.character_zone_y = y;
			
			_moveTimeoutPointer = null;
		}
		
		this.command_move_stop_third_party = function( x, y )
		{
			self.characterData.character_zone_x = x;
			self.characterData.character_zone_y = y;
			
			clearTimeout( _moveTimeoutPointer );
			_moveTimeoutPointer = null;
		}
		
		this.focusMovement = function()
		{
			// cache the footsteps sounds
			
			self.command_move = self.command_move_self;
			self.command_die = self.command_die_self;
			self.command_resurrect = self.command_resurrect_self;
			self.command_modify = self.command_modify_self;
			self.command_stealth_enter = self.command_stealth_enter_self;
			self.command_stealth_leave = self.command_stealth_leave_self;
			self.command_move_stop = self.command_move_stop_self;
			self.command_cast_start = self.command_cast_start_self;
			self.command_cast_complete = self.command_cast_complete_self;
			self.command_cast_interrupt = self.command_cast_interrupt_self;
			
			if( self.characterData.character_is_stealth != null )
			{
				self.command_stealth_enter();
			}
		}
		
		this.removeMovementFocus = function()
		{
			self.command_move = self.command_move_third_party;
			self.command_die = self.command_die_third_party;
			self.command_resurrect = self.command_resurrect_third_party;
			self.command_modify = self.command_modify_third_party;
			self.command_stealth_enter = self.command_stealth_enter_third_party;
			self.command_stealth_leave = self.command_stealth_leave_third_party;
			self.command_move_stop = self.command_stealth_leave_third_party;
			self.command_cast_start = self.command_cast_start_third_party;
			self.command_cast_complete = self.command_cast_complete_third_party;
			self.command_cast_interrupt = self.command_cast_interrupt_third_party;
			
			if( self.characterData.character_is_stealth != null )
			{
				self.command_stealth_enter();
			}
		}
		
		this.stun = function()
		{
			if( !self.isMain && !self.isTarget )
			{
				return;
			}
			
			new spellEffects.floatingText({
													targetCharacter: self,
													text: 'Stunned',
													color: '#fff29a'
												});
			
			new spellEffects.stun({
										targetCharacter: self
									});
		}
		
		this.startIdleMovementCountdown = function()
		{
			self.stopIdleMovement();
			
			_idleTimeoutPointer = setTimeout( self.idleMovement, 1000 * ( Math.random() * idleTimeoutSeconds ) );
		}
		
		this.stopIdleMovement = function()
		{
			clearTimeout( _idleTimeoutPointer );
		}
		
		this.idleMovement = function()
		{
			var maxRotation = Math.round( -90 + Math.random() * 180 ), maxFrames = 10, rotationIncrement = Math.round( maxRotation / maxFrames ), _currentFrame = 0;
			
			var _animationFunction = function()
			{
				self.characterData.character_rotation += rotationIncrement;
				
				if( self.characterData.character_rotation % 2 == 0)
				{
					_skinObject.getNextFrame();
				}
				
				if( ++_currentFrame < maxFrames )
				{
					_idleTimeoutPointer = setTimeout( _animationFunction, 160);
					
					return;
				}
				
				self.startIdleMovementCountdown();
			}
			
			_idleTimeoutPointer = setTimeout( _animationFunction, 160);
		}
		
		// will remove the "circle" focus effect
		this.removeFocusPointerEffect = function()
		{
			var _iSpellEffects = self._internal.spellEffects;
			
			for( var i in _iSpellEffects )
			{
				var spellEffectObject = _iSpellEffects[i].constructor;
				
				if(
					spellEffectObject != spellEffects.selectEnemyAnimation
					&& spellEffectObject != spellEffects.selectFriendlyAnimation
					&& spellEffectObject != spellEffects.selectNeutralAnimation
					//&& spellEffectObject != spellEffects.selectSelfAnimation
				)
				{
					continue;
				}
				
				// effect needs to be removed
				
				_iSpellEffects[i].remove();
			}
		}
		
		this.removeVisualEffect = function( visualEffectConstructor )
		{
			var _iSpellEffects = self._internal.spellEffects;
			
			for( var i in _iSpellEffects )
			{
				var spellEffectObject = _iSpellEffects[i].constructor;
				
				if(
					spellEffectObject != visualEffectConstructor
				)
				{
					continue;
				}
				
				// effect needs to be removed
				
				_iSpellEffects[i].remove();
			}
		}
		
		// hide chat bubble(s) if any
		this.hideChatBubble = function()
		{
			self.removeVisualEffect( spellEffects.floatingChatImageBubble );
			self.removeVisualEffect( spellEffects.floatingChatTextBubble );
		}
		
		// should this character no longer receive any updates
		this.hide = function( after )
		{
			if( self.isVisible == false )
			{
				after();
				
				return false;
			}
			
			if( self.isTarget )
			{
				Component.bugcraft.currentCharacterObject.setTargetToMain();
			}
			
			self.isVisible = false;
			
			self.stopIdleMovement();
			self.disableRadialSounds();
			self.hideChatBubble();
			self.stopRandomNPCEffects();
			
			// if some effect is still active, remove it
			self.removeAllVisualEffects();
			
			new spellEffects.characterFadeOut({
														targetCharacter: self,
														after: function()
														{
															after();
														}
													});
			
			self.events._run( "hide", {} );
			
			// end any movement
			clearTimeout( _moveTimeoutPointer );
			_moveTimeoutPointer = null;
			
			return true;
		}
		
		var _vendorShowFunction = function( pageContext )
		{
			Component.bugcraft.pageVendor( self, pageContext );
		}
		
		var _questGiverShowFunction = function( pageContext )
		{
			Component.bugcraft.pageQuestGiver( self, pageContext );
		}
		
		this.show = function()
		{
			if( self.isVisible == true )
			{
				return false;
			}
			
			self.isVisible = true;
			
			if( self.characterData.character_is_alive != null )
			{
				new spellEffects.characterFadeIn({
														targetCharacter: self
													});
			}
			else
			{
				new spellEffects.characterInvisibility({
																	targetCharacter: self
																});
			}
			
			// vendor specific code
			if( self.characterData.character_is_vendor != null )
			{
				if( !self.events._exists( "use", _vendorShowFunction ) )
				{
					self.events._add( "use", _vendorShowFunction );
				}
				
				self.removeVisualEffect( spellEffects.vendorIcon );
				
				new spellEffects.vendorIcon({
												targetCharacter: self,
												iconName: "weapon"
											});
				
				new spellEffects.ambientRadialSounds({
															targetCharacter: self,
															streams:
															{
																10000: [ 'market1', 'market2' ],
																5000: [ 'coins1', 'coins2' ]
															}
														});
			}
			
			if( self.characterData.character_is_questgiver != null )
			{
				if( !self.events._exists( "use", _questGiverShowFunction ) )
				{
					self.events._add( "use", _questGiverShowFunction );
				}
			}
			
			// restart the effects
			for(var i in self.appliedBuffs)
			{
				var _b = self.appliedBuffs[ i ];
				
				if( !( _b.buff_type & 1 ) )
				{
					// passive buff
					
					continue;
				}
				
				new Component.bugcraft.ui.effectsHash[ _b.buff_id ]({
																					sourceCharacter: Component.bugcraft._characterData[ _b.buff_source_character_id ],
																					targetCharacter: self,
																					text: Math.floor( Math.random() * 999 )
																				});
			}
			
			self.events._run( "show", {} );
			
			return true;
		}
		
		//
		// Quest specific
		//
		
		this.removeQuestSymbols = function()
		{
			var _iSpellEffects = self._internal.spellEffects;
			
			for( var i in _iSpellEffects )
			{
				var spellEffectObject = _iSpellEffects[i].constructor;
				
				if(
					spellEffectObject != spellEffects.questNotAvailable
					&& spellEffectObject != spellEffects.questAvailable
					&& spellEffectObject != spellEffects.questWaiting
					&& spellEffectObject != spellEffects.questDone
				)
				{
					continue;
				}
				
				// effect needs to be removed
				
				_iSpellEffects[i].remove();
			}
		}
		
		this.showQuestAvailableSymbol = function()
		{
			self.removeQuestSymbols();
			
			new spellEffects.questAvailable({
													targetCharacter: self
												});
		}
		
		this.showQuestNotAvailableSymbol = function()
		{
			self.removeQuestSymbols();
			
			new spellEffects.questNotAvailable({
													targetCharacter: self
												});
		}
		
		this.showQuestDoneSymbol = function()
		{
			self.removeQuestSymbols();
			
			new spellEffects.questDone({
												targetCharacter: self
											});
		}
		
		this.showQuestWaitingSymbol = function()
		{
			self.removeQuestSymbols();
			
			new spellEffects.questWaiting({
												targetCharacter: self
											});
		}
		
		//
		// death and resurrection
		//
		
		this.command_die_self = function( update )
		{
			if( self.characterData.character_is_alive != null )
			{
				// no action if i've died into life
				
				return;
			}
			
			var _characterData = Component.bugcraft._characterData;
			
			// hide all characters but myself
			var _hideCharacter = function( characterID )
			{
				_characterData[ characterID ].hide( function()
				{
					delete Component.bugcraft._characterData[ characterID ];
				});
			}
			
			for(var i in _characterData)
			{
				if(
					typeof _characterData[ i ] != "object"
					|| i == self.characterData.character_id
				)
				{
					continue;
				}
				
				_hideCharacter( i );
			}
			
			self.stopIdleMovement();
			
			Component.bugcraft.sound.zone.stopRandomAreaLoop();
			Component.bugcraft.sound.zone.playDeathLoop();
			Component.bugcraft.sound.characters.playCharacterVoiceExclusive( self, "groans_death" );
			
			Map.toggleLimbo();
			
			new spellEffects.characterInvisibility({
														targetCharacter: self
													});
			
			Component.bugcraft.ui.updateBuffsStatusConsideringTarget();
			
			self.updateOnMain();
			
			if( self.isTarget )
			{
				self.updateOnTarget();
			}
			
			// request a battlefield update. this should have all the characters matching my new state
			Application.websocket.socket.send( '{"c":"updateBattleFieldFresh"}' );
		}
		
		this.command_die_third_party = function( update )
		{
			// 3rd party death
			
			self.stopIdleMovement();
			
			Component.bugcraft.sound.characters.playCharacterVoiceExclusive( self, "death" );
			
			self.characterData.character_is_alive = null;
			
			// remove all spell effects on character
			for( var i in self._internal.spellEffects )
			{
				var _sEffect = self._internal.spellEffects[ i ];
				
				if( typeof _sEffect != "object" )
				{
					continue;
				}
				
				_sEffect.remove();
			}
			
			self.hide( function()
			{
			
			});
		}
		
		this.command_resurrect_self = function( update )
		{
			// i was resurrected
			
			if( self.characterData.character_is_alive == null )
			{
				// no action if i'm resurrected into death
				
				return;
			}
			
			Component.bugcraft.sound.zone.stopDeathLoop();
			Component.bugcraft.sound.zone.playRandomAreaLoop();
			
			var _characterData = Component.bugcraft._characterData;
			
			// hide all characters but myself
			var _hideCharacter = function( characterID )
			{
				_characterData[ characterID ].hide( function()
				{
					delete Component.bugcraft._characterData[ characterID ];
				});
			}
			
			for(var i in _characterData)
			{
				if(
					typeof _characterData[ i ] != "object"
					|| i == self.characterData.character_id
				)
				{
					continue;
				}
				
				_hideCharacter( i );
			}
			
			// switch map
			Map.toggleLimbo();
			
			new spellEffects.resurrectComplete({
															targetCharacter: self
														});
			
			Component.bugcraft.ui.updateBuffsStatusConsideringTarget();
			
			self.updateOnMain();
			
			if( self.isTarget )
			{
				self.updateOnTarget();
			}
			
			// request a battlefield update. this should have all the characters matching my new state
			Application.websocket.socket.send( '{"c":"updateBattleFieldFresh"}' );
		}
		
		this.command_resurrect_third_party = function( update )
		{
			self.isVisible = true;
			
			self.characterData.appliedBuffs = update.p.b;
			
			if( self.characterData.character_is_alive == null )
			{
				// resurrected into death
				
				new spellEffects.characterInvisibility({
															targetCharacter: self
														});
				
			}
			else
			{
				// resurrected into life
				
				new spellEffects.resurrectComplete({
															targetCharacter: self
														});
			}
			
			/* check if i'm the owner and the corpse does not exist */
			
			if(
				self.characterData.character_id_corpse_character != null
				&& Component.bugcraft.currentCharacterTarget
				&& Component.bugcraft.currentCharacterTarget.characterData.character_id == self.characterData.character_id_corpse_character
			)
			{
				// this object has has a corpse and that corpse is the current target
				
				Component.bugcraft.currentCharacterTarget.removeFocusPointerEffect();
				Component.bugcraft.currentCharacterTarget.isTarget = false;
				Component.bugcraft.currentCharacterTarget.clearAppliedBuffsOnTarget();
				
				// updates for me
				Component.bugcraft.currentCharacterTarget = self;
				self.isTarget = true;
				
				self.updateOnTarget();
				
				// start updating the distance to the target
				Component.bugcraft.currentCharacterObject.updateDistanceToTargetPeriodically();
				
				// update bottom bar buffs
				Component.bugcraft.ui.updateBuffsStatusConsideringTarget();
			}
			else if( self.isTarget )
			{
				self.updateOnTarget();
			}
		}
		
		//
		// Stats Modification management
		//
		
		this.command_modify_self = function( args )
		{
			self.characterData[ "character_" + args.a ] += args.m;
			
			if( args.a == "hp_current" && args.m < 0 )
			{
				self.events._run( "damageTake", {} );
			}
			
			self[ "update" + args.a + "OnMain" ]( args );
		}
		
		this.command_modify_third_party = function( args )
		{
			self.characterData[ "character_" + args.a ] += args.m;
			
			if( args.a == "hp_current" && args.m < 0 )
			{
				self.events._run( "damageTake", {} );
			}
			
			if( args.a == "hp_current" && args.m < 0 )
			{
				// damage
				
				if( args.sid )
				{
					// done by a buff
					
					Component.bugcraft._characterData[ args.sid ].performAttackAnimation( 8 );
				}
				
				self.showRandomDamageEffect();
			}
			
			if( !self.isTarget )
			{
				return;
			}
			
			self[ "update" + args.a + "OnTarget" ]( args );
		}
		
		//
		// received buffs management
		//
		
		this.command_add_buff_miss = function( args )
		{
			// TBC
			
			new spellEffects.floatingText({
													targetCharacter: self,
													text: "Miss"
												});
		}
		
		this.command_add_buff = function( args )
		{
			self.appliedBuffs[ args.bi ] = {
										buff_id: args.bid,
										buff_type: args.ty,
										buff_name: args.n,
										buff_description: args.d,
										buff_mechanic_tics: args.t,
										buff_mechanic_duration_seconds: args.s,
										buff_effect: args.e,
										buff_source_character_id: args.sid,
										cb_applied_effect_remaining_seconds: args.aers
									};
			
			self.appliedEffects[ args.e ]++;
			
			if( args.ty & 1 )
			{
				// only active buffs have an associated effect
				// run the animation for this buff
				
				new Component.bugcraft.ui.effectsHash[ args.bid ]({
																					sourceCharacter: Component.bugcraft._characterData[ args.sid ],
																					targetCharacter: self,
																					text: Math.floor( Math.random() * 999 )
																				});
			}
			
			switch( args.e )
			{
				case 0:
					
					// cleanse
					
				break;
				case 2:
					
					// stun
					
					// stop all movement
					
					self.stun();
					
				break;
				case 4:
					
					// disarm
					
				break;
				
			}
			
			if( self.isMain )
			{
				// the character receiving the buff is me
				
				if( self.appliedBuffs[ args.bi ].UIObject )
				{
					self.appliedBuffs[ args.bi ].UIObject.addCopy( new Component.bugcraft.ui.avatarBuffIcon({ buff: self.appliedBuffs[ args.bi ], targetArea: 1 }) );
				}
				else
				{
					self.appliedBuffs[ args.bi ].UIObject = new Component.bugcraft.ui.avatarBuffIcon({ buff: self.appliedBuffs[ args.bi ], targetArea: 1 });
				}
			}
			
			if( self.isTarget )
			{
				// the character receiving the buff is the current target
				
				if( self.appliedBuffs[ args.bi ].UIObject )
				{
					self.appliedBuffs[ args.bi ].UIObject.addCopy( new Component.bugcraft.ui.avatarBuffIcon({ buff: self.appliedBuffs[ args.bi ], targetArea: 2 }) );
				}
				else
				{
					self.appliedBuffs[ args.bi ].UIObject = new Component.bugcraft.ui.avatarBuffIcon({ buff: self.appliedBuffs[ args.bi ], targetArea: 2 });
				}
			}
		}
		
		this.command_del_buff = 	function( args )
		{
			if( self.isMain )
			{
				// the character deleting the buff is me
				
				self.appliedBuffs[ args.bi ].UIObject.remove( self.isTarget );
			}
			else if( self.isTarget )
			{
				// the character deleting the buff is the target. it is a sure thing that only one buff is to be deleted from the UI
				
				self.appliedBuffs[ args.bi ].UIObject.remove( false );
			}
			
			delete self.appliedBuffs[ args.bi ];
		}
		
		// character disconnection
		this.command_disconnect = function( args )
		{
			// delete the last frame from the canvas
			spellEffects.layerCleaner.push({ previousX: self.characterData.character_zone_x, previousY: self.characterData.character_zone_y, deleteRange: self.characterData.character_width /* sometimes an overkill is good */ });
			
			self.hide( function()
			{
				delete Component.bugcraft._characterData[ self.characterData.character_id ];
			});
			
			setTimeout( function()
			{
				Component.bugcraft._characterIDs.splice(
												Component.bugcraft._characterIDs.indexOf( self.characterData.character_id ),
												1
											);
				
				// delete the global reference
				
				delete Component.bugcraft._characterData[ self.characterData.character_id ];
				//delete self;
			}, 2500 );
		}
		
		// set level (level-up or down)
		this.command_level_set = function( args )
		{
			self.characterData.character_level = args.l;
			self.characterData.character_hp_current = args.hp_current;
			self.characterData.character_hp_max = args.hp_max;
			
			new spellEffects.lvlUp({
										targetCharacter: self,
										sourceCharacter: self
									});
			
			Component.bugcraft.pageChatInsertMessage( "Notice", self.characterData.character_name + " is now level " + self.characterData.character_level );
			
			if( args.cid == Component.bugcraft.currentCharacterObject.characterData.character_id )
			{
				self.characterData.character_xp_max = args.x_m;
				self.characterData.character_xp_base = args.x_b;
				self.refreshxp_currentOnMain();
			}
			
			if(
				args.cid == Component.bugcraft.currentCharacterTarget.characterData.character_id
			)
			{
				self.refreshhp_currentOnTarget();
				self.updatelevelOnTarget();
			}
		}
		
		// default action handlers
		this.command_move = this.command_move_third_party;
		this.command_die = this.command_die_third_party;
		this.command_resurrect = this.command_resurrect_third_party;
		this.command_modify = this.command_modify_third_party;
		this.command_stealth_enter = this.command_stealth_enter_third_party;
		this.command_stealth_leave = this.command_stealth_leave_third_party;
		this.command_move_stop = this.command_move_stop_third_party;
		this.command_cast_start = this.command_cast_start_third_party;
		this.command_cast_complete = this.command_cast_complete_third_party;
		this.command_cast_interrupt = this.command_cast_interrupt_third_party;
		
		//
		// update events management
		//
		
		this.updatearmorOnTarget = function()
		{
			
		}
		
		this.updatedefenseOnTarget = function()
		{
			
		}
		
		this.updateattackOnTarget = function()
		{
			
		}
		
		this.updatepotencyOnTarget = function()
		{
			
		}
		
		this.updatestrengthOnTarget = function()
		{
			
		}
		
		this.updatehappinessOnTarget = function()
		{
			
		}
		
		this.updatespeedOnTarget = function( args )
		{
			if( args.m >= 0 )
			{
				return;
			}
			
			new spellEffects.floatingText({
													targetCharacter: self,
													text: 'Slowed',
													color: '#fff29a'
												});
		}
		
		this.updatearmorOnMain = function()
		{
			Component.bugcraft.pageProfileSetAttributes();
		}
		
		this.updatedefenseOnMain = function()
		{
			Component.bugcraft.pageProfileSetAttributes();
		}
		
		this.updateattackOnMain = function()
		{
			Component.bugcraft.pageProfileSetAttributes();
		}
		
		this.updatestrengthOnMain = function()
		{
			Component.bugcraft.pageProfileSetAttributes();
		}
		
		this.updatepotencyOnMain = function()
		{
			Component.bugcraft.pageProfileSetAttributes();
		}
		
		this.updatehappinessOnMain = function()
		{
			Component.bugcraft.pageProfileSetAttributes();
		}
		
		this.updateresistanceOnMain = function()
		{
			Component.bugcraft.pageProfileSetAttributes();
		}
		
		this.updatespeedOnMain = function( args )
		{
			Component.bugcraft.pageProfileSetAttributes();
			
			if( args.m >= 0 )
			{
				return;
			}
			
			new spellEffects.floatingText({
													targetCharacter: self,
													text: 'Slowed',
													color: '#fff29a'
												});
		}
		
		this.updategloryOnMain = function( args )
		{
			Component.bugcraft.pageProfileSetAttributes();
			
			setTimeout( function()
			{
				new spellEffects.floatingText({
													targetCharacter: self,
													text: ( ( args.m > 0 ) ? "+" : '' ) + args.m + " glory",
													color: '#a200ff'
												});
			}, 500 );
		}
		
		this.updatepolenOnMain = function( args )
		{
			// update vendors
			Component.bugcraft.pageVendorUpdatePlayerCurrency();
			
			// update bag
			Component.bugcraft.pageBagsUpdatePlayerCurrency();
			
			// battlefield
			setTimeout( function()
			{
				new spellEffects.floatingText({
														targetCharacter: self,
														text: ( ( args.m > 0 ) ? "+" : '' ) + args.m + " polen",
														color: '#ffde00'
													});
			}, 250 );
		}
		
		this.updateamberOnMain = function( args )
		{
			// update vendors
			Component.bugcraft.pageVendorUpdatePlayerCurrency();
			
			// update bag
			Component.bugcraft.pageBagsUpdatePlayerCurrency();
			
			// battlefield
			setTimeout( function()
			{
				new spellEffects.floatingText({
														targetCharacter: self,
														text: ( ( args.m > 0 ) ? "+" : '' ) + args.m + " amber",
														color: '#ffde00'
													});
			}, 250 );
		}
		
		this.enterCombatOnMain = function()
		{
			var _cm = Component.bugcraft._layoutObjects.characterCombatMarker,
					opacity = 0,
					modify = 0.1,
					_t = null;
			
			_cm.className = "inCombat";
			
			var _periodicGlow = function()
			{
				opacity += modify;
				
				_cm.style.opacity = opacity;
				_cm.style.MozOpacity = opacity;
				_cm.style.filter = "alpha(opacity=" + ( opacity * 100 ) + ")";
				
				if( opacity >= 1 )
				{
					modify = -0.1;
					
					_t = setTimeout( _periodicGlow, 500 );
					
					return;
				}
				else if( opacity <= 0 )
				{
					modify = 0.1;
					
					_t = setTimeout( _periodicGlow, 500 );
					
					return;
				}
				else
				{
					_t = setTimeout( _periodicGlow, 100 );
				}
			}
			
			self.leaveCombatOnMain = function()
			{
				clearTimeout( _t );
				
				_cm.className = "inCombatHidden";
			}
			
			_periodicGlow();
		}
		
		this.leaveCombatOnMain = function()
		{
			var _lo = Component.bugcraft._layoutObjects;
			
			_lo.characterCombatMarker.className = "inCombatHidden";
		}
		
		this.updatelevelOnTarget = function()
		{
			var _ccl = self.characterData.character_level;
			var _mcl = Component.bugcraft.currentCharacterObject.characterData.character_level;
			var _lo = Component.bugcraft._layoutObjects;
			
			if( _mcl - 5 >= _ccl )
			{
				_lo.targetLevelObject.className = "level levelNoChallenge";
			}
			else if( _mcl == _ccl )
			{
				_lo.targetLevelObject.className = "level levelSame";
			}
			else if( _mcl + 1 >= _ccl )
			{
				_lo.targetLevelObject.className = "level levelEasy";
			}
			else if( _mcl + 2 >= _ccl )
			{
				_lo.targetLevelObject.className = "level levelEasiest";
			}
			else if( _mcl - 2 <= _ccl )
			{
				_lo.targetLevelObject.className = "level levelHardest";
			}
			else
			{
				_lo.targetLevelObject.className = "level levelHard";
			}
			
			_lo.targetLevelNumberObject.innerHTML = _ccl;
			_lo.targetLevelNumberShadowObject.innerHTML = _ccl;
		}
		
		this.updateclassOnTarget = function()
		{
			var _cc = self.characterData;
			var _lo = Component.bugcraft._layoutObjects;
			
			_lo.targetClassObject.innerHTML = _cc.character_class;
			//_lo.targetClassShadowObject.innerHTML = _cc.character_class;
		}
		
		this.updatenameOnTarget = function()
		{
			var _cc = self.characterData;
			var _lo = Component.bugcraft._layoutObjects;
			
			_lo.targetNameObject.innerHTML = _cc.character_name;
			//_lo.targetNameShadowObject.innerHTML = _cc.character_name;
		}
		
		this.updateraceOnTarget = function()
		{
			var _cc = self.characterData;
			var _lo = Component.bugcraft._layoutObjects;
			
			_lo.targetRaceObject.innerHTML = _cc.character_race;
			//_lo.targetRaceShadowObject.innerHTML = _cc.character_race;
		}
		
		this.updateiconOnTarget = function()
		{
			var _lo = Component.bugcraft._layoutObjects;
			
			//_lo.targetIconObject.className = _skinObject.getTargetProfileIcon( self.characterData.character_is_friendly_to_main );
			_lo.targetIconObject.style.backgroundImage = "url('" + Application.configuration.cdn.location[ 0 ].url + "/object_skins/" + _skinObject.getSkinName() + "/portrait_" + ( ( self.characterData.character_is_friendly_to_main ) ? "friend" : ( ( self.characterData.character_faction == null ) ? "neutral" : "foe" ) ) + ".png')";
		}
		
		this.refreshhp_currentOnTarget = function()
		{
			var _cc = self.characterData;
			var _lo = Component.bugcraft._layoutObjects;
			
			if( _cc.character_hp_max > 0 )
			{
				Component.bugcraft._renderProgressBar({
																number: _cc.character_hp_current,
																total: _cc.character_hp_max,
																numbersObject: _lo.targetHealthNumberObject,
																fillingObject: _lo.targetHealthFillingObject,
																endingObject: _lo.targetHealthEndingObject
															});
			}
			else
			{
				Component.bugcraft._renderProgressBarStatic({
																		text: "invulnerable",
																		numbersObject: _lo.targetHealthNumberObject,
																		fillingObject: _lo.targetHealthFillingObject,
																		endingObject: _lo.targetHealthEndingObject
																	});
			}
		}
		
		this.updatemain_hand_damage_minOnMain = function( args )
		{
			Component.bugcraft.pageProfileSetAttributes();
		}
		
		this.updatemain_hand_damage_maxOnMain = function( args )
		{
			Component.bugcraft.pageProfileSetAttributes();
		}
		
		this.updateoff_hand_damage_minOnMain = function( args )
		{
			Component.bugcraft.pageProfileSetAttributes();
		}
		
		this.updateoff_hand_damage_maxOnMain = function( args )
		{
			Component.bugcraft.pageProfileSetAttributes();
		}
		
		this.updatehp_currentOnTarget = function( args )
		{
			self.refreshhp_currentOnTarget();
			
			if( args.bi && self.appliedBuffs[ args.bi ].buff_source_character_id != Component.bugcraft.currentCharacterObject.characterData.character_id )
			{
				//return;
			}
			
			// everything here is dealt by main char
			
			if( args.cr )
			{
				// critical
				
				if( args.m >= 0 )
				{
					// heal
					new spellEffects.floatingTextCriticalHeal({
																targetCharacter: self,
																color: "#66ff00",
																text: args.m
															});
				}
				else
				{
					// damage
					
					Component.bugcraft.sound.characters.playCharacterVoiceExclusive( self, "groans_pain" );
					
					new spellEffects.floatingTextCriticalDamage({
																targetCharacter: self,
																color: "#ffcc00",
																text: args.m
															});
					
					//self.showRandomDamageEffect();
				}
				
				return;
			}
			
			// not critical
			
			if( args.m >= 0 )
			{
				// heal
				
				new spellEffects.floatingTextHeal({
														targetCharacter: self,
														color: "#66ff00",
														text: args.m
													});
			}
			else
			{
				// damage
				
				Component.bugcraft.sound.characters.playCharacterVoiceExclusive( self, "groans_pain" );
				
				new spellEffects.floatingTextDamage({
															targetCharacter: self,
															color: "#ffcc00",
															text: args.m
														});
				
				//self.showRandomDamageEffect();
			}
		}
		
		this.updateresistanceOnTarget = function()
		{
			
		}
		
		// clear all buffs on the target avatar
		this.clearAppliedBuffsOnTarget = function()
		{
			for(var i in self.appliedBuffs )
			{
				var buff = self.appliedBuffs[i];
				
				if( typeof buff == "function" )
				{
					continue;
				}
				
				// the character receiving the buff is the current target
				
				self.appliedBuffs[ i ].UIObject.removeOnlyOnTarget( true );
			}
		}
		
		// set current character's data on target position
		this.updateOnTarget = function()
		{
			var _lo = Component.bugcraft._layoutObjects;
			
			// put the target focus on the new target
			if( self.characterData.character_is_friendly_to_main )
			{
				new spellEffects.selectFriendlyAnimation({
															sourceCharacter: self,
															targetCharacter: self
														});
			}
			else if( self.characterData.character_faction != null )
			{
				new spellEffects.selectEnemyAnimation({
															sourceCharacter: self,
															targetCharacter: self
														});
			}
			else
			{
				new spellEffects.selectNeutralAnimation({
															sourceCharacter: self,
															targetCharacter: self
														});
			}
			
			Map.minimap.hide();
			
			// updates
			self.refreshhp_currentOnTarget();
			
			self.updatelevelOnTarget();
			self.updateclassOnTarget();
			self.updatenameOnTarget();
			self.updateraceOnTarget();
			self.updateiconOnTarget();
			
			for(var i in self.appliedBuffs )
			{
				var buff = self.appliedBuffs[i];
				
				if( typeof buff == "function" )
				{
					continue;
				}
				
				// the character receiving the buff is the current target
				
				if( self.appliedBuffs[ i ].UIObject )
				{
					self.appliedBuffs[ i ].UIObject.addCopy( new Component.bugcraft.ui.avatarBuffIcon({ buff: self.appliedBuffs[ i ], targetArea: 2 }) );
				}
				else
				{
					self.appliedBuffs[ i ].UIObject = new Component.bugcraft.ui.avatarBuffIcon({ buff: self.appliedBuffs[ i ], targetArea: 2 });
				}
			}
		}
		
		//
		// pointsic updaters
		//
		
		this.refreshhp_currentOnMain = function()
		{
			var _cc = self.characterData, _lo = Component.bugcraft._layoutObjects;
			
			// render the progress bar
			Component.bugcraft._renderProgressBar({
																number: _cc.character_hp_current,
																total: _cc.character_hp_max,
																numbersObject: _lo.characterHealthNumberObject,
																fillingObject: _lo.characterHealthFillingObject,
																endingObject: _lo.characterHealthEndingObject
															});
		}
		
		this.updatehp_maxOnMain = function( args )
		{
			self.refreshhp_currentOnMain();
			
			if( Component.bugcraft.currentCharacterTarget.characterData.character_id == self.characterData.character_id )
			{
				// this character is the target also
				
				self.refreshhp_currentOnTarget();
			}
		}
		
		this.updatehp_currentOnMain = function( args )
		{
			self.refreshhp_currentOnMain();
			
			if( Component.bugcraft.currentCharacterTarget.characterData.character_id == self.characterData.character_id )
			{
				// this character is the target also
				
				self.refreshhp_currentOnTarget();
			}
			
			if( args.cr )
			{
				// critical
				
				if( args.m >= 0 )
				{
					// critical heal
					
					new spellEffects.floatingTextCriticalHeal({
																targetCharacter: self,
																color: "#66ff00",
																text: args.m
															});
				}
				else
				{
					// critical damage
					
					Component.bugcraft.sound.characters.playCharacterVoiceExclusive( self, "groans_pain" );
					
					new spellEffects.floatingTextCriticalDamage({
																targetCharacter: self,
																color: "#ff1200",
																text: args.m
															});
					
					self.showRandomDamageEffect();
				}
				
				return;
			}
			
			// not a critical
			
			if( args.m >= 0 )
			{
				// heal
				
				new spellEffects.floatingTextHeal({
														targetCharacter: self,
														color: "#66ff00",
														text: args.m
													});
			}
			else
			{
				// damage
				
				Component.bugcraft.sound.characters.playCharacterVoiceExclusive( self, "groans_pain" );
				
				new spellEffects.floatingTextDamage({
															targetCharacter: self,
															color: "#ff1200",
															text: args.m
														});
				
				self.showRandomDamageEffect();
			}
		}
		
		this.refreshxp_currentOnMain = function()
		{
			var _cc = self.characterData;
			var _lo = Component.bugcraft._layoutObjects;
			
			Component.bugcraft._renderProgressBar({
															number: _cc.character_xp_current,
															total: _cc.character_xp_max,
															base: _cc.character_xp_base - 1,
															numbersObject: _lo.characterExperienceNumberObject,
															fillingObject: _lo.characterExperienceFillingObject,
															endingObject: _lo.characterExperienceEndingObject
														});
		}
		
		this.updatexp_currentOnMain = function( args )
		{
			self.refreshxp_currentOnMain();
			
			new spellEffects.floatingText({
												targetCharacter: self,
												text: ( ( args.m > 0 ) ? "+" : '' ) + args.m + " xp",
												color: '#a200ff'
											});
		}
		
		this.updatelevelOnMain = function()
		{
			var _cc = self.characterData;
			var _lo = Component.bugcraft._layoutObjects;
			
			_lo.characterLevelObject.innerHTML = _cc.character_level;
			_lo.characterLevelShadowObject.innerHTML = _cc.character_level;
		}
		
		this.updateclassOnMain = function()
		{
			var _cc = self.characterData;
			var _lo = Component.bugcraft._layoutObjects;
			
			_lo.characterClassObject.innerHTML = _cc.character_class;
			//_lo.characterClassShadowObject.innerHTML = _cc.character_class;
		}
		
		this.updatenameOnMain = function()
		{
			var _cc = self.characterData;
			var _lo = Component.bugcraft._layoutObjects;
			
			_lo.characterNameObject.innerHTML = _cc.character_name;
			//_lo.characterNameShadowObject.innerHTML = _cc.character_name;
		}
		
		this.updateraceOnMain = function()
		{
			var _cc = self.characterData;
			var _lo = Component.bugcraft._layoutObjects;
			
			_lo.characterRaceObject.innerHTML = _cc.character_race;
			//_lo.characterRaceShadowObject.innerHTML = _cc.character_race;
		}
		
		this.updateiconOnMain = function()
		{
			var _cd = self.characterData,
					_lo = Component.bugcraft._layoutObjects;
			
			//_lo.characterIconObject.className = _skinObject.getMainProfileIcon();
			_lo.characterIconObject.style.backgroundImage = "url('" + Application.configuration.cdn.location[ 0 ].url + "/object_skins/" + _skinObject.getSkinName() + "/portrait_" + ( ( _cd.character_is_friendly_to_main ) ? "friend" : "foe" ) + ".png')";
		}
		
		// set current character's data on main position
		this.updateOnMain = function()
		{
			var _lo = Component.bugcraft._layoutObjects;
			
			var _clearArea = function( area )
			{
				while( area.childNodes.length )
				{
					Application.util.html.removeNode( area.childNodes[0] );
				}
			}
			
			self.refreshhp_currentOnMain();
			self.refreshxp_currentOnMain();
			
			self.updatelevelOnMain();
			self.updateclassOnMain();
			self.updatenameOnMain();
			self.updateraceOnMain();
			self.updateiconOnMain();
			
			// clearing buffs areas
			_clearArea( _lo.selfActiveBuffsObject );
			_clearArea( _lo.selfPassiveBuffsObject );
			
			for(var i in self.appliedBuffs )
			{
				var buff = self.appliedBuffs[i];
				
				if( typeof buff == "function" )
				{
					continue;
				}
				
				// the character receiving the buff is the current target
				
				if( self.appliedBuffs[ i ].UIObject )
				{
					self.appliedBuffs[ i ].UIObject.addCopy( new Component.bugcraft.ui.avatarBuffIcon({ buff: self.appliedBuffs[ i ], targetArea: 1 }) );
				}
				else
				{
					self.appliedBuffs[ i ].UIObject = new Component.bugcraft.ui.avatarBuffIcon({ buff: self.appliedBuffs[ i ], targetArea: 1 });
				}
			}
		}
		
		/*
			-----------
			Initialization
			-----------
		*/
		
		//self.characterData.character_width = Map.ctx.measureText( self.characterData.character_name );
		
		if( self.characterData.character_type == 1 || self.characterData.character_type == 3 )
		{
			// for NPCs and Characters only. No items
			
			/*
			if( self.characterData.character_type == 1 )
			{
				// NPC
				
				setTimeout( function() { self.showRandomNPCEffectPeriodically() }, 10000 );
			}
			*/
			
			self.startIdleMovementCountdown();
		}
		else
		{
			// items
			
			// set usable if it makes any sense
			//self.command_set_usable();
		}
		
		if( self.characterData.character_is_stealth != null )
		{
			self.command_stealth_enter();
		}
		
		if( self.characterData.character_id_object_pool != null )
		{
			// run this object's script
			
			if( npcScript[ self.characterData.character_id_object_pool ] )
			{
				this.characterScript = new npcScript[ self.characterData.character_id_object_pool ]( self );
			}
			
			// run the "show" events for the character initialization
			//self.events._run( "show", {} );
		}
		
		var _cOwner = null;
		
		if(
			self.characterData.character_id_owner_character != null
			&& ( _cOwner = Component.bugcraft._characterData[ self.characterData.character_id_owner_character ] )
			&& _cOwner.characterData.character_is_alive == null
			&& _cOwner == Component.bugcraft.currentCharacterTarget
			&& Component.bugcraft.currentCharacterTarget.characterData.character_id != self.characterData.character_id_owner_character		// don't apply this for the main character
		)
		{
			// this object has an owner and that owner is dead. move the target from the owner (current target) to self
			
			Component.bugcraft.currentCharacterTarget.removeFocusPointerEffect();
			Component.bugcraft.currentCharacterTarget.isTarget = false;
			Component.bugcraft.currentCharacterTarget.clearAppliedBuffsOnTarget();
			
			Component.bugcraft.currentCharacterTarget = self;
			self.isTarget = true;
			
			self.updateOnTarget();
			
			// start updating the distance to the target
			Component.bugcraft.currentCharacterObject.updateDistanceToTargetPeriodically();
			
			// update bottom bar buffs
			Component.bugcraft.ui.updateBuffsStatusConsideringTarget();
		}
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	


/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft._shared_.map.js
*/


	/*
		-----
		Map
		-----
	*/
	
	var Map = {
		
		mapID: 0,
		mapName: "",
		mapRules: null,
		
		mapObject: null,
		
		quadrantWidth: 300,
		quadrantHeight: 300,
		mapWidth: 0,
		mapHeight: 0,
		
		qt: null,
		ctx: null,
		
		viewPortX: 0,
		viewPortY: 0,
		
		surface:
		{
			points: [],
			vertices: [],
			polys: [],
			rectanglesByX: [],
			rectanglesByY: [],
			quadTree: []
		},
		
		_currentCTX: 0,
		
		_evaluateRelationship: function( o ) { return false; },
		_evaluateCastingAbility: function( o ) { return false; },
		_evaluateRelationshipToCharacter: function( o ) { return false; },
		
		minimap:
		{
			imageObject: null,
			imageObjectOutside: null,
			imageObjectInside: null,
			
			pointerSelfImageObject: null,
			pointerFriendImageObject: null,
			pointerFoeImageObject: null,
			pointerNeutralImageObject: null,
			
			isVisible: false,
			
			show: function()
			{
				var _lo = Component.bugcraft._layoutObjects;
				
				this.isVisible = true;
				
				_lo.rightCharacterObject.className = "rightCharacter hidden";
				_lo.mapAreaObject.className = "mapArea";
			},
			
			hide: function()
			{
				var _lo = Component.bugcraft._layoutObjects;
				
				this.isVisible = false;
				
				// ensure that the target is displayed
				_lo.rightCharacterObject.className = "rightCharacter";
				_lo.mapAreaObject.className = "mapArea hidden";
			},
			
			draw: function() { },
			
			toggleInside: function()
			{
				if( this.imageObject == this.imageObjectOutside )
				{
					this.imageObject = this.imageObjectInside;
					
					return
				}
				
				this.imageObject = this.imageObjectOutside;
			}
		},
		
		startInsideChecking: function()
		{
			var _p = Map.surface.polys;
			
			var _findPolyByCharacter = function( characterObject, onChange )
			{
				var _x = characterObject.characterData.character_zone_x,
						_y = characterObject.characterData.character_zone_y;
				
				if( Map._pointInPolygon(
										_x,
										_y,
										characterObject.currentPolyIndex
									) )
				{
					return _p[ characterObject.currentPolyIndex ];
				}
				
				// character moved to another polygon. exhaustive search
				
				for( var polyNumber = 0; polyNumber < _p.length; polyNumber++ )
				{
					if( !Map._pointInPolygon(
											_x, 
											_y,
											polyNumber
										) )
					{
						continue;
					}
					
					characterObject.currentPolyIndex = polyNumber;
					
					onChange( _p[ polyNumber ] );
					
					return _p[ polyNumber ];
				}
				
				return false;
			}
			
			var _checkCharactersInside = function()
			{
				var _ccO = Component.bugcraft.currentCharacterObject,
							_ccoAlive = _ccO.characterData.character_is_alive,
							_gcd = Component.bugcraft._characterData,
							_poly = _findPolyByCharacter( _ccO, function( _poly )
							{
								if( _poly.name.length == 0 )
								{
									Map.setPolygonName( Map.mapName );
									
									return;
								}
								
								Component.bugcraft.messages.addInfo( _poly.name );
								Map.setPolygonName( _poly.name );
							});
				
				if( _ccO.isInside != _poly.inside )
				{
					_ccO.isInside = _poly.inside;
					
					Map.toggleInside();
				}
				
				// go through all the characters
				for(var i in _gcd)
				{
					var _cd = _gcd[ i ];
					
					if( typeof _cd != "object" )
					{
						continue;
					}
					
					_cd.isInside = _findPolyByCharacter( _cd, function() { } ).inside;
					
					if(
						_cd.characterData.character_is_alive != _ccoAlive
					)
					{
						continue;
					}
					
					if( _poly.inside == _cd.isInside )
					{
						_cd.isInSameLayer = true;
						_cd.show();
						
						continue;
					}
					
					_cd.isInSameLayer = false;
					_cd.hide( function()
					{
						
					});
				}
				
				setTimeout( _checkCharactersInside, 500 );
			}
			
			_checkCharactersInside();
		},
		
		init: function( args )
		{
			var self = this;
			
			this.mapObject = document.getElementById( args.id + "_map" );
			this._mapNameObject = document.getElementById( args.id + "_mapName" );
			this._mapNameShadowObject = document.getElementById( args.id + "_mapNameShadow" );
			
			this._canvasAreaObject = document.getElementById( args.id + "_canvasArea" );
			
			// Maximize
			
			this.mapWidth = Application.util.screen.getSize().width;
			this.mapHeight = Application.util.screen.getSize().height;
			
			// initialize the canvas areas
			
			this._canvasAreaObject.setAttribute("width", this.mapWidth);
			this._canvasAreaObject.setAttribute("height", this.mapHeight);
			this._canvasAreaObject.style.width = this.mapWidth + "px";
			this._canvasAreaObject.style.height = this.mapHeight + "px"
			
			//Application.webgl2d();
			//WebGL2D.enable( this._canvasAreaObject );
			//this.ctx = this._canvasAreaObject.getContext("webgl-2d");
			this.ctx = this._canvasAreaObject.getContext("2d");
			
			this.createGrid({
							id: args.id,
							square_height: this.quadrantHeight, //size per square
							square_width: this.quadrantWidth, //
							size_x: Math.ceil( Map.surface.width / this.quadrantWidth ), //total squares
							size_y: Math.ceil( Map.surface.height / this.quadrantHeight ), //
							base_src_outside: Application.configuration.cdn.location[0].url + "/img/maps/map_" + Map.mapID + "/map-", 					//map image name template
							base_src_limbo_outside: Application.configuration.cdn.location[0].url + "/img/maps/mapLimbo_" + Map.mapID + "/map-", 	//map image name template
							base_src_inside: Application.configuration.cdn.location[0].url + "/img/maps/mapInside_" + Map.mapID + "/map-",
							base_src_limbo_inside: Application.configuration.cdn.location[0].url + "/img/maps/mapLimboInside_" + Map.mapID + "/map-",
							base_src: null
						});
						
			//
			// Minimap
			//
			
			var minimapCtx = Component.bugcraft._layoutObjects.minimapCanvasAreaObject.getContext("2d");
			
			Map.minimap.imageObjectOutside = new Image();
			Map.minimap.imageObjectOutside.src = '/appSpecific/img/maps/minimap_' + Map.mapID + '.jpg';
			Map.minimap.imageObjectInside = new Image();
			Map.minimap.imageObjectInside.src = '/appSpecific/img/maps/minimapInside_' + Map.mapID + '.jpg';
			
			Map.minimap.imageObject = Map.minimap.imageObjectOutside;
			
			Map.minimap.pointerSelfImageObject = new Image();
			Map.minimap.pointerSelfImageObject.src = '/appSpecific/img/minimap/pointer_minimap.png';
			Map.minimap.pointerFriendImageObject = new Image();
			Map.minimap.pointerFriendImageObject.src = '/appSpecific/img/minimap/pointer_minimap_friend.png';
			Map.minimap.pointerFoeImageObject = new Image();
			Map.minimap.pointerFoeImageObject.src = '/appSpecific/img/minimap/pointer_minimap_foe.png';
			Map.minimap.pointerNeutralImageObject = new Image();
			Map.minimap.pointerNeutralImageObject.src = '/appSpecific/img/minimap/pointer_minimap_neutral.png';
			
			Map.minimap.draw = function()
			{
				if( Map.minimap.isVisible == false )
				{
					return false;
				}
				
				var _ccd =  Component.bugcraft.currentCharacterObject.characterData,
									minimap_selfCharacter_zone_x = _ccd.character_zone_x * 0.0625,
									minimap_selfCharacter_zone_y = _ccd.character_zone_y * 0.0625;
				
				minimapCtx.save();
				minimapCtx.beginPath()
				minimapCtx.arc(62, 64, 60, 0, Math.PI*2, true); 
				minimapCtx.closePath();
				minimapCtx.clip();
				
				// set the black background
				minimapCtx.fillStyle = "rgb( 0, 0, 0 )";
				minimapCtx.fillRect( 0, 0, 134, 144 );
				
				minimapCtx.drawImage(
										Map.minimap.imageObject,
										62 - minimap_selfCharacter_zone_x,
										64 - minimap_selfCharacter_zone_y
									);
									
				minimapCtx.translate( 62, 64 );
				
				//draw other characters
				for(var i in Component.bugcraft._characterData)
				{
					var _co = Component.bugcraft._characterData[ i ];
					
					if(
						typeof _co != "object"
						|| _co.characterData.character_id == _ccd.character_id
						|| _co.isInSameLayer == false
						|| _co.characterData.character_is_targetable == null
					)
					{
						continue;
					}
					
					var _cod = _co.characterData,
							minimap_character_zone_x = _cod.character_zone_x * 0.0625,
							minimap_character_zone_y = _cod.character_zone_y * 0.0625;
					
					if( Math.sqrt(
								Math.pow( minimap_character_zone_x - minimap_selfCharacter_zone_x, 2 ) +
								Math.pow( minimap_character_zone_y - minimap_selfCharacter_zone_y, 2 )
							) > 124 )
					{
						continue;
					}
					
					var pointerToDraw = null;
					
					if( _cod.character_is_friendly_to_main )
					{
						// friend

						pointerToDraw = Map.minimap.pointerFriendImageObject;
					}
					else if( _cod.character_faction != null )
					{
						// foe

						pointerToDraw = Map.minimap.pointerFoeImageObject;
					}
					else
					{
						// neutral

						pointerToDraw = Map.minimap.pointerNeutralImageObject;
					}
					
					minimapCtx.drawImage(
											pointerToDraw, 
											minimap_character_zone_x - minimap_selfCharacter_zone_x,
											minimap_character_zone_y - minimap_selfCharacter_zone_y
										);
				}
				
				minimapCtx.rotate( ( _ccd.character_rotation - 90 ) * Math.PI / 180 );
				
				minimapCtx.drawImage( Map.minimap.pointerSelfImageObject, -31, -32);
				
				minimapCtx.restore();
			};
			
			//
			// Init the grid search structure
			//
			
			this.astarObject = new Component.bugcraft.astar();
			this.astarObject.grid = new this.astarObject.Graph( Map.surface.grid );
			
			// handle map updates
			
			Application.websocket.handlers.mapUpdate = function( jsonEl, ws )
			{
				var _sd = jsonEl.sd, _content = _sd.content;
				
				for(var i=0;i<_content.length;i++)
				{
					var _line = _content[ i ];
					
					for(var j=0;j<_line.length;j++)
					{
						Map.surface.grid[ _sd.startX + i ][ _sd.startY + j ] = _line[ j ];
					}
				}
				
				self.astarObject.grid = new self.astarObject.Graph( Map.surface.grid );
			}
			
			// Define the rules considering the gameplay
			this._defineMapRules();
			/*
			Map.worker = new Worker('components/bugcraft/resources/public/worker.map.js');
			Map.worker.addEventListener(
							'message',
							function(e)
							{
								switch( e.data.c )
								{
									case 'init':
									
										console.log("map worker initialized");
										initAfter();
									
									break;
									case 'checkMapMove':
									
										//console.log( "move return", e.data )
										if( e.data.r != 200 )
										{
											return;
										}
										
										Map._moveDelta(
													e.data.dx,
													e.data.dy,
													e.data.edx,
													e.data.edy
												);
									
									break;
									default:
									
										console.log( "worker", e.data );
								}
							},
							false
						);
			Map.worker.postMessage({
								c: 'init',
								dragContainer: {
												offsetTop: dragContainer.offsetTop,
												offsetLeft: dragContainer.offsetLeft
											},
								square_width: this.quadrantWidth,
								square_height: this.quadrantHeight,
								big_size_width: this.quadrantWidth * Math.ceil( Map.surface.width / this.quadrantWidth ),
								big_size_height: this.quadrantHeight * Math.ceil( Map.surface.height / this.quadrantHeight ),
								mapWidth: this.mapWidth,
								mapHeight: this.mapHeight
							});
			*/
		},
		
		_defineMapRules: function()
		{
			switch( Map.mapRules )
			{
				case "arena":
					
					Map._evaluateCastingAbility = function( buff )
					{
						var _cc = Component.bugcraft.currentCharacterObject.characterData;
						var _tc = Component.bugcraft.currentCharacterTarget.characterData;
						
						return (
										( buff.buff_allow_target & 1 && _cc.character_id == _tc.character_id )			// me
										|| ( buff.buff_allow_target & 8 && _cc.character_id != _tc.character_id )		// foe
									);
					}
					
					Map._evaluateRelationship = function()
					{
						// no man's land
						
						return Component.bugcraft.currentCharacterObject.characterData.character_id == Component.bugcraft.currentCharacterTarget.characterData.character_id;
					}
					
					Map._evaluateRelationshipToCharacter = function( characterObject )
					{
						// no man's land
						
						return Component.bugcraft.currentCharacterObject.characterData.character_id == characterObject.characterData.character_id;
					}
					
				break;
				case "afriendly":
					
					Map._evaluateCastingAbility = function( buff )
					{
						var _cc = Component.bugcraft.currentCharacterObject.characterData;
						var _tc = Component.bugcraft.currentCharacterTarget.characterData;
						
						return (
										buff.buff_allow_target & 1																																			// me
										|| ( buff.buff_allow_target & 2 && _cc.character_id != _tc.character_id && _tc.character_faction == "anterium" )						// friend
										|| ( buff.buff_allow_target & 8 && _cc.character_id != _tc.character_id && _tc.character_faction != "anterium" )						// foe
									);
					}
					
					Map._evaluateRelationship = function()
					{
						// only anterium players are friends
						
						return Component.bugcraft.currentCharacterTarget.characterData.character_faction == "anterium";
					}
					
					Map._evaluateRelationshipToCharacter = function( characterObject )
					{
						// only anterium players are friends
						
						return characterObject.characterData.character_faction == "anterium";
					}
					
				break;
				case "hfriendly":
					
					Map._evaluateCastingAbility = function( buff )
					{
						var _cc = Component.bugcraft.currentCharacterObject.characterData;
						var _tc = Component.bugcraft.currentCharacterTarget.characterData;
						
						return (
										buff.buff_allow_target & 1																																			// me
										|| ( buff.buff_allow_target & 2 && _cc.character_id != _tc.character_id && _tc.character_faction == "hegemony" )					// friend
										|| ( buff.buff_allow_target & 8 && _cc.character_id != _tc.character_id && _tc.character_faction != "hegemony" )					// foe
									);
					}
					
					Map._evaluateRelationship = function()
					{
						// only anterium players are friends
						
						return Component.bugcraft.currentCharacterTarget.characterData.character_faction == "hegemony";
					}
					
					Map._evaluateRelationshipToCharacter = function( characterObject )
					{
						// only anterium players are friends
						
						return characterObject.characterData.character_faction == "hegemony";
					}
					
				break;
				case "battleground":
					
					Map._evaluateCastingAbility = function( buff )
					{
						var _cc = Component.bugcraft.currentCharacterObject.characterData;
						var _tc = Component.bugcraft.currentCharacterTarget.characterData;
						
						return (
										buff.buff_allow_target & 1																																							// me
										|| ( buff.buff_allow_target & 2 && _cc.character_id != _tc.character_id && _cc.character_faction == _tc.character_faction )		// friend
										|| ( buff.buff_allow_target & 8 && _cc.character_id != _tc.character_id && _cc.character_faction != _tc.character_faction )		// foe
									);
					}
					
					Map._evaluateRelationship = function()
					{
						// only same faction are friends
						
						return Component.bugcraft.currentCharacterObject.characterData.character_faction == Component.bugcraft.currentCharacterTarget.characterData.character_faction;
					}
					
					Map._evaluateRelationshipToCharacter = function( characterObject )
					{
						// only same faction are friends
						
						return Component.bugcraft.currentCharacterObject.characterData.character_faction == characterObject.characterData.character_faction;
					}
					
				break;
				default:
					
					Application.debug.addError( "Map rules not treated: " + Map.mapRules );
			}
		},
		
		checkIfPointIsInWalkablePoly: function( x, y )
		{
			// select the fastest group
			
			if( x < y )
			{
				var rectangles = Map.surface.rectanglesByX;
			}
			else
			{
				var rectangles = Map.surface.rectanglesByY;
			}
			
			for( var i=0;i<rectangles.length;i++)
			{
				if(
					x < rectangles[ i ][1] ||
					x > rectangles[ i ][3] ||
					y < rectangles[ i ][2] ||
					y > rectangles[ i ][4]
				)
				{
					continue;
				}
				
				// rectangle found. now checking if the point is in the corresponding polygon
				
				if( !Map._pointInPolygon( x, y, rectangles[ i ][0] ) )
				{
					// cannot continue with this polygon if it is an obstacle
					
					continue;
				}
				
				// the point is in this polygon
				
				if(
					Map.surface.polys[ rectangles[ i ][0] ].walkable == false
				)
				{
					// polygon if it is an obstacle
					
					//Application.debug.addError( "Point " + x + " - " + y + " is in a non walkable poly" );
					
					return false;
				}
				
				// the polygon is walkable
				
				return true;
			}
			
			// no polygon would fit that point. default to not walkable
			
			return false;
		},
		
		getStraightPath: function( startX, startY, endX, endY, maxRange, onSuccess )
		{
			var _path = [], _rangeInCells = Math.floor( maxRange / Map.surface.gridCellWidth );
			
			if( !Map._rayTrace(
							Math.round( startX / Map.surface.gridCellWidth ),
							Math.round( startY / Map.surface.gridCellHeight ),
							Math.round( endX / Map.surface.gridCellWidth ),
							Math.round( endY / Map.surface.gridCellHeight ),
							function( x, y )
							{
								if( Map.surface.grid[ x ][ y ] == 0 )
								{
									_path.push( [ x, y ] );
									
									return;
								}
								
								// collision
								
								var _lastCoords = _path.pop();
								
								if( !_lastCoords )
								{
									return;
								}
								
								onSuccess( [ [ _lastCoords[ 0 ] * Map.surface.gridCellWidth, _lastCoords[ 1 ] * Map.surface.gridCellHeight ] ] );
								
								// finish the raytrace right away
								return true;
							}
						) )
			{
				return false;
			}
			
			// no collision. straight path
			
			onSuccess( [ [ endX, endY ] ] );
			
			return true;
		},
		
		getMinimalPath: function( startX, startY, endX, endY, maxRange, onSuccess )
		{
			var _start = this.astarObject.grid.nodes[ Math.ceil( startX / Map.surface.gridCellWidth ) ][ Math.ceil( startY / Map.surface.gridCellHeight ) ],
					_end = this.astarObject.grid.nodes[ Math.ceil( endX / Map.surface.gridCellWidth ) ][ Math.ceil( endY / Map.surface.gridCellHeight ) ];
			
			var result = this.astarObject.astar(
														this.astarObject.grid.nodes,
														_start,
														_end,
														null
														/*
														function(Point,Goal)
														{
															// euclidean
															
															return Math.sqrt(Math.pow(Point.x-Goal.x,2)+Math.pow(Point.y-Goal.y,2));
														}
														*/
													);
			
			if( result.length == 0 )
			{
				// unable to move to that point using optimal path. attempt a straight line movement
				
				Map.getStraightPath(
									startX,
									startY,
									endX,
									endY,
									maxRange,
									function( path )
									{
										result = path;
									}
								);
				
				if( result.length == 0 )
				{
					Component.bugcraft.sound.characters.playMainVoice( "cannotDoThat" );
					
					Component.bugcraft.messages.addError( "I can't move there" );
					
					return false;
				}
				
				// all done
				onSuccess( result );
				
				return true;
			}
			
			// move until the maxrange has been achieved
			
			var _rangeInCells = Math.floor( maxRange / Map.surface.gridCellWidth );
			
			if( result.length <= _rangeInCells )
			{
				// we're already in the requested range
				
				onSuccess( [] );
				
				return false;
			}
			
			// remove the last steps
			result.splice( result.length - _rangeInCells, _rangeInCells );
			
			if( maxRange > 0 )
			{
				// make sure that the end point is altered to include the last element in the path
				
				endX = result[ result.length - 1 ].x * Map.surface.gridCellWidth;
				endY = result[ result.length - 1 ].y * Map.surface.gridCellHeight;
			}
			
			for(var i=1;i<result.length;i++)
			{
				var collided = false;
				
				Map._rayTrace(
							result[i-1].x,
							result[i-1].y,
							result[ i ].x,
							result[ i ].y,
							function( x, y )
							{
								if( Map.surface.grid[ x ][ y ] == 0 )
								{
									return;
								}
								
								// collision
								
								collided = true;
								
								// finish the raytrace right away
								return true;
							}
						);
				
				if( collided == false )
				{
					// smooth path
					
					result.splice( i, 1 );
					
					i--;
				}
			}
			
			var path = [], xMove = 3, yMove = 3, previousXMove = xMove, previousYMove = yMove;
			for(var i=1;i<result.length;i++)
			{
				previousXMove = xMove;
				previousYMove = yMove;
				
				if( result[ i ].x - result[ i - 1 ].x > 0 )
				{
					xMove = 1;
				}
				else if( result[ i ].x - result[ i - 1 ].x < 0 )
				{
					xMove = 2;
				}
				else
				{
					xMove = 3;
				}
				
				if( result[ i ].y - result[ i - 1 ].y > 0 )
				{
					yMove = 1;
				}
				else if( result[ i ].y - result[ i - 1 ].y < 0 )
				{
					yMove = 2;
				}
				else
				{
					yMove = 3;
				}
				
				if( xMove == previousXMove && yMove == previousYMove )
				{
					// the move is constant
					
					continue;
				}
				
				path.push( [ result[ i ].x * Map.surface.gridCellWidth, result[ i ].y * Map.surface.gridCellHeight ] );
			}
			path.push( [ endX, endY ] );
			
			// all done
			onSuccess( path );
		},
		
		/*
		_rayTrace: function( x0, y0, x1, y1, onRayTrace )
		{
			var dx = Math.abs(x1 - x0);
			var dy = Math.abs(y1 - y0);

			var x = parseInt(Math.floor(x0));
			var y = parseInt(Math.floor(y0));

			var n = 1;
			var x_inc, y_inc;
			var error;

			if (dx == 0)
			{
				x_inc = 0;
				error = 9999999999; // infinity
			}
			else if (x1 > x0)
			{
				x_inc = 1;
				n += parseInt(Math.floor(x1)) - x;
				error = (Math.floor(x0) + 1 - x0) * dy;
			}
			else
			{
				x_inc = -1;
				n += x - parseInt(Math.floor(x1));
				error = (x0 - Math.floor(x0)) * dy;
			}

			if (dy == 0)
			{
				y_inc = 0;
				error -= 9999999999; // infinity
			}
			else if (y1 > y0)
			{
				y_inc = 1;
				n += parseInt(Math.floor(y1)) - y;
				error -= (Math.floor(y0) + 1 - y0) * dx;
			}
			else
			{
				y_inc = -1;
				n += y - parseInt(Math.floor(y1));
				error -= (y0 - Math.floor(y0)) * dx;
			}

			for (; n > 0; --n)
			{
				if( onRayTrace( x, y ) == true )
				{
					// function ended the raytrace process. continuing is not required
					
					return;
				}
				
				if (error > 0)
				{
					y += y_inc;
					error -= dx;
				}
				else
				{
					x += x_inc;
					error += dy;
				}
			}
		},
		*/
		
		_rayTrace: function( x0, y0, x1, y1, onRayTrace )
		{
			var dx = Math.abs(x1 - x0),
					dy = Math.abs(y1 - y0),
					x = x0,
					y = y0,
					n = 1 + dx + dy,
					x_inc = (x1 > x0) ? 1 : -1,
					y_inc = (y1 > y0) ? 1 : -1,
					error = dx - dy,
					dx = dx * 2,
					dy = dy * 2;
			
			for (; n > 0; --n)
			{
				if( onRayTrace( x, y ) == true )
				{
					// function ended the raytrace process. continuing is not required
					
					return false;
				}
				
				if (error > 0)
				{
					x += x_inc;
					error -= dy;
				}
				else
				{
					y += y_inc;
					error += dx;
				}
			}
			
			return true;
		},
		
		_pointInPolygon: function( x, y, polyNumber )
		{
			var _p = Map.surface.points,
					_c = Map.surface.polys[ polyNumber ].coords,
					j = _c.length - 1,
					oddNodes = false;
			
			for(var i = 0;i < _c.length; i++)
			{
				var pointI = _c[ i ],
						pointJ = _c[ j ],
						_pointIY = _p[ pointI ][1],
						_pointJY = _p[ pointJ ][1],
						_pointIX = _p[ pointI ][0],
						_pointJX = _p[ pointJ ][0];
				
				if(
					_pointIX == x &&
					_pointIY == y
				)
				{
					return true;
				}
				
				if(
					( _pointIY < y && _pointJY >= y ) ||
					( _pointJY < y && _pointIY >= y )
				)
				{
					if(
						_pointIX + ( y - _pointIY ) / ( _pointJY - _pointIY ) * ( _pointJX - _pointIX ) < x
					)
					{
						oddNodes = !oddNodes;
					}
				}

				j = i;
			}
			
			return oddNodes;
		},
		
		_segmentsIntersect: function( ux1, uy1, ux2, uy2, vx1, vy1, vx2, vy2 )
		{
			var detA = (ux2-ux1)*(vy1-vy2) - (vx1-vx2)*(uy2-uy1);
			
			if(!(detA===0.0))
			{
				var t = ((vy1-vy2)*(vx1-ux1) + (vx2-vx1)*(vy1-uy1))/detA;
				var s = ((uy1-uy2)*(vx1-ux1) + (ux2-ux1)*(vy1-uy1))/detA;
				
				if(t>0.001 && t<0.999)
				{//the ends touch
					if(s>0.001 && s<0.999)
					{
						return true;
					}
				}
			}
			
			return false;
		},
		
		_smoothPath: function( pathArray )
		{
			var qt = this.qt;
			
			for( var i=0;i<pathArray.length-1;i++ )
			{
				var sourcePointID = pathArray[ i ];
				var sourcePoint = Map.surface.points[ sourcePointID ];
				
				for(var k=pathArray.length-1;k>i;k--)
				{
					var targetPointID = pathArray[ k ];
					var targetPoint = Map.surface.points[ targetPointID ];
					
					var collided = false;
					var collidedWithSource = false;
					
					Map._rayTrace(
								sourcePoint[0],
								sourcePoint[1],
								targetPoint[0],
								targetPoint[1],
								function( x, y )
								{
									var points = qt.retrieve({x:x, y:y});
									
									if( points.length == 0 )
									{
										// no collision
										
										return;
									}
									
									// collision
									
									collided = true;
									for(var j=0;j<points.length;j++)
									{
										if(
											(
												points[ j ].endVertice != sourcePointID &&
												points[ j ].startVertice != sourcePointID
											)
											&&
											(
												points[ j ].endVertice != targetPointID &&
												points[ j ].startVertice != targetPointID
											)
										)
										{
											continue;
										}
										
										// colliding with source or target vertice. source must be a wall and this is error compensation
										
										collidedWithSource = true;
										collided = false;
										
										return;
									}
									
									// collision occured but it is not with a vertice connected to the source
									
									for(var j=0;j<points.length;j++)
									{
										if(
											points[ j ].x != targetPoint[0] ||
											points[ j ].y != targetPoint[1]
										)
										{
											continue;
										}
										
										// quad contains target point. full path obtained without collisions with 3rd party points
										
										Application.debug.addError("x");
										
										//pathArray.splice( i + 1, 1 );
										
										//i--;
										
										// make sure we finish the raytrace right away
										return true;
									}
									
									if( collidedWithSource == true )
									{
										// we have previously collided with the source and we are no longer colliding with it or the target. we cannot collide with any other point
										
										return true;
									}
									
									// collision did not find the target. this is a 3rd party vertice
									
									//sourcePointID = pathArray[ i + 1 ];
									//sourcePoint = Map.surface.points[ sourcePointID ];
									
									// make sure we finish the raytrace right away
									return true;
								}
							);
					
					if( collided == true )
					{
						continue;
					}
					
					// check if a point in the middle of the line described by the two points is in a polygon which is an obstacle
					
					//Application.debug.add( "Will check for " + sourcePointID + " to " + targetPointID );
					
					if( Map.checkIfPointIsInWalkablePoly(
																( targetPoint[0] + sourcePoint[0] ) / 2,
																( targetPoint[1] + sourcePoint[1] ) / 2
															) == false )
					{
						// the middle point is in a non walkable poly
						
						collided = true;
						
						continue;
					}
					
					// no collision between source and target. path is clear
					
					pathArray.splice( i + 1, k - i - 1 );
					
					break;
				}
			}
			
			Application.debug.add( "Minimal path: " + JSON.stringify(pathArray) );
			
			return pathArray;
		},
		
		showBoundaries: function( vertices, points )
		{
			this.ctx.lineWidth = "2";
			this.ctx.strokeStyle = "#afafaf";
			
			this.ctx.font = "16px koreanCalligraphy";
			this.ctx.fillStyle = "#33F203";
			this.ctx.strokeStyle = "black";
			this.ctx.lineWidth = 4;
			this.ctx.textBaseline = 'top';
			this.ctx.textAlign = "center";
			
			this.ctx.save();
			this.ctx.clearRect( 0, 0, Map.mapWidth, Map.mapHeight);
			this.ctx.beginPath();	//critical to reset the stroke's line buffer
			
			var p = Map.surface.points;
			
			for(var i in Map.surface.vertices)
			{
				// individual polygons
				
				var _edge = Map.surface.vertices[ i ];
				
				for(var j in _edge)
				{
					this.ctx.moveTo(
									p[ i ][0] + Map.viewPortX,
									p[ i ][1] + Map.viewPortY
								);
					this.ctx.lineTo(
									p[ j ][0] + Map.viewPortX,
									p[ j ][1] + Map.viewPortY
								);
					this.ctx.restore();
				}
				
				this.ctx.fillText(
						i + " ( " + p[ i ][0] + ", " + p[ i ][1] + " )",
						p[ i ][0] + Map.viewPortX,
						p[ i ][1] + Map.viewPortY
					);
			}
			
			this.ctx.stroke();
		},
		
		centerOn: function( characterObject )
		{
			var _x = characterObject.characterData.character_zone_x;
			var _y = characterObject.characterData.character_zone_y;
			
			// move the map
			Map.moveDelta(
								-( _x - Map.mapWidth / 2 ),
								-( _y - Map.mapHeight / 2 )
							);
		},
		
		// Canvas Method
		drawAnimations: function( _characterData )
		{
			//
			// Main character movement
			//
			
			var _mcd = Component.bugcraft.currentCharacterObject.characterData,
					_px = _mcd.character_previous_x,
					_py = _mcd.character_previous_y,
					_cx = _mcd.character_zone_x,
					_cy = _mcd.character_zone_y,
					_ctx = this.ctx;
			

			if(
				(
					_px != _cx 
					&&
					(
						(
							_cx - _px < 0
							&& Map.dragContainer.offsetLeft + Map.quadrantWidth < 0							// absolute screen position considering the map
							&& _cx + Map.viewPortX < 2 * Map.quadrantWidth				// the distance the current char should have from the screen limits
						)
						||
						(
							_cx - _px > 0
							&& Map.dragContainer.offsetLeft - Map.mapWidth + Map.quadrantWidth > -Map.surface.width			// absolute screen position considering the map
							&& _cx + Map.viewPortX > Map.mapWidth - 2 * Map.quadrantWidth							// the distance the current char should have from the screen limits
						)
					)
				)
				|| 
				(
					_py != _cy
					&&
					(
						(
							_cy - _py < 0 
							&& Map.dragContainer.offsetTop + Map.quadrantHeight < 0							// absolute screen position considering the map
							&& _cy + Map.viewPortY < 1.3 * Map.quadrantHeight				// the distance the current char should have from the screen limits
						)
						||
						(
							_cy - _py > 0 
							&& Map.dragContainer.offsetTop - Map.mapHeight + Map.quadrantHeight > -Map.surface.height			// absolute screen position considering the map
							&& _cy + Map.viewPortY > Map.mapHeight - 1.3 * Map.quadrantHeight							// the distance the current char should have from the screen limits
						)
					)
				)
			)
			{
				
				Map.moveDelta(
							Math.round( _px - _cx ),
							Math.round( _py - _cy )
						);
			}
			
			//this.showBoundaries();
			this.minimap.draw();
			
			//
			// clear spellEffects on layer 0
			//
			
			/*
			for(var i = 0; i < spellEffects.layer[0].length; i++)
			{
				var spellEffectObject =  spellEffects.layer[0][ i ];
				
				if( spellEffects.layer[0][ i ] == null ) 
				{
					continue;
				}
	
				this.ctx.clearRect(
									spellEffectObject.previousX + Map.viewPortX,
									spellEffectObject.previousY + Map.viewPortY,
									spellEffectObject.deleteRange,
									spellEffectObject.deleteRange
								);
			}
			
			//clear the characters "layer"
			for(var i in _characterData)
			{
				if( typeof _characterData[ i ] != "object" )
				{
					continue;
				}
				
				var cd = _characterData[ i ].characterData;
				
				this.ctx.clearRect(
								cd.character_previous_x - ( cd.character_deleteRange / 2 ) + Map.viewPortX,
								cd.character_previous_y - ( cd.character_deleteRange / 2 ) + Map.viewPortY,
								cd.character_deleteRange,
								cd.character_deleteRange
							);
			}
			
			//clear spellEffects on layer 1
			for(var i = 0; i<spellEffects.layer[1].length; i++)
			{
				var spellEffectObject =  spellEffects.layer[1][ i ];
				
				if( spellEffects.layer[1][ i ] == null ) 
				{
					continue;
				}
	
				this.ctx.clearRect(
									spellEffectObject.previousX + Map.viewPortX,
									spellEffectObject.previousY + Map.viewPortY,
									spellEffectObject.deleteRange,
									spellEffectObject.deleteRange
								);
			}
			
			//clear the last step of the effects that has been removed
			for(var i = 0; i < spellEffects.layerCleaner.length; i++)
			{
				var spellEffectsCleanerObject =  spellEffects.layerCleaner[ i ];
				
				this.ctx.clearRect(
							spellEffectsCleanerObject.previousX + Map.viewPortX,
							spellEffectsCleanerObject.previousY + Map.viewPortY,
							spellEffectsCleanerObject.deleteRange,
							spellEffectsCleanerObject.deleteRange
						);
			}
			spellEffects.layerCleaner = [];
			*/
			
			this.ctx.clearRect(
						0,
						0,
						this.mapWidth,
						this.mapHeight
					);
			
			//
			// Draw the first layer of effects from the spellEffects list
			//
			
			// set the viewport to the current correct value
			Map.viewPortX = Map.dragContainer.offsetLeft + Map.quadrantWidth;
			Map.viewPortY = Map.dragContainer.offsetTop + Map.quadrantHeight;
			
			for(var i =0;i<spellEffects.layer[0].length;i++)
			{
				if( spellEffects.layer[0][ i ] == null ) 
				{
					continue;
				}
				
				spellEffects.layer[0][ i ].draw();		
			}
			
			_ctx.font = "16px koreanCalligraphy";
			_ctx.strokeStyle = "black";
			_ctx.lineWidth = 4;
			_ctx.textBaseline = 'top';
			_ctx.textAlign = "center";
			
			//_ctx.shadowColor = 'rgba(0, 0, 0, 0.7)';
			//_ctx.shadowBlur = 4;									// firefox sucks balls at this one
			
			var _drawCharacters = function( filterFunction )
			{
				for(var i in _characterData)
				{
					if(
						typeof _characterData[ i ] != "object"
					)
					{
						continue;
					}
					
					var cd = _characterData[ i ].characterData;
					
					if( filterFunction( cd ) )
					{
						continue;
					}
					
					if( cd.character_is_targetable == null )
					{
						continue;
					}
					
					if( cd.characterImageAlpha != 1 )
					{
						continue;
					}
					
					if( cd.character_is_friendly_to_main )
					{
						// friend
						
						//_ctx.fillStyle = "#10e612";
						_ctx.fillStyle = "#000000";
					}
					else if( cd.character_faction != null )
					{
						// foe
						
						_ctx.fillStyle = "#ea1814";
					}
					else
					{
						// neutral
						
						_ctx.fillStyle = "#f6e144";
					}
					
					_ctx.save();
					
					//_ctx.shadowOffsetX = 3;
					//_ctx.shadowOffsetY = 3;
					
					_ctx.translate(
									cd.character_zone_x + Map.viewPortX,
									cd.character_zone_y + Map.viewPortY
								);
					
					_ctx.rotate( ( cd.character_rotation - 90 ) * Math.PI / 180 );
					
					//_ctx.globalAlpha = cd.characterImageAlpha;
					
					_ctx.drawImage(
							_characterData[ i ]._internal.characterImage,
							-cd.character_width / 2,
							-cd.character_height / 2
						);
					
					_ctx.restore();
					
					if( _characterData[ i ].isVisible && ( cd.character_type != 2 || _characterData[ i ].isHovered ) )
					{
						_ctx.save();
						
						_ctx.translate(
										cd.character_zone_x + Map.viewPortX,
										cd.character_zone_y + Map.viewPortY
									);
						
						//_ctx.globalAlpha = 0.5;
						
						// draw additional information only if the char is visible
						
						//_ctx.strokeText( cd.character_name, 0, cd.character_height / 2 );											// another point where firefox sucks
						_ctx.fillText( cd.character_name, 0, cd.character_height / 2 );
						
						if( cd.character_guild_name )
						{
							//_ctx.strokeText( "{" + cd.character_guild_name + "}", 0, cd.character_height / 2 + 20 );				// another point where firefox sucks
							_ctx.fillText( "{" + cd.character_guild_name + "}", 0, cd.character_height / 2 + 20 );
						}
						
						_ctx.restore();
					}
					
					cd.character_previous_x = cd.character_zone_x;
					cd.character_previous_y = cd.character_zone_y;
				}
			}
			
			_drawCharacters( function( cd )
			{
				return cd.character_id_object_pool == null; // filter out the players
			});
			
			_drawCharacters( function( cd )
			{
				return cd.character_id_object_pool != null; // filter out the NPCs
			});
			
			//
			//spellEffects layer[1] drawer
			//
			
			for(var i =0;i<spellEffects.layer[1].length;i++)
			{
				if( spellEffects.layer[1][ i ] == null ) 
				{
					continue;
				}
				
				spellEffects.layer[1][ i ].draw();
			}
		},
		
		setPolygonName: function( zoneName )
		{
			this._mapNameObject.innerHTML = zoneName;
			this._mapNameShadowObject.innerHTML = zoneName;
		},
		
		createGrid: function( args )
		{
			args.base_src = args.base_src_outside; //hardcoded - good idea?
			
			Map.toggleLimbo = function()
			{
				// this function will assume that the new tileset is of the same width and height (e.g. a limbo map or some kind of phasing)
				switch(args.base_src)
				{
					case args.base_src_outside:
						args.base_src = args.base_src_limbo_outside;
					break;
					case args.base_src_limbo_outside:
						args.base_src = args.base_src_outside;
					break;
					case args.base_src_inside:
						args.base_src = args.base_src_limbo_inside;
					break;
					case args.base_src_limbo_inside:
						args.base_src = args.base_src_inside;
					break;
				}
				
				// reload each tile
				for( var i = 0; i < squares_y; i++ )
				{
					for( var j = 0; j < squares_x; j++ )
					{
						square_matrix[ i ][ j ].refresh_position();
						square_matrix[ i ][ j ].reload_image();
					}
				}
				
				return true;
			}
			
			Map.toggleInside = function()
			{
				// this function will assume that the new tileset is of the same width and height (e.g. a limbo map or some kind of phasing)
				Map.minimap.toggleInside();
				
				switch(args.base_src)
				{
					case args.base_src_outside:
						args.base_src = args.base_src_inside;
					break;
					case args.base_src_limbo_outside:
						args.base_src = args.base_src_limbo_inside;
					break;
					case args.base_src_inside:
						args.base_src = args.base_src_outside;
					break;
					case args.base_src_limbo_inside:
						args.base_src = args.base_src_limbo_outside;
					break;
				}
				
				// reload each tile
				for( var i = 0; i < squares_y; i++ )
				{
					for( var j = 0; j < squares_x; j++ )
					{
						square_matrix[ i ][ j ].refresh_position();
						square_matrix[ i ][ j ].reload_image();
					}
				}
				
				return true;
			}
			
			Map.setGridTileset = function( mapName )
			{
				// this function will assume that the new tileset is of the same width and height (e.g. a limbo map or some kind of phasing)
				
				args.base_src_outside = Application.configuration.cdn.location[0].url + "/img/maps/" + mapName + "_" + Map.mapID + "/map-";
				args.base_src_limbo_outside = Application.configuration.cdn.location[0].url + "/img/maps/" + mapName + "Limbo_" + Map.mapID + "/map-";
				args.base_src_inside = Application.configuration.cdn.location[0].url + "/img/maps/" + mapName + "Inside_" + Map.mapID + "/map-";
				args.base_src_limbo_inside = Application.configuration.cdn.location[0].url + "/img/maps/" + mapName + "LimboInside_" + Map.mapID + "/map-";
				args.base_src = args.base_src_outside // hardcoded yet again;
				
				// reload each tile
				for( var i = 0; i < squares_y; i++ )
				{
					for( var j = 0; j < squares_x; j++ )
					{
						square_matrix[ i ][ j ].refresh_position();
						square_matrix[ i ][ j ].reload_image();
					}
				}
				
				return true;
			}
			
			var big_size_height = args.square_height * args.size_y;
			var big_size_width = args.square_width * args.size_x;
			
			//number of squares for the visible map and buffer-border
			var squares_x = Math.ceil( Map.mapWidth  / args.square_width) + 2;
			var squares_y = Math.ceil( Map.mapHeight / args.square_height) + 2;
			
			var maxSquareNumber = (args.size_x * args.size_y) - 1;
			
			//console.debug(squares_x, squares_y, maxSquareNumber);
			//counters for the image shifting
			var count_x = 0, count_y = 0;
			
			var main_container = document.getElementById( args.id + "_mapContainer" );
			main_container.style.height = Map.mapHeight + "px";
			main_container.style.width = Map.mapWidth + "px";
			
			//initialize dragContainer START
			var dragContainer = document.getElementById( args.id + "_mapDragContainer" );
			dragContainer.style.left = ( -args.square_width ) + "px";
			dragContainer.style.top = ( -args.square_height ) + "px";
			
			Map.dragContainer = dragContainer;
			
			var _square = function()
			{
				var self = this;
				
				//image to be displayed
				this.bg_img = document.createElement( "img" );
				this.bg_img.style.width = args.square_width + "px";
				this.bg_img.style.height = args.square_height + "px";
				this.bg_img.className = "tileHidden";
				//this.bg_img.setAttribute( "src", args.base_src + 'defaultTile.jpg' ); // HARDCODED
				dragContainer.appendChild( self.bg_img );
				
				//change src image
				this.reload_image = 	function()
													{
														if( self.pos_x < 0 || self.pos_y < 0 )
														{
															return;
														}
														
														var squareNumber = self.pos_y * args.size_x + self.pos_x;
														
														if( squareNumber < 0 || squareNumber > maxSquareNumber || squareNumber >= (self.pos_y + 1) * args.size_x )
														{
															self.bg_img.className = "tileHidden";
															return;
														}
														
														self.bg_img.className = "tile";
														
														self.bg_img.setAttribute( "src", args.base_src + squareNumber + ".jpg" );
														
														// preload the limbo version
														( new Image() ).src = args.base_src_outside + squareNumber + ".jpg";
														( new Image() ).src = args.base_src_limbo_outside + squareNumber + ".jpg";
														( new Image() ).src = args.base_src_inside + squareNumber + ".jpg";
														( new Image() ).src = args.base_src_limbo_inside + squareNumber + ".jpg";
													}
													
				this.refresh_position = 	function()
													{
														if( self.pos_x < 0 || self.pos_y < 0 )
														{
															return;
														}
														
														self.bg_img.style.left = (1+self.pos_x) * args.square_width + "px";
														self.bg_img.style.top = (1+self.pos_y) * args.square_height + "px";
													}
			}
			
			//structure to help with the logic
			var square_matrix = [];
			for( var i = 0; i < squares_y; i++ )
			{
				square_matrix[ i ] = [];
				for( var j = 0; j < squares_x; j++ )
				{
					square_matrix[ i ][ j ] = new _square();
					
					square_matrix[ i ][ j ].pos_x = j - 1;
					square_matrix[ i ][ j ].pos_y = i - 1;
					
					square_matrix[ i ][ j ].refresh_position();
					//square_matrix[ i ][ j ].reload_image();
				}
			}
			
			//move the map with dx and dy
			/*
			Map._moveDelta = function( dx, dy, edx, edy )
			{
				//console.log( dx, dy, edx, edy )
				if( dragContainer.offsetLeft + dx < -300 )
				{
					dragContainer.style.left = (dragContainer.offsetLeft + dx) + "px";
				}
			
				if( dragContainer.offsetTop + dy < -300 )
				{
					dragContainer.style.top = (dragContainer.offsetTop + dy) + "px";
				}
					
				if( edx != 0 || edy != 0 )
				{
					for( var i = 0; i < squares_y; i++ )
					{
						for( var j = 0; j < squares_x; j++ )
						{
							square_matrix[ i ][ j ].pos_x -= edx;
							square_matrix[ i ][ j ].pos_y -= edy;
							
							square_matrix[ i ][ j ].refresh_position();
							square_matrix[ i ][ j ].reload_image();
						}
					}
				}
				
				//move the map container
				
				dx -= edx * args.square_width;
				dy -= edy * args.square_height;
				
				count_x += dx;
				count_y += dy;
				
				//move right
				if( count_x > args.square_width/2 )
				{
					count_x -= args.square_width;
					
					for( var i = 0; i < squares_y; i++ )
					{
						var aux = square_matrix[ i ][squares_x - 1];
						for( var j = squares_x - 1; j >= 1; j-- )
						{
							square_matrix[ i ][ j ] = square_matrix[ i ][j-1];
						}
						square_matrix[ i ][0] = aux;
						square_matrix[ i ][0].pos_x -= squares_x;
						square_matrix[ i ][0].reload_image();
						square_matrix[ i ][0].refresh_position();
					}
				}
				
				// move left
				if( count_x < (-1) * args.square_width/2 )
				{
					count_x += args.square_width;
					
					for(var i = 0; i < squares_y; i++)
					{
						var aux = square_matrix[ i ][0];
						for( var j = 0; j < squares_x - 1; j++)
						{
							square_matrix[ i ][ j ] = square_matrix[ i ][j+1];
						}
						square_matrix[ i ][squares_x - 1] = aux;
						square_matrix[ i ][squares_x - 1].pos_x += squares_x;
						square_matrix[ i ][squares_x - 1].reload_image();
						square_matrix[ i ][squares_x - 1].refresh_position();
					}
				}
				
				//move up
				if( count_y < (-1) * args.square_height/2 )
				{
					count_y += args.square_height;
					
					for( var i = 0; i < squares_x; i++ )
					{
						var aux = square_matrix[0][ i ];
						for( var j = 0; j < squares_y - 1; j++ )
						{
							square_matrix[ j ][ i ] = square_matrix[j+1][ i ];
						}
						square_matrix[squares_y - 1][ i ] = aux;
						square_matrix[squares_y - 1][ i ].pos_y += squares_y;
						square_matrix[squares_y - 1][ i ].reload_image();
						square_matrix[squares_y - 1][ i ].refresh_position();
					}
					
				}
				
				//move down
				if( count_y > args.square_height/2 )
				{
					count_y -= args.square_height;
					
					for( var i = 0; i < squares_x; i++ )
					{
						var aux = square_matrix[squares_y - 1][ i ];
						for( var j = squares_y - 1; j >= 1; j-- )
						{
							square_matrix[ j ][ i ] = square_matrix[j-1][ i ];
						}
						square_matrix[0][ i ] = aux;
						square_matrix[0][ i ].pos_y -= squares_y;
						square_matrix[0][ i ].reload_image();
						square_matrix[0][ i ].refresh_position();
					}
				}
			}
			Map.moveDelta = function( dx, dy )
			{
				//Application.debug.addError( dx + " " + dy );
				console.log("move call");
				Map.worker.postMessage({
									c: 'checkMapMove',
									dx: dx,
									dy: dy
								});
			}
			*/
			Map.moveDelta = function( dx, dy )
									{
										//Application.debug.addError( dx + " " + dy );
										//check for valid move START
										//map at 0 x
										if( dx > 0 && (dragContainer.offsetLeft + dx) > -args.square_width )
										{
											dx = -dragContainer.offsetLeft - args.square_width;
										}
										
										//map at 0 y
										if( dy > 0 && (dragContainer.offsetTop + dy) > -args.square_height )
										{
											dy = -dragContainer.offsetTop - args.square_height;
										}
										
										//map at max x
										if( dx < 0 && (dragContainer.offsetLeft + dx) < (-1) * (big_size_width - Map.mapWidth + args.square_width) )
										{
											dx = -dragContainer.offsetLeft - (big_size_width - Map.mapWidth + args.square_width) ;
										}
										
										//map at max y
										if( dy < 0 && (dragContainer.offsetTop + dy) < (-1) * (big_size_height - Map.mapHeight + args.square_height) )
										{
											dy = -dragContainer.offsetTop - (big_size_height - Map.mapHeight + args.square_height);
										}
										
										if( dx == 0 && dy == 0 )
										{
											return false;
										}
										//check for valid move END
										
										var edx = 0, edy = 0;
										if( dragContainer.offsetLeft + dx < -300 )
										{
											if( Math.abs(dx) > args.square_width/2 )
											{
												edx = Math.floor(Math.abs(dx) / args.square_width);
												if( dx < 0 )
												{
													edx *= (-1);
												}
											}
											
											
											dragContainer.style.left = (dragContainer.offsetLeft + dx) + "px";
										}
										
										if( dragContainer.offsetTop + dy < -300 )
										{
											if( Math.abs(dy) > args.square_height/2 )
											{
												edy = Math.floor(Math.abs(dy) / args.square_height);
												if( dy < 0 )
												{
													edy *= (-1);
												}
											}
											
											dragContainer.style.top = (dragContainer.offsetTop + dy) + "px";
										}
										
										if( edx != 0 || edy != 0 )
										{
											for( var i = 0; i < squares_y; i++ )
											{
												for( var j = 0; j < squares_x; j++ )
												{
													square_matrix[ i ][ j ].pos_x -= edx;
													square_matrix[ i ][ j ].pos_y -= edy;
													
													square_matrix[ i ][ j ].refresh_position();
													square_matrix[ i ][ j ].reload_image();
												}
											}
										}
										
										//move the map container
										
										dx -= edx * args.square_width;
										dy -= edy * args.square_height;
										
										count_x += dx;
										count_y += dy;
										
										//move right
										if( count_x > args.square_width/2 )
										{
											count_x -= args.square_width;
											
											for( var i = 0; i < squares_y; i++ )
											{
												var aux = square_matrix[ i ][squares_x - 1];
												for( var j = squares_x - 1; j >= 1; j-- )
												{
													square_matrix[ i ][ j ] = square_matrix[ i ][j-1];
												}
												square_matrix[ i ][0] = aux;
												square_matrix[ i ][0].pos_x -= squares_x;
												square_matrix[ i ][0].reload_image();
												square_matrix[ i ][0].refresh_position();
											}
										}
										
										// move left
										if( count_x < (-1) * args.square_width/2 )
										{
											count_x += args.square_width;
											
											for(var i = 0; i < squares_y; i++)
											{
												var aux = square_matrix[ i ][0];
												for( var j = 0; j < squares_x - 1; j++)
												{
													square_matrix[ i ][ j ] = square_matrix[ i ][j+1];
												}
												square_matrix[ i ][squares_x - 1] = aux;
												square_matrix[ i ][squares_x - 1].pos_x += squares_x;
												square_matrix[ i ][squares_x - 1].reload_image();
												square_matrix[ i ][squares_x - 1].refresh_position();
											}
										}
										
										//move up
										if( count_y < (-1) * args.square_height/2 )
										{
											count_y += args.square_height;
											
											for( var i = 0; i < squares_x; i++ )
											{
												var aux = square_matrix[0][ i ];
												for( var j = 0; j < squares_y - 1; j++ )
												{
													square_matrix[ j ][ i ] = square_matrix[j+1][ i ];
												}
												square_matrix[squares_y - 1][ i ] = aux;
												square_matrix[squares_y - 1][ i ].pos_y += squares_y;
												square_matrix[squares_y - 1][ i ].reload_image();
												square_matrix[squares_y - 1][ i ].refresh_position();
											}
											
										}
										
										//move down
										if( count_y > args.square_height/2 )
										{
											count_y -= args.square_height;
											
											for( var i = 0; i < squares_x; i++ )
											{
												var aux = square_matrix[squares_y - 1][ i ];
												for( var j = squares_y - 1; j >= 1; j-- )
												{
													square_matrix[ j ][ i ] = square_matrix[j-1][ i ];
												}
												square_matrix[0][ i ] = aux;
												square_matrix[0][ i ].pos_y -= squares_y;
												square_matrix[0][ i ].reload_image();
												square_matrix[0][ i ].refresh_position();
											}
										}
										
										return true;
									}
									
			Map.refreshImages = function()
			{
				for( var i = 0; i < squares_y; i++ )
				{
					for( var j = 0; j < squares_x; j++ )
					{
						square_matrix[ i ][ j ].reload_image();
					}
				}
			}
		}
	};
	


/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft._shared_.messages.js
*/


	/*
		-------------------
		BattleField Message
		-------------------
	*/
	
	Component.bugcraft.messages = 
	{
		messagesContainerObject: null,
		
		init: function( args )
		{
			this.messagesContainerObject = document.getElementById( args.id + "_messagesContainer" );
		},
		
		addRaidWarning: function( message )
		{
			this._addMessage({
								messageType: "raidWarning",
								message: message
							});
		},
		
		addInfo: function( message )
		{
			this._addMessage({
								messageType: "information",
								message: message
							});
		},
		
		addError: function( message )
		{
			this._addMessage({
								messageType: "error",
								message: message
							});
		},
		
		_addMessage: function( data )
		{
			var messageDiv = document.createElement("div");
			messageDiv.className = data.messageType;
			messageDiv.innerHTML = "<div class='shadow'>" + data.message + "</div><div class='text'>" + data.message + "</div>";
			
			this.messagesContainerObject.appendChild( messageDiv );
			
			if( this.messagesContainerObject.childNodes.length > 5 )
			{
				// remove the 1st message
				
				Application.util.html.removeNode( this.messagesContainerObject.childNodes[ 0 ] );
			}
			
			setTimeout( function()
			{
				// automatic remover
				
				if( !messageDiv.parentNode )
				{
					return;
				}
				
				Application.util.html.removeNode( messageDiv );
			}, 6000 );
		}
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	


/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft._shared_.quadtree.js
*/

	
	/*
		The MIT License

		Copyright (c) 2011 Mike Chambers

		Permission is hereby granted, free of charge, to any person obtaining a copy
		of this software and associated documentation files (the "Software"), to deal
		in the Software without restriction, including without limitation the rights
		to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
		copies of the Software, and to permit persons to whom the Software is
		furnished to do so, subject to the following conditions:

		The above copyright notice and this permission notice shall be included in
		all copies or substantial portions of the Software.

		THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
		IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
		FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
		AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
		LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
		OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
		THE SOFTWARE.
	*/


	/**
	* A QuadTree implementation in JavaScript, a 2d spatial subdivision algorithm.
	* @module QuadTree
	**/

	Component.bugcraft.quadTree = function()
	{
		(function(window) {

			/****************** QuadTree ****************/

			/**
			* QuadTree data structure.
			* @class QuadTree
			* @constructor
			* @param {Object} An object representing the bounds of the top level of the QuadTree. The object 
			* should contain the following properties : x, y, width, height
			* @param {Boolean} pointQuad Whether the QuadTree will contain points (true), or items with bounds 
			* (width / height)(false). Default value is false.
			* @param {Number} maxDepth The maximum number of levels that the quadtree will create. Default is 4.
			* @param {Number} maxChildren The maximum number of children that a node can contain before it is split into sub-nodes.
			**/
			function QuadTree(bounds, pointQuad, maxDepth, maxChildren)
			{	
				var node;
				if(pointQuad)
				{
					
					node = new Node(bounds, 0, maxDepth, maxChildren, {});
				}
				else
				{
					node = new BoundsNode(bounds, 0, maxDepth, maxChildren);
				}
				
				this.root = node;
			}

			/**
			* The root node of the QuadTree which covers the entire area being segmented.
			* @property root
			* @type Node
			**/
			QuadTree.prototype.root = null;


			/**
			* Inserts an item into the QuadTree.
			* @method insert
			* @param {Object|Array} item The item or Array of items to be inserted into the QuadTree. The item should expose x, y 
			* properties that represents its position in 2D space.
			**/
			QuadTree.prototype.insert = function(item)
			{
				if(item instanceof Array)
				{
					var len = item.length;
					
					for(var i = 0; i < len; i++)
					{
						this.root.insert(item[i]);
					}
				}
				else
				{
					this.root.insert(item);
				}
			}

			/**
			* Clears all nodes and children from the QuadTree
			* @method clear
			**/
			QuadTree.prototype.clear = function()
			{
				this.root.clear();
			}

			/**
			* Retrieves all items / points in the same node as the specified item / point. If the specified item
			* overlaps the bounds of a node, then all children in both nodes will be returned.
			* @method retrieve
			* @param {Object} item An object representing a 2D coordinate point (with x, y properties), or a shape
			* with dimensions (x, y, width, height) properties.
			**/
			QuadTree.prototype.retrieve = function(item)
			{
				//get a copy of the array of items
				var out = this.root.retrieve(item).slice(0);
				return out;
			}

			/************** Node ********************/


			function Node(bounds, depth, maxDepth, maxChildren)
			{
				this._bounds = bounds;
				this.children = [];
				this.nodes = [];
				
				if(maxChildren)
				{
					this._maxChildren = maxChildren;
				}
				
				if(maxDepth)
				{
					this._maxDepth = maxDepth;
				}
				
				if(depth)
				{
					this._depth = depth;
				}
			}

			//subnodes
			Node.prototype.nodes = null;
			Node.prototype._classConstructor = Node;

			//children contained directly in the node
			Node.prototype.children = null;
			Node.prototype._bounds = null;

			//read only
			Node.prototype._depth = 0;

			Node.prototype._maxChildren = 4;
			Node.prototype._maxDepth = 4;

			Node.TOP_LEFT = 0;
			Node.TOP_RIGHT = 1;
			Node.BOTTOM_LEFT = 2;
			Node.BOTTOM_RIGHT = 3;


			Node.prototype.insert = function(item)
			{
				if(this.nodes.length)
				{
					var index = this._findIndex(item);
					
					this.nodes[index].insert(item);
					
					return;
				}
				
				// only one child / max depth square
				if( this._depth >= this._maxDepth && this.children.length > 0 )
				{
					return;
				}
				
				this.children.push(item);

				var len = this.children.length;
				
				if(
					!(this._depth >= this._maxDepth) && 
					len > this._maxChildren
				)
				{
					this.subdivide();
					
					for(var i = 0; i < len; i++)
					{
						this.insert(this.children[i]);
					}
					
					this.children.length = 0;
				}
			}

			Node.prototype.retrieve = function(item)
			{
				if(this.nodes.length)
				{
					var index = this._findIndex(item);
					
					return this.nodes[index].retrieve(item);
				}
				
				return this.children;
			}

			Node.prototype._findIndex = function(item)
			{
				var b = this._bounds;
				var left = (item.x > b.x + b.width / 2)? false : true;
				var top = (item.y > b.y + b.height / 2)? false : true;
				
				//top left
				var index = Node.TOP_LEFT;
				if(left)
				{
					//left side
					if(!top)
					{
						//bottom left
						index = Node.BOTTOM_LEFT;
					}
				}
				else
				{
					//right side
					if(top)
					{
						//top right
						index = Node.TOP_RIGHT;
					}
					else
					{
						//bottom right
						index = Node.BOTTOM_RIGHT;
					}
				}
				
				return index;
			}


			Node.prototype.subdivide = function()
			{
				var depth = this._depth + 1;

				var bx = this._bounds.x;
				var by = this._bounds.y;

				//floor the values
				var b_w_h = (this._bounds.width / 2)|0;
				var b_h_h = (this._bounds.height / 2)|0;
				var bx_b_w_h = bx + b_w_h;
				var by_b_h_h = by + b_h_h;

				//top left
				this.nodes[Node.TOP_LEFT] = new this._classConstructor({
					x:bx, 
					y:by, 
					width:b_w_h, 
					height:b_h_h
				},
				depth, this._maxDepth, this._maxChildren);

				//top right
				this.nodes[Node.TOP_RIGHT] = new this._classConstructor({
					x:bx_b_w_h,
					y:by,
					width:b_w_h, 
					height:b_h_h
				},
				depth, this._maxDepth, this._maxChildren);

				//bottom left
				this.nodes[Node.BOTTOM_LEFT] = new this._classConstructor({
					x:bx,
					y:by_b_h_h,
					width:b_w_h, 
					height:b_h_h
				},
				depth, this._maxDepth, this._maxChildren);


				//bottom right
				this.nodes[Node.BOTTOM_RIGHT] = new this._classConstructor({
					x:bx_b_w_h, 
					y:by_b_h_h,
					width:b_w_h, 
					height:b_h_h
				},
				depth, this._maxDepth, this._maxChildren);
			}

			Node.prototype.clear = function()
			{
				this.children.length = 0;
				
				var len = this.nodes.length;
				for(var i = 0; i < len; i++)
				{
					this.nodes[i].clear();
				}
				
				this.nodes.length = 0;
			}


			/******************** BoundsQuadTree ****************/

			function BoundsNode(bounds, depth, maxChildren, maxDepth)
			{
				Node.call(this, bounds, depth, maxChildren, maxDepth);
				this._stuckChildren = [];
			}

			BoundsNode.prototype = new Node();
			BoundsNode.prototype._classConstructor = BoundsNode;
			BoundsNode.prototype._stuckChildren = null;

			//we use this to collect and conctenate items being retrieved. This way
			//we dont have to continuously create new Array instances.
			//Note, when returned from QuadTree.retrieve, we then copy the array
			BoundsNode.prototype._out = [];

			BoundsNode.prototype.insert = function(item)
			{	
				if(this.nodes.length)
				{
					var index = this._findIndex(item);
					var node = this.nodes[index];

					//todo: make _bounds bounds
					if(item.x >= node._bounds.x &&
						item.x + item.width <= node._bounds.x + node._bounds.width &&
						item.y >= node._bounds.y &&
						item.y + item.height <= node._bounds.y + node._bounds.height)
					{
						this.nodes[index].insert(item);
					}
					else
					{			
						this._stuckChildren.push(item);
					}
					
					return;
				}
				
				this.children.push(item);

				var len = this.children.length;
				
				if(!(this._depth >= this._maxDepth) && 
					len > this._maxChildren)
				{
					this.subdivide();
					
					for(var i = 0; i < len; i++)
					{
						this.insert(this.children[i]);
					}
					
					this.children.length = 0;
				}
			}

			BoundsNode.prototype.getChildren = function()
			{
				return this.children.concat(this._stuckChildren);
			}

			BoundsNode.prototype.retrieve = function(item)
			{
				var out = this._out;
				out.length = 0;
				if(this.nodes.length)
				{
					var index = this._findIndex(item);
					
					out.push.apply(out, this.nodes[index].retrieve(item));
				}
				
				out.push.apply(out, this._stuckChildren);
				out.push.apply(out, this.children);
				
				return out;
			}

			BoundsNode.prototype.clear = function()
			{

				this._stuckChildren.length = 0;
				
				//array
				this.children.length = 0;
				
				var len = this.nodes.length;
				
				if(!len)
				{
					return;
				}
				
				for(var i = 0; i < len; i++)
				{
					this.nodes[i].clear();
				}
				
				//array
				this.nodes.length = 0;	
				
				//we could call the super clear function but for now, im just going to inline it
				//call the hidden super.clear, and make sure its called with this = this instance
				//Object.getPrototypeOf(BoundsNode.prototype).clear.call(this);
			}

			BoundsNode.prototype.getChildCount

			window.QuadTree = QuadTree;

			/*
			//http://ejohn.org/blog/objectgetprototypeof/
			if ( typeof Object.getPrototypeOf !== "function" ) {
			  if ( typeof "test".__proto__ === "object" ) {
				Object.getPrototypeOf = function(object){
				  return object.__proto__;
				};
			  } else {
				Object.getPrototypeOf = function(object){
				  // May break if the constructor has been tampered with
				  return object.constructor.prototype;
				};
			  }
			}
			*/

		}(window));
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft._shared_.skins.js
*/


	/*
		-----------------------------
		BattleField object skins
		-----------------------------
	*/
	
	Component.bugcraft.skinsStructure = 
	{
		defs: {
		
		},
		
		_skinCache:
		{
			images: {},
			inQueue: 0,
			
			onEmptyQueue: function()
			{
				
			},
			
			add: function( url )
			{
				var _sc = Component.bugcraft.skinsStructure._skinCache, _imageObject = null;
				
				if( !_sc.images[ url ] )
				{
					// new image
					
					_imageObject = ( _sc.images[ url ] = new Image() )
				}
				else
				{
					// this image has already been added to the queue
					
					return _sc.images[ url ];
				}
				
				_sc.inQueue++;
				
				_imageObject.onload = function()
				{
					_sc.inQueue--;
					
					if( _sc.inQueue <= 0 )
					{
						Component.bugcraft.skinsStructure._skinCache.onEmptyQueue();
					}
				}
				
				_imageObject.src = url;
				
				return _imageObject;
			}
		},
		
		_cacheSkinFramesBase: function( skinDefinition, skinName )
		{
			var _images = {}, _prefix = skinDefinition.prefix ? skinDefinition.prefix : ( Application.configuration.cdn.location[ 0 ].url + "/object_skins/" + skinName + "/" );
			
			for( var _s in skinDefinition.frames )
			{
				_images[ _s ] = {};
				
				for(var j=1;j<=skinDefinition.frames[ _s ];j++)
				{
					_images[ _s ][ j ] = this._skinCache.add( _prefix + _s + j + ".png" );
				}

			}
			console.log( _images )
			return _images;
		},
		
		_cacheSkinFramesAdditional: function( skinDefinition, skinName )
		{
			var _images = {}, _prefix = skinDefinition.prefix ? skinDefinition.prefix : ( Application.configuration.cdn.location[ 0 ].url + "/object_skins/" + skinName + "/" );
			
			for( var _s in skinDefinition.frames )
			{
				for(var j=1;j<=skinDefinition.frames[ _s ];j++)
				{
					skinDefinition._images[ _s ][ j + "_friend" ] = this._skinCache.add( _prefix + _s + j + "_friend.png" );
					skinDefinition._images[ _s ][ j + "_neutral" ] = this._skinCache.add( _prefix + _s + j + "_neutral.png" );
					skinDefinition._images[ _s ][ j + "_foe" ] = this._skinCache.add( _prefix + _s + j + "_foe.png" );
				}
			}
		},
		
		_cacheSkinSounds: function( skinDefinition, skinName )
		{
			var _sounds = {}, _prefix = skinDefinition.prefix ? skinDefinition.prefix : ( Application.configuration.cdn.location[ 0 ].url + "/object_skins/" + skinName + "/" );
			
			for( var _s in skinDefinition.frames )
			{
				_sounds[ _s ] = {};
				
				for(var j=1;j<=skinDefinition.frames[ _s ];j++)
				{
					_sounds[ _s ][ j ] = soundManager.createSound({
																	id: "_cached_sound_" + _s + "_" + j,
																	url: _prefix + "audio/" + _s + j + '.mp3'
																});
				}
			}
			
			return _sounds;
		},
		
		init: function()
		{
			// cache the frames for the default skins
			
			for(var _sn in this.defs)
			{
				this.defs[ _sn ]._images = this._cacheSkinFramesBase( this.defs[ _sn ], _sn );
				this.defs[ _sn ]._sounds = this._cacheSkinSounds( this.defs[ _sn ], _sn );
			}
		},
		
		skinObject: function( args )
		{
			var _currentFrame = 1, _currentAudioSoundNumber = 1, _skinDefinition = null, _footStepsSoundObject = [], self = this, _currentAudioObject = null;
			
			if( args.skinName )
			{
				// existing skin
				
				_skinDefinition = Component.bugcraft.skinsStructure.defs[ args.skinName ];
			}
			else
			{
				// new skin
				
				_skinDefinition = args;
				_skinDefinition._images = Component.bugcraft.skinsStructure._cacheSkinFramesBase( args );
				Component.bugcraft.skinsStructure._cacheSkinFramesAdditional( args );
				_skinDefinition._sounds = Component.bugcraft.skinsStructure._cacheSkinSounds( args );
			}
			
			//
			// Properties
			//
			
			this.currentState = "idle";
			this.currentRelationship = null;
			
			//
			// skin specific functions
			//
			
			this.setState = function( stateName )
			{
				if(
					stateName != "walk"
					&& stateName != "idle"
					&& stateName != "attackMelee"
					&& stateName != "attackRanged"
				)
				{
					return false;
				}
				
				this.currentState = stateName;
				_currentFrame = 1;
				_currentAudioSoundNumber = 1;
				
				this.getNextFrame();
			}
			
			this.setRelationship = function( relationshipName )
			{
				// cache on demand
				Component.bugcraft.skinsStructure._cacheSkinFramesAdditional( Component.bugcraft.skinsStructure.defs[ args.skinName ], args.skinName );
				
				// change the current image for the skin
				self.currentRelationship = relationshipName;
				args.characterObject._internal.characterImage = _skinDefinition._images[ self.currentState ][ _currentFrame + "_" + self.currentRelationship ];
				
				// default handlers
				self.getStartFrame = function()
				{
					_currentFrame = 1;
					
					args.characterObject._internal.characterImage = _skinDefinition._images[ self.currentState ][ "1_" + self.currentRelationship ];
				}
				
				self.getNextFrame = function()
				{
					_currentFrame++;
					
					if( _currentFrame > _skinDefinition.frames[ self.currentState ] )
					{
						// reset the frames
						
						_currentFrame = 1;
					}
					
					args.characterObject._internal.characterImage = _skinDefinition._images[ self.currentState ][ _currentFrame + "_" + self.currentRelationship ];
				}
			}
			
			this.clearRelationship = function()
			{
				self.currentRelationship = null;
				args.characterObject._internal.characterImage = _skinDefinition._images[ self.currentState ][ _currentFrame ];
				
				// default handlers
				self.getStartFrame = self.getStartFrameDefault;
				self.getNextFrame = self.getNextFrameDefault;
			}
			
			this.getTargetProfileIcon = function( friendOrFoe )
			{
				return "icon icon_" + args.skinName + "_" + ( friendOrFoe ? "friend" : "foe" );
			}
			
			this.getSkinName = function()
			{
				return args.skinName;
			}
			
			this.getMainProfileIcon = function()
			{
				return "icon icon_" + args.skinName;
			}
			
			this.getCurrentFrameNumber = function()
			{
				return _currentFrame;
			}
			
			this.getCurrentAudioNumber = function()
			{
				return _currentAudioSoundNumber;
			}
			
			this.getStartFrameDefault = function()
			{
				_currentFrame = 1;
				
				args.characterObject._internal.characterImage = _skinDefinition._images[ this.currentState ][ 1 ];
			}
			
			this.getNextFrameDefault = function()
			{
				_currentFrame++;
				
				if( _currentFrame > _skinDefinition.frames[ this.currentState ] )
				{
					// reset the frames
					
					_currentFrame = 1;
				}
				
				args.characterObject._internal.characterImage = _skinDefinition._images[ this.currentState ][ _currentFrame ];
			}
			
			this.getNextAudio = function()
			{
				_currentAudioObject = _skinDefinition._sounds[ this.currentState ][ ++_currentAudioSoundNumber ];
				
				if( !_currentAudioObject )
				{
					// reset sound pointer
					_currentAudioSoundNumber = 1;
					
					_currentAudioObject = _skinDefinition._sounds[ this.currentState ][ ++_currentAudioSoundNumber ];
					//alert( args.characterObject.characterData.character_skin + " - " + this.currentState + " - " + _currentAudioSoundNumber );
				}
				
				_currentAudioObject.play({
											volume: Component.bugcraft.sound.ui.volume,
											onfinish: function()
											{
												// ensure continous play
												self.getNextAudio();
											}
										});
			}
			
			this.eventStop = function()
			{
				if( !_skinDefinition.events.hide )
				{
					return;
				}
				
				_skinDefinition.events.hide( args.characterObject );
			}
			
			this.stopAudio = function()
			{
				_currentAudioObject.togglePause();
			}
			
			//
			// Initialize
			//
			
			// default handlers
			this.getStartFrame = this.getStartFrameDefault;
			this.getNextFrame = this.getNextFrameDefault;
			
			//footsteps sound
			for(var i=0;i<=5;i++)
			{
				_footStepsSoundObject[ i ] = soundManager.createSound({
																				id: 'footsteps' + i,
																				url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/footsteps/steps_on_grass' + i + '.mp3'
																			});
			}
			
			if( _skinDefinition.events.show )
			{
				_skinDefinition.events.show( args.characterObject );
			}
		}
	}	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	


/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft._shared_.sound.js
*/


	/*
		-----------------
		BattleField sounds
		-----------------
	*/
	
	Component.bugcraft.sound = 
	{
		ui:
		{
			volume: 100,
			
			events:
			{
				actionBar:
				{
					backpackBottlePickup: 4,
					backpackMiscPickup: 3,
					backpackShieldPickup: 3,
					
					backpackHeavyPickup: 2,
					backpackLightPickup: 2,
					backpackMediumPickup: 3,
					
					backpackAxe1hPickup: 2,
					backpackAxe2hPickup: 2,
					backpackSpear1hPickup: 2,
					backpackSpear2hPickup: 2,
					backpackStaff1hPickup: 2,
					backpackStaff2hPickup: 2,
					backpackSword1hPickup: 2,
					backpackSword2hPickup: 2,
					backpackMace1hPickup: 2,
					backpackMace2hPickup: 2,
					backpackDaggerPickup: 3,
					
					buffMove: 1,
					buffRemove: 1
				},
				
				window:
				{
					pageTurn: 1,
					backPack: 2,
					characterProfile: 1,
					buttonClick: 1,
					buttonClose: 3,
					bookOpen: 2,
					loader: 1,
					questGrab: 1
				},
				
				vendor:
				{
					itemSell: 3
				}
			},
			
			playEvent: function( UIElement, eventName )
			{
				var chosenSound = Math.ceil( Math.random() * this.events[ UIElement ][ eventName ] );
				
				Application.sound.playOverwrite({
														url: Application.configuration.cdn.location[ 0 ].url + "/mp3/ui/" + UIElement + "/" + ( eventName + chosenSound ) + ".mp3",
														volume: this.volume
													});
			}
		},
		
		characters:
		{
			volume: 100,
			
			events:
			{
				ant:
				{
					assist: 2,
					bound: 2,
					cannotAfford: 2,
					cannotCarryMore: 2,
					cannotDoHere: 2,
					cannotDoThat: 2,
					cannotInvite: 2,
					cannotLoot: 2,
					cannotTrade: 2,
					cannotUse: 2,
					charge: 2,
					fire: 2,
					flee: 2,
					flirt: 7,
					follow: 2,
					fullBag: 2,
					funny: 9,
					goodbye: 2,
					heal: 2,
					hello: 2,
					help: 2,
					invalidTarget: 3,
					need2hands:2,
					no: 2,
					noTarget: 2,
					onCd: 2,
					outOfRange: 3,
					thanks: 2,
					wait: 2,
					wrongSlot: 2,
					yes: 2,
					
					//groans
					groans_attack: 14,
					groans_death: 4,
					groans_laugh: 1,
					groans_pain: 15,
					
					//npcs
					guard_hi: 1,
					npc_bye: 2,
					npc_hi: 1,
					trainer_bye: 1,
					trainer_hi: 2,
					vendor_bye: 2,
					vendor_hi: 2
				},
			
				bee:
				{
					assist: 2,
					bound: 2,
					cannotAfford: 3,
					cannotCarryMore: 2,
					cannotDoHere: 2,
					cannotDoThat: 2,
					cannotInvite: 2,
					cannotLoot: 2,
					cannotTrade: 2,
					cannotUse: 2,
					charge: 2,
					fire: 2,
					flee: 2,
					flirt: 7,
					follow: 2,
					fullBag: 2,
					funny: 7,
					goodbye: 2,
					heal: 2,
					hello: 2,
					help: 2,
					invalidTarget: 3,
					need2hands:2,
					no: 2,
					noTarget: 2,
					onCd: 2,
					outOfRange: 3,
					thanks: 2,
					wait: 2,
					wrongSlot: 2,
					yes: 2,
					
					//groans
					groans_attack: 24,
					groans_cry: 1,
					groans_death: 3,
					groans_laugh: 4,
					groans_pain: 11,
					groans_surprised: 4,
					groans_swing: 2,
					
					//npcs
					guard_hi: 1,
					npc_bye: 2,
					npc_hi: 1,
					trainer_bye: 1,
					trainer_hi: 2,
					vendor_bye: 2,
					vendor_hi: 2
				},
			
				butterfly:
				{
					assist: 2,
					bound: 2,
					cannotAfford: 2,
					cannotCarryMore: 2,
					cannotDoHere: 2,
					cannotDoThat: 2,
					cannotInvite: 2,
					cannotLoot: 2,
					cannotTrade: 2,
					cannotUse: 2,
					charge: 2,
					fire: 2,
					flee: 2,
					flirt: 7,
					follow: 2,
					fullBag: 2,
					funny: 9,
					goodbye: 2,
					heal: 2,
					hello: 2,
					help: 2,
					invalidTarget: 3,
					need2hands:2,
					no: 2,
					noTarget: 2,
					onCd: 2,
					outOfRange: 3,
					thanks: 2,
					wait: 2,
					wrongSlot: 0, //////
					yes: 2,
					
					//groans
					groans_attack: 10,
					groans_death: 9,
					groans_laugh: 1,
					groans_pain: 9,
					groans_bugSplat: 1,
					groans_cough: 2,
					
					//npcs
					guard_hi: 1,
					npc_bye: 2,
					npc_hi: 1,
					trainer_bye: 1,
					trainer_hi: 2,
					vendor_bye: 2,
					vendor_hi: 2
				},
			
				fireant:
				{
					assist: 2,
					bound: 2,
					cannotAfford: 2,
					cannotCarryMore: 2,
					cannotDoHere: 2,
					cannotDoThat: 2,
					cannotInvite: 2,
					cannotLoot: 2,
					cannotTrade: 2,
					cannotUse: 2,
					charge: 2,
					fire: 2,
					flee: 2,
					flirt: 7,
					follow: 2,
					fullBag: 2,
					funny: 12,
					goodbye: 2,
					heal: 2,
					hello: 2,
					help: 2,
					invalidTarget: 3,
					need2hands:2,
					no: 2,
					noTarget: 2,
					onCd: 2,
					outOfRange: 3,
					thanks: 2,
					wait: 2,
					wrongSlot: 2, 
					yes: 2,
					
					//groans
					groans_attack: 6,
					groans_death: 7,
					groans_pain: 7,
					groans_cough: 1,
					
					//npcs
					guard_hi: 1,
					npc_bye: 2,
					npc_hi: 1,
					trainer_bye: 1,
					trainer_hi: 2,
					vendor_bye: 2,
					vendor_hi: 2
				},
			
				ladybug:
				{
					assist: 2,
					bound: 2,
					cannotAfford: 2,
					cannotCarryMore: 2,
					cannotDoHere: 2,
					cannotDoThat: 2,
					cannotInvite: 2,
					cannotLoot: 2,
					cannotTrade: 2,
					cannotUse: 2,
					charge: 2,
					fire: 2,
					flee: 2,
					flirt: 7,
					follow: 3,
					fullBag: 2,
					funny: 14,
					goodbye: 2,
					heal: 2,
					hello: 2,
					help: 2,
					invalidTarget: 3,
					need2hands:2,
					no: 2,
					noTarget: 2,
					onCd: 2,
					outOfRange: 3,
					thanks: 2,
					wait: 2,
					wrongSlot: 2, 
					yes: 2,
					
					//groans
					groans_attack: 11,
					groans_death: 10,
					groans_pain: 12,
					
					//npcs
					guard_hi: 1,
					npc_bye: 2,
					npc_hi: 1,
					trainer_bye: 1,
					trainer_hi: 2,
					vendor_bye: 3,
					vendor_hi: 2
				},
				
				
				
				mantis:
				{
					assist: 2,
					bound: 2,
					cannotAfford: 2,
					cannotCarryMore: 2,
					cannotDoHere: 2,
					cannotDoThat: 2,
					cannotInvite: 2,
					cannotLoot: 2,
					cannotTrade: 2,
					cannotUse: 2,
					charge: 2,
					fire: 2,
					flee: 2,
					flirt: 5,
					follow: 2,
					fullBag: 2,
					funny: 10,
					goodbye: 2,
					heal: 2,
					hello: 2,
					help: 2,
					invalidTarget: 3,
					need2hands:2,
					no: 2,
					noTarget: 2,
					onCd: 2,
					outOfRange: 3,
					thanks: 2,
					wait: 2,
					wrongSlot: 2, 
					yes: 2,
					
					//groans
					groans_attack: 8,
					groans_death: 6,
					groans_pain: 12,
					groans_grunt: 2,
					groans_rage: 2,
					groans_effort: 2,
					
					//npcs
					guard_hi: 1,
					npc_bye: 2,
					npc_hi: 1,
					trainer_bye: 1,
					trainer_hi: 2,
					vendor_bye: 2,
					vendor_hi: 2
				},
				
				
				//only vendors
				cockroach:
				{
					vendor_buff: 2,
					vendor_bye: 1,
					funny: 5,
					vendor_hi: 2,
					vendor_randoms: 8
				},
				
				fly:
				{
					vendor_buff: 2,
					vendor_bye: 2,
					funny: 7,
					vendor_hi: 2,
					vendor_randoms: 9
				},
				
				mosquito:
				{
					vendor_buff: 2,
					vendor_bye: 2,
					funny: 9,
					vendor_hi: 2,
					vendor_randoms: 11
				},
				
				moth:
				{
					vendor_buff: 2,
					vendor_bye: 2,
					funny: 6,
					vendor_hi: 2,
					vendor_randoms: 7
				}
			},
			
			playMainVoice: function( eventName )
			{
				var _ccO = Component.bugcraft.currentCharacterObject;
				
				if( _ccO.isSpeaking )
				{
					return;
				}
				
				var raceName = _ccO.characterData.character_race, chosenSound = Math.ceil( Math.random() * this.events[ raceName ][ eventName ] );
				
				_ccO.isSpeaking = true;
				
				var _t = setTimeout( function()
				{
					_ccO.isSpeaking = false;
				}, 2000 );
				
				Application.sound.playOverwrite({
														url: Application.configuration.cdn.location[ 0 ].url + "/mp3/voices/" + raceName + "/" + ( eventName + chosenSound ) + ".mp3",
														volume: this.volume,
														onFinish: function()
														{
															clearTimeout( _t );
															
															_ccO.isSpeaking = false;
														}
													});
			},
			
			playRaceVoiceOverwrite: function( raceName, eventName )
			{
				var chosenSound = Math.ceil( Math.random() * this.events[ raceName ][ eventName ] );
				
				return Application.sound.playOverwrite({
														url: Application.configuration.cdn.location[ 0 ].url + "/mp3/voices/" + raceName + "/" + ( eventName + chosenSound ) + ".mp3",
														volume: this.volume
													});
			},
			
			// used for 3rd party voices
			playCharacterVoiceExclusiveOtherRace: function( characterObject, raceName, eventName )
			{
				if( characterObject.isSpeaking )
				{
					return false;
				}
				
				if( !raceName )
				{
					return false;
				}
				
				var  _tcd = characterObject.characterData, _ccd = Component.bugcraft.currentCharacterObject.characterData,
					chosenSound = Math.ceil( Math.random() * this.events[ raceName ][ eventName ] );
				
				characterObject.isSpeaking = true;
				
				var _t = setTimeout( function()
				{
					characterObject.isSpeaking = false;
				}, 2000 );
				
				Application.sound.playExclusive({
														url: Application.configuration.cdn.location[ 0 ].url + "/mp3/voices/" + raceName + "/" + ( eventName + chosenSound ) + ".mp3",
														volume: spellEffects.volumeByRangeVoice(
																					_ccd.character_zone_x,
																					_ccd.character_zone_y,
																					_tcd.character_zone_x,
																					_tcd.character_zone_y,
																					spellEffects.volumeRangeLong
																				),
														onFinish: function()
														{
															clearTimeout( _t );
															
															characterObject.isSpeaking = false;
														}
													});
			},
			
			// used for 3rd party voices
			playCharacterVoiceExclusive: function( characterObject, eventName )
			{
				if( characterObject.isSpeaking )
				{
					return false;
				}
				
				var  _tcd = characterObject.characterData, raceName = _tcd.character_race;
				
				if( !raceName )
				{
					return false;
				}
				
				var _ccd = Component.bugcraft.currentCharacterObject.characterData,
					chosenSound = Math.ceil( Math.random() * this.events[ raceName ][ eventName ] );
				
				characterObject.isSpeaking = true;
				
				var _t = setTimeout( function()
				{
					characterObject.isSpeaking = false;
				}, 2000 );
				
				Application.sound.playExclusive({
														url: Application.configuration.cdn.location[ 0 ].url + "/mp3/voices/" + raceName + "/" + ( eventName + chosenSound ) + ".mp3",
														volume: spellEffects.volumeByRangeVoice(
																					_ccd.character_zone_x,
																					_ccd.character_zone_y,
																					_tcd.character_zone_x,
																					_tcd.character_zone_y,
																					spellEffects.volumeRangeLong
																				),
														onFinish: function()
														{
															clearTimeout( _t );
															
															characterObject.isSpeaking = false;
														}
													});
			}
		},
		
		screen:
		{
			_soundPointer: null,
			_musicLoopTimeoutPointer: null,
			
			volume: 10,
			
			changeVolume: function( newVolume )
			{
				if( this._soundPointer )
				{
					this._soundPointer.setVolume( newVolume );
				}
				
				this.volume = newVolume;
			},
			
			selectCharacter: function()
			{
				self._soundPointer = Application.sound.playExclusive({
													url: Application.configuration.cdn.location[ 0 ].url + "/mp3/newCharacter/newCharacter1.mp3",
													volume: Component.bugcraft.sound.screen.volume,
													onFinish: function()
													{
														// play the next sound
														self._musicLoopTimeoutPointer = setTimeout(
																												Component.bugcraft.sound.screen.selectCharacter,
																												5000 + Math.random() * 12500
																											);
													}
												});
			}
		},
		
		zone:
		{
			zones:
			{
				1: 2,
				2: 2,
				4: 2,
				51: 2
			},
			
			volume: 10,
			minDelay: 5000,
			maxDelay: 30000,
			
			_musicLoopTimeoutPointer: null,
			_musicLoopTimeoutPointer2: null,
			_soundPointer: null,
			_soundPointer2: null,
			
			changeVolume: function( newVolume )
			{
				if( Component.bugcraft.sound.zone._soundPointer )
				{
					Component.bugcraft.sound.zone._soundPointer.setVolume( newVolume );
				}
				
				if( Component.bugcraft.sound.zone._soundPointer2 )
				{
					Component.bugcraft.sound.zone._soundPointer2.setVolume( newVolume );
				}
				
				Component.bugcraft.sound.zone.volume = newVolume;
			},
			
			stopDeathLoop: function()
			{
				clearTimeout( Component.bugcraft.sound.zone._musicLoopTimeoutPointer );
				clearTimeout( Component.bugcraft.sound.zone._musicLoopTimeoutPointer2 );
				
				if( Component.bugcraft.sound.zone._soundPointer )
				{
					Component.bugcraft.sound.zone._soundPointer.stop();
					//Component.bugcraft.sound.zone._soundPointer.destruct();
				}
				
				if( Component.bugcraft.sound.zone._soundPointer2 )
				{
					Component.bugcraft.sound.zone._soundPointer2.stop();
					//Component.bugcraft.sound.zone._soundPointer2.destruct();
				}
			},
			
			playDeathLoop: function()
			{
				var _deathSound = function()
				{
					Component.bugcraft.sound.zone._soundPointer = Application.sound.playExclusive({
														url: Application.configuration.cdn.location[ 0 ].url + "/mp3/death/soundTrack1.mp3",
														volume: Component.bugcraft.sound.zone.volume,
														onFinish: function()
														{
															// play the next sound
															Component.bugcraft.sound.zone._musicLoopTimeoutPointer = setTimeout(
																													_deathSound,
																													self.minDelay + Math.random() * ( self.maxDelay - self.minDelay )
																												);
														}
													});
				}
				
				var _deathVoice = function()
				{
					Component.bugcraft.sound.zone._soundPointer2 = Application.sound.playExclusive({
															url: Application.configuration.cdn.location[ 0 ].url + "/mp3/death/soundTrack2.mp3",
															volume: Component.bugcraft.sound.zone.volume,
															onFinish: function()
															{
																// play the next sound
																Component.bugcraft.sound.zone._musicLoopTimeoutPointer2 = setTimeout(
																														_deathVoice,
																														self.minDelay
																													);
															}
														});
				}
				
				_deathSound();
				_deathVoice();
			},
			
			stopRandomAreaLoop: function()
			{
				clearTimeout( Component.bugcraft.sound.zone._musicLoopTimeoutPointer );
				
				if( Component.bugcraft.sound.zone._soundPointer )
				{
					Component.bugcraft.sound.zone._soundPointer.stop();
					//Component.bugcraft.sound.zone._soundPointer.destruct();
				}
			},
			
			playRandomAreaLoop: function()
			{
				var _maxSounds = this.zones[ Map.mapID ], self = this, _playedSounds = [];
				
				var _playSound = function()
				{
					if( _playedSounds.length >= _maxSounds - 1 )
					{
						_playedSounds = [];
					}
					
					while( true )
					{
						//Application.debug.addError( "entering while loop" );
						
						var _soundNumber = Math.ceil( Math.random() * _maxSounds );
						
						if( _playedSounds.indexOf( _soundNumber ) != -1 )
						{
							continue;
						}
						
						break;
					}
					
					Component.bugcraft.sound.zone._soundPointer = Application.sound.playExclusive({
															url: Application.configuration.cdn.location[ 0 ].url + "/mp3/zones/" + Map.mapID + "/" + _soundNumber + ".mp3",
															volume: Component.bugcraft.sound.zone.volume,
															onFinish: function()
															{
																// play the next sound
																Component.bugcraft.sound.zone._musicLoopTimeoutPointer = setTimeout(
																														_playSound,
																														self.minDelay + Math.random() * ( self.maxDelay - self.minDelay )
																													);
															}
														});
				}
				
				// the first time the loop starts the delay must be minimum
				Component.bugcraft.sound.zone._musicLoopTimeoutPointer = setTimeout( _playSound, self.minDelay );
			}
		}
	}	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	


/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft._shared_.tooltip.js
*/


	/*
		-----------------
		Item & Buff tooltip
		-----------------
	*/
	
	Component.bugcraft.tooltip = 
	{
		item: function( surfaceObject, itemProperties )
		{
			var _t = null;
			
			// will create the cost content for an item / player
			var _getCostContent = function( costData )
			{
				var costContent = '';
				
				if( costData.amber > 0 )
				{
					// regular polen
					
					costContent += '<span class="amber" title="Amber">' + costData.amber + '</span>';
				}
				
				if( costData.polen > 10000 )
				{
					// refined polen
					
					costContent += '<span class="polenRefined" title="Refined Polen">' + Math.floor( costData.polen / 10000 ) + '</span>';
					
					if( Math.floor( ( costData.polen % 10000 ) / 100 ) > 0 )
					{
						costContent += '<span class="polenRegular" title="Regular Polen">' + Math.floor( ( costData.polen % 10000 ) / 100 ) + '</span>';
						
						if( Math.floor( costData.polen % 100 ) > 0 )
						{
							costContent += '<span class="polenCrude" title="Crude Polen">' + Math.floor( costData.polen % 100 ) + '</span>';
						}
					}
				}
				else if( costData.polen > 100 )
				{
					// regular polen
					
					costContent += '<span class="polenRegular" title="Regular Polen">' + Math.floor( costData.polen / 100 ) + '</span>';
					
					if( Math.floor( costData.polen % 100 ) )
					{
						costContent += '<span class="polenCrude" title="Crude Polen">' + Math.floor( costData.polen % 100 ) + '</span>';
					}
				}
				else if( costData.polen > 0 )
				{
					// regular polen
					
					costContent += '<span class="polenCrude" title="Crude Polen">' + costData.polen + '</span>';
				}
				
				return costContent;
			}
			
			var _mouseOverFunction = function( e )
			{
				if( _t != null )
				{
					// tooltip still visible. no need to reinitialize
					
					return;
				}
				
				var itemTooltipObject = document.createElement("div"), _x = 0, _y = 0, _periodicCheckTimeout = 150, _ccd = Component.bugcraft.currentCharacterObject.characterData,
					_surfaceObjectPos = Application.util.style.getPos( surfaceObject ), _surfaceObjectX = _surfaceObjectPos.left, _surfaceObjectY = _surfaceObjectPos.top,
					_windowSize = Application.util.style.getWindowSize();
				
				var _setTooltipPosition = function()
				{
					itemTooltipObject.style.left = ( ( _x + itemTooltipObject.offsetWidth + 30 < _windowSize.width ) ? _x : ( _surfaceObjectX - itemTooltipObject.offsetWidth - 20 ) ) + "px";
					itemTooltipObject.style.top = ( ( _y + itemTooltipObject.offsetHeight < _windowSize.height ) ? _y : ( _surfaceObjectY - itemTooltipObject.offsetHeight ) ) + "px";
				}
				
				var _changePosFunction = function()
				{
					if( itemTooltipObject.offsetLeft == _x && itemTooltipObject.offsetTop == _y )
					{
						// no change in coordinates
					
						_t = setTimeout( _changePosFunction, _periodicCheckTimeout );
						
						return;
					}
					
					_setTooltipPosition();
					
					if(
						_x < _surfaceObjectX
						|| _y < _surfaceObjectY
						|| _x > _surfaceObjectX + surfaceObject.offsetWidth
						|| _y > _surfaceObjectY + surfaceObject.offsetHeight
					)
					{
						// out surfaceObject's boundaries
						
						clearTimeout( _t );
						
						Application.util.html.removeNode( itemTooltipObject );
						
						Application.event.remove( document.body, "mousemove", _moveFunction );
						
						_t = null;
						
						return;
					}
					
					_t = setTimeout( _changePosFunction, _periodicCheckTimeout );
				}
				
				var _moveFunction = function( e )
				{
					_x = e.x;
					_y = e.y;
				}
				
				itemTooltipObject.className = "itemTooltip";
				itemTooltipObject.innerHTML = ( "<div class='tooltipItemIcon' style='background-image:url(\"" + Application.configuration.cdn.location[ 0 ].url + "/item_skins/" + itemProperties.loot_id + "/" + itemProperties.loot_id + "_64x64.png\")'></div>" +
																		"<div class='tooltipTop'></div>" +
																		"<div class='tooltipTitle" + itemProperties.loot_rarity + "'>" + itemProperties.loot_name + "</div>" + 
																		"<div class='tooltipDetails'>" +
																			"<div class='toolTipSlotAndArmorContainer'><div class='tooltipSlot'>" + itemProperties.loot_type + "</div>" + 
																				( ( itemProperties.loot_armor_type != null ) ? ( "<div class='tooltipArmorType" + ( ( _ccd.character_armor_accepted.toString().split( "," ).indexOf( itemProperties.loot_armor_type ) == -1 ) ? "Restricted" : "" ) + "'>" + itemProperties.loot_armor_type + "</div>" ) : "" ) +
																			"</div>" +
																			( ( itemProperties.loot_bonus_damage_min != 0 && itemProperties.loot_bonus_damage_max != 0 ) ? "<div class='tooltipBonusDamage'>" + ( itemProperties.loot_bonus_damage_min + " - " + itemProperties.loot_bonus_damage_max ) + " damage</div>" : "" ) +
																			( ( itemProperties.loot_bonus_armor != 0 ) ? "<div class='tooltipBonusArmor'>" + ( itemProperties.loot_bonus_armor ) + " armor</div>" : "" ) +
																			( ( itemProperties.loot_bonus_attack != 0 ) ? "<div class='tooltipBonusAttack'>" + ( ( ( itemProperties.loot_bonus_attack > 0 ) ? "+" : "-" ) + itemProperties.loot_bonus_attack ) + " attack</div>" : "" ) +
																			( ( itemProperties.loot_bonus_defense != 0 ) ? "<div class='tooltipBonusDefense'>" + ( ( ( itemProperties.loot_bonus_defense > 0 ) ? "+" : "-" ) + itemProperties.loot_bonus_defense ) + " defense</div>" : "" ) +
																			( ( itemProperties.loot_bonus_resistance != 0 ) ? "<div class='tooltipBonusResistance'>" + ( ( ( itemProperties.loot_bonus_resistance > 0 ) ? "+" : "-" ) + itemProperties.loot_bonus_resistance ) + " resistance</div>" : "" ) +
																			( ( itemProperties.loot_bonus_potency != 0 ) ? "<div class='tooltipBonusPotency'>" + ( ( ( itemProperties.loot_bonus_potency > 0 ) ? "+" : "-" ) + itemProperties.loot_bonus_potency ) + " potency</div>" : "" ) +
																			( ( itemProperties.loot_bonus_strength != 0 ) ? "<div class='tooltipBonusStrength'>" + ( ( ( itemProperties.loot_bonus_strength > 0 ) ? "+" : "-" ) + itemProperties.loot_bonus_strength ) + " strength</div>" : "" ) +
																			( ( itemProperties.loot_bonus_hp != 0 ) ? "<div class='tooltipBonusHP'>" + ( ( ( itemProperties.loot_bonus_hp > 0 ) ? "+" : "-" ) + itemProperties.loot_bonus_hp ) + " hp</div>" : "" ) +
																			( ( itemProperties.buff_id != null ) ? "<div class='tooltipAssociatedBuff'>May cast " + ( ( itemProperties.loot_associated_buff_charges == null ) ? "infinite" : itemProperties.loot_associated_buff_charges ) + " charge" + ( ( itemProperties.loot_associated_buff_charges > 1 ) ? 's' : '' ) + " of " + itemProperties.buff_name + "</div>" : "" ) +
																			"<div class='tooltipItemLevelRequired" + ( ( itemProperties.loot_level_required > _ccd.character_level ) ? "Restricted" : "" ) + "'>Requires Level " + itemProperties.loot_level_required + "</div>" +
																			( ( itemProperties.loot_happiness_required != 0 ) ? "<div class='tooltipItemHappinessRequired" + ( ( itemProperties.loot_happiness_required > _ccd.character_happiness ) ? "Restricted" : "" ) + "'>Requires Happiness " + itemProperties.loot_happiness_required + "</div>" : "" ) +
																			"<div class='tooltipItemLevel'>Item Level " + itemProperties.loot_level + "</div>" +
																			( ( itemProperties.loot_description.length > 0 ) ? "<div class='tooltipItemDescription'>" + itemProperties.loot_description + "</div>" : "" ) +
																			
																			( ( Component.bugcraft.initializedPages.vendor ) ? "<div class='tooltipItemSellPrice'>" + _getCostContent({ polen: itemProperties.loot_sell_price_polen, amber: itemProperties.loot_sell_price_amber }) + "</div>" : "" ) +
																			
																		"</div>" +
																		"<div class='tooltipBottom'></div>" );
				
				document.body.appendChild( itemTooltipObject );
				
				_moveFunction( e );
				_setTooltipPosition();
				_changePosFunction();
				
				Application.event.add( document.body, "mousemove", _moveFunction );
			}
			
			// public methods
			
			this.show = function( e )
			{
				_mouseOverFunction( e );
			}
			
			this.enable = function()
			{
				Application.event.add( surfaceObject, "mouseover", _mouseOverFunction );
			}
			
			this.disable = this.remove = function()
			{
				Application.event.remove( surfaceObject, "mouseover", _mouseOverFunction );
			}
		},
		
		/*
			buffs tooltip
		*/
		
		buff: function( surfaceObject, buffProperties )
		{
			var _t = null, remainingTime = null, self = this,
				itemTooltipObject = document.createElement("div");
			
			var _mouseOverFunction = function( e )
			{
				if( _t != null )
				{
					// tooltip still visible. no need to reinitialize
					
					return;
				}
				
				var _x = 0, _y = 0, _periodicCheckTimeout = 150, _ccd = Component.bugcraft.currentCharacterObject.characterData,
					_surfaceObjectPos = Application.util.style.getPos( surfaceObject ), _surfaceObjectX = _surfaceObjectPos.left, _surfaceObjectY = _surfaceObjectPos.top,
					_windowSize = Application.util.style.getWindowSize();
				
				var _setTooltipPosition = function()
				{
					itemTooltipObject.style.left = ( ( _x + itemTooltipObject.offsetWidth + 30 < _windowSize.width ) ? _x : ( _surfaceObjectX - itemTooltipObject.offsetWidth - 20 ) ) + "px";
					itemTooltipObject.style.top = ( ( _y + itemTooltipObject.offsetHeight < _windowSize.height ) ? _y : ( _surfaceObjectY - itemTooltipObject.offsetHeight ) ) + "px";
				}
				
				var _changePosFunction = function()
				{
					if( itemTooltipObject.offsetLeft == _x && itemTooltipObject.offsetTop == _y )
					{
						// no change in coordinates
					
						_t = setTimeout( _changePosFunction, _periodicCheckTimeout );
						
						return;
					}
					
					_setTooltipPosition();
					
					if(
						_x < _surfaceObjectX
						|| _y < _surfaceObjectY
						|| _x > _surfaceObjectX + surfaceObject.offsetWidth
						|| _y > _surfaceObjectY + surfaceObject.offsetHeight
					)
					{
						// out surfaceObject's boundaries
						
						clearTimeout( _t );
						
						Application.util.html.removeNode( itemTooltipObject );
						
						Application.event.remove( document.body, "mousemove", _moveFunction );
						
						_t = null;
						
						return;
					}
					
					_t = setTimeout( _changePosFunction, _periodicCheckTimeout );
				}
				
				var _moveFunction = function( e )
				{
					_x = e.x;
					_y = e.y;
				}
				
				itemTooltipObject.className = "buffTooltip";
				
				self.updateToolTipText();
				
				document.body.appendChild( itemTooltipObject );
				
				_moveFunction( e );
				_setTooltipPosition();
				_changePosFunction();
				
				Application.event.add( document.body, "mousemove", _moveFunction );
			}
			
			// public methods
			
			this.show = function( e )
			{
				_mouseOverFunction( e );
			}
			
			this.updateToolTipText = function()
			{
				itemTooltipObject.innerHTML = ( "<div class='tooltipItemIcon' style='background-image:url(\"/components/bugcraft/resources/public/img/abilities_large/" + buffProperties.buff_id + ".png\")'></div>" +
																		"<div class='tooltipTop'></div>" +
																		"<div class='tooltipTitle'>" + buffProperties.buff_name + "</div>" + 
																		"<div class='tooltipDetails'>" +
																			( remainingTime ? ( "<div class='tooltipTalentPoints'>Remaining Time: " + remainingTime + "</div>" ) : "" ) +
																			( ( typeof buffProperties.buff_points != "undefined" ) ? ( "<div class='tooltipTalentPoints'>Talent points required: " + buffProperties.buff_points + "</div>" ) : "" ) +
																			"<div class='tooltipBuffDescription'>" + buffProperties.buff_description.replace( "%min", buffProperties.buff_gain_hp_min ).replace( "%max", buffProperties.buff_gain_hp_max ) + "</div>" +
																		"</div>" +
																		"<div class='tooltipBottom'></div>" );
			}
			
			this.updateRemainingTime = function( remainingTimeAmount )
			{
				remainingTime = remainingTimeAmount;
				
				self.updateToolTipText();
			}
			
			this.enableDisplayOnClick = function()
			{
				Application.event.add( surfaceObject, "click", _mouseOverFunction );
			}
			
			this.disableDisplayOnClick = function()
			{
				Application.event.remove( surfaceObject, "click", _mouseOverFunction );
			}
		}
	}	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	


/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.pageAchievementLog.js
*/


	/*
		Achievement Log page
	*/
	
	Component.bugcraft.pageAchievementLog = function( args )
	{
		// ensure this code is run only once
		
		if( typeof Component.bugcraft.initializedPages.achievementLog != "undefined" )
		{
			Component.bugcraft.initializedPages.achievementLog = !Component.bugcraft.initializedPages.achievementLog;
			//achievementsPageObject.className = ( achievementsPageObject.className == "hidden" ) ? "achievementLog" : "hidden";
			
			if( !Component.bugcraft.initializedPages.achievementLog )
			{
				Component.bugcraft.sound.ui.playEvent( "window", "bookOpen" );
				
				//Component.bugcraft.scaleWindow( achievementsPageObject );
			}
			else
			{
				Component.bugcraft.sound.ui.playEvent( "window", "buttonClose" );
			}
			
			return;
		}
		
		Component.bugcraft.initializedPages.achievementLog = true;
		
		//
		// Define internal variables
		//
		
		
		
		//
		// Server Handlers
		//
		
		// get all active achievements in the log
		Application.websocket.handlers.achievementsGetProgress = function( jsonEl, ws )
		{
			console.log( "got progress", jsonEl );
		}
		
		Application.websocket.socket.send( '{"c":"achievementsGetProgress"}' );
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.pageBags.js
*/

	
	/*
		Profile page
	*/
	
	Component.bugcraft.pageBags = function( args )
	{
		var bagsPageObject = document.getElementById( args.id + '_bagsPage' );
		
		// ensure this code is run only once
		if( typeof Component.bugcraft.initializedPages.pageBags != "undefined" )
		{
			Component.bugcraft.initializedPages.pageBags = !Component.bugcraft.initializedPages.pageBags;
			bagsPageObject.className = ( bagsPageObject.className == "hidden" ) ? "pageBags" : "hidden";
			
			if( !Component.bugcraft.initializedPages.pageBags )
			{
				Component.bugcraft.sound.ui.playEvent( "window", "backPack" );
			}
			else
			{
				Component.bugcraft.sound.ui.playEvent( "window", "buttonClose" );
			}
			
			return;
		}
		
		if( !args.hidden )
		{
			bagsPageObject.className = "pageBags";
			Component.bugcraft.sound.ui.playEvent( "window", "backPack" );
		}
		
		Component.bugcraft.initializedPages.pageBags = true;
		
		// bags hide
		Component.bugcraft.pageBagsHide = function()
		{
			Component.bugcraft.initializedPages.pageBags = true;
			bagsPageObject.className = "hidden";
		}
		
		// player currency
		Component.bugcraft.pageBagsUpdatePlayerCurrency = function()
		{
			// will create the cost content for an item / player
			var _getCostContent = function( costData )
			{
				var costContent = '';
				
				costContent += '<span class="amber" title="Amber">' + costData.amber + '</span>';
				
				if( costData.polen > 10000 )
				{
					// refined polen
					
					costContent += '<span class="polenRefined" title="Refined Polen">' + Math.floor( costData.polen / 10000 ) + '</span>';
					
					if( Math.floor( ( costData.polen % 10000 ) / 100 ) > 0 )
					{
						costContent += '<span class="polenRegular" title="Regular Polen">' + Math.floor( ( costData.polen % 10000 ) / 100 ) + '</span>';
						
						if( Math.floor( costData.polen % 100 ) > 0 )
						{
							costContent += '<span class="polenCrude" title="Crude Polen">' + Math.floor( costData.polen % 100 ) + '</span>';
						}
					}
				}
				else if( costData.polen > 100 )
				{
					// regular polen
					
					costContent += '<span class="polenRegular" title="Regular Polen">' + Math.floor( costData.polen / 100 ) + '</span>';
					
					if( Math.floor( costData.polen % 100 ) )
					{
						costContent += '<span class="polenCrude" title="Crude Polen">' + Math.floor( costData.polen % 100 ) + '</span>';
					}
				}
				else
				{
					// only crude polen in the bag
					
					costContent += '<span class="polenCrude" title="Crude Polen">' + costData.polen + '</span>';
				}
				
				return costContent;
			}
			
			bagsCurrencyObject.innerHTML = _getCostContent({
																			polen: _ccd.character_polen,
																			amber: _ccd.character_amber
																		});
		}
		
		//
		// Define internal variables
		//
		
		var _ccd = Component.bugcraft.currentCharacterObject.characterData,
			bagsCloseButtonObject = document.getElementById( args.id + '_bagsCloseButton' ),
			bagsCurrencyObject = document.getElementById( args.id + '_bagsCurrency' );
		
		// "close" button event
		Application.event.add( bagsCloseButtonObject, "click", function()
		{
			Component.bugcraft.sound.ui.playEvent( "window", "buttonClose" );
			
			Component.bugcraft.initializedPages.pageBags = !Component.bugcraft.initializedPages.pageBags;
			
			bagsPageObject.className = 'hidden';
		});
		
		/*
			-- Important notice --
			-- the bags content is updated from the profile page --
		*/
		
		Component.bugcraft.pageBagsUpdatePlayerCurrency();
	}
	
	Component.bugcraft.pageBagsUpdatePlayerCurrency = function()
	{
	
	}
	
	Component.bugcraft.pageBagsHide = function()
	{
		
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.pageBattle.js
*/

	
	/*
		Battle page
	*/
	
	Component.bugcraft.latency = 0;
	
	Component.bugcraft.pageBattle = function( args )
	{
		// canvas surface initialization
		Surface.init();
		
		// Objects
		
		Component.bugcraft._layoutObjects = {
			
			topAreaContainerObject: document.getElementById( args.id + '_topAreaContainer' ),
			
			// me
			characterLevelObject: document.getElementById( args.id + "_characterLevel" ),
			characterLevelShadowObject: document.getElementById( args.id + "_characterLevelShadow" ),
			characterNameObject: document.getElementById( args.id + "_characterName" ),
			characterClassObject: document.getElementById( args.id + "_characterClass" ),
			characterRaceObject: document.getElementById( args.id + "_characterRace" ),
			characterIconObject: document.getElementById( args.id + "_characterIcon" ),
			characterCombatMarker: document.getElementById( args.id + "_characterCombatMarker" ),
			questLogProgressQuestsContainerObject: document.getElementById( args.id + '_questLogProgressQuestsContainer' ),
			
			characterHealthNumberObject: document.getElementById( args.id + "_characterHealthNumbers" ),
			characterHealthFillingObject: document.getElementById( args.id + "_characterHealthFilling" ),
			characterHealthEndingObject: document.getElementById( args.id + "_characterHealthEnding" ),
			characterExperienceNumberObject: document.getElementById( args.id + "_characterExperienceNumbers" ),
			characterExperienceFillingObject: document.getElementById( args.id + "_characterExperienceFilling" ),
			characterExperienceEndingObject: document.getElementById( args.id + "_characterExperienceEnding" ),
			
			// points area
			zonePointsContainerObject: document.getElementById( args.id + "_zonePointsContainer" ),
			zonePointsAnteriumObject: document.getElementById( args.id + "_zonePointsAnterium" ),
			zonePointsHegemonyObject: document.getElementById( args.id + "_zonePointsHegemony" ),
			
			// target
			rightCharacterObject: document.getElementById( args.id + "_rightCharacter" ),
			
			targetLevelObject: document.getElementById( args.id + "_targetLevel" ),
			targetLevelNumberObject: document.getElementById( args.id + "_targetLevelNumber" ),
			targetLevelNumberShadowObject: document.getElementById( args.id + "_targetLevelNumberShadow" ),
			targetNameObject: document.getElementById( args.id + "_targetName" ),
			targetClassObject: document.getElementById( args.id + "_targetClass" ),
			targetRaceObject: document.getElementById( args.id + "_targetRace" ),
			targetIconObject: document.getElementById( args.id + "_targetIcon" ),
			
			targetHealthNumberObject: document.getElementById( args.id + "_targetHealthNumbers" ),
			targetHealthFillingObject: document.getElementById( args.id + "_targetHealthFilling" ),
			targetHealthEndingObject: document.getElementById( args.id + "_targetHealthEnding" ),
			
			targetActiveBuffsObject: document.getElementById( args.id + "_targetActiveBuffsBar" ),
			targetPassiveBuffsObject: document.getElementById( args.id + "_targetPassiveBuffsBar" ),
			
			// map
			mapAreaObject: document.getElementById( args.id + "_mapArea" ),
			mapObject: document.getElementById( args.id + "_map" ),
			minimapObject: document.getElementById( args.id + "_minimap" ),
			minimapCanvasAreaObject: document.getElementById( args.id + "_minimapCanvas" ),
			
			selfActiveBuffsObject: document.getElementById( args.id + "_characterActiveBuffsBar" ),
			selfPassiveBuffsObject: document.getElementById( args.id + "_characterPassiveBuffsBar" ),
			
			// cast bars
			barCastTimeContainerObject: document.getElementById( args.id + "_barCastTimeContainer" ),
			barCastTimeNumbersObject: document.getElementById( args.id + "_barCastTimeNumbers" ),
			barCastTimeFillingObject: document.getElementById( args.id + "_barCastTimeFilling" ),
			barCastTimeEndingObject: document.getElementById( args.id + "_barCastTimeEnding" ),
			
			// bottom bar
			bottomBarObject: document.getElementById( args.id + "_bottom" ),
			bottomBarMenuItem1Object: document.getElementById( args.id + "_bottomBarMenuItem1" ),
			bottomBarMenuItem2Object: document.getElementById( args.id + "_bottomBarMenuItem2" ),
			bottomBarMenuItem3Object: document.getElementById( args.id + "_bottomBarMenuItem3" ),
			bottomBarMenuItem4Object: document.getElementById( args.id + "_bottomBarMenuItem4" ),
			bottomBarMenuItem5Object: document.getElementById( args.id + "_bottomBarMenuItem5" ),
			bottomBarMenuItem6Object: document.getElementById( args.id + "_bottomBarMenuItem6" ),
			bottomBarMenuItem7Object: document.getElementById( args.id + "_bottomBarMenuItem7" ),
			bottomBarMenuItem8Object: document.getElementById( args.id + "_bottomBarMenuItem8" ),
			bottomBarMenuItem7OverlayObject: document.getElementById( args.id + "_bottomBatMenuItem7Overlay" ),
			
			achievementsNotificationArea: document.getElementById( args.id + '_achievementsNotificationArea' ),
			achievementGlow: document.getElementById( args.id + '_achievementGlow' ),
			achievementShine: document.getElementById( args.id + '_achievementShine' ),
			achievementsNotificationAchievementName: document.getElementById( args.id + '_achievementsNotificationAchievementName' )
			
		};

		var actionBars =
		{
			"actionbar1": document.getElementById( args.id + "_actionBar1" )
		};
		
		// prevent context menu display
		
		Component.bugcraft._layoutObjects.bottomBarObject.oncontextmenu = function() { return false; }
		
		// Map the menu buttons
		
		var lO = Component.bugcraft._layoutObjects;
		
		lO.bottomBarMenuItem1Object.onclick = function() { Component.bugcraft.pageProfile( args ); };
		lO.bottomBarMenuItem2Object.onclick = function() { Component.bugcraft.pageQuestLog( args ); };
		lO.bottomBarMenuItem3Object.onclick = function() { Component.bugcraft.pageSpellBook( args ); };
		lO.bottomBarMenuItem4Object.onclick = function() { Component.bugcraft.pageTalentTree( args ); };
		lO.bottomBarMenuItem5Object.onclick = function() { Component.bugcraft.pageVendor( null, { id: args.id, isAmberStore: true } ); };
		lO.bottomBarMenuItem6Object.onclick = function() { Component.bugcraft.pageSettings( args ); };
		lO.bottomBarMenuItem7Object.onclick = function() { Component.bugcraft.pageLookingForBattleground( args ); };
		lO.bottomBarMenuItem8Object.onclick = function() { Component.bugcraft.pageBags( args ); };
		
		//
		// Init
		//
		
		//this._characterData = [];
		Component.bugcraft._characterData = [];
		
		var _t = null, _LN = 0, _LI = 0, _battleGroundInitialized = false;
		
		var self = this;
		var self2 = this;
		
		// bottom bar initial calculations
		var bbO = Component.bugcraft._layoutObjects.bottomBarObject;
		var position = Application.util.style.getPos( bbO );
		
		bbO.absoluteX = position.left;
		bbO.absoluteY = position.top;
		
		var actionBarSkin = 'bugtopia';
		
		
		
		
		
		
		
		
		
		
		//
		// User interface handling
		//
		
		Component.bugcraft.ui = {
			
			buffObjects: {},
			actionBars: {},
			hotKeys: [],
			
			effectsHash:
			{
				3: spellEffects.auraSpin3, 
				4: spellEffects.buffBloodDrop4, 
				5: spellEffects.auraMagicComplete, 
				6: spellEffects.auraMagicPurpleComplete, 
				7: function( args ) { args.effect1 = spellEffects.slashAmber; args.effect2 = spellEffects.buffSkullComplete; spellScenario.parallel(args); },
				9: spellEffects.auraStar9Complete, 
				12: function( args ) { args.effect1 = spellEffects.buffTacticsComplete; args.effect2 = spellEffects.buffTacticsComplete; spellScenario.parallel(args); },
				13: spellEffects.bolt, 
				15: spellEffects.buffWingsComplete, 
				16: spellEffects.buffCloseShell, 
				17: spellEffects.buffBloodDrop, 
				19: spellEffects.buffEnrage,
				20: function( args ) { args.effect1 = spellEffects.slash; args.effect2 = spellEffects.hitStar; spellScenario.parallel(args); },
				21: function( args ) { args.effect1 = spellEffects.slashThunder; args.effect2 = spellEffects.debuffSunderArmor; spellScenario.parallel(args); },
				//21: function( args ) { args.effect1 = spellEffects.slash; args.effect2 = spellEffects.lootableComplete; spellScenario.parallel(args); },
				22: function( args ) { args.effect1 = spellEffects.slashDouble; args.effect2 = spellEffects.debuffBloodSpatter; spellScenario.parallel(args); },
				//22: function( args ) { args.effect1 = spellEffects.damageChemicalPoison; args.effect2 = spellEffects.slashDouble; spellScenario.parallel(args); },
				23: function( args ) { args.effect1 = spellEffects.buffSkullComplete; args.effect2 = spellEffects.buffMovingSkullComplete; spellScenario.parallel(args); },
				24:  function( args ) { args.effect1 = spellEffects.pincerComplete; args.effect2 = spellEffects.debuffDisorient; spellScenario.parallel(args); },
				25: spellEffects.debuffSlowMulti, 
				26: function( args ) { args.effect1 = spellEffects.slashAmber; args.effect2 = spellEffects.hitStar; spellScenario.parallel(args); },
				27: spellEffects.stun, 
				28: function( args ) { args.effect1 = spellEffects.slashAmber; args.effect2 = spellEffects.hitStar28; spellScenario.parallel(args); }, 
				29: function( args ) { args.effect1 = spellEffects.slash; args.effect2 = spellEffects.hitShine; spellScenario.parallel(args); },
				31: function( args ) { args.effect1 = spellEffects.buffShield31; args.effect2 = spellEffects.hitStar31; spellScenario.parallel(args); },
				32: spellEffects.auraColors,
				34: spellEffects.buffFortitudeComplete, 
				39: spellEffects.slashSingleCritical, 
				40: function( args ) { args.effect1 = spellEffects.slashAmber; args.effect2 = spellEffects.hitFlame; spellScenario.parallel(args); },
				//41: function( args ) { args.effect1 = spellEffects.boltStickySpray41; args.effect2 = spellEffects.hitStar41; spellScenario.cascade(args); },
				41: function( args ) { args.effect1 = spellEffects.boltStickySpray; args.effect2 = spellEffects.hitStar41; spellScenario.cascade(args); },
				42: function( args ) { args.effect1 = spellEffects.boltStickySpray; args.effect2 = spellEffects.hitStar; spellScenario.cascade(args); },
				43: function( args ) { args.effect1 = spellEffects.boltStickySpray; args.effect2 = spellEffects.hitStar; spellScenario.cascade(args); },
				44: function( args ) { args.effect1 = spellEffects.boltStickySpray; args.effect2 = spellEffects.hitStar; spellScenario.cascade(args); },
				45: function( args ) { args.effect1 = spellEffects.boltStickySpray; args.effect2 = spellEffects.hitStar; spellScenario.cascade(args); },
				46: function( args ) { args.effect1 = spellEffects.boltStickySpray; args.effect2 = spellEffects.hitStar; spellScenario.cascade(args); },
				47: function( args ) { args.effect1 = spellEffects.boltStickySpray; args.effect2 = spellEffects.hitStar; spellScenario.cascade(args); },
				49: function( args ) { args.effect1 = spellEffects.boltStickySpray; args.effect2 = spellEffects.webBottom; spellScenario.cascade(args); },
				51: spellEffects.auraColors, 
				52: function( args ) { args.effect1 = spellEffects.healCastComplete; args.effect2 = spellEffects.buffCleanse; spellScenario.parallel(args); },
				53: spellEffects.debuffDominate,
				55: function( args ) { args.effect1 = spellEffects.healNobleComplete; args.effect2 = spellEffects.heal; spellScenario.parallel(args); },
				56: function( args ) { args.effect1 = spellEffects.healCastComplete; args.effect2 = spellEffects.buffHealingOil; spellScenario.parallel(args); },
				57: function( args ) { args.effect1 = spellEffects.healNobleComplete; args.effect2 = spellEffects.buffHealingOil; spellScenario.parallel(args); },
				58: function( args ) { args.effect1 = spellEffects.buffRallyComplete; args.effect2 = spellEffects.buffRallyComplete; spellScenario.parallel(args); },
				59: function( args ) { args.effect1 = spellEffects.healNobleComplete; args.effect2 = spellEffects.buffWaxShell; spellScenario.parallel(args); },
				60: function( args ) { args.effect1 = spellEffects.auraMagicPurpleComplete; args.effect2 = spellEffects.buffHeart; spellScenario.parallel(args); },
				61: function( args ) { args.effect1 = spellEffects.boltLiquify; args.effect2 = spellEffects.hitLiquify; spellScenario.cascade(args); },
				66: function( args ) { args.effect1 = spellEffects.healCastComplete; args.effect2 = spellEffects.heal; spellScenario.paralell(args); },
				68: function( args ) { args.effect1 = spellEffects.debuffDominate; args.effect2 = spellEffects.debuffDominate; spellScenario.parallel(args); },
				72: function( args ) { args.effect1 = spellEffects.slashAmber72; args.effect2 = spellEffects.hitVenomSting72; spellScenario.parallel(args); },
				74: spellEffects.dust,
				75: function( args ) { args.effect1 = spellEffects.slash; args.effect2 = spellEffects.hitShine; spellScenario.cascade(args); },
				78: spellEffects.auraColors, 
				79: spellEffects.auraColors, 
				80: function( args ) { args.effect1 = spellEffects.slashTriple; args.effect2 = spellEffects.hitSplash; spellScenario.parallel(args); },
				81: spellEffects.shieldArc, 
				82: spellEffects.buffShield, 
				83: function( args ) { args.effect1 = spellEffects.buffInspiringVigorComplete; args.effect2 = spellEffects.buffInspiringVigorComplete; spellScenario.parallel(args); },
				85: spellEffects.buffPolishShell, 
				86: function( args ) { args.effect1 = spellEffects.slash; args.effect2 = spellEffects.cracks; spellScenario.parallel(args); },
				87: function( args ) { args.effect1 = spellEffects.slashSingleCritical; args.effect2 = spellEffects.slashDouble; spellScenario.parallel(args); },
				88: spellEffects.buffBloodDrop,
				89: spellEffects.slash89, 
				91: function( args ) { args.effect1 = spellEffects.slashAmber; args.effect2 = spellEffects.debuffSlow; spellScenario.parallel(args); },
				94: function( args ) { args.effect1 = spellEffects.pincer94Complete; args.effect2 = spellEffects.hitStar94; spellScenario.parallel(args); },
				97: function( args ) { args.effect1 = spellEffects.slashFuchsia; args.effect2 = spellEffects.debuffCloudedMind97Complete; spellScenario.parallel(args); },
				99: function( args ) { args.effect1 = spellEffects.slashTriple; args.effect2 = spellEffects.hitLiquify99; spellScenario.parallel(args); },
				100: function( args ) { args.effect1 = spellEffects.dust; args.effect2 = spellEffects.characterInvisibility; spellScenario.parallel(args); },
				101: spellEffects.auraElectricBlue, 
				102: spellEffects.auraSpin102,
				103: spellEffects.slashTriple103, 
				105: function( args ) { args.effect1 = spellEffects.slashAmber; args.effect2 = spellEffects.hitStar; spellScenario.parallel(args); },
				107: function( args ) { args.effect1 = spellEffects.slashGreen; args.effect2 = spellEffects.hitVenomSting; spellScenario.parallel(args); },
				108: function( args ) { args.effect1 = spellEffects.healCastComplete; args.effect2 = spellEffects.buffHealingOil; spellScenario.parallel(args); },
				109: function( args ) { args.effect1 = spellEffects.healCastComplete; args.effect2 = spellEffects.heal; spellScenario.parallel(args); },
				111: function( args ) { args.effect1 = spellEffects.slashTriple111; args.effect2 = spellEffects.debuffDisorinet; spellScenario.parallel(args); },
				112: function( args ) { args.effect1 = spellEffects.slashGreen; args.effect2 = spellEffects.hitVenomSting112; spellScenario.parallel(args); },
				113: function( args ) { args.effect1 = spellEffects.buffColdBloodComplete; args.effect2 = spellEffects.buffColdBloodComplete; spellScenario.parallel(args); },
				114: function( args ) { args.effect1 = spellEffects.buffEnrage114; args.effect2 = spellEffects.hitSpark114; spellScenario.parallel(args); },
				116: spellEffects.slashAmber116, 
				118: function( args ) { args.effect1 = spellEffects.slashSingle; args.effect2 = spellEffects.debuffDisorient; spellScenario.parallel(args); },
				119: function( args ) { args.effect1 = spellEffects.slashGreen; args.effect2 = spellEffects.debuffDisorient; spellScenario.parallel(args); },
				121: function( args ) { args.effect1 = spellEffects.buffAwarenessComplete; args.effect2 = spellEffects.buffAwarenessComplete; spellScenario.parallel(args); },
				123: function( args ) { args.effect1 = spellEffects.buffCunningComplete; args.effect2 = spellEffects.buffCunningComplete; spellScenario.parallel(args); },
				124: function( args ) { args.effect1 = spellEffects.healCastComplete; args.effect2 = spellEffects.hitLiquify; spellScenario.parallel(args); },
				125: function( args ) { args.effect1 = spellEffects.shieldWater; args.effect2 = spellEffects.buffHerbalShield; spellScenario.parallel(args); },
				127: function( args ) { args.effect1 = spellEffects.slashTriple; args.effect2 = spellEffects.debuffBloodSpatter; spellScenario.parallel(args); },
				128: function( args ) { args.effect1 = spellEffects.boltAcid128; args.effect2 = spellEffects.hitLiquify; spellScenario.cascade(args); },
				130: function( args ) { args.effect1 = spellEffects.shieldWater130; args.effect2 = spellEffects.buffHerbalShieldYellow; spellScenario.parallel(args); },
				131: function( args ) { args.effect1 = spellEffects.healNobleComplete; args.effect2 = spellEffects.resurrectComplete; spellScenario.parallel(args); },
				133: function( args ) { args.effect1 = spellEffects.auraBlue133Complete; args.effect2 = spellEffects.auraBlue133Complete; spellScenario.parallel(args); },
				134: function( args ) { args.effect1 = spellEffects.healCastComplete; args.effect2 = spellEffects.heal; spellScenario.parallel(args); },
				135: function( args ) { args.effect1 = spellEffects.slashGreen; args.effect2 = spellEffects.debuffSunderArmor; spellScenario.parallel(args); },
				137: function( args ) { args.effect1 = spellEffects.slashGreen; args.effect2 = spellEffects.debuffPoisonSplatter; spellScenario.parallel(args); },
				140: spellEffects.buffTacticsComplete,
				141: function( args ) { args.effect1 = spellEffects.boltAmberTrap; args.effect2 = spellEffects.trapAmber; spellScenario.cascade(args); },
				143: function( args ) { args.effect1 = spellEffects.healNobleComplete; args.effect2 = spellEffects.debuffConfusionTranceComplete; spellScenario.parallel(args); },
				144: function( args ) { args.effect1 = spellEffects.healNobleComplete; args.effect2 = spellEffects.debuffConfuseInsect; spellScenario.parallel(args); },
				145:function( args ) { args.effect1 = spellEffects.slashGreen; args.effect2 = spellEffects.debuffSunderArmor; spellScenario.parallel(args); },
				149: function( args ) { args.effect1 = spellEffects.healCastComplete; args.effect2 = spellEffects.shieldHoneyBuff; spellScenario.parallel(args); },
				150: function( args ) { args.effect1 = spellEffects.boltOpportuneBlast154; args.effect2 = spellEffects.hitFlame150; spellScenario.parallel(args); },
				151: spellEffects.auraTime151Complete, 
				//152: function( args ) { args.effect1 = spellEffects.healNobleComplete; args.effect2 = spellEffects.buffHealingOil; spellScenario.parallel(args); },
				152: function( args ) { args.effect1 = spellEffects.healNobleComplete; args.effect2 = spellEffects.areaNatureVines; spellScenario.parallel(args); },
				153: function( args ) { args.effect1 = spellEffects.buffSkullComplete; args.effect2 = spellEffects.buffMovingSkullComplete; spellScenario.parallel(args); },
				154: function( args ) { args.effect1 = spellEffects.boltOpportuneBlast154; args.effect2 = spellEffects.hitLiquify; spellScenario.cascade(args); },
				155: function( args ) { args.effect1 = spellEffects.healNobleComplete; args.effect2 = spellEffects.debuffCloudedMindComplete; spellScenario.parallel(args); },
				156: function( args ) { args.effect1 = spellEffects.boltOpportuneBlast; args.effect2 = spellEffects.hitSplash; spellScenario.parallel(args); },
				158: function( args ) { args.effect1 = spellEffects.healCastComplete; args.effect2 = spellEffects.heal; spellScenario.parallel(args); },
				159: function( args ) { args.effect1 = spellEffects.healNobleComplete; args.effect2 = spellEffects.shieldMagicComplete; spellScenario.parallel(args); },
				160: function( args ) { args.effect1 = spellEffects.healNobleComplete; args.effect2 = spellEffects.healGenerousRenewalComplete; spellScenario.parallel(args); },
				174: function( args ) { args.effect1 = spellEffects.healCastComplete; args.effect2 = spellEffects.heal; spellScenario.parallel(args); },
				182: spellEffects.flagCapturedAnteriumComplete,
				183: spellEffects.flagCapturedHegemonyComplete,
				205: spellEffects.tentCapturedAnterium,
				206: spellEffects.tentCapturedHegemony
			},
			
			updateBuffsStatusConsideringTarget: function()
			{
				for(var i in this.buffObjects)
				{
					this.buffObjects[ i ].setCastable();
				}
			},
			
			startAnimations: function()
			{
				//
				// RequestAnimFrame to ensure best performance
				//
				
				var _animationLoopOriginal = function()
				{
					Map.drawAnimations( Component.bugcraft._characterData );
					
					requestAnimFrame(_animationLoop);
				}
				
				var _animationLoop = _animationLoopOriginal;
				_animationLoopOriginal();
				
				var _animationChanger = 	function()
				{
					var _startDate = ( new Date() ).getTime(), _iterations = 0;
					
					// check for framerate after a fixed time has elapsed
					setTimeout( function()
										{
											var _endDate = ( new Date() ).getTime();
											
											_LI = Math.floor( 1000 - ( ( 1000 * ( _iterations * 41.667 ) ) / ( _endDate - _startDate ) ) );
											
											if( _LI < 0 )
											{
												// a love scene for the interface lag. we're over 24FPS
												
												_LI = 0;
											}
											
											Component.bugcraft.latency = ( _LN + _LI );
											
											//Application.debug.add( "Latency (ms) " + Component.bugcraft.latency + " ( NW:" + _LN + ", GUI: " + _LI + " ) ");
											
											// return to the fast animation loop function
											_animationLoop = _animationLoopOriginal;
											
											// restart the benchmark soon
											setTimeout( _animationChanger, 5000 );
										}, 5000 );
					
					_animationLoopBenchmark = function()
					{
						_iterations++;
						
						Map.drawAnimations( Component.bugcraft._characterData );
						
						requestAnimFrame(_animationLoop);
					}
					
					_animationLoop = _animationLoopBenchmark;
				};
				
				//setTimeout( _animationChanger, 1000 );
			},
			
			buffObject: function( args )
			{
				var self = this;
				
				this.args = args;
				this.isCastable = true;
				this.copies = [];
				
				var _cdTimeout = null,
					_tooltipObject = null;
				
				switch( args.modelType )
				{
					case 1:
						
						// action bar
						
						Component.bugcraft.ui.hotKeys[ args.hotKey ] = this;
						
						var buffObject = document.createElement("span");
						buffObject.className = "buffObject";
						
						var buffCooldownBubbleObject = document.createElement("div");
						buffCooldownBubbleObject.className = "buffCooldownBubbleHidden";
						
						buffObject.appendChild( buffCooldownBubbleObject );
						
						var buffNumberObject = document.createElement("span");
						buffNumberObject.className = "buffNumber";
						
						buffNumberObject.style.backgroundImage='url("' + Application.configuration.cdn.location[ 0 ].url + '/ui/actionbar/' + actionBarSkin + '/buff_number.png")';
						
						buffNumberObject.appendChild( document.createTextNode( args.hotKey + 1 ) );
						
						buffObject.appendChild( buffNumberObject );
						
						var buffIconObject = document.createElement("span");
						buffIconObject.className = "buffIcon";
						
						buffIconObject.style.backgroundImage = "url('/components/bugcraft/resources/public/img/abilities_medium/darken_" + args.buff.buff_id + ".png')";
						
						buffObject.appendChild( buffIconObject );
						
						self.disabledGraphics = function()
						{
							buffIconObject.style.backgroundImage = "url('/components/bugcraft/resources/public/img/abilities_medium/disabled_" + args.buff.buff_id + ".png')";
						}
						
						self.outGraphics = function()
						{
							buffIconObject.style.backgroundImage = "url('/components/bugcraft/resources/public/img/abilities_medium/darken_" + args.buff.buff_id + ".png')";
						}
						
						self.mouseOver =	function( e )
						{
							if( !e.keyCode )
							{
								if( !_tooltipObject )
								{
									_tooltipObject = new Component.bugcraft.tooltip.buff( buffObject, args.buff );
								}
								
								_tooltipObject.show( e );
							}
							
							if( !self.isCastable )
							{
								return;
							}
							
							buffIconObject.style.backgroundImage = "url('/components/bugcraft/resources/public/img/abilities_large/" + args.buff.buff_id + ".png')";
						}
						
						self.mouseOut =	function( e )
													{
														if( !self.isCastable )
														{
															return;
														}
														
														self.outGraphics();
													}
						
					break;
					case 2:
						
						// spellbook
						
						var buffObject = document.createElement("span");
						//buffObject.setAttribute("href", "#");
						buffObject.className = "buffObject";
						buffObject.style.backgroundImage = "url('/components/bugcraft/resources/public/img/abilities_large/darken_" + args.buff.buff_id + ".png')";
						
						var buffCooldownBubbleObject = document.createElement("div");
						buffCooldownBubbleObject.className = "buffCooldownBubbleHidden";
						
						buffObject.appendChild( buffCooldownBubbleObject );
						
						var buffIconObject = document.createElement("div");
						buffIconObject.className = "buffIcon";
						buffIconObject.innerHTML = '<div class="row1"><span class="buffName">' + args.buff.buff_name + '</span><span class="buffType">' + ( ( args.buff.buff_type & 2 ) ? "passive" : "" ) + '</span></div><div class="buffCooldown">' + args.buff.buff_cooldown_seconds + ' second' + ( ( args.buff.buff_cooldown_seconds > 1 ) ? 's' : '' ) + ' cooldown</div><div class="buffDescription">' + args.buff.buff_description + '</div>';
						
						buffObject.appendChild( buffIconObject );
						
						self.outGraphics = function()
						{
							buffObject.style.backgroundImage = "url('/components/bugcraft/resources/public/img/abilities_large/darken_" + args.buff.buff_id + ".png')";
						}
						
						self.disabledGraphics = function()
						{
							buffObject.style.backgroundImage = "url('/components/bugcraft/resources/public/img/abilities_large/disabled_" + args.buff.buff_id + ".png')";
						}
						
						self.mouseOver =	function()
														{
															if( !self.isCastable )
															{
																return;
															}
															
															buffObject.style.backgroundImage = "url('/components/bugcraft/resources/public/img/abilities_large/" + args.buff.buff_id + ".png')";
														}
						
						self.mouseOut =	function()
													{
														if( !self.isCastable )
														{
															return;
														}
														
														self.outGraphics();
													}
						
					break;
				}
				
				this.moveToActionbarPosition = function( actionBarObject, position, noPositionUpdate )
				{
					if( actionBarObject.childNodes.length == position )
					{
						actionBarObject.appendChild( buffObject );
					}
					else
					{
						actionBarObject.insertBefore( buffObject, actionBarObject.childNodes[ position ] );
					}
					
					if( !noPositionUpdate )
					{
						self.updatePosition();
					}
				}
				
				this.updatePosition = function()
				{
					var position = Application.util.style.getPos( buffObject );
					
					self.absoluteX = position.left;
					self.absoluteY = position.top;
					
					// if the position has changed, then the hotkey has changed
					self.updateHotKey();
				}
				
				this.updateHotKey = function()
				{
					buffNumberObject.innerHTML = ( args.hotKey + 1 );
				}
				
				this.swapWithBuff = function( targetBuff )
				{
					alert('x');
					targetBuff.moveToActionbarPosition( args.targetArea, args.buff.cia_actionbar_slot - 1, true );
					self.moveToActionbarPosition(
										targetBuff.args.targetArea,
										( targetBuff.args.buff.cia_actionbar_slot < args.buff.cia_actionbar_slot ) ? ( targetBuff.args.buff.cia_actionbar_slot - 1 ) : targetBuff.args.buff.cia_actionbar_slot,
										true
									);
					
					var _target_abn = targetBuff.args.buff.cia_actionbar_name;
					var _target_abs = targetBuff.args.buff.cia_actionbar_slot;
					
					// modify target's attributes
					
					targetBuff.args.targetArea = actionBars[ args.buff.cia_actionbar_name ];
					targetBuff.args.buff.cia_actionbar_name = args.buff.cia_actionbar_name;
					targetBuff.args.buff.cia_actionbar_slot = args.buff.cia_actionbar_slot;
					
					Component.bugcraft.ui.hotKeys[ args.hotKey ] = targetBuff;
					Component.bugcraft.ui.actionBars[ args.buff.cia_actionbar_name ][ args.buff.cia_actionbar_slot - 1 ] = targetBuff;
					
					// modify self attributes
					
					args.targetArea = actionBars[ _target_abn ];
					args.buff.cia_actionbar_name = _target_abn;
					args.buff.cia_actionbar_slot = _target_abs;
					
					Component.bugcraft.ui.hotKeys[ targetBuff.args.hotKey ] = self;
					Component.bugcraft.ui.actionBars[ _target_abn ][ _target_abs - 1 ] = self;
					
					var hotKeyAux = targetBuff.args.hotKey;
					targetBuff.args.hotKey = args.hotKey;
					args.hotKey = hotKeyAux;
					
					// update position
					targetBuff.updatePosition();
					self.updatePosition();
				}
				
				// cast the buff
				this.cast = function()
				{
					if(
						args.buff.buff_target_range < Component.bugcraft.currentCharacterObject.characterData.character_distance_to_target
						&& self.isCastable == false
					)
					{
						// out of range. issue message
						
						Component.bugcraft.messages.addError( "Target is out of range" );
						
						Component.bugcraft.sound.characters.playMainVoice( "outOfRange" );
					}
					
					if( !self.isCastable )
					{
						if( self.isOnCooldown() )
						{
							Component.bugcraft.messages.addError( "The buff is on cooldown" );
							
							Component.bugcraft.sound.characters.playMainVoice( "onCd" );
						}
						else
						{
							Component.bugcraft.messages.addError( "I cannot do that" );
							
							Component.bugcraft.sound.characters.playMainVoice( "cannotDoThat" );
						}
						
						return;
					}
					
					var _cc = Component.bugcraft.currentCharacterObject.characterData;
					var _tc = Component.bugcraft.currentCharacterTarget.characterData;
					
					if(
						( args.buff.buff_allow_target == 1 || ( args.buff.buff_allow_target & 3 && Map._evaluateRelationship() == false ) ) && _cc.character_id != _tc.character_id
					)
					{
						// target is not self but the buff may only be casted on friendly target (and i have a foe) or self
						// auto target myself
						
						Application.websocket.socket.send( '{"c":"cast","buff_id":' + args.buff.buff_id + ',"target_id":' + _cc.character_id + '}' );
					}
					else
					{
						Application.websocket.socket.send( '{"c":"cast","buff_id":' + args.buff.buff_id + ',"target_id":' + _tc.character_id + '}' );
					}
				}
				
				// mark this buff as being castable / not castable considering the target object
				this.setCastable = function( noCascade )
				{
					var _cascade = function()
					{
						if( noCascade )
						{
							return;
						}
						
						// make the clones behave in the same way
						
						for(var i=0;i<self.copies.length;i++)
						{
							self.copies[ i ].setCastable( true );
						}	
					}
					
					var _ccO = Component.bugcraft.currentCharacterObject;
					
					if(
						_cdTimeout != null
						|| args.buff.buff_type & 2 
						|| _ccO.characterData.character_is_alive == null
						|| _ccO.isCasting == true
						|| (
								(
									_cdTimeout == null							// in cooldown
									&& ( args.buff.buff_type & 2 ) == 0		// passive buff
								)
								&& !( // about self
									args.buff.buff_allow_target & 1
								)
								&& !(	// about the target
									Component.bugcraft.currentCharacterTarget.characterData.character_id != _ccO.characterData.character_id
									&& args.buff.buff_target_range >= _ccO.characterData.character_distance_to_target
									&& Map._evaluateCastingAbility( args.buff ) == true
								)
							)
					)
					{
						if( self.isCastable == false )
						{
							return false;
						}
						
						self.isCastable = false;
						
						self.disabledGraphics();
						
						_cascade();
						
						return false;
					}
					
					if( self.isCastable == true )
					{
						return true;
					}
					
					self.isCastable = true;
					
					self.outGraphics();
					
					_cascade();
					
					return true;
				}
				
				this.isOnCooldown = function()
				{
					return ( _cdTimeout == null ) ? false : true;
				}
				
				this.clearCooldown = function( noCascade )
				{
					buffCooldownBubbleObject.className = "buffCooldownBubbleHidden";
					
					_cdTimeout = null;
					
					// see what the next castable status should be
					self.setCastable( true );
					
					if( !noCascade )
					{
						// make the clones behave in the same way
						for(var i=0;i<self.copies.length;i++)
						{
							self.copies[ i ].clearCooldown( true );
						}
					}
				}
				
				// mark this buff as being on cooldown
				this.setOnCooldown = function( cooldownDelay, noCascade )
				{
					/*
					if( !self.isCastable )
					{
						return false;
					}
					*/
					
					self.isCastable = false;
					
					self.disabledGraphics();
					
					// display the cooldown second by second
					self._cooldownSecondsPassed = cooldownDelay;
					
					buffCooldownBubbleObject.className = "buffCooldownBubble";
					
					buffCooldownBubbleObject.style.backgroundImage='url("' + Application.configuration.cdn.location[ 0 ].url + '/ui/actionbar/' + actionBarSkin + '/cooldown.png")';
					
					buffCooldownBubbleObject.innerHTML = ( self._cooldownSecondsPassed ) + "s";
					
					var _cooldownAnimationInterval = setInterval(	function()
					{
						buffCooldownBubbleObject.innerHTML = ( --self._cooldownSecondsPassed ) + "s";
					}, 1000);
					
					// function to take this buff out of cooldown once it is done
					_cdTimeout = setTimeout( 	function()
																{
																	clearInterval( _cooldownAnimationInterval );
																	self._cooldownSecondsPassed = 0;
																}, cooldownDelay * 1000 );
					
					if( !noCascade )
					{
						// make the clones behave in the same way
						
						for(var i=0;i<self.copies.length;i++)
						{
							self.copies[ i ].setOnCooldown( cooldownDelay, true );
						}
					}
				}
				
				// add a link for the buff to another buff
				this.addCopy = function( copyBuffObject )
				{
					self.copies.push( copyBuffObject );
					
					// make the relationship bijective
					copyBuffObject.copies.push( this );
					
					// check if the new buff is castable considering the environment
					if(
						copyBuffObject.setCastable( true ) == true													// castable under this environment
						&& self._cooldownSecondsPassed																	// some seconds have passed
					)
					{
						copyBuffObject.setOnCooldown( self._cooldownSecondsPassed, false );
					}
					
					return copyBuffObject;
				}
				
				// remove the links for this buff
				this.removeCopy = function( copyObject )
				{
					for(var i=0;i<self.copies.length;i++)
					{
						if( self.copies[ i ] != copyObject )
						{
							continue;
						}
						
						self.copies.splice( i , 1 );
						
						return true;
					}
					
					return false;
				}
				
				// remove the buff both graphically and its links
				this.remove = function()
				{
					buffObject.parentNode.removeChild( buffObject );
					
					if( self.copies.length == 0 )
					{
						// this was the last buff of its kind. it should probably never happen as all the buffs are always defined in the spellbook, so one persistent instance is always there available
						delete Component.bugcraft.ui.buffObjects[ args.buff.buff_id ];
					}
					else
					{
						for(var i=0;i<self.copies.length;i++)
						{
							self.copies[ i ].removeCopy( this );
						}
					}
					
					delete this;
					
					return true;
				}
				
				// function will treat the drag scenario for a buff
				var _buffActions =	function( e )
											{
												var tempBuffObject = document.createElement("div"), _x = e.x, _y = e.y;
												tempBuffObject.className = "tempDragableBuff";
												tempBuffObject.style.backgroundImage = "url('/components/bugcraft/resources/public/img/abilities_large/" + args.buff.buff_id + ".png')";
												tempBuffObject.oncontextmenu = function() { return false; };
												
												document.body.appendChild( tempBuffObject );
												
												var _intervalMoveFunction = function()
												{
													tempBuffObject.style.left = ( _x - ( tempBuffObject.offsetWidth / 2 ) ) + "px";
													tempBuffObject.style.top = ( _y - ( tempBuffObject.offsetHeight / 2 ) )  + "px";
													
													setTimeout( _intervalMoveFunction, 40 );
												}
												
												var _bodyMoveFunction = function( e )
												{
													_x = e.x;
													_y = e.y;
												}
												
												//
												// buff drag scenarios
												//
												
												var _releaseFunction = function( e )
												{
													e.cancelBubble = true;
													e.stopPropagation();
													
													var solvedBuff = false;
													
													for(var i in Component.bugcraft.ui.actionBars)
													{
														var ab = Component.bugcraft.ui.actionBars[ i ];
														
														for(var j=0;j<ab.length;j++)
														{
															if(
																ab[j].absoluteX > e.x ||
																ab[j].absoluteX + 36 < e.x ||
																ab[j].absoluteY > e.y ||
																ab[j].absoluteY + 36 < e.y
															)
															{
																continue;
															}
															
															if( typeof args.buff.cia_actionbar_slot != "undefined" )
															{
																// current buff is on an actionBar
																
																Application.websocket.handlers.swapBuffOnActionBar = function( jsonEl, ws )
																{
																	if( jsonEl.r != 200 )
																	{
																		Application.debug.addError( "Error swapping buff slot " + args.buff.cia_actionbar_slot + " with slot " + j );
																		
																		return;
																	}
																	
																	Component.bugcraft.sound.ui.playEvent( "actionBar", "buffMove" );
																	
																	// handle the graphics
																	
																	self.swapWithBuff( ab[j] );
																}
																
																Application.websocket.socket.send( '{"c":"swapBuffOnActionBar","sourceActionBar":"' + self.args.buff.cia_actionbar_name + '","sourceSlot":' + args.buff.cia_actionbar_slot + ',"targetActionBar":"' + ab[j].args.buff.cia_actionbar_name + '","targetSlot":' + ( j + 1 ) + '}' );
															}
															else
															{
																// current buff is not on an actionBar (e.g. spellBook). We must create it
																
																Application.websocket.handlers.addBuffToActionBar = function( jsonEl, ws )
																{
																	if( jsonEl.r != 200 )
																	{
																		Application.debug.addError( "Error adding buff " + args.buff.buff_id + " to actionbar " + ab[j].args.buff.cia_actionbar_name + " and slot " + ab[j].args.buff.cia_actionbar_slot );
																		
																		return;
																	}
																	
																	Component.bugcraft.sound.ui.playEvent( "actionBar", "buffMove" );
																	
																	// handle the graphics
																	
																	var b = JSON.parse(JSON.stringify(args.buff));
																	b.cia_actionbar_name = ab[j].args.buff.cia_actionbar_name;
																	b.cia_actionbar_slot = ab[j].args.buff.cia_actionbar_slot;
																	
																	var newBuff = Component.bugcraft.ui.createOrAddBuffToActionBar({
																																		buffObject: b,
																																		actionBarObject: ab[j].args.targetArea,
																																		actionBarSlot: ab[j].args.buff.cia_actionbar_slot
																																	});
																}
																
																Application.websocket.socket.send( '{"c":"addBuffToActionBar","buffID":' + args.buff.buff_id + ',"targetActionBar":"' + ab[j].args.buff.cia_actionbar_name + '","targetSlot":' + ab[j].args.buff.cia_actionbar_slot + '}' );
															}
															
															solvedBuff = true;
															
															break;
														}
														
														if( solvedBuff )
														{
															// make sure we exit after solving the buff
															// we need to prevent the cascading swaps / changes
															
															break;
														}
													}
													
													var bbO = Component.bugcraft._layoutObjects.bottomBarObject;
													
													if(
														!solvedBuff &&
														args.buff.cia_actionbar_slot &&
														(
															bbO.absoluteX > e.x ||
															bbO.absoluteX + bbO.offsetWidth < e.x ||
															bbO.absoluteY > e.y ||
															bbO.absoluteY + bbO.offsetHeight < e.y
														)
													)
													{
														// the buff was dragged outside any area or the bottom bar. this bar is on an actionbar. it is being removed
														
														Application.websocket.handlers.deleteBuffFromActionBar = function( jsonEl, ws )
														{
															if( jsonEl.r != 200 )
															{
																Application.debug.addError( "Error deleting buff from slot slot " + args.buff.cia_actionbar_slot );
																
																return;
															}
															
															Component.bugcraft.sound.ui.playEvent( "actionBar", "buffRemove" );
															
															// handle the graphics
															
															self.remove();
															
															Component.bugcraft.ui.hotKeys[ args.hotKey ] = null;
															
															Component.bugcraft.ui.actionBars[ args.buff.cia_actionbar_name ][ args.buff.cia_actionbar_slot - 1 ] = new Component.bugcraft.ui.buffSlot(
																																																							args.targetArea,
																																																							args.buff.cia_actionbar_name,
																																																							args.buff.cia_actionbar_slot
																																																						);
															
															Component.bugcraft.ui.actionBars[ args.buff.cia_actionbar_name ][ args.buff.cia_actionbar_slot - 1 ].moveToActionbarPosition( args.targetArea, args.buff.cia_actionbar_slot - 1 );
														}
														
														Application.websocket.socket.send( '{"c":"deleteBuffFromActionBar","targetActionBar":"' + args.buff.cia_actionbar_name + '","targetSlot":' + args.buff.cia_actionbar_slot + '}' );
													}
													
													// remove the graphics regardless
													
													document.body.removeChild( tempBuffObject );
													Application.event.remove( document.body, "mousemove", _bodyMoveFunction );
													Application.event.remove( document.body, "mouseup", _releaseFunction );
												}
												
												Application.event.add( document.body, "mousemove", _bodyMoveFunction );
												Application.event.add( document.body, "mouseup", _releaseFunction );
												
												// set the position right from the initial mouse down
												_intervalMoveFunction( e );
											}
				
				// function will make sure that the mouse is moved by an offset before actually starting the drag action
				// this will allow for the buff to be cast in the event for mousedown
				var _mouseDelay = function( e )
				{
					var _checkMouseMovement = function( e )
					{
						var _offset = 3;
						
						if(
							self.absoluteX + _offset < e.x &&
							self.absoluteX + 36 - _offset > e.x &&
							self.absoluteY + _offset < e.y &&
							self.absoluteY + 36 - _offset > e.y
						)
						{
							return;
						}
						
						_removeEvents( e );
						
						_buffActions( e );
					}
					
					var _removeEvents = function( e )
					{
						e.cancelBubble = true;
						
						Application.event.remove( document.body, "mousemove", _checkMouseMovement );
						Application.event.remove( document.body, "mouseup", _removeEvents );
					}
					
					Application.event.add( document.body, "mousemove", _checkMouseMovement );
					Application.event.add( document.body, "mouseup", _removeEvents );
				}
				
				// attach this buff to an action bar slot
				if( args.buff.cia_actionbar_name )
				{
					if( typeof Component.bugcraft.ui.actionBars[ args.buff.cia_actionbar_name ] == "undefined" )
					{
						Component.bugcraft.ui.actionBars[ args.buff.cia_actionbar_name ] = [];
					}
					
					var existingBuff = Component.bugcraft.ui.actionBars[ args.buff.cia_actionbar_name ][ args.buff.cia_actionbar_slot - 1 ];
					
					// initialize position. this is a buff on an actionbar
					
					if( existingBuff )
					{
						// on the same position there was another buff already. this is not a swap action. delete it.
						
						existingBuff.remove();
					}
					
					this.moveToActionbarPosition( args.targetArea, args.buff.cia_actionbar_slot - 1 );
					
					Component.bugcraft.ui.actionBars[ args.buff.cia_actionbar_name ][ args.buff.cia_actionbar_slot - 1 ] = this;
				}
				else
				{
					args.targetArea.appendChild( buffObject );
				}
				
				// Mouse events
				Application.event.add( buffObject, "mouseover", self.mouseOver );
				Application.event.add( buffObject, "mouseout", self.mouseOut );
				
				if( args.buff.cia_actionbar_name )
				{
					// actionbar buff
					
					Application.event.add( buffObject, "mousedown",	function( e )
																						{
																							if( e.button != 2 )
																							{
																								return;
																							}
																							
																							e.cancelBubble = true;
																							
																							// right mouse button
																							
																							_mouseDelay( e );
																						});
				}
				else
				{
					// spell book
					
					Application.event.add( buffObject, "mousedown", _mouseDelay );
				}
				
				// Casting event
				Application.event.add( buffObject, "click", function( e )
				{
					e.preventDefault();
					
					if( e.shiftKey )
					{
						// link object in chat
						
						Component.bugcraft.pageChatInsertObjectInInput({
																						objectName: args.buff.buff_name,
																						objectType: "buff",
																						objectID: args.buff.buff_id
																					});
						
						return;
					}
					
					self.cast( e );
				});
			},
			
			createOrAddBuffToActionBar: function( args )
			{
				var uiObject = Component.bugcraft.ui.buffObjects[ args.buffObject.buff_id ];
				
				if( uiObject )
				{
					// the buff is already defined and visible
					
					var _newObject =  uiObject.addCopy( new Component.bugcraft.ui.buffObject({
																								buff: args.buffObject,
																								targetArea: args.actionBarObject,
																								modelType: 1,
																								hotKey: ( ( args.actionBarSlot - 1 ) < 9 ) ? ( args.actionBarSlot - 1 ) : -1
																							}) );
					
					// set this buff on cooldown if the requirements are as such
					if( args.buffObject.cs_cooldown_remaining_seconds > 0 )
					{
						_newObject.setOnCooldown( args.buffObject.cs_cooldown_remaining_seconds );
					}
					
					return _newObject;
				}
				
				// new buff
				
				Component.bugcraft.ui.buffObjects[ args.buffObject.buff_id ] = new Component.bugcraft.ui.buffObject({
																																			buff: args.buffObject,
																																			targetArea: args.actionBarObject,
																																			modelType: 1,
																																			hotKey: ( ( args.actionBarSlot - 1 ) < 9 ) ? ( args.actionBarSlot - 1 ) : -1
																																		});
				
				// set this buff on cooldown if the requirements are as such
				if( args.buffObject.cs_cooldown_remaining_seconds > 0 )
				{
					Component.bugcraft.ui.buffObjects[ args.buffObject.buff_id ].setOnCooldown( args.buffObject.cs_cooldown_remaining_seconds );
				}
				
				return Component.bugcraft.ui.buffObjects[ args.buffObject.buff_id ];
			},
			
			buffSlot: function( actionBarObject, actionBarName, actionBarSlot )
			{
				var self = this;
				
				this.args = { targetArea: actionBarObject, hotKey: ( ( actionBarSlot - 1 < 9 ) ? actionBarSlot - 1 : -1 ), buff: { cia_actionbar_slot: actionBarSlot, cia_actionbar_name: actionBarName } };
				this.absoluteX = 0, this.absoluteY = 0;
				
				var buffObject = document.createElement("span");
				//buffObject.setAttribute("href", "#");
				buffObject.className = "buffObjectEmpty";
				
				buffObject.style.backgroundImage='url("' + Application.configuration.cdn.location[ 0 ].url + '/ui/actionbar/' + actionBarSkin + '/buff.png")';
				
				var buffIconObject = document.createElement("span");
				buffIconObject.className = "buffIcon";
				
				buffObject.appendChild( buffIconObject );
				
				var buffNumberObject = document.createElement("span");
				buffNumberObject.className = "buffNumber";
				
				buffObject.appendChild( buffNumberObject );
				
				actionBarObject.appendChild( buffObject );
				
				this.moveToActionbarPosition = function( actionBarObject, position, noPositionUpdate )
				{
					if( actionBarObject.childNodes.length == position )
					{
						actionBarObject.appendChild( buffObject );
					}
					else
					{
						actionBarObject.insertBefore( buffObject, actionBarObject.childNodes[ position ] );
					}
					
					if( !noPositionUpdate )
					{
						self.updatePosition();
					}
				}
				
				this.remove = function()
				{
					buffObject.parentNode.removeChild( buffObject );
					
					delete this;
					
					return true;
				}
				
				this.updatePosition = function()
				{
					var position = Application.util.style.getPos( buffObject );
					
					self.absoluteX = position.left;
					self.absoluteY = position.top;
				}
				
				this.updatePosition();
			},
			
			// Enumerate buffs and add them to the action bars
			initUserActionBars: function( buffs )
			{
				for(var i=0;i<buffs.length;i++)
				{
					var targetActionBar = actionBars[ buffs[ i ].cia_actionbar_name ];
					
					if( !targetActionBar )
					{
						// let's just say we thought ahead of time
						
						continue;
					}
					
					if( typeof Component.bugcraft.ui.actionBars[ buffs[ i ].cia_actionbar_name ] == "undefined" )
					{
						Component.bugcraft.ui.actionBars[ buffs[ i ].cia_actionbar_name ] = [];
					}
					
					if( buffs[ i ].buff_id == null )
					{
						Component.bugcraft.ui.actionBars[ buffs[ i ].cia_actionbar_name ][ buffs[ i ].cia_actionbar_slot - 1 ] = new Component.bugcraft.ui.buffSlot(
																																																				targetActionBar,
																																																				buffs[ i ].cia_actionbar_name,
																																																				buffs[ i ].cia_actionbar_slot
																																																			);
						
						continue;
					}
					
					Component.bugcraft.ui.createOrAddBuffToActionBar({
																						buffObject: buffs[ i ],
																						actionBarObject: targetActionBar,
																						actionBarSlot: buffs[ i ].cia_actionbar_slot
																					});
				}
				
				//
				// Bottom bar buffs casting
				//
				
				Application.event.add( window, "keydown", function( e )
				{
					// hotkeys binding
					
					var _buff = Component.bugcraft.ui.hotKeys[ e.keyCode - 49 ];
					
					if( !_buff )
					{
						return;
					}
					
					_buff.mouseOver( e );
				});
				
				Application.event.add( window, "keyup", function( e )
				{
					// hotkeys binding
					
					var _buff = Component.bugcraft.ui.hotKeys[ e.keyCode - 49 ];
					
					if( !_buff )
					{
						return;
					}
					
					_buff.mouseOut( e );
					_buff.cast();
				});
			},
			
			avatarBuffIcon: function( args )
			{
				var buffObject = document.createElement("div"), _t, _iterations = 0, _lo = Component.bugcraft._layoutObjects, self = this, copies = [], _tooltipObject = null;
				buffObject.className = "buff";
				buffObject.style.backgroundImage = 'url("/components/bugcraft/resources/public/img/abilities_small/' + args.buff.buff_id + '.png")';
				
				this.getCopies = function()
				{
					return copies;
				}
				
				this.removeCopy = function( avatarBuffIconObject )
				{
					for(var i=0;i<copies.length;i++)
					{
						if( copies[ i ] != avatarBuffIconObject )
						{
							continue;
						}
						
						// copy found
						copies.splice( i, 1 );
						
						return true;
					}
					
					return false;
				}
				
				this.addCopy = function( avatarBuffIconObject )
				{
					copies.push( avatarBuffIconObject );
					avatarBuffIconObject.getCopies().push( this ); // bijective
				}
				
				this.remove = function( removeRecursive )
				{
					if( !buffObject.parentNode )
					{
						return;
					}
					
					clearTimeout( _t );
					
					Application.util.html.removeNode( buffObject );
					
					// remove the references about myself on the other remaining copies
					for(var i=0;i<copies.length;i++)
					{
						copies[ i ].removeCopy( self );
					}
					
					if( removeRecursive == false )
					{
						return;
					}
					
					// requested to remove recursively all copies
					
					for(var i=0;i<copies.length;i++)
					{
						copies[ i ].remove( false );
						
						copies.splice( i , 1 );
					}
					
					return true;
				}
				
				this.removeOnlyOnTarget = function( removeRecursive )
				{
					// my area is the target area
					
					if( args.targetArea == 2 )
					{
						self.remove( false );
					}
					
					if( removeRecursive == false )
					{
						return;
					}
					
					for(var i=0;i<copies.length;i++)
					{
						copies[ i ].removeOnlyOnTarget( false );
					}
				}
				
				buffObject.onmouseover = function( e )
				{
					if( !_tooltipObject )
					{
						_tooltipObject = new Component.bugcraft.tooltip.buff( buffObject, args.buff );
					}
					
					_tooltipObject.show( e );
				}
				
				var _buffTimeoutFunction =	function()
														{
															if( _tooltipObject )
															{
																_tooltipObject.updateRemainingTime( Math.max( args.buff.cb_applied_effect_remaining_seconds - _iterations, 0 ) );
															}
															
															if( ++_iterations >= args.buff.cb_applied_effect_remaining_seconds )
															{
																return;
															}
															
															_t = setTimeout( _buffTimeoutFunction, 1000 );
														};
				
				switch( args.targetArea )
				{
					case 1:
						
						if( args.buff.buff_type & 1 )
						{
							_lo.selfActiveBuffsObject.appendChild( buffObject );
						}
						else
						{
							_lo.selfPassiveBuffsObject.appendChild( buffObject );
						}
						
					break;
					case 2:
						
						if( args.buff.buff_type & 1 )
						{
							_lo.targetActiveBuffsObject.appendChild( buffObject );
						}
						else
						{
							_lo.targetPassiveBuffsObject.appendChild( buffObject );
						}
						
					break;
				}
				
				_buffTimeoutFunction();
			},
			
			setCanvasMovementFunctions: function()
			{
				// this is used to evoid 
				var _dummyCharacter = function()
				{
					var _dummySkin = new function()
					{
						this.clearRelationship = function()
						{
							
						}
					}
					
					this.getSkin = function()
					{
						return _dummySkin;
					}
				}
				
				var mouseX = 0, mouseY = 0, dummyCharacter = new _dummyCharacter(), lastMouseOverCharacter = dummyCharacter;
				
				Application.event.add( document.body, "mousemove", function( e )
				{
					mouseX = e.x ? e.x : e.pageX;
					mouseY = e.y ? e.y : e.pageY;
				});
				
				var _mouseMovementFunction = function()
				{
					var _gcd = Component.bugcraft._characterData;
					for(var i in _gcd)
					{
						if( typeof _gcd[ i ] != "object" )
						{
							continue;
						}
						
						if( _gcd[ i ].isVisible == false )
						{
							// not gonna check data about some invibile character
							
							continue;
						}
						
						// check coordinates
						var _cd = _gcd[ i ].characterData,
								_w = _cd.character_width / 2,
								_h = _cd.character_height / 2,
								_x = mouseX - Map.viewPortX,
								_y = mouseY - Map.viewPortY;
						
						if(
							_cd.character_zone_x - _w > _x
							|| _cd.character_zone_x + _w < _x
							|| _cd.character_zone_y - _h > _y
							|| _cd.character_zone_y + _h < _y
						)
						{
							continue;
						}
						
						// hovered over a character
						if( _gcd[ i ] == lastMouseOverCharacter || _cd.character_is_targetable == null )
						{
							// prevent unnecessary changes to the canvas
							
							setTimeout( _mouseMovementFunction, 166 );
							
							return;
						}
						
						// old character management
						lastMouseOverCharacter.isHovered = false;
						lastMouseOverCharacter.getSkin().clearRelationship();
						
						// new character management
						lastMouseOverCharacter = _gcd[ i ];
						lastMouseOverCharacter.isHovered = true;
						
						// mouse over
						if( _cd.character_is_usable != null )
						{
							Map._canvasAreaObject.className = "canvasUsable";
							
							if( _cd.character_is_friendly_to_main )
							{
								_gcd[ i ].getSkin().setRelationship( "friend" );
							}
							else if( _cd.character_faction != null )
							{
								_gcd[ i ].getSkin().setRelationship( "foe" );
							}
							else
							{
								_gcd[ i ].getSkin().setRelationship( "neutral" );
							}
						}
						else if( _cd.character_is_friendly_to_main )
						{
							// friend
							
							Map._canvasAreaObject.className = "canvasFriend";
							
							_gcd[ i ].getSkin().setRelationship( "friend" );
						}
						else if( _cd.character_faction != null )
						{
							// foe
							
							Map._canvasAreaObject.className = "canvasFoe";
							
							_gcd[ i ].getSkin().setRelationship( "foe" );
						}
						else
						{
							// neutral
							
							Map._canvasAreaObject.className = "canvasNeutral";
							
							_gcd[ i ].getSkin().setRelationship( "neutral" );
						}
						
						setTimeout( _mouseMovementFunction, 166 );
						
						return;
					}
					
					if( lastMouseOverCharacter != dummyCharacter )
					{
						lastMouseOverCharacter.isHovered = false;
						lastMouseOverCharacter.getSkin().clearRelationship();
						
						Map._canvasAreaObject.className = "canvas";
					}
					
					lastMouseOverCharacter = dummyCharacter;
					setTimeout( _mouseMovementFunction, 166 );
				}
				
				setTimeout( _mouseMovementFunction, 166 );
			},
			
			setCanvasClickFunctions: function()
			{
				var _lO = Component.bugcraft._layoutObjects;
				
				// will evaluate if a mouse event's x and y coincide with a character's position
				var _evaluateIfClickOnCharacter = function( e, cb )
				{
					var _gcd = Component.bugcraft._characterData,
							_cct = Component.bugcraft.currentCharacterTarget,
							_cctID = _cct.characterData.character_id,
							_skippedTarget = false;
					
					for(var i in _gcd)
					{
						if( typeof _gcd[ i ] != "object" )
						{
							continue;
						}
						
						if( _gcd[ i ].isVisible == false )
						{
							// clicked on an invisible (hidden) character or untargetable character
							
							continue;
						}
						
						var x = ( e.x ? e.x : e.pageX ),
								y = ( e.y ? e.y : e.pageY ),
								_cd = _gcd[ i ].characterData,
								_w = _cd.character_width,
								_h = _cd.character_height,
								_zx = _cd.character_zone_x - _w / 2,
								_zy = _cd.character_zone_y - _h / 2,
								_w = _zx + _w,
								_h = _zy + _h;
						
						if(
							x - Map.viewPortX < _zx ||
							x - Map.viewPortX > _w ||
							y - Map.viewPortY < _zy ||
							y - Map.viewPortY > _h
						)
						{
							continue;
						}
						
						if( _cctID == _cd.character_id )
						{
							// already have the target on that character
							
							_skippedTarget = true;
							
							continue;
						}
						
						if( _cd.character_is_targetable == null )
						{
							// clicked on an untargetable character
							
							return false;
						}
						
						// clicked on a character
						
						return _gcd[ i ];
					}
					
					return _skippedTarget ? _cct : false;
				}
				
				/*
					Setting target
				*/
				
				document.body.oncontextmenu = function( e )
				{
					return false;
				};
				
				Component.bugcraft.messages.messagesContainerObject.onclick = _lO.questLogProgressQuestsContainerObject.onclick = _lO.topAreaContainerObject.onclick = Map._canvasAreaObject.onclick = Map._canvasAreaObject.touchstart = function( e )
				{
					if( e.button == 2 )
					{
						// right click
						
						return false;
					}
					
					var _c = null, _ccO = Component.bugcraft.currentCharacterObject,
							_x = ( e.x ? e.x : e.pageX ) - Map.viewPortX,
							_y = ( e.y ? e.y : e.pageY ) - Map.viewPortY;
					
					e.preventDefault();
					
					_ccO.stopFollow();
					
					if( ( _c = _evaluateIfClickOnCharacter( e ) ) != false )
					{
						// clicked on a character. determine the type of interaction
						
						if( _c.isMain == true )
						{
							_ccO.setTarget( _ccO );
							
							return false;
						}
						
						if( _c.isTarget == false )
						{
							_ccO.setTarget( _c );
							
							return false;
						}
						
						if(
							_c.characterData.character_is_usable != null
							|| _c.characterData.character_is_questgiver != null
							|| _c.characterData.character_is_vendor != null
						) //&& ( _c.characterData.character_reacts_to_binary & _ccO.characterData.character_faction_binary ) )
						{
							// object is usable
							
							_ccO.interactWithTarget();
						}
						else if( Map._evaluateRelationshipToCharacter( _c ) )
						{
							// friends
							
							if( _ccO != _c )
							{
								// target is not main character. i can't follow myself :D
								// npc or character
								
								_ccO.followCharacter( _c );
							}
						}
						else
						{
							// enemies
							
							_ccO.attackCharacterInMelee( _c, _x, _y );
						}
					}
					else
					{
						// didn't click on any character. just move to the target point
						
						Component.bugcraft.currentCharacterObject.setTargetToMain();
						
						_ccO.requestMove(
											_x,
											_y,
											0
										);
					}
				}
			}
		}
		
		//
		// Loot Bag
		//
		
		Application.websocket.handlers.lootGrabSlotEmpty = function( jsonEl, ws )
		{
			// default handler to prevent errors. is overwrittern in pageLootChoose
		}
		
		//hide loot bag when loot unavailable
		Application.websocket.handlers.lootBagHide = function( jsonEl, ws )
		{
			if( !Component.bugcraft.initializedPages.pageLootChoose )
			{
				// check if
				return;
			}
			
			Component.bugcraft.pageLootChoose( args, jsonEl );
		}
		
		Application.websocket.handlers.lootBag = function( jsonEl, ws )
		{
			if( jsonEl.r == 300 )
			{
				Component.bugcraft.messages.addError( "Can't loot that" );
				
				Component.bugcraft.sound.characters.playMainVoice( "cannotLoot" );
				
				return;
			}
			
			if( jsonEl.r != 200 )
			{
				Application.debug.add( "Loot bag error: " + jsonEl.r );
				
				return;
			}
			
			Component.bugcraft.pageLootChoose( args, jsonEl );
		}
		
		Application.websocket.handlers.lootRemove = function( jsonEl, ws )
		{
			if( jsonEl.r != 200 )
			{
				Application.debug.add( "Loot remove error: " + jsonEl.r );
				
				return;
			}

			// set the loot in the inventory
			for(var i=0;i<jsonEl.i.length;i++)
			{

				// update the inventory for each modified item
				Component.bugcraft.pageProfileSetLoot({
															loot: jsonEl.i[ i ]
														});
			}
		}
		
		Application.websocket.handlers.lootReceive = function( jsonEl, ws )
		{
			if( jsonEl.r == 304 )
			{
				Component.bugcraft.sound.characters.playMainVoice( "fullBag" );
				
				Component.bugcraft.messages.addError( "The bag is full" );
				
				return;
			}
			
			if( jsonEl.r != 200 )
			{
				Application.debug.add( "Loot bag error: " + jsonEl.r );
				
				return;
			}
			
			var _moveItemToBackpack = function( _itemData )
			{
				var itemContainer = document.createElement("div"), _currentBottom = 100, _currentOpacity = 1, _currentZoom = 1,
					_backPackObjectCoords = Application.util.style.getPos( Component.bugcraft._layoutObjects.bottomBarMenuItem8Object );
				
				itemContainer.className = "vendorItemFloatingToBackpack";
				itemContainer.style.backgroundImage = 'url("' + Application.configuration.cdn.location[ 0 ].url + '/item_skins/' + _itemData.loot_id + '/' + _itemData.loot_id + '_64x64.png")';
				
				document.body.appendChild( itemContainer );
				
				// animation function
				var _animation = function()
				{
					itemContainer.style.opacity = ( _currentOpacity -= 0.05 );
					
					_currentZoom -= 0.05;
					
					itemContainer.style.transform = 'scale(' + _currentZoom + ')';
					itemContainer.style.MozTransform = 'scale(' + _currentZoom + ')';
					itemContainer.style.WebkitTransform = 'scale(' + _currentZoom + ')';
					
					itemContainer.style.left = Math.round( _backPackObjectCoords.left - 85 + Math.cos( _currentZoom ) * 100 ) + "px";
					itemContainer.style.top = Math.round( _backPackObjectCoords.top - 55 + Math.sin( 1 - _currentZoom ) * 100  ) + "px";
					
					if( _currentZoom <= 0 )
					{
						Application.util.html.removeNode( itemContainer );
						
						return;
					}
					
					setTimeout( _animation, 50 );
				}
				
				// play the associated sound
				Component.bugcraft.sound.ui.playEvent( "actionBar", "backpack" + ( ( _itemData.loot_armor_type != null ) ? ( _itemData.loot_armor_type[ 0 ].toUpperCase() + _itemData.loot_armor_type.substring( 1 ) ) : "Misc" ) + "Pickup" );
				
				// animate
				_animation();
			}
			
			new _moveItemToBackpack( jsonEl.l );
			
			// set the loot in the inventory
			for(var i=0;i<jsonEl.i.length;i++)
			{
				// update the inventory for each modified item
				Component.bugcraft.pageProfileSetLoot({
															loot: jsonEl.i[ i ]
														});
			}
		}
		
		//
		//	Async websocket events
		//
		
		Application.websocket.handlers.characterActive = function( jsonCharacterData, ws )
		{
			if( jsonCharacterData.r != 200 )
			{
				Application.debug.add( "Character and instance fetch error: " + jsonCharacterData.r );
				
				return;
			}
			
			// the initial update i receive about the battlefield
			Application.websocket.handlers.updateBattleFieldFresh = function( jsonEl, ws )
			{
				if( jsonEl.r != 200 )
				{
					Application.debug.addError( "Error retrieving updateBattleFieldFresh result" );
					
					return;
				}
				
				// make sure there are no overlapping requests
				clearTimeout( _t );
				
				var _zc = jsonEl.zoneCharacters, _cid = Application.sessionData.characterID;
				
				if( !Component.bugcraft.currentCharacterObject )
				{
					// init main character first
					for(var i=0;i<_zc.length;i++)
					{
						if( _zc[ i ].cid != _cid )
						{
							continue;
						}
						
						Component.bugcraft.currentCharacterObject = ( Component.bugcraft._characterData[ _zc[ i ].cid ] = new Component.bugcraft.character(
																																						_zc[ i ],
																																						args
																																					) );
						
						// set the global object referring to myself
						
						Component.bugcraft.currentCharacterObject.characterData.character_zone_x = _zc[ i ].x;
						Component.bugcraft.currentCharacterObject.characterData.character_zone_y = _zc[ i ].y;
						
						Component.bugcraft.currentCharacterObject.isMain = true;
						Component.bugcraft.currentCharacterObject.isTarget = true; // the initial target is myself
						Component.bugcraft.currentCharacterObject.mergeCharacterData( jsonCharacterData.characterData );
						
						Component.bugcraft.currentCharacterObject.show();
						
						break;
					}
				}
				
				// we have new info about characters
				for(var i=0;i<_zc.length;i++)
				{
					var _cc = Component.bugcraft._characterData[ _zc[ i ].cid ];
					
					if( _cc && _battleGroundInitialized == true )
					{
						// character is already defined and it is not myself. update its details
						
						_cc.mergeMinimalCharacterData( _zc[ i ] );
						
						_cc.checkExistingActions();
						_cc.show();
						
						continue;
					}
					
					if( _zc[ i ].cid == _cid && _battleGroundInitialized == false )
					{
						// main character. already initialized
						
						continue;
					}
					
					// new character
					
					_cc = ( Component.bugcraft._characterData[ jsonEl.zoneCharacters[ i ].cid ] = new Component.bugcraft.character(
																																										_zc[ i ],
																																										args
																																									) );
					
					_cc.show();
				}
				
				// evaluate the relationship to the main character. this precalculation will help in targeting
				for( var i in Component.bugcraft._characterData )
				{
					var _cc = Component.bugcraft._characterData[ i ];
					
					if( typeof _cc != "object" )
					{
						continue;
					}
					
					_cc.evaluateRelationshipToMain();
				}
				
				// make sure we don't over initialize
				if( _battleGroundInitialized == false )
				{
					_battleGroundInitialized = true;
					
					Component.bugcraft.currentCharacterObject.setTarget( Component.bugcraft.currentCharacterObject );
					
					//Component.bugcraft.pageLookingForBattleground( args );
					
					Component.bugcraft.pageSpellBook({
																id: args.id,
																hidden: true
															});
					
					Component.bugcraft.pageQuestLog({
																id: args.id,
																hidden: true
															});
					
					Application.websocket.handlers.characterInventoryGet = function( jsonInventoryData, ws )
					{
						if( jsonInventoryData.r != 200 )
						{
							Application.debug.addError( "Error fetching inventory: " + jsonInventoryData.r );
							
							return;
						}
						
						Component.bugcraft.pageProfile({
																id: args.id,
																lootData: jsonInventoryData.l,
																hidden: true
															});
						
						Component.bugcraft.pageBags({
																id: args.id,
																lootData: jsonInventoryData.l,
																hidden: true
															});
						
						// add another percentage
						Component.bugcraft.pageLoader.addPercentage( 10 );
					}
					
					// request the inventory details
					ws.send( '{"c":"characterInventoryGet"}' );
					
					// we're safe to request an update on the UI action bars
					ws.send( '{"c":"getActionBarList"}' );
					ws.send( '{"c":"getSpecialNPCStatus"}' );
					
					// perform interface updates
					Component.bugcraft.currentCharacterObject.updateOnMain();
					Component.bugcraft.currentCharacterObject.updateOnTarget();
					Component.bugcraft.ui.updateBuffsStatusConsideringTarget();
					Map.centerOn( Component.bugcraft.currentCharacterObject );
					Map.refreshImages( );
					Map.setGridTileset( "map" );
					Component.bugcraft.currentCharacterObject.focusMovement();
					Component.bugcraft.currentCharacterObject.initialState();
					
					//put the target focus on the main character object
					new spellEffects.selectSelfAnimation({
																	sourceCharacter: Component.bugcraft.currentCharacterObject,
																	targetCharacter: Component.bugcraft.currentCharacterObject,
																	faction: Component.bugcraft.currentCharacterObject.characterData.character_faction
																});
					
					// all characters are initialized, including myself. time to init the rest of the interface
					Component.bugcraft.ui.startAnimations();
					
					Map.startInsideChecking();
					
					// we have a main character set. we can start any existing actions
					for(var i in Component.bugcraft._characterData)
					{
						var _cc = Component.bugcraft._characterData[ i ];
						
						if( typeof _cc != "object" )
						{
							continue;
						}
						
						_cc.checkExistingActions();
					}
					
					// battlefield is now fully initialized
					
					// define the handler for the battlefield update
					Application.websocket.handlers.updateBattleField = function( jsonEl, ws )
					{
						// battlefield update response
						
						var _updates = jsonEl.updates;
						var _characterData = Component.bugcraft._characterData;
						
						for(var i=0;i<_updates.length;i++)
						{
							var _update = _updates[ i ];
							
							switch( _update.c )
							{
								case "command_set_usable":
									
									if( !_characterData[ _update.cid ] )
									{
										continue;
									}
									
									_characterData[ _update.cid ].command_set_usable( _update );
									
								break;
								case "command_set_unusable":
									
									if( !_characterData[ _update.cid ] )
									{
										continue;
									}
									
									_characterData[ _update.cid ].command_set_unusable( _update );
									
								break;
								case "command_cast_start":
									
									if( !_characterData[ _update.cid ] )
									{
										continue;
									}
									
									_characterData[ _update.cid ].command_cast_start( _update );
									
								break;
								case "command_cast_interrupt":
									
									if( !_characterData[ _update.cid ] )
									{
										continue;
									}
									
									_characterData[ _update.cid ].command_cast_interrupt( _update );
									
								break;
								case "command_cast_complete":
									
									if( !_characterData[ _update.cid ] )
									{
										continue;
									}
									
									_characterData[ _update.cid ].command_cast_complete( _update );
									
								break;
								case "command_rotate":
									
									if( !_characterData[ _update.cid ] )
									{
										continue;
									}
									
									_characterData[ _update.cid ].command_rotate( _update.r );
									
								break;
								case "command_move":
									
									if( !_characterData[ _update.cid ] )
									{
										continue;
									}
									
									_characterData[ _update.cid ].command_move( _update.x, _update.y );
									
								break;
								case "command_move_stop":
									
									if( !_characterData[ _update.cid ] )
									{
										continue;
									}
									
									_characterData[ _update.cid ].command_move_stop( _update.x, _update.y );
									
								break;
								case "command_stealth_enter":
									
									if( !_characterData[ _update.cid ] )
									{
										continue;
									}
									
									_characterData[ _update.cid ].command_stealth_enter();
									
								break;
								case "command_stealth_leave":
									
									if( !_characterData[ _update.cid ] )
									{
										continue;
									}
									
									if( _characterData[ _update.cid ] )
									{
										// character already exists
										
										_characterData[ _update.cid ].command_stealth_leave( _update.p );
									}
									else
									{
										_characterData[ _update.cid ] = new Component.bugcraft.character(
																																_update,
																																args
																															);
										
										_characterData[ _update.cid ].evaluateRelationshipToMain();
									}
									
								break;
								case "character_emote":
									
									if( !_characterData[ _update.cid ] )
									{
										continue;
									}
									
									_characterData[ _update.cid ].command_emote( _update.e, _update.t );
									
								break;
								case "command_disconnect":
									
									if( !_characterData[ _update.cid ] )
									{
										continue;
									}
									
									if( _update.cid == Component.bugcraft.currentCharacterObject.characterData.character_id )
									{
										continue;
									}
									
									_characterData[ _update.cid ].command_disconnect();
									
								break;
								case "command_disconnect_forced":
									
									if( !_characterData[ _update.cid ] )
									{
										continue;
									}
									
									if( _update.cid == Component.bugcraft.currentCharacterObject.characterData.character_id )
									{
										continue;
									}
									
									_characterData[ _update.cid ].command_disconnect();
									
								break;
								case "buff_purchase":
									
									if( !_characterData[ _update.cid ] )
									{
										continue;
									}
									
									new spellEffects.talentLearn({
																	targetCharacter: _characterData[ _update.cid ]
																});
									
								break;
								case "add_character":
									
									if( _characterData[ _update.cid ] )
									{
										// character already exists
										
										//_update.p.cid = _update.cid;
										
										_characterData[ _update.cid ].mergeMinimalCharacterData( _update );
									}
									else
									{
										_characterData[ _update.cid ] = new Component.bugcraft.character(
																																_update,
																																args
																															);
									}
									
									_characterData[ _update.cid ].evaluateRelationshipToMain();
									_characterData[ _update.cid ].show();
									
								break;
								case "add_buff":
									
									if( !_characterData[ _update.cid ] )
									{
										continue;
									}
									
									_characterData[ _update.cid ].command_add_buff( _update );
									
									_characterData[ _update.sid ].performAttackAnimation( 8 );
									
									Application.debug.add( "Buff " + _update.n + " ( " + _update.bid + " ) enabled on " + _update.cid );
									
								break;
								case "add_buff_miss":
									
									if( !_characterData[ _update.cid ] )
									{
										continue;
									}
									
									_characterData[ _update.cid ].command_add_buff_miss( _update );
									
									_characterData[ _update.sid ].performAttackAnimation( 8 );
									
									Application.debug.add( "Buff " + _update.n + " missed on " + _update.cid );
									
								break;
								case "del_buff":
									
									if( !_characterData[ _update.cid ] )
									{
										continue;
									}
									
									_characterData[ _update.cid ].command_del_buff( _update );
									
									Application.debug.add( "Buff " + _update.bid + " removed on " + _update.cid );
									
								break;
								case "level_set":
									
									if( !_characterData[ _update.cid ] )
									{
										continue;
									}
									
									_characterData[ _update.cid ].command_level_set( _update );
									
									Application.debug.add( "Character " + _update.cid + " changed level to " + _update.l );
									
								break;
								case "setSkin":
									
									if( !_characterData[ _update.cid ] )
									{
										continue;
									}
									
									_characterData[ _update.cid ].setSkin( _update.s );
									
									Application.debug.add( "Character " + _update.cid + " changed skin to " + _update.s );
									
								break;
								case "modify":
									
									if( !_characterData[ _update.cid ] )
									{
										continue;
									}
									
									Application.debug.add( "Character  " + _update.cid + "'s " + _update.a + " was modified by " + _update.m );
									
									_characterData[ _update.cid ].command_modify( _update );
									
								break;
								case "kill":
									
									if( !_characterData[ _update.cid ] )
									{
										continue;
									}
									
									Application.debug.add( "Character  " + _update.cid + " was killed" );
									
									// toggle alive 
									( _characterData[ _update.cid ].characterData.character_is_alive == null ) ? ( _characterData[ _update.cid ].characterData.character_is_alive = '' ) : ( _characterData[ _update.cid ].characterData.character_is_alive = null );
									
									_characterData[ _update.cid ].command_die( _update );
									
								break;
								case "resurrect":
									
									if( !_characterData[ _update.cid ] )
									{
										continue;
									}
									
									Application.debug.add( "Character  " + _update.cid + " was resurrected" );
									
									if( _characterData[ _update.cid ] )
									{
										// character already exists
										
										_update.p.cid = _update.cid;
										
										_characterData[ _update.cid ].mergeMinimalCharacterData( _update.p );
									}
									else
									{
										_update.p.cid = _update.cid;
										
										_characterData[ _update.cid ] = new Component.bugcraft.character(
																																_update.p,
																																args
																															);
									}
									
									_characterData[ _update.cid ].command_resurrect( _update );
									
								break;
								default:
									
									Application.debug.add( "Command not processed for " + _update.cid + ": " + _update.c );
							}
						}
					}
					// end updatebattlefield handler
				}
				else
				{
					ws.send( '{"c":"getSpecialNPCStatus"}' );
				}
			}
			
			//
			// Successfully assigned to an instance
			//
			
			// the initial update i receive about the battlefield
			Application.debug.add( "Assigned to instance ID " + jsonCharacterData.assignedZoneID + ". Zone Pool ID " + jsonCharacterData.assignedZonePoolID );
			
			Application.websocket.handlers.userSettingsGet = function( jsonUserSettings, ws )
			{
				// got the user settings. set them accordingly
				Component.bugcraft.sound.zone.volume = jsonUserSettings.s.user_setting_sound_volume_music;
				Component.bugcraft.sound.screen.volume = jsonUserSettings.s.user_setting_sound_volume_music;
				
				spellEffects.globalVolume = jsonUserSettings.s.user_setting_sound_volume_effects;
				Component.bugcraft.sound.ui.volume = jsonUserSettings.s.user_setting_sound_volume_effects;
				spellEffects.ambientalVolume = jsonUserSettings.s.user_setting_sound_volume_ambiental;
				
				spellEffects.voiceVolume = jsonUserSettings.s.user_setting_sound_volume_voice;
				Component.bugcraft.sound.characters.volume = jsonUserSettings.s.user_setting_sound_volume_voice;
				
				// dramatic loading effect
				Component.bugcraft.sound.ui.playEvent( "window", "loader" );
				
				//
				// Initialize the map
				//
				
				Map.mapID = jsonCharacterData.assignedZonePoolID;
				Map.mapRules = jsonCharacterData.assignedZoneRules;
				Map.surface = jsonCharacterData.assignedSurface;
				Map.init( args );
				Map.mapName = jsonCharacterData.assignedZoneName;
				//Map.setPolygonName( jsonCharacterData.assignedZoneName );
				
				Component.bugcraft._instance_tic_interval = jsonCharacterData.tic_interval;
				
				//
				// Commands issued on the map
				//
				
				Component.bugcraft.ui.setCanvasMovementFunctions();
				Component.bugcraft.ui.setCanvasClickFunctions();
				
				ws.send( '{"c":"updateUserInterface"}' );
				ws.send( '{"c":"updateBattleFieldFresh"}' );
				ws.send( '{"c":"measureLag","t":' + ( new Date() ).getTime() + '}' );
				
				Component.bugcraft.pageLoader.addPercentage( 30 );
			}
			
			// get the user settings
			ws.send( '{"c":"userSettingsGet"}' );
		}
		
		Application.websocket.handlers.getActionBarList = function( jsonEl, ws )
		{
			// this is the last step of the interface initialization.
			Component.bugcraft.ui.initUserActionBars( jsonEl.b );
			Component.bugcraft.ui.updateBuffsStatusConsideringTarget();
			
			if( Component.bugcraft.currentCharacterObject.characterData.character_is_alive != null )
			{
				Component.bugcraft.sound.zone.playRandomAreaLoop();
			}
			
			Application.event.add( window, "keydown", function( e )
			{
				if( e.keyCode != 9 )
				{
					return;
				}
				
				// tab key is pressed
				
				
			});
			
			// the shit has to rund wild past this point. cocaine is a hell of a drug :D
			Component.bugcraft.pageLoader.addPercentage( 10 );
		}
		
		// a achievement condition's value has changed
		Application.websocket.handlers.achievementConditionUpdate = function( jsonEl, ws )
		{
			if( jsonEl.r != 200 )
			{
				Application.debug.addError( "Error receiving condition update: " + jsonEl.r );
				
				return;
			}
			
			
		}
		
		// handle achievement finalize event (post click)
		Application.websocket.handlers.achievementFinalized = function( jsonEl, ws )
		{
			if( jsonEl.r != 200 )
			{
				Application.debug.add( "Error finalizing achievement (" + jsonEl.r + ")" );
				
				return;
			}
			
			var _lO = Component.bugcraft._layoutObjects,
					_aNA = _lO.achievementsNotificationArea,
					_aG =_lO.achievementGlow,
					_aS = _lO.achievementShine,
					_areaTimeout = null,
					_areaOpacity = 0,
					_areaModify = 0.1,
					_glowTimeout = null,
					_glowOpacity = 0,
					_glowModify = 0.05,
					_shineTimeout = null,
					_shineOpacity = 0,
					_shineModify = 0.1;
			
			var _areaAnimation = function()
			{
				_areaOpacity += _areaModify;
				
				_aNA.style.opacity = _areaOpacity;
				_aNA.style.MozOpacity = _areaOpacity;
				_aNA.style.filter = "alpha(opacity=" + ( _areaOpacity * 100 ) + ")";
				
				if( _areaOpacity >= 1 )
				{
					_areaModify = -0.1;
					
					_areaTimeout = setTimeout( _areaAnimation, 5000 );
					
					return;
				}
				else if( _areaOpacity <= 0 )
				{
					_aNA.className = "hidden";
					
					_aG.style.marginLeft = _aGMLInit + "px";
					
					return;
				}
				else
				{
					_areaTimeout = setTimeout( _areaAnimation, 40 );
				}
			}
			
			var _shineAnimation = function()
			{
				_shineOpacity += _shineModify;
				
				_aS.style.opacity = _shineOpacity;
				_aS.style.MozOpacity = _shineOpacity;
				_aS.style.filter = "alpha(opacity=" + ( _shineOpacity * 100 ) + ")";
				
				if( _shineOpacity >= 1 )
				{
					_shineModify = -0.1;
					
					_shineTimeout = setTimeout( _shineAnimation, 35 );
					
					return;
				}
				else if( _shineOpacity <= 0 )
				{
					return;
				}
				else
				{
					_shineTimeout = setTimeout( _shineAnimation, 35 );
				}
			}
			
			var _glowFadeAnimation = function()
			{
				_glowOpacity += _glowModify;
				
				_aG.style.opacity = _glowOpacity;
				_aG.style.MozOpacity = _glowOpacity;
				_aG.style.filter = "alpha(opacity=" + ( _glowOpacity * 100 ) + ")";
				
				if( _glowOpacity >= 1 )
				{
					_glowModify = -0.11;
					
					_glowTimeout = setTimeout( _glowFadeAnimation, 40 );
					
					return;
				}
				else if( _glowOpacity <= 0 )
				{
					return;
				}
				else
				{
					_glowTimeout = setTimeout( _glowFadeAnimation, 40 );
				}
			}
			
			var _glowMoveAnimation = function()
			{
				_aG.style.marginLeft = ( _aGML += 11 ) + "px";
				
				if( _aGML >= 490 )
				{
					return;
				}
				
				setTimeout( _glowMoveAnimation, 40 );
			}
			
			_aNA.className = "achievementsNotificationArea";
			_lO.achievementsNotificationAchievementName.innerHTML = jsonEl.achievementName;
			
			var _aGML = parseInt( Application.util.style.getCurrent( _aG, "margin-left" ).toString().replace( "px", "" ) ),
					_aGMLInit = _aGML;
			
			// animate
			_glowMoveAnimation();
			_glowFadeAnimation();
			_areaAnimation();
			_shineAnimation();
		}
		
		// updates given to the questGivers in the battlefield
		Application.websocket.handlers.questGiverUpdate = function( jsonEl, ws )
		{
			var _cd = Component.bugcraft._characterData[ jsonEl.cid ], oneGrabbableQuest = false, oneFinalizedQuest = false, oneQuestInProgress = false;
			
			for(var i in jsonEl.q)
			{
				var _q = jsonEl.q[ i ];
				
				if( _q.grabbable && !_q.inProgress )
				{
					oneGrabbableQuest = true;
				}
				
				if( _q.inProgress )
				{
					oneQuestInProgress = true;
				}
				
				if( _q.isFinalized )
				{
					oneFinalizedQuest = true;
				}
			}
			
			// save quest data on this char's object
			_cd.questsData = jsonEl.q;
			
			// show quest symbol
			if( oneFinalizedQuest )
			{
				_cd.showQuestDoneSymbol();
			}
			else if( oneGrabbableQuest )
			{
				_cd.showQuestAvailableSymbol();
			}
			else if( oneQuestInProgress )
			{
				_cd.showQuestWaitingSymbol();
			}
			else
			{
				_cd.showQuestNotAvailableSymbol();
			}
			
			_cd.events._add( "hide", function()
			{
				_cd.removeQuestSymbols();
			});
			
			if( _cd.isShowingQuests )
			{
				// update the questgiver interface
				
				Component.bugcraft.pageQuestGiver( _cd, args );
			}
		}
		
		// update current user's character. this is triggered on level up
		Application.websocket.handlers.setCharacterData = function( jsonEl, ws )
		{
			Component.bugcraft.characterData = jsonEl.characterData;
			
			// add the new buffs to the spell book
			for(var i in jsonEl.buffs )
			{
				if(
					jsonEl.buffs[ i ] == null
					|| typeof jsonEl.buffs[ i ] != "object"
					|| Component.bugcraft.ui.buffObjects[ jsonEl.buffs[ i ].buff_id ]
				)
				{
					// the buff is already defined and visible
					
					continue;
				}
				
				var spellBookAssociations =
				{
					conqueror: document.getElementById( args.id + '_buffContainer1' ),
					champion: document.getElementById( args.id + '_buffContainer2' ),
					soldier: document.getElementById( args.id + '_buffContainer3' ),
					
					stalker: document.getElementById( args.id + '_buffContainer1' ),
					guide: document.getElementById( args.id + '_buffContainer2' ),
					scout: document.getElementById( args.id + '_buffContainer3' ),
					
					enzymage: document.getElementById( args.id + '_buffContainer1' ),
					sage: document.getElementById( args.id + '_buffContainer2' ),
					noble: document.getElementById( args.id + '_buffContainer3' ),
					
					misc: document.getElementById( args.id + '_buffContainer3' )
				};
				
				var buffContainer = spellBookAssociations[ jsonEl.buffs[ i ].buff_tree ];
				
				if(
					buffContainer.childNodes.length == 0 ||																						// container holds no pages
					buffContainer.childNodes[ buffContainer.childNodes.length - 1 ].childNodes.length >= 8			// container's last page is full
				)
				{
					// need to create a new buff container page
					
					var buffContainerPage = document.createElement( "div" );
					buffContainerPage.className = 'buffsContainerPageHidden';
					
					buffContainer.appendChild( buffContainerPage );
				}
				
				Component.bugcraft.ui.buffObjects[ jsonEl.buffs[ i ].buff_id ] = new Component.bugcraft.ui.buffObject({
																																				buff: jsonEl.buffs[ i ],
																																				targetArea: buffContainer.childNodes[ buffContainer.childNodes.length - 1 ],	// append to the last page
																																				modelType: 2
																																			});
				
				// set this buff on cooldown if the requirements are as such
				if( jsonEl.buffs[ i ].cs_cooldown_remaining_seconds > 0 )
				{
					Component.bugcraft.ui.buffObjects[ jsonEl.buffs[ i ].buff_id ].setOnCooldown( jsonEl.buffs[ i ].cs_cooldown_remaining_seconds );
				}
				
			}
			
			Component.bugcraft.currentCharacterObject.mergeCharacterData( jsonEl.characterData );
			Component.bugcraft.currentCharacterObject.refreshhp_currentOnMain();
			Component.bugcraft.currentCharacterObject.updatelevelOnMain();
		}
		
		Application.websocket.handlers.updateBattleField = function( jsonEl, ws )
		{
			
		}
		
		Application.websocket.handlers.updateUserInterface = function( jsonEl, ws )
		{
			actionBarSkin = ( jsonEl.skin ) ? jsonEl.skin : 'bugtopia';
			
			

			bbO.style.backgroundImage='url("' + Application.configuration.cdn.location[ 0 ].url + '/ui/actionbar/' + actionBarSkin + '/buff_zone.png")';
			
			// profile
			lO.bottomBarMenuItem1Object.style.backgroundImage='url("' + Application.configuration.cdn.location[ 0 ].url + '/ui/actionbar/' + actionBarSkin + '/profile_inactive.png")';
			
			lO.bottomBarMenuItem1Object.onmouseover = function() {
				this.style.backgroundImage='url("' + Application.configuration.cdn.location[ 0 ].url + '/ui/actionbar/' + actionBarSkin + '/profile_active.png")';
			}

			lO.bottomBarMenuItem1Object.onmouseout = function() {
				this.style.backgroundImage='url("' + Application.configuration.cdn.location[ 0 ].url + '/ui/actionbar/' + actionBarSkin + '/profile_inactive.png")';
			}
			
			// quests
			lO.bottomBarMenuItem2Object.style.backgroundImage='url("' + Application.configuration.cdn.location[ 0 ].url + '/ui/actionbar/' + actionBarSkin + '/quests_inactive.png")'; // quest
			
			lO.bottomBarMenuItem2Object.onmouseover = function() {
				this.style.backgroundImage='url("' + Application.configuration.cdn.location[ 0 ].url + '/ui/actionbar/' + actionBarSkin + '/quests_active.png")';
			}

			lO.bottomBarMenuItem2Object.onmouseout = function() {
				this.style.backgroundImage='url("' + Application.configuration.cdn.location[ 0 ].url + '/ui/actionbar/' + actionBarSkin + '/quests_inactive.png")';
			}
			
			// spellbook
			lO.bottomBarMenuItem3Object.style.backgroundImage='url("' + Application.configuration.cdn.location[ 0 ].url + '/ui/actionbar/' + actionBarSkin + '/spellbook_inactive.png")'; // spellbook
			
			lO.bottomBarMenuItem3Object.onmouseover = function() {
				this.style.backgroundImage='url("' + Application.configuration.cdn.location[ 0 ].url + '/ui/actionbar/' + actionBarSkin + '/spellbook_active.png")';
			}

			lO.bottomBarMenuItem3Object.onmouseout = function() {
				this.style.backgroundImage='url("' + Application.configuration.cdn.location[ 0 ].url + '/ui/actionbar/' + actionBarSkin + '/spellbook_inactive.png")';
			}
			
			// talent tree
			lO.bottomBarMenuItem4Object.style.backgroundImage='url("' + Application.configuration.cdn.location[ 0 ].url + '/ui/actionbar/' + actionBarSkin + '/talents_inactive.png")'; // ttree
			
			lO.bottomBarMenuItem4Object.onmouseover = function() {
				this.style.backgroundImage='url("' + Application.configuration.cdn.location[ 0 ].url + '/ui/actionbar/' + actionBarSkin + '/talents_active.png")';
			}

			lO.bottomBarMenuItem4Object.onmouseout = function() {
				this.style.backgroundImage='url("' + Application.configuration.cdn.location[ 0 ].url + '/ui/actionbar/' + actionBarSkin + '/talents_inactive.png")';
			}
			
			// shop
			lO.bottomBarMenuItem5Object.style.backgroundImage='url("' + Application.configuration.cdn.location[ 0 ].url + '/ui/actionbar/' + actionBarSkin + '/amberStore_inactive.png")'; // shop
			
			lO.bottomBarMenuItem5Object.onmouseover = function() {
				this.style.backgroundImage='url("' + Application.configuration.cdn.location[ 0 ].url + '/ui/actionbar/' + actionBarSkin + '/amberStore_active.png")';
			}

			lO.bottomBarMenuItem5Object.onmouseout = function() {
				this.style.backgroundImage='url("' + Application.configuration.cdn.location[ 0 ].url + '/ui/actionbar/' + actionBarSkin + '/amberStore_inactive.png")';
			}
			
			
			// settings
			lO.bottomBarMenuItem6Object.style.backgroundImage='url("' + Application.configuration.cdn.location[ 0 ].url + '/ui/actionbar/' + actionBarSkin + '/settings_inactive.png")'; // settings
			
			lO.bottomBarMenuItem6Object.onmouseover = function() {
				this.style.backgroundImage='url("' + Application.configuration.cdn.location[ 0 ].url + '/ui/actionbar/' + actionBarSkin + '/settings_active.png")';
			}

			lO.bottomBarMenuItem6Object.onmouseout = function() {
				this.style.backgroundImage='url("' + Application.configuration.cdn.location[ 0 ].url + '/ui/actionbar/' + actionBarSkin + '/settings_inactive.png")';
			}


			// bgque
			lO.bottomBarMenuItem7Object.style.backgroundImage='url("' + Application.configuration.cdn.location[ 0 ].url + '/ui/actionbar/' + actionBarSkin + '/battleground_inactive.png")'; // bgque
			
			lO.bottomBarMenuItem7Object.onmouseover = function() {
				this.style.backgroundImage='url("' + Application.configuration.cdn.location[ 0 ].url + '/ui/actionbar/' + actionBarSkin + '/battleground_active.png")';
			}

			lO.bottomBarMenuItem7Object.onmouseout = function() {
				this.style.backgroundImage='url("' + Application.configuration.cdn.location[ 0 ].url + '/ui/actionbar/' + actionBarSkin + '/battleground_inactive.png")';
			}


			// bag
			lO.bottomBarMenuItem8Object.style.backgroundImage='url("' + Application.configuration.cdn.location[ 0 ].url + '/ui/actionbar/' + actionBarSkin + '/bags_inactive.png")'; // bag
			
			lO.bottomBarMenuItem8Object.onmouseover = function() {
				this.style.backgroundImage='url("' + Application.configuration.cdn.location[ 0 ].url + '/ui/actionbar/' + actionBarSkin + '/bags_active.png")';
			}

			lO.bottomBarMenuItem8Object.onmouseout = function() {
				this.style.backgroundImage='url("' + Application.configuration.cdn.location[ 0 ].url + '/ui/actionbar/' + actionBarSkin + '/bags_inactive.png")';
			}
			
			// bag
			lO.minimapObject.style.backgroundImage='url("' + Application.configuration.cdn.location[ 0 ].url + '/ui/minimap/' + actionBarSkin + '/minimap.png")'; // bag
			
			
		}
		
		Application.websocket.handlers.measureLag = function( jsonEl, ws )
		{
			// server-client lag measurement response
			
			_LN = ( ( jsonEl.st - jsonEl.rt ) + ( ( new Date() ).getTime() - jsonEl.st ) ) / 2;		// ( send latency - receive latency ) / 2
			
			Component.bugcraft.latency = _LN + _LI;
			
			setTimeout( function()
			{
				Application.websocket.socket.send( '{"c":"measureLag","t":' + ( new Date() ).getTime() + '}' );
			}, 1000 + _LN );
		}
		
		Application.websocket.handlers.useObject = function( jsonEl, ws )
		{
			if( jsonEl.r != 200 )
			{
				Application.debug.addError( "Error using object " + jsonEl.t + ": " + jsonEl.r );
				
				return;
			}
			
			// the object has been used
			
			Component.bugcraft._characterData[ jsonEl.t ].command_use( Component.bugcraft._characterData[ jsonEl.s ] );
		}
		
		Application.websocket.handlers.move = function( jsonEl, ws )
		{
			
		}
		
		Application.websocket.handlers.cast = function( jsonEl, ws )
		{
			// buff casting action response
			
			if( jsonEl.r == 305 )
			{
				// unable to cast due to myself being dead
				
				Component.bugcraft.messages.addError( "You are dead" );
				
				return;
			}
			
			if( jsonEl.r == 306 )
			{
				// unable to cast due to target being dead
				
				Component.bugcraft.messages.addInfo( "Target is dead" );
				
				return;
			}
			
			if( jsonEl.r == 307 )
			{
				// unable to cast due to untargetable
				
				Component.bugcraft.messages.addError( "Cannot target that" );
				
				return;
			}
			
			if( jsonEl.r == 308 )
			{
				// unable to cast while moving
				
				Component.bugcraft.messages.addError( "Cannot cast while moving" );
				
				return;
			}
			
			if( jsonEl.r == 309 )
			{
				// server reports buff on cooldown
				
				Component.bugcraft.messages.addError( "The buff is on cooldown" );
				
				Component.bugcraft.sound.characters.playMainVoice( "onCd" );
				
				return;
			}
			
			if( jsonEl.r != 200 )
			{
				Application.debug.addError( "Received error " + jsonEl.r + " while casting buff " + jsonEl.b + " to character " + jsonEl.t );
			}
			
			// current user casted a buff. update interface
			if( jsonEl.cds > 0 )
			{
				Component.bugcraft.ui.buffObjects[ jsonEl.bid ].setOnCooldown( jsonEl.cds );
			}
		}
		
		Application.websocket.handlers.removeCooldown = function( jsonEl, ws )
		{
			// buff casting action response
			
			if( jsonEl.r != 200 )
			{
				Application.debug.addError( "Received error " + jsonEl.r + " while removing cooldown for buff " + jsonEl.b );
			}
			
			Component.bugcraft.ui.buffObjects[ jsonEl.b ].clearCooldown( false );
		}
		
		Application.websocket.handlers.enterCombat = function( jsonEl, ws )
		{
			Component.bugcraft.currentCharacterObject.enterCombatOnMain();
		}
		
		Application.websocket.handlers.leaveCombat = function( jsonEl, ws )
		{
			Component.bugcraft.currentCharacterObject.leaveCombatOnMain();
		}
		
		//
		// Special Events
		//
		
		// instance resurrection
		var _instanceCooldownResurrectionPointer = null;
		Application.websocket.handlers.instanceResurrectionCooldownTimer = function( jsonEl, ws )
		{
			clearTimeout( _instanceCooldownResurrectionPointer );	// make sure there are no overlapping messages
			
			var _cooldownRemaining = Math.floor( jsonEl.cd / 1000 );
			
			var _periodicUpdate = function()
			{
				if( _cooldownRemaining >  5 )
				{
					if( _cooldownRemaining % 5 == 0 )
					{
						Component.bugcraft.messages.addInfo( "You will be revived in " + _cooldownRemaining + " seconds" );
					}
				}
				else
				{
					Component.bugcraft.messages.addInfo( "You will be revived in " + _cooldownRemaining + " second" + ( ( _cooldownRemaining != 1 ) ? 's' : '' ) );
				}
				
				_cooldownRemaining--;
				
				if( _cooldownRemaining < 1 )
				{
					return;
				}
				
				_instanceCooldownResurrectionPointer = setTimeout( _periodicUpdate, 1000 );
			};
			
			if( _cooldownRemaining % 5 != 0 && _cooldownRemaining > 5 )
			{
				Component.bugcraft.messages.addInfo( "You will be revived in " + _cooldownRemaining + " seconds" );
			}
			
			_periodicUpdate();
		}
		
		Application.websocket.handlers.instanceResurrectionCooldownStop = function( jsonEl, ws )
		{
			clearTimeout( _instanceCooldownResurrectionPointer );	// stop periodic notification
			
			Component.bugcraft.messages.addInfo( "You have left the resurrection area" );
		}
		
		// update faction points
		Application.websocket.handlers.updateFactionPoints = function( jsonEl, ws )
		{
			var _lo = Component.bugcraft._layoutObjects;
			
			if( _lo.zonePointsContainerObject.className == "zonePointsHidden" )
			{
				// show the area
				
				_lo.zonePointsContainerObject.className = "zonePoints";
			}
			
			_lo.zonePointsAnteriumObject.innerHTML = jsonEl.f.anterium;
			_lo.zonePointsHegemonyObject.innerHTML = jsonEl.f.hegemony;
		}
		
		Application.websocket.handlers.updateQueueMembers = function( jsonEl, ws )
		{
			if( jsonEl.r != 200 )
			{
				return;
			}
			
			if( jsonEl.st == true )
			{
				Component.bugcraft.messages.addError( "Beam me up, scotty" );
			}
		}
		
		Application.websocket.handlers.battlegroundStatistics = function( jsonEl, ws )
		{
			Component.bugcraft.battlegroundStatistics( args, jsonEl );
		}
		
		Application.websocket.handlers.queueInvitationAccept = function( jsonEl, ws )
		{
			// until we have a better solution
			//instancePopupObject[ jsonEl.zp_id ].remove();
			
			document.location.reload();
		};
		
		// battlegrounds enqueue response
		Application.websocket.handlers.queueJoinRandom = Application.websocket.handlers.queueJoinSpecific = function( jsonEl, ws )
		{
			if( jsonEl.r != 200 )
			{
				Application.debug.addError( "Error joining queue " + jsonEl.r )
				
				return false;
			}
			
			var _startActionBarAnimation = function()
			{
				var _opacity = 0, _increment = 0.1;
				
				lO.bottomBarMenuItem7OverlayObject.className = "overlay";
				
				var _animation = function()
				{
					_opacity += _increment;
					
					lO.bottomBarMenuItem7OverlayObject.style.opacity = _opacity;
					lO.bottomBarMenuItem7OverlayObject.style.mozOpacity = _opacity;
					
					if( _opacity >= 1 || _opacity <= 0 )
					{
						_increment = -_increment;
					}
					
					_t = setTimeout( _animation, 150 );
				}
				
				_animation();
			}
			
			/*
			queuedBattlegroundsNumber++;
			
			if( queuedBattlegroundsNumber == 1 )
			{
				_startActionBarAnimation();
			}
			*/
			
			// hide this screen
			Component.bugcraft.initializedPages.lookingForBattleground = false;
			lookingForBattlegroundPageObject.className = 'hidden';
		}
		
		Application.websocket.handlers.battlegroundLeave = function( jsonEl, ws )
		{
			document.location.reload();
		}
		
		Application.websocket.handlers.updateBattleField = function( jsonEl, ws )
		{
			// dummy definition until updateBattlefieldFresh is performed
		}
		
		//
		// Initialization
		//
		
		// Enter the LFG by default
		Application.websocket.socket.send( '{"c":"characterActive"}' );
		Component.bugcraft.pageLoader.addPercentage( 10 );
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	


/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.pageBattlegroundStatistics.js
*/


	/*
		Battleground Statistics
	*/
	
	Component.bugcraft.battlegroundStatistics = function( args, dataToPopulateWith )
	{
		var battlegroundStatisticsPageObject = document.getElementById( args.id + '_battlegroundStatisticsPage' );
		
		if( typeof Component.bugcraft.initializedPages.battlegroundStatistics != "undefined" )
		{
			Component.bugcraft.initializedPages.battlegroundStatistics = !Component.bugcraft.initializedPages.battlegroundStatistics;
			battlegroundStatisticsPageObject.className = Component.bugcraft.initializedPages.battlegroundStatistics ? "battlegroundStatistics" : "hidden";
			
			if( !Component.bugcraft.initializedPages.battlegroundStatistics )
			{
				Component.bugcraft.sound.ui.playEvent( "window", "buttonClose" );
			}
			
			return;
		}
		
		Component.bugcraft.initializedPages.battlegroundStatistics = true;
		battlegroundStatisticsPageObject.className = "battlegroundStatistics";
		
		var battlegroundStatisticsCloseButtonObject = document.getElementById( args.id + "_battlegroundStatisticsCloseButton" ),
			battlegroundStatisticsLeaveButtonObject = document.getElementById( args.id + "_battlegroundStatisticsLeave" ),
			battlegroundStatisticsListItemsObject = document.getElementById( args.id + "_battlegroundStatisticsListItems" ),
			battlegroundStatisticsItemsContainerObject = document.getElementById( args.id + "_battlegroundStatisticsItemsContainer" ),
			battlegroundStatisticsPlayersAnteriumObject = document.getElementById( args.id + "_battlegroundPlayersAnterium" ),
			battlegroundStatisticsPlayersHegemonyObject = document.getElementById( args.id + "_battlegroundPlayersHegemony" ),
			battlegroundStatisticsDurationObject = document.getElementById( args.id + "_battlegroundDuration" ),
			battlegroundStatisticsListControlUpObject = document.getElementById( args.id + "_battlegroundStatisticsListControlUp" ),
			battlegroundStatisticsListControlDownObject = document.getElementById( args.id + "_battlegroundStatisticsListControlDown" ),
			anteriumCharactersNumber = 0, hegemonyCharactersNumber = 0;
		
		Application.websocket.handlers.battlegroundLeave = function( jsonEl, ws )
		{
			document.location.reload();
		}
		
		// "close" button event
		Application.event.add( battlegroundStatisticsCloseButtonObject, "click", 	function()
		{
			Component.bugcraft.sound.ui.playEvent( "window", "buttonClose" );
			
			Application.websocket.socket.send( '{"c":"battlegroundLeave"}' );
		});
		
		// "leave" button event
		Application.event.add( battlegroundStatisticsLeaveButtonObject, "click", 	function()
		{
			Component.bugcraft.sound.ui.playEvent( "window", "buttonClick" );
			Application.websocket.socket.send( '{"c":"battlegroundLeave"}' );
		});
		
		// mouse wheel scroll
		battlegroundStatisticsItemsContainerObject.onmousewheel = function( e )
		{
			var mouseDelta = e.wheelDelta / 10;
			
			if(
				( mouseDelta > 0 && battlegroundStatisticsListItemsObject.offsetTop + mouseDelta <= 0 )
				|| ( mouseDelta < 0 && battlegroundStatisticsListItemsObject.offsetTop + mouseDelta > -battlegroundStatisticsListItemsObject.offsetHeight + battlegroundStatisticsItemsContainerObject.offsetHeight )
			)
			{
				battlegroundStatisticsListItemsObject.style.top = ( battlegroundStatisticsListItemsObject.offsetTop + mouseDelta ) + "px";
			}
			else
			{
				if( mouseDelta > 0 )
				{
					battlegroundStatisticsListItemsObject.style.top = "0px";
				}
				else
				{
					battlegroundStatisticsListItemsObject.style.top = ( -battlegroundStatisticsListItemsObject.offsetHeight + battlegroundStatisticsItemsContainerObject.offsetHeight ) + "px";
				}
			}
			
			return false;
		}
		
		// "up" button event
		Application.event.add( battlegroundStatisticsListControlUpObject, "mousedown", function()
		{
			var _scrollTimeout = null;
			
			var _scrollFunction = function()
			{
				if( battlegroundStatisticsListItemsObject.offsetTop + 6 <= 0 )
				{
					battlegroundStatisticsListItemsObject.style.top = ( battlegroundStatisticsListItemsObject.offsetTop + 6 ) + "px";
				}
				else
				{
					battlegroundStatisticsListItemsObject.style.top = "0px";
				}
				
				_scrollTimeout = setTimeout( _scrollFunction, 100 );
			}
			
			var _scrollRemove = function()
			{
				clearTimeout( _scrollTimeout );
				
				Application.event.remove( document.body, "mouseup", _scrollRemove );
			};
			
			_scrollFunction();
			
			Application.event.add( document.body, "mouseup", _scrollRemove );
		});
		
		// "down" button event
		Application.event.add( battlegroundStatisticsListControlDownObject, "mousedown", function()
		{
			var _scrollTimeout = null;
			
			var _scrollFunction = function()
			{
				if( battlegroundStatisticsListItemsObject.offsetTop - 6 > -battlegroundStatisticsListItemsObject.offsetHeight + battlegroundStatisticsItemsContainerObject.offsetHeight )
				{
					battlegroundStatisticsListItemsObject.style.top = ( battlegroundStatisticsListItemsObject.offsetTop - 6 ) + "px";
				}
				else
				{
					battlegroundStatisticsListItemsObject.style.top = ( -battlegroundStatisticsListItemsObject.offsetHeight + battlegroundStatisticsItemsContainerObject.offsetHeight ) + "px";
				}
				
				_scrollTimeout = setTimeout( _scrollFunction, 100 );
			}
			
			var _scrollRemove = function()
			{
				clearTimeout( _scrollTimeout );
				
				Application.event.remove( document.body, "mouseup", _scrollRemove );
			};
			
			_scrollFunction();
			
			Application.event.add( document.body, "mouseup", _scrollRemove );
		});
		
		//
		// List the players
		//
		
		for(var i in dataToPopulateWith.s)
		{
			var _c = dataToPopulateWith.s[ i ];
			
			( _c.faction == "anterium" ) ? ( anteriumCharactersNumber++ ) : ( hegemonyCharactersNumber++ );
			
			var characterStatLine = document.createElement("div");
			characterStatLine.innerHTML = '<div class="battlegroundListItem"><div class="tableRowClassIcon' + _c["class"] + '"></div><div class="tableRowPlayerName">' + _c.name + '</div><div class="tableRow">' + ( _c.kills_direct ? _c.kills_direct : 0 ) + '</div><div class="tableRow">' + ( _c.deaths ? _c.deaths : 0 ) + '</div><div class="tableRow">' + ( _c.kills_glory ? _c.kills_glory : 0 ) + '</div><div class="tableRow">' + ( _c.buff_damaged_points ? _c.buff_damaged_points : 0 ) + '</div><div class="tableRow">' + ( _c.buff_healed_points ? _c.buff_healed_points : 0 ) + '</div><div class="tableRow">' + ( _c.flag_captures ? _c.flag_captures : 0 ) + '</div><div class="tableRow">' + ( _c.flag_returns ? _c.flag_returns : 0 ) + '</div><div class="tableRow">' + ( _c.glory_earned ? _c.glory_earned : 0 ) + '</div></div>';
			
			battlegroundStatisticsListItemsObject.appendChild( characterStatLine );
		}
		
		Component.bugcraft.scaleWindow( battlegroundStatisticsPageObject );
		
		// overall statistics
		battlegroundStatisticsDurationObject.innerHTML = Math.floor( dataToPopulateWith.d / 60 ) + "m " + ( dataToPopulateWith.d % 60 ) + "s";
		battlegroundStatisticsPlayersAnteriumObject.innerHTML = anteriumCharactersNumber;
		battlegroundStatisticsPlayersHegemonyObject.innerHTML = hegemonyCharactersNumber;
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.pageChat.js
*/


	Component.bugcraft.pageChat = function( args )
	{
		var chatChannelNames = {}, chatWhisperNames = [], chatChannelsInstanceNames = [], chatInputObjectStructBuffer = {}, _chatWindowContainerPosition = null,
				regExGeneral = /[a-zA-Z0-9]+:[0-9]+:[a-zA-Z0-9 \(\)\,\']+\]/, regExInput = /[a-zA-Z0-9 \(\)\,\']+\]/, _bottomBarPosition = Application.util.style.getPos( Component.bugcraft._layoutObjects.bottomBarObject ),
				_mouseX = 0, _mouseY = 0, _currentOpacity = 0, _fadeTimeout = null, _periodicMousePositionCheckFunctionTimeout = null,
				_chatAreaWidth =  _bottomBarPosition.left - 60,
			chatContainerObject = document.getElementById( args.id + "_chatContainer" ),
			chatWindowContainerObject = document.getElementById( args.id + "_chatWindowContainer" ),
			chatMessagesContainerObject = document.getElementById( args.id + "_chatMessagesContainer" ),
			chatFloatingMessagesContainer = document.getElementById( args.id + "_chatFloatingMessagesContainer" ),
			chatBackgroundContainerObject = document.getElementById( args.id + "_chatBackgroundContainer" ),
			chatUpButtonObject = document.getElementById( args.id + "_chatUpButton" ),
			chatDownButtonObject = document.getElementById( args.id + "_chatDownButton" ),
			chatEmotesButtonObject = document.getElementById( args.id + "_chatEmotesButton" ),
			chatEmoteButtonsContainerObject = document.getElementById( args.id + "_chatEmoteButtonsContainer" ),
			chatInputObject = document.getElementById( args.id + "_chatInput" );
		
		// insert structure in input box at current caret position
		Component.bugcraft.pageChatInsertObjectInInput = function( serializedObject )
		{
			//find the caret in the input box
			var _getCaret = function(el)
			{
				if (el.selectionStart)
				{
					return el.selectionStart;
				}
				else if (document.selection)
				{
					el.focus();
					
					var r = document.selection.createRange();
					
					if (r == null)
					{
						return 0;
					}

					var re = el.createTextRange();
					rc = re.duplicate();
					re.moveToBookmark(r.getBookmark());
					rc.setEndPoint('EndToStart', re);

					return rc.text.length;
				}
				
				return 0;
			}
			
			var pos = _getCaret( chatInputObject ), _civ = chatInputObject.value;
			
			chatInputObjectStructBuffer[ serializedObject.objectName ] = serializedObject.objectType + ":" + serializedObject.objectID + ":" + serializedObject.objectName + "]";
			
			// create the structure for special text - aka objects
			chatInputObject.value = _civ.substring(0, pos) + '[' + serializedObject.objectName + ']' + _civ.substring(pos, _civ.length);
			
			// set the focus to the input textfield
			chatInputObject.focus();
		}
		
		// handle the "/" key press
		Component.bugcraft.pageChatFocusOnTextfield = function( textToAdd )
		{
			if( textToAdd )
			{
				chatInputObject.value = "/";
			}
			
			// set the focus to the input textfield
			chatInputObject.focus();
		}
		
		// add emote in chat area
		Component.bugcraft.pageChatInsertMessage = function( messageType, messageText )
		{
			var messageDiv = document.createElement( "div" );
			messageDiv.className = "messageType" + messageType;
			messageDiv.innerHTML = messageText;
			
			chatFloatingMessagesContainer.appendChild( messageDiv );
			
			_fadeOutContent( messageDiv );
			
			_scrollMessagesContainer();
		}
		
		// scroll the floating messages container
		var _scrollMessagesContainer = function()
		{
			if( chatFloatingMessagesContainer.offsetHeight < chatMessagesContainerObject.offsetHeight )
			{
				return;
			}
			
			// auto scroll the floating container
			
			chatFloatingMessagesContainer.style.top = ( chatMessagesContainerObject.offsetHeight - chatFloatingMessagesContainer.offsetHeight ) + "px";
		}
		
		// parse input string and replace inserted structures with the real ones
		var _createMessageToSend = function( msg )
		{
			var messageParts = msg.split("[");
			
			for( var i = 0; i < messageParts.length; i++ )
			{
				var rez = regExInput.exec( messageParts[i] );
				
				if( rez == null )
				{
					// plain text
					
					continue;
				}
				
				// embedded object
				
				rez[0] = rez[0].substring( 0, (rez[0].length - 1) ); // remove ']'
				
				if( rez[0] in chatInputObjectStructBuffer )
				{
					messageParts[i] = chatInputObjectStructBuffer[rez[0]] + messageParts[i].substring( (rez[0].length + 1) );
				}
			}
			
			return messageParts.join('[');
		}
		
		//attatch chat structure with this character to given string
		var _addSenderToMessage = function( message )
		{
			var _cd = Component.bugcraft.currentCharacterObject.characterData;
			
			return "[player:" + _cd.character_id + ":" + _cd.character_name + "] says: " + message;
		}
		
		var _fadeOutContent = function( htmlObject )
		{
			// fade out this content
			setTimeout( function()
			{
				var _alpha = 1;
				
				var _shrinkContent = function()
				{
					//Application.util.html.removeNode( htmlObject );
					
					htmlObject.style.height = ( htmlObject.offsetHeight - 1 ) + "px";
					
					_scrollMessagesContainer();
					
					if( htmlObject.offsetHeight <= 0 )
					{
						Application.util.html.removeNode( htmlObject );
						
						return;
					}
					
					setTimeout( _shrinkContent, 250 );
				}
				
				var _fadeOutFunction = function()
				{
					htmlObject.style.opacity = ( _alpha -= 0.05 );
					
					if( _alpha <= 0 )
					{
						// remove this node
						
						_shrinkContent();
						
						return;
					}
					
					setTimeout( _fadeOutFunction, 250 );
				}
				
				_fadeOutFunction();
				
			}, 30000 );	
		}
		
		// character emote
		Application.websocket.handlers.characterEmote = function( jsonEl, ws )
		{
			if( jsonEl.r != 200 )
			{
				Application.debug.addError( "Received error " + jsonEl.r + " on character emote" );
				
				return;
			}
			
			// emote sent ok
		}
		
		// new message received from the chat channel
		Application.websocket.handlers.chatMessage = function( jsonEl, ws )
		{
			if( jsonEl.r == 302 )
			{
				// too many messages at a time
				
				Component.bugcraft.pageChatInsertMessage( "Error", "You cannot send more messages at this time" );
				
				return;
			}
			
			if( jsonEl.r != 200 )
			{
				Application.debug.addError( "Received error " + jsonEl.r + " on chat message" );
				
				return;
			}
			
			var fromPlayerID = null, messageInTextFormat = "";
			
			//make structures in chat click-able
			var _setChatStructureTrigger = function( args )
			{
				switch( args.params[0] )
				{
					case "player":
						
						Application.event.add( args.obj, "click", function()
						{
							chatInputObject.value = "/w " + args.params[ 2 ] + " ";
							chatInputObject.focus();
						});
						
						if( fromPlayerID == null )
						{
							// considering that the 1st player information coming to the chat is the player actually sending the message
							
							fromPlayerID = args.params[ 1 ];
						}
						
					break;
					case "buff":
						
						var _tooltipObject = null;
						
						Application.event.add( args.obj, "click", function( e )
						{
							if( _tooltipObject == null )
							{
								Application.websocket.handlers.tooltipGetBuffData = function( jsonEl, ws )
								{
									_tooltipObject = new Component.bugcraft.tooltip.buff( args.obj, jsonEl.d );
									
									_tooltipObject.show( e );
								}
								
								//get instance chat channel names for future referance
								Application.websocket.socket.send( '{"c":"tooltipGetBuffData","buffID":' + args.params[ 1 ] + '}' );
								
								return;
							}
							
							_tooltipObject.show( e );
						});
						
					break;
					case "itempoor":
					case "itemfair":
					case "itemsuperior":
					case "itemmasterwork":
						
						var _tooltipObject = null;
						
						Application.event.add( args.obj, "click", function( e )
						{
							if( _tooltipObject == null )
							{
								Application.websocket.handlers.tooltipGetItemData = function( jsonEl, ws )
								{
									_tooltipObject = new Component.bugcraft.tooltip.item( args.obj, jsonEl.d );
									
									_tooltipObject.show( e );
								}
								
								//get instance chat channel names for future referance
								Application.websocket.socket.send( '{"c":"tooltipGetItemData","lootID":' + args.params[ 1 ] + '}' );
								
								return;
							}
							
							_tooltipObject.show( e );
						});
						
					break;
					case "quest":
						
						/*
						Application.event.add( args.obj, "click", function()
						{
							
							alert( "quest" + "-" + args.params[1] + "-" + args.params[2] );
						});
						*/
						
					break;
				}
			}
			
			var playerID = /player:([0-9]+)/.exec( jsonEl.message ),
				newMessage = document.createElement("div"), //message container
				_c = null;
			
			if( playerID[ 1 ] && ( _c = Component.bugcraft._characterData[ playerID[ 1 ] ] ) && _c.characterData.character_type != 3 )
			{
				// NPC talking
				
				newMessage.className = "messageChannelNPC";
			}
			else
			{
				// player talking
				
				newMessage.className = "messageChannel" + ( ( jsonEl.channelType == 'battleground' || jsonEl.channelType == 'general' || jsonEl.channelType == 'yell' || jsonEl.channelType == 'say' || jsonEl.channelType == 'whisper' ) ? jsonEl.channelType : 'standard' );
			}
			
			newMessage.innerHTML = "<span class='chatChannelName'>[" + jsonEl.channelName + "]</span>";
			
			//start chat message parse
			var messageParts = jsonEl.message.split("[");
			messageParts.push("");
			
			for( var i = 0; i < messageParts.length - 1; i++ )
			{
				var rez = regExGeneral.exec(messageParts[i]);
				
				if( rez == null )
				{
					// plain text
					// check is current element is '[' and next is a structure
					
					if( messageParts[i].length == 0 && regExGeneral.exec(messageParts[i + 1]) != null )
					{
						continue;
					}
					
					messageInTextFormat += "[" + messageParts[i];
					
					newMessage.appendChild( document.createTextNode( "[" + messageParts[i] ) );
					
					continue;
				}
				
				var newChatStruct = document.createElement("span"), chatObjectParts = rez[0].split(":");
				
				chatObjectParts[2] = chatObjectParts[2].substring( 0, (chatObjectParts[2].length - 1) ); //take out the ']' from the last part
				
				newChatStruct.className = "chatObject" + chatObjectParts[0];
				newChatStruct.appendChild( document.createTextNode( "[" + chatObjectParts[2] + "]" ) );
				
				messageInTextFormat += "[" + chatObjectParts[2] + "]";
				
				_setChatStructureTrigger({
											obj: newChatStruct,
											params: chatObjectParts
										});
				
				newMessage.appendChild( newChatStruct );
				
				// there is more plain text after structure
				if( rez[0].length == messageParts[i].length )
				{
					continue;
				}
				
				messageInTextFormat += messageParts[i].slice(rez[0].length);
				
				newMessage.appendChild( document.createTextNode( messageParts[ i ].slice( rez[0].length ) ) );
			}
			
			// add the text to the container
			chatFloatingMessagesContainer.appendChild( newMessage );
			
			_fadeOutContent( newMessage );
			
			_scrollMessagesContainer();
			
			// handle chat bubbles
			var _c = Component.bugcraft._characterData[ fromPlayerID ];
			
			if( _c && jsonEl.channelType == "say" && fromPlayerID != null )
			{
				_c.showChatBubbleSay(
										messageInTextFormat.substring( messageInTextFormat.indexOf( ":" ) + 2 )	// include the space after the ":"
									);
			}
			else if( _c && jsonEl.channelType == "yell" && fromPlayerID != null )
			{
				_c.showChatBubbleYell(
										messageInTextFormat.substring( messageInTextFormat.indexOf( ":" ) + 2 )	// include the space after the ":"
									);
			}
		}
		
		// join command
		Application.websocket.handlers.joinChannel = function( jsonEl, ws )
		{
			if( jsonEl.r == 201 )
			{
				Component.bugcraft.pageChatInsertMessage( "Error", "You are already in channel " + jsonEl.channelName );
				
				return;
			}
			
			if( jsonEl.r != 200 )
			{
				Application.debug.addError( "Received error " + jsonEl.r + " on bad chat message" );
				
				return;
			}
			
			chatChannelNames[ jsonEl.channelName ] = jsonEl.channelType;
			
			Component.bugcraft.pageChatInsertMessage( "Notice", "Joined channel " + jsonEl.channelName );
		}
		
		//leave
		Application.websocket.handlers.leaveChannel = function( jsonEl, ws )
		{
			if( jsonEl.r == 201 || jsonEl.r == 202 )
			{
				Component.bugcraft.pageChatInsertMessage( "Error", "You cannot leave channel " + jsonEl.channelName );
				
				return;
			}
			
			if( jsonEl.r == 404 )
			{
				Component.bugcraft.pageChatInsertMessage( "Error", "You cannot leave unexistent channel " + jsonEl.channelName );
				
				return;
			}
			
			if( jsonEl.r != 200 )
			{
				Component.bugcraft.pageChatInsertMessage( "Error", "Received error " + jsonEl.r + " while leaving channel " + jsonEl.channelName );
				
				return;
			}
			
			// all ok
			
			delete chatChannelNames[ jsonEl.channelName ];
			
			Component.bugcraft.pageChatInsertMessage( "Notice", "Left channel " + jsonEl.channelName );
		}
		
		// whisper
		Application.websocket.handlers.whisper = function( jsonEl, ws )
		{
			if( jsonEl.r == 301 )
			{
				Component.bugcraft.pageChatInsertMessage( "Error", "Can not whisper to that player" );
				
				return;
			}
			
			if( jsonEl.r == 404 )
			{
				Component.bugcraft.pageChatInsertMessage( "Error", "The player is unavailable" );
				
				if( chatWhisperNames.indexOf( jsonEl.characterName.toLowerCase() ) >= 0)
				{
					chatWhisperNames.splice( chatWhisperNames.indexOf( jsonEl.characterName.toLowerCase() ), 1 );
				}
				
				return;
			}
		
			if( jsonEl.r != 200 )
			{
				Component.bugcraft.pageChatInsertMessage( "Error", "Received error " + jsonEl.r + " while performing whisper" );
				
				return;
			}
			
			chatWhisperNames.push( jsonEl.characterName.toLowerCase() );
		}
		
		// list instance channels names
		Application.websocket.handlers.chatGetInstanceChannelNames = function( jsonEl, ws )
		{
			if( jsonEl.r != 200 )
			{
				Application.debug.addError( "Received error " + jsonEl.r + " while performing channel names listing" );
				
				return;
			}
			
			chatChannelsInstanceNames = jsonEl.chatChannelsInstanceNames;
		}
		
		// response for sending a chatCommand
		Application.websocket.handlers.chatCommand = function( jsonEl, ws )
		{
			if( jsonEl.r == 302 )
			{
				// too many messages at a time
				
				Component.bugcraft.pageChatInsertMessage( "Error", "You cannot send more messages at this time" );
				
				return;
			}
			
			if( jsonEl.r == 400 )
			{
				Component.bugcraft.pageChatInsertMessage( "Error", "Chat command parameters error" );
				
				return;
			}
			
			if( jsonEl.r == 401 )
			{
				Component.bugcraft.pageChatInsertMessage( "Error", "Specific chat command parameters error" );
				
				return;
			}
			
			if( jsonEl.r != 200 )
			{
				Component.bugcraft.pageChatInsertMessage( "Error", "Misc chat command error " + jsonEl.r );
				
				return;
			}
			
			// all went ok
			
			if( jsonEl.t )
			{
				Component.bugcraft.pageChatInsertMessage( "Notice", "Server: " + jsonEl.t );
			}
		}
		
		var _sendMessageToServer = function( messageText )
		{
			//check if input is a command
			if( messageText.indexOf( '/' ) != 0 )
			{
				//send plain message
				Application.websocket.socket.send( JSON.stringify({
																		c: "chatMessage",
																		message: _addSenderToMessage( _createMessageToSend( messageText ) )
																	}) );
				
				return;
			}
			
			//
			// Command has to be sent
			//
			
			//split input
			var aux = messageText.split(' ', 1);
			aux[0] = aux[0].slice(1);
			aux[1] = messageText.slice( aux[0].length + 2 );
			
			switch( aux[0].toLowerCase() )
			{
				case "server":
					
					
					
				break;
				case "levelset":
					
					aux[ 0 ] = "levelSet";
					aux[ 1 ] = {
								levelNumber: aux[ 1 ],
								characterID: Component.bugcraft.currentCharacterTarget.characterData.character_id
							};
					
				break;
				case "s":
				case "say":
					
					aux[1] = {
								channelName: "say",
								channelType: "say",
								message: _addSenderToMessage( _createMessageToSend( aux[1] ) )
							};
					aux[0] = "changeChannel";
					
				break;
				case "y":
				case "yell":
					
					aux[1] = {
								channelName: "yell",
								channelType: "yell",
								message: _addSenderToMessage( _createMessageToSend( aux[1] ) )
							};
					aux[0] = "changeChannel";
					
				break;
				case "w":
				case "whisper":
					
					var dest = aux[1].split(' ')[0];
					
					aux[1] = {
								destCharacterName: dest.toLowerCase(),
								message: _addSenderToMessage( _createMessageToSend( aux[1].slice( dest.length + 1 ) ) )
							};
					
					aux[ 0 ] = "whisper";
					
				break;
				case "sad":
					
					// emote
					
					var _ct = Component.bugcraft.currentCharacterTarget, _cc = Component.bugcraft.currentCharacterObject;
					
					aux[ 1 ] = {
								emoteName: aux[ 0 ],
								target: _ct ? _ct.characterData.character_id : null,
								text: ( _ct != _cc )
												? "%caster is sad for %target.".replace( "%caster", Component.bugcraft.currentCharacterObject.characterData.character_name ).replace( "%target", _ct.characterData.character_name )
												: "%caster is sad".replace( "%caster", Component.bugcraft.currentCharacterObject.characterData.character_name )
							}
					aux[ 0 ] = "emote";
					
				break;
				case "smile":
					
					// emote
					
					var _ct = Component.bugcraft.currentCharacterTarget, _cc = Component.bugcraft.currentCharacterObject;
					
					aux[ 1 ] = {
								emoteName: aux[ 0 ],
								target: _ct ? _ct.characterData.character_id : null,
								text: ( _ct != _cc )
												? "%caster smiles %target.".replace( "%caster", Component.bugcraft.currentCharacterObject.characterData.character_name ).replace( "%target", _ct.characterData.character_name )
												: "%caster smiles".replace( "%caster", Component.bugcraft.currentCharacterObject.characterData.character_name )
							}
					aux[ 0 ] = "emote";
					
				break;
				case "kiss":
					
					// emote
					
					var _ct = Component.bugcraft.currentCharacterTarget, _cc = Component.bugcraft.currentCharacterObject;
					
					aux[ 1 ] = {
								emoteName: aux[ 0 ],
								target: _ct ? _ct.characterData.character_id : null,
								text: ( _ct != _cc )
												? "%caster kisses %target".replace( "%caster", Component.bugcraft.currentCharacterObject.characterData.character_name ).replace( "%target", _ct.characterData.character_name )
												: "%caster blows a kiss to the wind".replace( "%caster", Component.bugcraft.currentCharacterObject.characterData.character_name )
							}
					aux[ 0 ] = "emote";
					
				break;
				case "boo":
					
					// emote
					
					var _ct = Component.bugcraft.currentCharacterTarget, _cc = Component.bugcraft.currentCharacterObject;
					
					aux[ 1 ] = {
								emoteName: aux[ 0 ],
								target: _ct ? _ct.characterData.character_id : null,
								text: ( _ct != _cc )
												? "%caster boos %target".replace( "%caster", Component.bugcraft.currentCharacterObject.characterData.character_name ).replace( "%target", _ct.characterData.character_name )
												: "%caster boos".replace( "%caster", Component.bugcraft.currentCharacterObject.characterData.character_name )
							}
					aux[ 0 ] = "emote";
					
				break;
				case "cheer":
					
					// emote
					
					var _ct = Component.bugcraft.currentCharacterTarget, _cc = Component.bugcraft.currentCharacterObject;
					
					aux[ 1 ] = {
								emoteName: aux[ 0 ],
								target: _ct ? _ct.characterData.character_id : null,
								text: ( _ct != _cc )
												? "%caster cheers for %target".replace( "%caster", Component.bugcraft.currentCharacterObject.characterData.character_name ).replace( "%target", _ct.characterData.character_name )
												: "%caster cheers".replace( "%caster", Component.bugcraft.currentCharacterObject.characterData.character_name )
							}
					aux[ 0 ] = "emote";
					
				break;
				case "clap":
					
					// emote
					
					var _ct = Component.bugcraft.currentCharacterTarget, _cc = Component.bugcraft.currentCharacterObject;
					
					aux[ 1 ] = {
								emoteName: aux[ 0 ],
								target: _ct ? _ct.characterData.character_id : null,
								text: ( _ct != _cc )
												? "%caster claps for %target".replace( "%caster", Component.bugcraft.currentCharacterObject.characterData.character_name ).replace( "%target", _ct.characterData.character_name )
												: "%caster claps".replace( "%caster", Component.bugcraft.currentCharacterObject.characterData.character_name )
							}
					aux[ 0 ] = "emote";
					
				break;
				case "applaud":
					
					// emote
					
					var _ct = Component.bugcraft.currentCharacterTarget, _cc = Component.bugcraft.currentCharacterObject;
					
					aux[ 1 ] = {
								emoteName: aux[ 0 ],
								target: _ct ? _ct.characterData.character_id : null,
								text: ( _ct != _cc )
												? "%caster applauds %target".replace( "%caster", Component.bugcraft.currentCharacterObject.characterData.character_name ).replace( "%target", _ct.characterData.character_name )
												: "%caster applauds".replace( "%caster", Component.bugcraft.currentCharacterObject.characterData.character_name )
							}
					aux[ 0 ] = "emote";
					
				break;
				case "as":
				case "assist":
					
					// emote
					
					var _ct = Component.bugcraft.currentCharacterTarget, _cc = Component.bugcraft.currentCharacterObject;
					
					aux[ 1 ] = {
								emoteName: aux[ 0 ],
								target: _ct ? _ct.characterData.character_id : null,
								text: ( _ct != _cc )
												? "%caster asks for assistance with %target".replace( "%caster", Component.bugcraft.currentCharacterObject.characterData.character_name ).replace( "%target", _ct.characterData.character_name )
												: "%caster asks for assistance".replace( "%caster", Component.bugcraft.currentCharacterObject.characterData.character_name )
							}
					aux[ 0 ] = "emote";
					
				break;
				case "ch":
				case "charge":
					
					// emote
					
					var _ct = Component.bugcraft.currentCharacterTarget, _cc = Component.bugcraft.currentCharacterObject;
					
					aux[ 1 ] = {
								emoteName: aux[ 0 ],
								target: _ct ? _ct.characterData.character_id : null,
								text: ( _ct != _cc )
												? "%caster tells %target to charge".replace( "%caster", Component.bugcraft.currentCharacterObject.characterData.character_name ).replace( "%target", _ct.characterData.character_name )
												: "%caster tells everyone to charge".replace( "%caster", Component.bugcraft.currentCharacterObject.characterData.character_name )
							}
					aux[ 0 ] = "emote";
					
				break;
				case "attack":
				case "att":
				case "fire":
					
					// emote
					
					var _ct = Component.bugcraft.currentCharacterTarget, _cc = Component.bugcraft.currentCharacterObject;
					
					aux[ 1 ] = {
								emoteName: aux[ 0 ],
								target: _ct ? _ct.characterData.character_id : null,
								text: ( _ct != _cc )
												? "%caster tells %target to attack".replace( "%caster", Component.bugcraft.currentCharacterObject.characterData.character_name ).replace( "%target", _ct.characterData.character_name )
												: "%caster tells everyone to attack".replace( "%caster", Component.bugcraft.currentCharacterObject.characterData.character_name )
							}
					aux[ 0 ] = "emote";
					
				break;
				case "flee":
				case "retreat":
					
					// emote
					
					var _ct = Component.bugcraft.currentCharacterTarget, _cc = Component.bugcraft.currentCharacterObject;
					
					aux[ 1 ] = {
								emoteName: aux[ 0 ],
								target: _ct ? _ct.characterData.character_id : null,
								text: ( _ct != _cc )
												? "%caster tells %target to flee".replace( "%caster", Component.bugcraft.currentCharacterObject.characterData.character_name ).replace( "%target", _ct.characterData.character_name )
												: "%caster tells everyone to flee".replace( "%caster", Component.bugcraft.currentCharacterObject.characterData.character_name )
							}
					aux[ 0 ] = "emote";
					
				break;
				case "f":
				case "follow":
					
					// emote
					
					var _ct = Component.bugcraft.currentCharacterTarget, _cc = Component.bugcraft.currentCharacterObject;
					
					aux[ 1 ] = {
								emoteName: aux[ 0 ],
								target: _ct ? _ct.characterData.character_id : null,
								text: ( _ct != _cc )
												? "%caster asks %target to follow them".replace( "%caster", Component.bugcraft.currentCharacterObject.characterData.character_name ).replace( "%target", _ct.characterData.character_name )
												: "%caster asks everyone to follow them".replace( "%caster", Component.bugcraft.currentCharacterObject.characterData.character_name )
							}
					aux[ 0 ] = "emote";
					
				break;
				case "bye":
				case "goodbye":
					
					// emote
					
					var _ct = Component.bugcraft.currentCharacterTarget, _cc = Component.bugcraft.currentCharacterObject;
					
					aux[ 1 ] = {
								emoteName: aux[ 0 ],
								target: _ct ? _ct.characterData.character_id : null,
								text: ( _ct != _cc )
												? "%caster says goodbye to %target".replace( "%caster", Component.bugcraft.currentCharacterObject.characterData.character_name ).replace( "%target", _ct.characterData.character_name )
												: "%caster says goodbye".replace( "%caster", Component.bugcraft.currentCharacterObject.characterData.character_name )
							}
					aux[ 0 ] = "emote";
					
				break;
				case "heal":
					
					// emote
					
					var _ct = Component.bugcraft.currentCharacterTarget, _cc = Component.bugcraft.currentCharacterObject;
					
					aux[ 1 ] = {
								emoteName: aux[ 0 ],
								target: _ct ? _ct.characterData.character_id : null,
								text: ( _ct != _cc )
												? "%caster asks %target for healing".replace( "%caster", Component.bugcraft.currentCharacterObject.characterData.character_name ).replace( "%target", _ct.characterData.character_name )
												: "%caster asks everyone for healing".replace( "%caster", Component.bugcraft.currentCharacterObject.characterData.character_name )
							}
					aux[ 0 ] = "emote";
					
				break;
				case "hi":
				case "hello":
				case "greetings":
				case "greet":
					
					// emote
					
					var _ct = Component.bugcraft.currentCharacterTarget, _cc = Component.bugcraft.currentCharacterObject;
					
					aux[ 1 ] = {
								emoteName: aux[ 0 ],
								target: _ct ? _ct.characterData.character_id : null,
								text: ( _ct != _cc )
												? "%caster says hello to %target".replace( "%caster", Component.bugcraft.currentCharacterObject.characterData.character_name ).replace( "%target", _ct.characterData.character_name )
												: "%caster says hello to everyone.".replace( "%caster", Component.bugcraft.currentCharacterObject.characterData.character_name )
							}
					aux[ 0 ] = "emote";
					
				break;
				case "help":
				case "aid":
					
					// emote
					
					var _ct = Component.bugcraft.currentCharacterTarget, _cc = Component.bugcraft.currentCharacterObject;
					
					aux[ 1 ] = {
								emoteName: aux[ 0 ],
								target: _ct ? _ct.characterData.character_id : null,
								text: ( _ct != _cc )
												? "%caster asks %target for help".replace( "%caster", Component.bugcraft.currentCharacterObject.characterData.character_name ).replace( "%target", _ct.characterData.character_name )
												: "%caster asks everyone for help".replace( "%caster", Component.bugcraft.currentCharacterObject.characterData.character_name )
							}
					aux[ 0 ] = "emote";
					
				break;
				case "no":
					
					// emote
					
					var _ct = Component.bugcraft.currentCharacterTarget, _cc = Component.bugcraft.currentCharacterObject;
					
					aux[ 1 ] = {
								emoteName: aux[ 0 ],
								target: _ct ? _ct.characterData.character_id : null,
								text: ( _ct != _cc )
												? "%caster says no to %target.".replace( "%caster", Component.bugcraft.currentCharacterObject.characterData.character_name ).replace( "%target", _ct.characterData.character_name )
												: "%caster says no".replace( "%caster", Component.bugcraft.currentCharacterObject.characterData.character_name )
							}
					aux[ 0 ] = "emote";
					
				break;
				case "thank":
				case "thanks":
				case "thankyou":
					
					// emote
					
					var _ct = Component.bugcraft.currentCharacterTarget, _cc = Component.bugcraft.currentCharacterObject;
					
					aux[ 1 ] = {
								emoteName: aux[ 0 ],
								target: _ct ? _ct.characterData.character_id : null,
								text: ( _ct != _cc )
												? "%caster thanks %target".replace( "%caster", Component.bugcraft.currentCharacterObject.characterData.character_name ).replace( "%target", _ct.characterData.character_name )
												: "%caster thanks everyone".replace( "%caster", Component.bugcraft.currentCharacterObject.characterData.character_name )
							}
					aux[ 0 ] = "emote";
					
				break;
				case "wait":
					
					// emote
					
					var _ct = Component.bugcraft.currentCharacterTarget, _cc = Component.bugcraft.currentCharacterObject;
					
					aux[ 1 ] = {
								emoteName: aux[ 0 ],
								target: _ct ? _ct.characterData.character_id : null,
								text: ( _ct != _cc )
												? "%caster asks %target to wait".replace( "%caster", Component.bugcraft.currentCharacterObject.characterData.character_name ).replace( "%target", _ct.characterData.character_name )
												: "%caster asks everyone to wait".replace( "%caster", Component.bugcraft.currentCharacterObject.characterData.character_name )
							}
					aux[ 0 ] = "emote";
					
				break;
				case "yes":
				case "agree":
					
					// emote
					
					var _ct = Component.bugcraft.currentCharacterTarget, _cc = Component.bugcraft.currentCharacterObject;
					
					aux[ 1 ] = {
								emoteName: aux[ 0 ],
								target: _ct ? _ct.characterData.character_id : null,
								text: ( _ct != _cc )
												? "%caster agrees with %target".replace( "%caster", Component.bugcraft.currentCharacterObject.characterData.character_name ).replace( "%target", _ct.characterData.character_name )
												: "%caster agrees".replace( "%caster", Component.bugcraft.currentCharacterObject.characterData.character_name )
							}
					aux[ 0 ] = "emote";
					
				break;
				case "laugh":
				case "rofl":
				case "lol":
					
					// emote
					
					var _ct = Component.bugcraft.currentCharacterTarget, _cc = Component.bugcraft.currentCharacterObject;
					
					aux[ 1 ] = {
								emoteName: aux[ 0 ],
								target: _ct ? _ct.characterData.character_id : null,
								text: ( _ct != _cc )
												? "%caster laughs at %target".replace( "%caster", Component.bugcraft.currentCharacterObject.characterData.character_name ).replace( "%target", _ct.characterData.character_name )
												: "%caster laughs".replace( "%caster", Component.bugcraft.currentCharacterObject.characterData.character_name )
							}
					aux[ 0 ] = "emote";
					
				break;
				case "wave":
					
					// emote
					
					var _ct = Component.bugcraft.currentCharacterTarget, _cc = Component.bugcraft.currentCharacterObject;
					
					aux[ 1 ] = {
								emoteName: aux[ 0 ],
								target: _ct ? _ct.characterData.character_id : null,
								text: ( _ct != _cc )
												? "%caster waves at %target".replace( "%caster", Component.bugcraft.currentCharacterObject.characterData.character_name ).replace( "%target", _ct.characterData.character_name )
												: "%caster waves".replace( "%caster", Component.bugcraft.currentCharacterObject.characterData.character_name )
							}
					aux[ 0 ] = "emote";
					
				break;
				case "point":
					
					// emote
					
					var _ct = Component.bugcraft.currentCharacterTarget, _cc = Component.bugcraft.currentCharacterObject;
					
					aux[ 1 ] = {
								emoteName: aux[ 0 ],
								target: _ct ? _ct.characterData.character_id : null,
								text: ( _ct != _cc )
												? "%caster points at %target".replace( "%caster", Component.bugcraft.currentCharacterObject.characterData.character_name ).replace( "%target", _ct.characterData.character_name )
												: "%caster points at something".replace( "%caster", Component.bugcraft.currentCharacterObject.characterData.character_name )
							}
					aux[ 0 ] = "emote";
					
				break;
				case "hug":
					
					// emote
					
					var _ct = Component.bugcraft.currentCharacterTarget, _cc = Component.bugcraft.currentCharacterObject;
					
					aux[ 1 ] = {
								emoteName: aux[ 0 ],
								target: _ct ? _ct.characterData.character_id : null,
								text: ( _ct != _cc )
												? "%caster hugs %target".replace( "%caster", Component.bugcraft.currentCharacterObject.characterData.character_name ).replace( "%target", _ct.characterData.character_name )
												: "%caster hugs everyone".replace( "%caster", Component.bugcraft.currentCharacterObject.characterData.character_name )
							}
					aux[ 0 ] = "emote";
					
				break;
				case "dance":
					
					// emote
					
					var _ct = Component.bugcraft.currentCharacterTarget, _cc = Component.bugcraft.currentCharacterObject;
					
					aux[ 1 ] = {
								emoteName: aux[ 0 ],
								target: _ct ? _ct.characterData.character_id : null,
								text: ( _ct != _cc )
												? "%caster bursts into dance with %target!".replace( "%caster", Component.bugcraft.currentCharacterObject.characterData.character_name ).replace( "%target", _ct.characterData.character_name )
												: "%caster bursts into dance!".replace( "%caster", Component.bugcraft.currentCharacterObject.characterData.character_name )
							}
					aux[ 0 ] = "emote";
					
				break;
				case "flirt":
					
					// emote
					
					var _ct = Component.bugcraft.currentCharacterTarget, _cc = Component.bugcraft.currentCharacterObject;
					
					aux[ 1 ] = {
								emoteName: aux[ 0 ],
								target: _ct ? _ct.characterData.character_id : null,
								text: ( _ct != _cc )
												? "%caster flirts with %target".replace( "%caster", Component.bugcraft.currentCharacterObject.characterData.character_name ).replace( "%target", _ct.characterData.character_name )
												: "%caster flirts".replace( "%caster", Component.bugcraft.currentCharacterObject.characterData.character_name )
							}
					aux[ 0 ] = "emote";
					
				break;
				case "funny":
				case "joke":
					
					// emote
					
					var _ct = Component.bugcraft.currentCharacterTarget, _cc = Component.bugcraft.currentCharacterObject;
					
					aux[ 1 ] = {
								emoteName: aux[ 0 ],
								target: _ct ? _ct.characterData.character_id : null,
								text: ( _ct != _cc )
												? "%caster tells a joke to %target".replace( "%caster", Component.bugcraft.currentCharacterObject.characterData.character_name ).replace( "%target", _ct.characterData.character_name )
												: "%caster tells a joke".replace( "%caster", Component.bugcraft.currentCharacterObject.characterData.character_name )
							}
					aux[ 0 ] = "emote";
					
				break;
				case "love":
					
					// emote
					
					var _ct = Component.bugcraft.currentCharacterTarget, _cc = Component.bugcraft.currentCharacterObject;
					
					aux[ 1 ] = {
								emoteName: aux[ 0 ],
								target: _ct ? _ct.characterData.character_id : null,
								text: ( _ct != _cc )
												? "%caster loves %target".replace( "%caster", Component.bugcraft.currentCharacterObject.characterData.character_name ).replace( "%target", _ct.characterData.character_name )
												: "%caster loves everyone".replace( "%caster", Component.bugcraft.currentCharacterObject.characterData.character_name )
							}
					aux[ 0 ] = "emote";
					
				break;
				case "slap":
					
					// emote
					
					var _ct = Component.bugcraft.currentCharacterTarget, _cc = Component.bugcraft.currentCharacterObject;
					
					aux[ 1 ] = {
								emoteName: aux[ 0 ],
								target: _ct ? _ct.characterData.character_id : null,
								text: ( _ct != _cc )
												? "%caster slaps %target. Oh, to the face!".replace( "%caster", Component.bugcraft.currentCharacterObject.characterData.character_name ).replace( "%target", _ct.characterData.character_name )
												: "%caster receives a slap from nowhere. Looks self inflicted.".replace( "%caster", Component.bugcraft.currentCharacterObject.characterData.character_name )
							}
					aux[ 0 ] = "emote";
					
				break;
				case "salute":
					
					// emote
					
					var _ct = Component.bugcraft.currentCharacterTarget, _cc = Component.bugcraft.currentCharacterObject;
					
					aux[ 1 ] = {
								emoteName: aux[ 0 ],
								target: _ct ? _ct.characterData.character_id : null,
								text: ( _ct != _cc )
												? "%caster salutes %target with respect!".replace( "%caster", Component.bugcraft.currentCharacterObject.characterData.character_name ).replace( "%target", _ct.characterData.character_name )
												: "%caster salutes".replace( "%caster", Component.bugcraft.currentCharacterObject.characterData.character_name )
							}
					aux[ 0 ] = "emote";
					
				break;
				case "join":
				case "leave":
					
					var cn = aux[1].split(' ')[0].toLowerCase();																		
					if( cn == "say" )
					{
						aux[1] = {
									channelName: cn,
									channelType: "say"
								};
					}
					else
					{
						if( chatChannelsInstanceNames.indexOf( cn ) >= 0 )
						{
							aux[1] = {
										channelName: cn,
										channelType: "instance"
									};
						}
						else
						{
							aux[1] = {
										channelName: cn,
										channelType: "global"
									};
						}
					}
					
				break;
				default:
					
					//check if first parameter is a channel where the character is already on
					if( aux[0].toLowerCase() in chatChannelNames )
					{
						aux[1] = {
									channelName: aux[0].toLowerCase(),
									channelType: chatChannelNames[ aux[0].toLowerCase() ],
									message: _addSenderToMessage( _createMessageToSend( aux[1] ) )
								};
						aux[0] = "changeChannel";
					}
					
					//check if first parameter is a character this character already whisperd to
					if( chatWhisperNames.indexOf( aux[0].toLowerCase() ) >= 0 )
					{
						aux[1] = {
									destCharacterName: aux[0].toLowerCase(),
									message: _addSenderToMessage( _createMessageToSend( aux[1] ) )
								};
								
						aux[0] = "whisper";
					}
			}
			
			Application.websocket.socket.send( JSON.stringify({
																		c: "chatCommand",
																		command: aux[0],
																		parameters: aux[1]
																	}) );
		}
		
		// input area key typing listen
		Application.event.add( chatInputObject, "keypress", function( e )
		{
			if( e.which != 13 )
			{
				// enter not pressed yet
				
				return;
			}
			
			if( chatInputObject.value.length == 0 )
			{
				// no message to send
				
				return;
			}
			
			_sendMessageToServer( chatInputObject.value );
			
			// reset input object
			chatInputObject.value = "";
			
			// reset the internal structure buffer
			chatInputObjectStructBuffer = {};
		});
		
		Application.event.add( chatInputObject, "keydown",  function( e )
		{
			// prevent UI events (like showing windows or casting buffs) to happen
			
			e.cancelBubble = true;
		});
		
		Application.event.add( chatInputObject, "keyup", function( e )
		{
			// prevent UI events (like showing windows or casting buffs) to happen
			
			e.cancelBubble = true;
		});
		
		// "up" button press
		Application.event.add( chatUpButtonObject, "mousedown", function( e )
		{
			e.cancelBubble = true;	// prevent UI events (like showing windows or casting buffs) to happen
			
			if( chatFloatingMessagesContainer.offsetTop >= 0 )
			{
				return;
			}
			
			chatFloatingMessagesContainer.style.top = ( chatFloatingMessagesContainer.offsetTop + 10 ) + "px";
		});
		
		// "down" button press
		Application.event.add( chatDownButtonObject, "mousedown", function( e )
		{
			e.cancelBubble = true;	// prevent UI events (like showing windows or casting buffs) to happen
			
			if( Math.abs( chatFloatingMessagesContainer.offsetTop ) + chatMessagesContainerObject.offsetHeight >= chatFloatingMessagesContainer.offsetHeight )
			{
				return;
			}
			
			chatFloatingMessagesContainer.style.top = ( chatFloatingMessagesContainer.offsetTop - 10 ) + "px";
		});
		
		//
		// Focus rules
		//
		
		Application.event.add( chatInputObject, "focus", function( e )
		{
			clearTimeout( _periodicMousePositionCheckFunctionTimeout );
			
			// fade in the box
			_fadeFunction( 0.05, 0.7, true );
		});
		
		Application.event.add( chatInputObject, "blur", function( e )
		{
			clearTimeout( _periodicMousePositionCheckFunctionTimeout );	// prevent duplicate calls
			_periodicMousePositionCheckFunction();
		});
		
		// ensure easy focus for the chat area
		Application.event.add( chatWindowContainerObject, "click", function( e )
		{
			chatInputObject.focus();
		});
		
		// check the mouse position
		Application.event.add( document.body, "mousemove", function( e )
		{
			// track mouse movement
			
			_mouseX = e.x;
			_mouseY = e.y;
		});
		
		var _fadeFunction = function( increment, target, gtSign )
		{
			if( ( ( gtSign ) ? ( _currentOpacity + increment > target ) : ( _currentOpacity + increment < target ) ) )
			{
				return;
			}
			
			_currentOpacity += increment;
			
			// alter the background area's opacity
			chatBackgroundContainerObject.style.opacity = _currentOpacity;
			chatBackgroundContainerObject.style.mozOpacity = _currentOpacity;
			
			chatInputObject.style.opacity = ( _currentOpacity + 0.5 );
			chatInputObject.style.mozOpacity = ( _currentOpacity + 0.5 );
			
			_fadeTimeout = setTimeout( function() { _fadeFunction( increment, target, gtSign) }, 50 );
		}
		
		var _periodicMousePositionCheckFunction = function()
		{
			clearTimeout( _fadeTimeout );
			
			if(
				_mouseX < _chatWindowContainerPosition.left
				|| _mouseY < _chatWindowContainerPosition.top
				|| _mouseX > _chatWindowContainerPosition.left + chatWindowContainerObject.offsetWidth
				|| _mouseY > _chatWindowContainerPosition.top + chatWindowContainerObject.offsetHeight
			)
			{
				_fadeFunction( -0.05, 0, false );
				
				_periodicMousePositionCheckFunctionTimeout = setTimeout( _periodicMousePositionCheckFunction, 500 );
				
				return;
			}
			
			// over the chat window
			
			_fadeFunction( 0.05, 0.7, true );
			
			_periodicMousePositionCheckFunctionTimeout = setTimeout( _periodicMousePositionCheckFunction, 500 );
		}
		
		// start the mouseover checks a bit later
		setTimeout( function()
		{
			_chatWindowContainerPosition = Application.util.style.getPos( chatContainerObject );
			
			_periodicMousePositionCheckFunction();
		}, 2500 );
		
		//
		// Set the initial design
		//
		
		// stretch the chat window to the max extent possible
		chatWindowContainerObject.style.width = _chatAreaWidth + "px";
		chatBackgroundContainerObject.style.width = _chatAreaWidth + "px";
		
		if( _chatAreaWidth < 100 )
		{
			// unusable area due to the size. make it disappear to prevent a bad design
			
			chatContainerObject.className = "hidden";
		}
		
		//
		// attach events to each emote button
		//
		
		var _attachEmoteButtonEvents = function( emoteObject )
		{
			emoteObject.onclick = function( e )
			{
				_sendMessageToServer( "/" + emoteObject.getAttribute( "emoteCommand" ) );	// concatenate "/" to ensure that it is treated as a command
				
				chatEmoteButtonsContainerObject.className = "hidden";
			}
		}
		
		for(var i=1;i<=30;i++)
		{
			var emoteButtonObject = document.getElementById( args.id + '_chatEmote' + i );
			
			_attachEmoteButtonEvents( emoteButtonObject );
		}
		
		Application.event.add( chatEmotesButtonObject, "mouseover", function( e )
		{
			chatEmoteButtonsContainerObject.className = "emotesContainer";
		});
		
		Application.event.add( chatEmotesButtonObject, "mouseout", function( e )
		{
			chatEmoteButtonsContainerObject.className = "hidden";
		});
		
		//get instance chat channel names for future referance
		Application.websocket.socket.send( '{"c":"chatGetInstanceChannelNames"}' );
	}
	
	Component.bugcraft.pageChatInsertObjectInInput = function( serializedObject )
	{
		
	}
	
	Component.bugcraft.pageChatFocusOnTextfield = function( textToAdd )
	{
		
	}
	
	Component.bugcraft.pageChatInsertMessage = function( messageType, messageText )
	{
		
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.pageLoader.js
*/


	/*
		Page Loader
	*/
	
	Component.bugcraft.pageLoader = {
		
		quotes: [ "<p><strong>And I Will Strike Down Upon Thee With Great Vengeance And Furious Anger!</strong></p><p>Verdantus the Pathmaster, The Stalker's Creed, The Scrolls of Ur-Chitinn</p>" ],
		
		loaderPageObject: null,
		quoteObject: null,
		progressBarObject: null,
		
		_currentProgress: 0,
		_onePercent: 0,
		
		init: function( args )
		{
			this.loaderPageObject = document.getElementById( args.id + '_battlePageLoader' );
			this.quoteObject = document.getElementById( args.id + '_battlePageLoaderQuote' );
			this.progressBarObject = document.getElementById( args.id + '_battlePageLoaderProgressBar' );
			
			this.setLoading();
			
			this._onePercent = ( this.progressBarObject.parentNode.offsetWidth - parseInt( Application.util.style.getCurrent( this.progressBarObject, "margin-left" ).replace( "px", "") ) * 1.5 ) / 100;
			
			// set the random quote
			this.setQuote( this.quotes[ Math.floor( Math.random() * this.quotes.length ) ] );
		},
		
		setQuote: function( quoteText )
		{
			this.quoteObject.innerHTML = quoteText;
		},
		
		setConnecting: function()
		{
			this.loaderPageObject.className = "loaderPageConnect";
		},
		
		setLoading: function()
		{
			this.loaderPageObject.className = "loaderPage";
		},
		
		setDisconnected: function()
		{
			//this.loaderPageObject.className = "loaderPageDisconnected";
		},
		
		addPercentage: function( percent )
		{
			this._currentProgress += percent;
			
			this.progressBarObject.style.width = ( this._onePercent * this._currentProgress ) + "px";
			
			if( this._currentProgress < 100 )
			{
				return;
			}
			
			this.hide();
		},
		
		hide: function()
		{
			this.loaderPageObject.className = "hidden";
		}
		
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.pageLookingForBattleground.js
*/


	/*
		Market page
	*/
	
	Component.bugcraft.pageLookingForBattleground = function( args )
	{
		var lookingForBattlegroundPageObject = document.getElementById( args.id + '_lookingForBattlegroundPage' ),
			leaveBattlegroundPopup = Component.bugcraft.notificationPopup._popups.battlegroundLeave;
		
		if( typeof Component.bugcraft.initializedPages.lookingForBattleground != "undefined" )
		{
			Component.bugcraft.initializedPages.lookingForBattleground = !Component.bugcraft.initializedPages.lookingForBattleground;
			
			if( !Component.bugcraft.initializedPages.lookingForBattleground )
			{
				Component.bugcraft.sound.ui.playEvent( "window", "bookOpen" );
			}
			
			if( Map.mapRules != "battleground" )
			{
				// inside a city probably. definitely not a battleground
				
				lookingForBattlegroundPageObject.className = Component.bugcraft.initializedPages.lookingForBattleground ? "lookingForBattleground" : "hidden";
			}
			else if( leaveBattlegroundPopup )
			{
				leaveBattlegroundPopup.isVisible ? leaveBattlegroundPopup.hide() : leaveBattlegroundPopup.show();
			}
			
			return;
		}
		
		Component.bugcraft.initializedPages.lookingForBattleground = true;
		
		//
		// Battleground listing
		//
		
		var battlegroundsList = {}, queuedBattlegroundsNumber = 0, _t = null, lO = Component.bugcraft._layoutObjects,
			battlegroundCloseButtonObject = document.getElementById( args.id + "_battlegroundsCloseButton" ),
			battlegroundListItemsObject = document.getElementById( args.id + "_battlegroundsListItems" ),
			battlegroundListItemsContainerObject = document.getElementById( args.id + "_battlegroundsListItemsContainer" ),
			battlegroundSpoilWinGloryObject = document.getElementById( args.id + "_battlegroundSpoilWinGlory" ),
			battlegroundSpoilWinPolenObject = document.getElementById( args.id + "_battlegroundSpoilWinPolen" ),
			battlegroundSpoilLossGloryObject = document.getElementById( args.id + "_battlegroundSpoilLossGlory" ),
			battlegroundSpoilLossPolenObject = document.getElementById( args.id + "_battlegroundSpoilLossPolen" ),
			battlegroundNameObject = document.getElementById( args.id + "_battlegroundName" ),
			battlegroundDescriptionObject = document.getElementById( args.id + "_battlegroundDescription" ),
			battlegroundListControlUpObject = document.getElementById( args.id + "_battlegroundsListControlUp" ),
			battlegroundListControlDownObject = document.getElementById( args.id + "_battlegroundsListControlDown" ),
			battlegroundEnqueueObject = document.getElementById( args.id + "_battlegroundEnqueue" );
		
		// "close" button event
		Application.event.add( battlegroundCloseButtonObject, "click",	function()
		{
			Component.bugcraft.sound.ui.playEvent( "window", "buttonClose" );
			
			Component.bugcraft.initializedPages.lookingForBattleground = !Component.bugcraft.initializedPages.lookingForBattleground;
			
			lookingForBattlegroundPageObject.className = 'hidden';
		});
		
		// mouse wheel scroll
		battlegroundListItemsContainerObject.onmousewheel = function( e )
		{
			var mouseDelta = e.wheelDelta / 10;
			
			if(
				( mouseDelta > 0 && battlegroundListItemsObject.offsetTop + mouseDelta <= 0 )
				|| ( mouseDelta < 0 && battlegroundListItemsObject.offsetTop + mouseDelta > -battlegroundListItemsObject.offsetHeight + battlegroundListItemsContainerObject.offsetHeight )
			)
			{
				battlegroundListItemsObject.style.top = ( battlegroundListItemsObject.offsetTop + mouseDelta ) + "px";
			}
			else
			{
				if( mouseDelta > 0 )
				{
					battlegroundListItemsObject.style.top = "0px";
				}
				else
				{
					battlegroundListItemsObject.style.top = ( -battlegroundListItemsObject.offsetHeight + battlegroundListItemsContainerObject.offsetHeight ) + "px";
				}
			}
			
			return false;
		}
		
		// "up" button event
		Application.event.add( battlegroundListControlUpObject, "mousedown", function()
		{
			var _scrollTimeout = null;
			
			var _scrollFunction = function()
			{
				if( battlegroundListItemsObject.offsetTop + 6 <= 0 )
				{
					battlegroundListItemsObject.style.top = ( battlegroundListItemsObject.offsetTop + 6 ) + "px";
				}
				else
				{
					battlegroundListItemsObject.style.top = "0px";
				}
				
				_scrollTimeout = setTimeout( _scrollFunction, 100 );
			}
			
			var _scrollRemove = function()
			{
				clearTimeout( _scrollTimeout );
				
				Application.event.remove( document.body, "mouseup", _scrollRemove );
			};
			
			_scrollFunction();
			
			Application.event.add( document.body, "mouseup", _scrollRemove );
		});
		
		// "down" button event
		Application.event.add( battlegroundListControlDownObject, "mousedown", function()
		{
			var _scrollTimeout = null;
			
			var _scrollFunction = function()
			{
				if( battlegroundListItemsObject.offsetTop - 6 > -battlegroundListItemsObject.offsetHeight + battlegroundListItemsContainerObject.offsetHeight )
				{
					battlegroundListItemsObject.style.top = ( battlegroundListItemsObject.offsetTop - 6 ) + "px";
				}
				else
				{
					battlegroundListItemsObject.style.top = ( -battlegroundListItemsObject.offsetHeight + battlegroundListItemsContainerObject.offsetHeight ) + "px";
				}
				
				_scrollTimeout = setTimeout( _scrollFunction, 100 );
			}
			
			var _scrollRemove = function()
			{
				clearTimeout( _scrollTimeout );
				
				Application.event.remove( document.body, "mouseup", _scrollRemove );
			};
			
			_scrollFunction();
			
			Application.event.add( document.body, "mouseup", _scrollRemove );
		});
		
		/*
		// leave battleground button
		Application.event.add( battlegroundLeaveObject, "click",	function()
		{
			
		});
		
		Application.event.add( battlegroundCloseButtonLeaveObject, "click",	function()
		{
			Component.bugcraft.initializedPages.lookingForBattleground = false;
			lookingForBattlegroundPageObject.className = 'hidden';
		});
		*/
		
		var _stopActionBarAnimation = function()
		{
			clearTimeout( _t );
			
			lO.bottomBarMenuItem7OverlayObject.className = "hidden";
		}
		
		var instancePopupObject = {};
		Application.websocket.handlers.inviteToInstance = function( jsonEl, ws )
		{
			Application.websocket.handlers.queueInvitationDeny = function( jsonEl, ws )
			{
				if( instancePopupObject[ jsonEl.zp_id ] )
				{
					instancePopupObject[ jsonEl.zp_id ].remove();
				}
				
				queuedBattlegroundsNumber--;
				
				if( queuedBattlegroundsNumber <= 0 )
				{
					_stopActionBarAnimation();
				}
			};
			
			// show the popup to the user
			instancePopupObject[ jsonEl.zp_id ] = new Component.bugcraft.notificationPopup.inviteToInstance({
																												id: args.id,
																												zoneData: battlegroundsList[ jsonEl.zp_id ],
																												t: jsonEl.t,
																												onAccept: function()
																												{
																													Application.websocket.socket.send( '{"c":"queueInvitationAccept","bid":' + jsonEl.zp_id + '}' );
																												},
																												onDeny: function()
																												{
																													Application.websocket.socket.send( '{"c":"queueInvitationDeny","bid":' + jsonEl.zp_id + '}' );
																												}
																											});
		}
		
		// battlegrounds list
		Application.websocket.handlers.queueBattlegroundsList = function( jsonEl, ws )
		{
			// create individual battleground items
			var _createBattlegroundItem = function( _b, isSelected )
			{
				battlegroundsList[ _b.zp_id ] = _b;
				
				var _showDetails = function()
				{
					for(var i=0;i<lines.length;i++)
					{
						if( lines[ i ] == battlegroundDivObject )
						{
							continue;
						}
						
						lines[ i ].className = "battlegroundListItem";
					}
					
					battlegroundDivObject.className = "battlegroundListItemSelected";
					
					battlegroundSpoilWinGloryObject.innerHTML = _b.zp_reward_win_xp;
					battlegroundSpoilWinPolenObject.innerHTML = _b.zp_reward_win_polen;
					battlegroundSpoilLossGloryObject.innerHTML = _b.zp_reward_loss_xp;
					battlegroundSpoilLossPolenObject.innerHTML = _b.zp_reward_loss_polen;
					battlegroundNameObject.innerHTML = _b.zp_name;
					battlegroundDescriptionObject.innerHTML = _b.zp_description;
					
					battlegroundEnqueueObject.onclick = function()
					{
						Component.bugcraft.sound.ui.playEvent( "window", "buttonClick" );
						
						if( _b.zp_id == 0 )
						{
							Application.websocket.socket.send( '{"c":"queueJoinRandom"}' );
						}
						else
						{
							Application.websocket.socket.send( '{"c":"queueJoinSpecific", "bid":' + _b.zp_id + '}' );
						}
					}
				}
				
				var battlegroundDivObject = document.createElement("div");
				battlegroundDivObject.className = "battlegroundListItem";
				battlegroundDivObject.innerHTML = _b.zp_name;
				
				battlegroundListItemsObject.appendChild( battlegroundDivObject );
				
				Application.event.add( battlegroundDivObject, "click", _showDetails );
				
				if( isSelected )
				{
					_showDetails();
				}
				
				return battlegroundDivObject;
			}
			
			var lines = [];
			
			for(var i=0;i<jsonEl.b.length;i++)
			{
				lines.push( _createBattlegroundItem( jsonEl.b[ i ], i == 0 ) );
			}
		}
		
		var popupObject = new Component.bugcraft.notificationPopup.yesNoPopup({
																						id: args.id,
																						name: "battlegroundLeave",
																						questionText: "Do you want to leave the battleground?",
																						acceptText: "Leave now",
																						denyText: "Continue playing",
																						onAccept: function()
																						{
																							Application.websocket.socket.send( '{"c":"battlegroundLeave"}' );
																						},
																						onDeny: function()
																						{
																							popupObject.hide();
																						}
																					});
		
		if( Map.mapRules != "battleground" )
		{
			popupObject.hide();
			lookingForBattlegroundPageObject.className = "lookingForBattleground";
			
			Component.bugcraft.scaleWindow( lookingForBattlegroundPageObject );
			
			Application.websocket.socket.send( '{"c":"queueBattlegroundsList"}' );
		}
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.pageLootChoose.js
*/

	
	/*
		Profile page
	*/
	
	Component.bugcraft.pageLootChoose = function( args, transactionData )
	{
		Component.bugcraft.initializedPages.pageLootChoose = true;
		
		var _ccd = Component.bugcraft.currentCharacterObject.characterData,
			lootChoosePageObject = document.getElementById( args.id + '_lootChoosePage' ),
			lootChooseCloseButtonObject = document.getElementById( args.id + '_lootChooseCloseButton' ),
			lootChooseLootContainer = document.getElementById( args.id + '_lootChooseLootContainer' ),
			_autoCloseDistanceCheckTimeout = null;
		
		lootChoosePageObject.className = "lootChoose";
		lootChooseLootContainer.innerHTML = '';
		
		Component.bugcraft.sound.ui.playEvent( "window", "backPack" );
		
		// Distance check
		
		var _autoCloseDistanceCheck = function()
		{
			if( _ccd.character_distance_to_target < 120 )
			{
				_autoCloseDistanceCheckTimeout = setTimeout( _autoCloseDistanceCheck, 150 );
				
				return;
			}
			
			// moved too far away from the target
			
			_hideWindow();
		}
		
		//
		// Set the events
		//
		
		var _hideWindow = function()
		{
			Component.bugcraft.sound.ui.playEvent( "window", "buttonClose" );
			
			Component.bugcraft.initializedPages.pageLootChoose = !Component.bugcraft.initializedPages.pageLootChoose;
			
			lootChoosePageObject.className = 'hidden';
		}
		
		// "close" button event
		lootChooseCloseButtonObject.onclick = _hideWindow;
		
		// receive updates about a slot which has been emptied
		Application.websocket.handlers.lootGrabSlotEmpty = function( jsonEl, ws )
		{
			if( transactionData.cid != jsonEl.tid )
			{
				// received an update for another loot bag i'm eligible for
				
				return;
			}
			
			var _s = _slots[ jsonEl.p ];
			
			_s.isFull = false;
			_s.slotContainer.className = "slotEmpty";
			_s._toolTip.disable();
			
			for(var i in _slots )
			{
				if( typeof _slots[ i ] != "object" || _slots[ i ].isFull == false )
				{
					continue;
				}
				
				// slot is full
				return;
			}
			
			// all slots are empty
			Component.bugcraft._characterData[ transactionData.cid ].removeVisualEffect( spellEffects.lootableComplete );
		}
		
		
				
		//
		//	Create the items
		//
		
		var _createItem = function( container, _itemData, itemOrder )
		{
			this.slotContainer = document.createElement("div");
			
			if( _itemData == null )
			{
				// empty slot
				
				this.isFull = false;
				
				this.slotContainer.className = "slotEmpty";
				container.appendChild( this.slotContainer );
				
				return;
			}
			
			this.isFull = true;
			this.slotContainer.innerHTML = ( '<div class="slotItemIcon" style="background-image:url(\'' + Application.configuration.cdn.location[ 0 ].url + '/item_skins/' + _itemData.loot.loot_id + '/' + _itemData.loot.loot_id + '_48x48.png\')">' +
													( ( _itemData.amount > 1 ) ? "<div class='slotItemAmount' title='" + _itemData.amount + " items'>" + _itemData.amount + "</div>" : "" ) +
													'</div><div class="slotItemDescription"><div class="slotItemName' + _itemData.loot.loot_rarity + '">' + _itemData.loot.loot_name + '</div></div>' );
			
			// set the tooltip
			this._toolTip = new Component.bugcraft.tooltip.item( this.slotContainer, _itemData.loot );
			this._toolTip.enable();
			
			// decide on the layout for the slot
			if(
				_itemData.loot.loot_level_required <= _ccd.character_level
				&& ( _itemData.loot.loot_armor_type == null || ( _itemData.loot.loot_armor_type != null && _ccd.character_armor_accepted.toString().split( "," ).indexOf( _itemData.loot.loot_armor_type ) > -1 ) )
			)
			{
				this.slotContainer.className = "slotFull";
			}
			else
			{
				this.slotContainer.className = "slotDisabled";
			}
			
			this.slotContainer.onclick = function( e )
			{
				if( e.shiftKey )
				{
					// link object in chat
					
					Component.bugcraft.pageChatInsertObjectInInput({
																					objectName: _itemData.loot.loot_name,
																					objectType: "item" + _itemData.loot.loot_rarity,
																					objectID: _itemData.loot.loot_id
																				});
					
					return false;
				}
				
				Application.websocket.handlers.lootGrab = function( jsonEl, ws )
				{
					if( jsonEl.r == 303 )
					{
						Component.bugcraft.messages.addError( "The slot is empty" );
						
						return;
					}
					
					if( jsonEl.r == 304 )
					{
						Component.bugcraft.sound.characters.playMainVoice( "fullBag" );
						
						Component.bugcraft.messages.addError( "The bag is full" );
						
						return;
					}
					
					if( jsonEl.r != 200 )
					{
						Application.debug.addError( "Loot grab error: " + jsonEl.r );
						
						return;
					}
					
					// loot grabbed successfully
					
					
				}
				
				Application.websocket.socket.send( '{"c":"lootGrab","cid":' + transactionData.cid + ',"itemPosition":' + itemOrder + '}' );
			}
			
			container.appendChild( this.slotContainer );
		}
		
		
		if( transactionData.lootBagHide )
		{
			_hideWindow();
			return;
		}
		
		_autoCloseDistanceCheck();
		
		// enumerate items
		var _slots = [],
				_cid = Component.bugcraft.currentCharacterObject.characterData.character_id;
		
		for(var i in transactionData.bagData)
		{
			var _td = transactionData.bagData[ i ];
			
			if( typeof _td != "object" )
			{
				continue;
			}
			
			if(
				_td == null
				|| _td.lootableBy.indexOf( _cid ) == -1
			)
			{
				// not eligible for this loot
				
				continue;
			}
			
			_slots[ i ] = new _createItem( lootChooseLootContainer, _td, i );
		}
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.pageMarket.js
*/


	/*
		Market page
	*/
	
	Component.bugcraft.pageMarket = function( args )
	{
		var marketPageObject = document.getElementById( args.id + '_marketPage' );
		
		if( typeof Component.bugcraft.initializedPages.market != "undefined" )
		{
			Component.bugcraft.initializedPages.market = !Component.bugcraft.initializedPages.market;
			marketPageObject.className = Component.bugcraft.initializedPages.market ? "middle" : "hidden";
			
			return;
		}
		
		Component.bugcraft.initializedPages.market = true;
		marketPageObject.className = "middle";
		
		this.populateInventory({
								id: args.id,
								path: "/c/bugcraft/getInventory/",
								extraArea:["placeHolder"]
								
							});
		
		//Create auction
		var buttonObject = document.getElementById( args.id + "_createAuction" );
	
		Application.event.add( buttonObject, "click", function(e)
							{
								var auctionObject = document.getElementById( args.id + "_placeHolder" );
								var startingPriceObject = document.getElementById( args.id + "_startingPrice" );
								var buyoutPriceObject = document.getElementById( args.id + "_buyoutPrice" );
								var durationValue = 0;
								
								var _radioObject1 = document.getElementById( args.id + "_duration_1" );
								var _radioObject2 = document.getElementById( args.id + "_duration_2" );
								var _radioObject3 = document.getElementById( args.id + "_duration_3" );
								
								if( _radioObject1.checked )
								{
									durationValue = _radioObject1.value;
								}
								else if( _radioObject2.checked )
								{
									durationValue = _radioObject2.value;
								}
								else if( _radioObject3.checked )
								{
									durationValue = _radioObject3.value;
								}
								
								
								if( startingPriceObject.value == "" || buyoutPriceObject.value == "" ||  auctionObject.attachedLootObject == null || durationValue == 0 )
								{
									Application.debug.addError( "Insuficient data" );
									return false;
								}
								
								Application.debug.addError("Processing data to server");
								
								Application.connect.ajax({
											url:"component.php",
											vars:
											{
												component: "bugcraft",
												event: "createAuction",
												bagOrder: auctionObject.attachedLootObject.ci_slot_order,
												start_price: startingPriceObject.value,
												buyout_price: buyoutPriceObject.value,
												duration: durationValue
												
											},
											successFunction: function( jsonEl )
													{
														
														Application.debug.addError( "_x" + jsonEl.content["@attributes"].databaseResult );
														auctionObject.removeLoot();
													}
											
											
											});
		
								
								
								
								
								
								
								
							});
		
		
	}
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.pageProfile.js
*/

	
	/*
		Profile page
	*/
	
	Component.bugcraft.pageProfile = function( args )
	{
		var profilePageObject = document.getElementById( args.id + '_profilePage' );
		
		// ensure this code is run only once
		if( typeof Component.bugcraft.initializedPages.pageProfile != "undefined" )
		{
			Component.bugcraft.initializedPages.pageProfile = !Component.bugcraft.initializedPages.pageProfile;
			profilePageObject.className = ( profilePageObject.className == "hidden" ) ? "pageProfile" : "hidden";
			
			if( !Component.bugcraft.initializedPages.pageProfile )
			{
				Component.bugcraft.scaleWindow( profilePageObject );
				Component.bugcraft.sound.ui.playEvent( "window", "characterProfile" );
			}
			else
			{
				Component.bugcraft.sound.ui.playEvent( "window", "buttonClose" );
			}
			
			Component.bugcraft.pageProfileSetAttributes();
			
			return;
		}
		
		if( !args.hidden )
		{
			profilePageObject.className = "pageProfile";
			Component.bugcraft.sound.ui.playEvent( "window", "characterProfile" );
		}
		
		Component.bugcraft.initializedPages.pageProfile = true;
		
		//
		// Define internal variables
		//
		
		var _ccd = Component.bugcraft.currentCharacterObject.characterData, _inventorySlots = [], _equipedItemsLevelSum = 0, _equipedItems = 0,
			profileCloseButtonObject = document.getElementById( args.id + '_profileCloseButton' ),
			profileAvatarObject = document.getElementById( args.id + '_profileAvatar' ),
			attributeHappinessObject = document.getElementById( args.id + '_profileAttribute_Happiness' ),
			attributeHitPointsObject = document.getElementById( args.id + '_profileAttribute_HitPoints' ),
			attributeStrengthObject = document.getElementById( args.id + '_profileAttribute_Strength' ),
			attributePotencyObject = document.getElementById( args.id + '_profileAttribute_Potency' ),
			attributeAverageItemLevelObject = document.getElementById( args.id + '_profileAttribute_AverageItemLevel' ),
			attributeAttackObject = document.getElementById( args.id + '_profileAttribute_Attack' ),
			attributeMainHandWeaponDamageContainerObject = document.getElementById( args.id + '_profileAttribute_OffHandWeaponDamageContainer' ),
			attributeMainHandWeaponDamageObject = document.getElementById( args.id + '_profileAttribute_MainHandWeaponDamage' ),
			attributeOffHandWeaponDamageObject = document.getElementById( args.id + '_profileAttribute_OffHandWeaponDamage' ),
			attributeHitChanceObject = document.getElementById( args.id + '_profileAttribute_HitChance' ),
			attributeCritChanceObject = document.getElementById( args.id + '_profileAttribute_CritChance' ),
			attributeArmorObject = document.getElementById( args.id + '_profileAttribute_Armor' ),
			attributeDefenseObject = document.getElementById( args.id + '_profileAttribute_Defense' ),
			attributeResistanceObject = document.getElementById( args.id + '_profileAttribute_Resistance' ),
			profileCharacterNameObject = document.getElementById( args.id + '_profileCharacterName' );
		
		// generic slot
		var slotObject = function( slotData )
		{
			var self = this, _tooltipObject = null;
			
			this.slotHTMLObject = document.getElementById( args.id + "_inventoryItem_" + slotData.ci_slot_bag + "_" + slotData.ci_slot_order );
			//this.position = Application.util.style.getPos( self.slotHTMLObject );
			this.bag_slot_number = slotData.ci_slot_bag;
			this.bag_slot_order = slotData.ci_slot_order;
			this.bag_slot_accept = slotData.ci_slot_accept_binary;
			this.attachedLootObject = null;
			this.lastAttachedLootObject = null;
			this.classSelected = self.slotHTMLObject.getAttribute("classSelected");
			this.classNotSelected = self.slotHTMLObject.getAttribute("classNotSelected");
			this.classDisabled = self.slotHTMLObject.getAttribute("classDisabled");
			this.slotType = self.slotHTMLObject.getAttribute("slotType");
			this.isEquipable = true;
			
			// Item drag definer
			var _dragFunction = function( e )
			{
				var e  = e ? e : window.event, objectImageClone = document.createElement("img");
				
				// create the object that will be seen as being dragged
				objectImageClone.src = self.slotHTMLObject.childNodes[0].src;
				objectImageClone.className = "inventoryDraggedItem";
				
				document.body.appendChild( objectImageClone );
				
				objectImageClone.style.left = ( ( e.pageX ? e.pageX : e.clientX ) + ( ( window.pageXOffset && Application.util.browserInformation.browser != "Firefox" ) ? window.pageXOffset : ( document.body.scrollLeft - document.body.clientLeft ) ) ) + "px";
				objectImageClone.style.top = ( ( e.pageY ? e.pageY : e.clientY ) + ( ( window.pageYOffset && Application.util.browserInformation.browser != "Firefox" ) ? window.pageYOffset : ( document.body.scrollTop - document.body.clientTop ) ) ) + "px";
				
				// recalculate the slots positions, in case the window has been dragged in the mean time
				for(var i=0;i<_inventorySlots.length;i++)
				{
					var _is = _inventorySlots[ i ];
					
					_is.position = Application.util.style.getPos( _is.slotHTMLObject );
				}
				
				// initial placement function
				var _positioningFunction = function()
				{
					if( objectImageClone.offsetWidth == 0 || objectImageClone.offsetHeight == 0 )
					{
						return false;
					}
					
					clearTimeout( _imageLoadPointer );
					
					// Image has been loaded
					
					objectImageClone.style.left = ( ( e.pageX ? e.pageX : e.clientX ) - ( objectImageClone.offsetWidth / 2 ) + ( ( window.pageXOffset && Application.util.browserInformation.browser != "Firefox" ) ? window.pageXOffset : ( document.body.scrollLeft - document.body.clientLeft ) ) ) + "px";
					objectImageClone.style.top = ( ( e.pageY ? e.pageY : e.clientY ) - ( objectImageClone.offsetHeight / 2 ) + ( ( window.pageYOffset && Application.util.browserInformation.browser != "Firefox" ) ? window.pageYOffset : ( document.body.scrollTop - document.body.clientTop ) ) ) + "px";
					
					self.slotHTMLObject.childNodes[ 0 ].className = "invisible";
					
					// Movement Functions
					var _moveX = 0, _moveY = 0, _lastMarkedSlot = null, _markedHoverFunctionTimeout = null;
					
					if( Application.util.browserInformation.browser == "Explorer" )
					{
						var _mouseMove =	function()
						{
							_moveX = window.event.x + document.body.scrollLeft - document.body.clientLeft;
							_moveY = window.event.y + document.body.scrollTop - document.body.clientTop;
						}
					}
					else
					{
						var _mouseMove =	function( e )
						{
							_moveX = e.clientX + window.pageXOffset;
							_moveY = e.clientY + window.pageYOffset;
						}
					}
					
					// Check periodically the moving item coordinates
					var _markedHoverFunction = function()
					{
						// function will check if the current item matches the slot i'm hovering
						
						for(var i=0;i<_inventorySlots.length;i++)
						{
							var _is = _inventorySlots[ i ];
							
							if(
								_moveX < _is.position.left
								|| _moveX > _is.position.left + objectImageClone.offsetWidth
								|| _moveY < _is.position.top
								|| _moveY > _is.position.top + objectImageClone.offsetHeight
							)
							{
								// i'm outside this slot
								
								continue;
							}
							
							// hovering over slot
							
							if( _lastMarkedSlot != null && _lastMarkedSlot.attachedLootObject == null )
							{
								// mark previous hovered slot as not selected if it does not hold an item
								
								_lastMarkedSlot.slotHTMLObject.className = _lastMarkedSlot.classNotSelected;
							}
							
							if(
								( self.attachedLootObject.loot_type_binary & _is.bag_slot_accept ) == 0
								||
								(
									_is.bag_slot_number == 1
									&& _is.bag_slot_order == 2																	// hovering over the mainhand slot
									&& self.attachedLootObject.loot_armor_type.toString().indexOf( "2h" ) > -1	// moving a 2 hander over it
									&& _inventorySlots[ 2 ].attachedLootObject != null									// offhand is equiped
								)
								||
								(
									_is.bag_slot_number == 1
									&& _is.bag_slot_order == 3																						// hovering over the offhand slot
									&& _inventorySlots[ 1 ].attachedLootObject != null														// mainhand is equiped
									&& _inventorySlots[ 1 ].attachedLootObject.loot_armor_type.toString().indexOf( "2h" ) > -1	// mainhand has a 2 hander
								)
							)
							{
								// not a compatible slot
								
								continue;
							}
							
							if( self.isEquipable == false && _is.bag_slot_number == 1 )
							{
								// cannot equip item
								
								continue;
							}
							
							// mark slot as a possible drop zone
							
							_lastMarkedSlot = _is;
							
							_is.slotHTMLObject.className = ( _is.isEquipable ? _is.classSelected : _is.classDisabled );
							
							break;
						}
						
						_markedHoverFunctionTimeout = setTimeout( _markedHoverFunction, 100 );
					}
					
					_markedHoverFunction();
					
					// Start the drag
					Application.effects.drag.attach({
															object: objectImageClone,
															eventObject: e,
															onmousemove: _mouseMove,
															onmouseup: function( e )
															{
																clearTimeout( _markedHoverFunctionTimeout );
																
																var draggedOverASlot = false,
																	x = ( e.x ? ( window.event.x + document.body.scrollLeft - document.body.clientLeft ) : ( e.clientX + window.pageXOffset ) ),
																	y = ( e.y ? ( window.event.y + document.body.scrollTop - document.body.clientTop ) : ( e.clientY + window.pageYOffset ) );
																
																// Inventory
																for(var i=0;i<_inventorySlots.length;i++)
																{
																	var _is = _inventorySlots[ i ];
																	
																	if(
																		_is.position.left > x
																		|| x > _is.position.left + objectImageClone.offsetWidth
																		|| _is.position.top > y
																		|| y > _is.position.top + objectImageClone.offsetHeight
																	)
																	{
																		
																		continue;
																	}
																	
																	// Released over an area
																	
																	if(
																		self.attachedLootObject != null
																		&& ( self.attachedLootObject.loot_type_binary & _is.bag_slot_accept ) == 0
																	)
																	{
																		// The target slot does not accept the item type
																		
																		Component.bugcraft.messages.addError( "That item type cannot be put there" );
																		
																		Component.bugcraft.sound.characters.playMainVoice( "wrongSlot" );
																		
																		break;
																	}
																	else if(
																		_is.attachedLootObject != null
																		&& ( _is.attachedLootObject.loot_type_binary & self.bag_slot_accept ) == 0
																	)
																	{
																		// Source slot does not accept target item type
																		
																		Component.bugcraft.messages.addError( "That item type cannot be put there" );
																		
																		Component.bugcraft.sound.characters.playMainVoice( "wrongSlot" );
																		
																		break;
																	}
																	
																	if( self.isEquipable == false && _is.bag_slot_number == 1 )
																	{
																		// cannot equip item
																		
																		Component.bugcraft.messages.addError( "Cannot equip that" );
																		
																		Component.bugcraft.sound.characters.playMainVoice( "cannotDoThat" );
																		
																		break;
																	}
																	
																	if(
																		(
																			_is.bag_slot_number == 1
																			&& _is.bag_slot_order == 2																	// placing over the mainhand slot
																			&& self.attachedLootObject.loot_armor_type.toString().indexOf( "2h" ) > -1	// moving a 2 hander over it
																			&& _inventorySlots[ 2 ].attachedLootObject != null									// offhand is equiped
																		)
																		||
																		(
																			_is.bag_slot_number == 1
																			&& _is.bag_slot_order == 3																						// placing over the offhand slot
																			&& _inventorySlots[ 1 ].attachedLootObject != null														// mainhand is equiped
																			&& _inventorySlots[ 1 ].attachedLootObject.loot_armor_type.toString().indexOf( "2h" ) > -1	// mainhand has a 2 hander
																		)
																	)
																	{
																		// prevent illegal placements
																		
																		Component.bugcraft.messages.addError( "Cannot equip that item in this slot" );
																		
																		Component.bugcraft.sound.characters.playMainVoice( "need2hands" );
																		
																		continue;
																	}
																	
																	if(
																		self.bag_slot_number == _is.bag_slot_number &&
																		self.bag_slot_order == _is.bag_slot_order
																	)
																	{
																		// The same object ID is already in that area
																		
																		break;
																	}
																	
																	draggedOverASlot = true;
																	
																	if(
																		_is.attachedLootObject != null 															// target contains an object
																		&& _is.attachedLootObject.loot_id == self.attachedLootObject.loot_id		// same object exists
																		&& _is.attachedLootObject.loot_max_per_slot > _is.attachedLootObject.ci_loot_amount	// target has less than max items of this type in the slot
																	)
																	{
																		// merge
																		
																		self.mergeItemWith( _is );
																	}
																	else
																	{
																		// swap
																		
																		self.swapItemWith( _is );
																	}
																	
																	break;
																}
																
																if( draggedOverASlot == false )
																{
																	// dragged outside any slot
																	
																	self.slotHTMLObject.childNodes[ 0 ].className = "visible";
																}
																
																// remove the temporary "dragable" item
																Application.util.html.removeNode( objectImageClone );
															}
													});
				}
				
				var _imageLoadPointer = setTimeout( _positioningFunction, 50 );
				_positioningFunction();
				
				return false;
			}
			
			// this function will merge the current slot's item with the target slot's item
			this.mergeItemWith = function( targetSlot )
			{
				Application.websocket.handlers.characterInventoryItemMerge = function( jsonEl, ws )
				{
					if( jsonEl.r != 200)
					{
						Application.debug.addError( "Merge item error: " + jsonEl.r );
						
						return;
					}
					
					// remove the loot from the targeted slots
					targetSlot.removeLoot();
					self.removeLoot();
					
					// set the loot
					var sourceLoot = jsonEl.l[ ( jsonEl.l[0].ci_slot_bag == self.bag_slot_number && jsonEl.l[0].ci_slot_order == self.bag_slot_order ) ? 0 : 1 ];
					
					// the source slot may be empty after the merger
					if( sourceLoot.loot_id != null )
					{
						Component.bugcraft.sound.ui.playEvent( "actionBar", "backpack" + ( ( sourceLoot.loot_armor_type != null ) ? ( sourceLoot.loot_armor_type[ 0 ].toUpperCase() + sourceLoot.loot_armor_type.substring( 1 ) ) : "Misc" ) + "Pickup" );
						
						self.setLoot({
									lootObject: sourceLoot
								});
					}
					
					var targetLoot = jsonEl.l[ ( sourceLoot == 0 ) ? 1 : 0 ];
					Component.bugcraft.sound.ui.playEvent( "actionBar", "backpack" + ( ( targetLoot.loot_armor_type != null ) ? ( targetLoot.loot_armor_type[ 0 ].toUpperCase() + targetLoot.loot_armor_type.substring( 1 ) ) : "Misc" ) + "Pickup" );
					
					targetSlot.setLoot({
										lootObject: targetLoot
									});
				}
				
				Application.websocket.socket.send( '{"c":"characterInventoryItemMerge","sourceBag":' + self.bag_slot_number + ',"sourceSlot":' + self.bag_slot_order + ',"targetBag":' + targetSlot.bag_slot_number + ',"targetSlot":' + targetSlot.bag_slot_order + '}' );
			}
			
			// this function will swap the current slot's item with the target slot's item
			this.swapItemWith = function( targetSlot )
			{
				Application.websocket.handlers.characterInventoryItemSwap = function( jsonEl, ws )
				{
					if( jsonEl.r != 200)
					{
						Application.debug.addError( "Swap item error: " + jsonEl.r );
						
						return;
					}
					
					// play the associated sounds
					if( self.attachedLootObject != null )
					{
						Component.bugcraft.sound.ui.playEvent( "actionBar", "backpack" + ( ( self.attachedLootObject.loot_armor_type != null ) ? ( self.attachedLootObject.loot_armor_type[ 0 ].toUpperCase() + self.attachedLootObject.loot_armor_type.substring( 1 ) ) : "Misc" ) + "Pickup" );
					}
					
					// play the associated sounds
					if( targetSlot.lastAttachedLootObject != null )
					{
						Component.bugcraft.sound.ui.playEvent( "actionBar", "backpack" + ( ( targetSlot.lastAttachedLootObject.loot_armor_type != null ) ? ( targetSlot.lastAttachedLootObject.loot_armor_type[ 0 ].toUpperCase() + targetSlot.lastAttachedLootObject.loot_armor_type.substring( 1 ) ) : "Misc" ) + "Pickup" );
					}
					
					targetSlot.setLoot({
										lootObject: self.attachedLootObject
									});
					
					self.setLoot({
								lootObject: targetSlot.lastAttachedLootObject
							});
				}
				
				Application.websocket.socket.send( '{"c":"characterInventoryItemSwap","sourceBag":' + self.bag_slot_number + ',"sourceSlot":' + self.bag_slot_order + ',"targetBag":' + targetSlot.bag_slot_number + ',"targetSlot":' + targetSlot.bag_slot_order + '}' );
			}
			
			// this function will remove the loot from the current slot
			this.removeLoot = function()
			{
				if( self.bag_slot_number == 1 )
				{
					// this is an equiped item
					
					_equipedItems--;
					_equipedItemsLevelSum -= self.attachedLootObject.loot_level;
					
					Component.bugcraft.pageProfileSetAttributes();
				}
				
				self.lastAttachedLootObject = self.attachedLootObject;
				self.attachedLootObject = null;
				
				// remove the node's children
				while( self.slotHTMLObject.childNodes.length )
				{
					Application.util.html.removeNode( self.slotHTMLObject.childNodes[ 0 ] );
				}
				
				_tooltipObject.remove();
				
				// change the design
				self.slotHTMLObject.className = self.classNotSelected;
			}
			
			// this function will set the loot for the current slot
			this.setLoot = function( lootArgs )
			{
				if( lootArgs.lootObject == null )
				{
					self.removeLoot();
					
					return false;
				}
				
				if( self.attachedLootObject != null )
				{
					self.removeLoot();
				}
				else
				{
					self.lastAttachedLootObject = null;
				}
				
				// set metadata
				
				self.attachedLootObject = lootArgs.lootObject;
				self.loot_type = lootArgs.lootObject.loot_type;
				
				if( self.bag_slot_number == 1 )
				{
					// this is an equiped item
					
					_equipedItems++;
					_equipedItemsLevelSum += self.attachedLootObject.loot_level;
					
					Component.bugcraft.pageProfileSetAttributes();
				}
				
				// perform design changes
				
				if(
					lootArgs.lootObject.loot_level_required <= _ccd.character_level
					&& lootArgs.lootObject.loot_happiness_required <= _ccd.character_happiness
					&& ( lootArgs.lootObject.loot_armor_type == null || ( lootArgs.lootObject.loot_armor_type != null && _ccd.character_armor_accepted.toString().split( "," ).indexOf( lootArgs.lootObject.loot_armor_type ) > -1 ) )
				)
				{
					self.isEquipable = true;
					self.slotHTMLObject.className = self.classSelected;
				}
				else
				{
					self.isEquipable = false;
					self.slotHTMLObject.className = self.classDisabled;	
				}
				
				var objectImage = document.createElement("img");
				objectImage.src = Application.configuration.cdn.location[ 0 ].url + "/item_skins/" + lootArgs.lootObject.loot_id + "/" + lootArgs.lootObject.loot_id + "_" + ( ( self.bag_slot_number == 1 ) ? '64x64' : '48x48' ) + ".png";
				self.slotHTMLObject.appendChild( objectImage );
				
				if( lootArgs.lootObject.ci_loot_amount > 1 )
				{
					var objectAmount = document.createElement("div");
					objectAmount.className = "slotItemAmount";
					objectAmount.innerHTML = lootArgs.lootObject.ci_loot_amount;
					
					self.slotHTMLObject.appendChild( objectAmount );
				}
				
				// set the tooltip
				( _tooltipObject = new Component.bugcraft.tooltip.item( self.slotHTMLObject, lootArgs.lootObject ) ).enable();
				
				// Movement events
				objectImage.onmousedown = function( e )
				{
					e.cancelBubble = true;
					
					if( e.button != 0 )
					{
						// pressed anything else but left button
						
						return false;
					}
					
					e.preventDefault();
					
					if( e.shiftKey )
					{
						// link object in chat
						
						Component.bugcraft.pageChatInsertObjectInInput({
																						objectName: lootArgs.lootObject.loot_name,
																						objectType: "item" + lootArgs.lootObject.loot_rarity,
																						objectID: lootArgs.lootObject.loot_id
																					});
						
						return false;
					}
					
					return _dragFunction( e );
				}
				
				// Right click - sell item
				objectImage.oncontextmenu = function( e )
				{
					e.cancelBubble = true;
					
					if( self.bag_slot_number == 1 )
					{
						// cannot sell directly from the "equipped" bag
						
						return false;
					}
					
					if( !Component.bugcraft.initializedPages.vendor )
					{
						return false;
					}
					
					// vendor available
					
					Application.websocket.handlers.characterInventoryItemSell = function( jsonEl, ws )
					{
						if( jsonEl.r != 200)
						{
							Application.debug.addError( "Sell item error: " + jsonEl.r );
							
							return;
						}
						
						self.removeLoot();
						
						Component.bugcraft.pageVendorAddBuybackItem( jsonEl.l );
					}
					
					Application.websocket.socket.send( '{"c":"characterInventoryItemSell","sourceBag":' + self.bag_slot_number + ',"sourceSlot":' + self.bag_slot_order + '}' );
					
					return false;
				}
				
				// iX devices
				Application.event.add( objectImage, "touchstart", 	function( e )
				{
					_dragFunction( e.touches[0] );
				});
				
				return true;
			}
		}
		
		// "close" button event
		Application.event.add( profileCloseButtonObject, "click", 	function()
		{
			Component.bugcraft.sound.ui.playEvent( "window", "buttonClose" );
			
			Component.bugcraft.initializedPages.pageProfile = !Component.bugcraft.initializedPages.pageProfile;
			
			profilePageObject.className = 'hidden';
		});
		
		// function invoked from the outside the profile, used to update the inventory. it is used primarely at vendor updates
		Component.bugcraft.pageProfileSetLoot = function( args )
		{
			var _l = args.loot;
			
			for(var i=0;i<_inventorySlots.length;i++)
			{
				if(
					_inventorySlots[ i ].bag_slot_number != _l.ci_slot_bag
					|| _inventorySlots[ i ].bag_slot_order != _l.ci_slot_order
					|| ( _inventorySlots[ i ].attachedLootObject != null && _inventorySlots[ i ].attachedLootObject.loot_id == _l.loot_id )
				)
				{
					continue;
				}
				
				_inventorySlots[ i ].setLoot({
												lootObject: _l
											});
				
				return true;
			}
			
			return false;
		}
		
		Component.bugcraft.pageProfileSetAttributes = function()
		{
			if( Component.bugcraft.initializedPages.pageProfile )
			{
				// no need to set the attributes if the page is not being displayed
				
				return;
			}
			
			attributeHitPointsObject.innerHTML = _ccd.character_hp_max;
			attributeHappinessObject.innerHTML = _ccd.character_happiness;
			attributeStrengthObject.innerHTML = _ccd.character_strength;
			attributePotencyObject.innerHTML = _ccd.character_potency;
			attributeAverageItemLevelObject.innerHTML = ( ( _equipedItems > 0 ) ? ( Math.floor( ( _equipedItemsLevelSum / _equipedItems ) * 100 ) / 100 ): 0 );
			attributeAttackObject.innerHTML = _ccd.character_attack;
			
			attributeMainHandWeaponDamageObject.innerHTML = ( _ccd.character_main_hand_damage_max > 0 ) ? ( _ccd.character_main_hand_damage_min + " - " + _ccd.character_main_hand_damage_max ) : "None";
			
			if( _ccd.character_off_hand_damage_max == 0 || _ccd.character_off_hand_damage_max == null )
			{
				// received an update which puts the value at zero
				attributeMainHandWeaponDamageContainerObject.className = "hidden";
			}
			else
			{
				attributeMainHandWeaponDamageContainerObject.className = "statGroupDetailContainer";
				attributeOffHandWeaponDamageObject.innerHTML = _ccd.character_off_hand_damage_min + " - " + _ccd.character_off_hand_damage_max;
			}
			
			attributeHitChanceObject.innerHTML = ( ( Math.round( 
																			( ( ( _ccd.character_main_hand_damage_max == null && _ccd.character_off_hand_damage_max != null ) || ( _ccd.character_main_hand_damage_max != null && _ccd.character_off_hand_damage_max == null ) ) ? 0.75 : 0.66 ) +
																			( 25 * ( _ccd.character_attack / ( _ccd.character_level * 4 ) ) ) * 100 ) / 100 ) + "%" );
			attributeCritChanceObject.innerHTML = ( ( Math.round( ( 25 * _ccd.character_attack / ( _ccd.character_level * 5 ) ) * 100 ) / 100 ) + "%" );
			attributeArmorObject.innerHTML = _ccd.character_armor;
			attributeDefenseObject.innerHTML = _ccd.character_defense;
			attributeResistanceObject.innerHTML = _ccd.character_resistance;
		}
		
		//
		// Initialize
		//
		
		// populate the inventory
		for(var i=0;i<args.lootData.length;i++)
		{
			var _ld = args.lootData[ i ];
			
			// create slot item
			_inventorySlots[ i ] = new slotObject( _ld );
			
			if( _ld.loot_id == null )
			{
				continue;
			}
			
			if( _ld.ci_slot_bag == 1 )
			{
				// equiped item
				
				_equipedItems++;
				_equipedItemsLevelSum += _ld.loot_level;
			}
			
			// set the loot only if the init param explicitly suggested it
			_inventorySlots[ i ].setLoot({
											lootObject: _ld
										});
		}
		
		Component.bugcraft.pageProfileSetAttributes();
		
		profileCharacterNameObject.innerHTML = _ccd.character_name;
		profileAvatarObject.style.backgroundImage = "url('/appSpecific/img/profile/character_" + _ccd.character_race + ".png')";
	}
	
	Component.bugcraft.pageProfileSetLoot = function( args )
	{
		
	}
	
	Component.bugcraft.pageProfileSetAttributes = function()
	{
		
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.pageQuestGiver.js
*/


	/*
		Quest Giver page
	*/

	var _autoQuestGiverCloseDistanceCheckTimeout = null,
			_questGiverScrollBarObject = null;
	
	Component.bugcraft.pageQuestGiver = function( questGiverObject, args )
	{
		var questGiverPageObject = document.getElementById( args.id + '_questGiverPage' ),
			questGiverNameObject = document.getElementById( args.id + '_questGiverName' ),
			questNameObject = document.getElementById( args.id + '_questGiverQuestName' ),
			questGiverQuestsDataContainerObject = document.getElementById( args.id + '_questGiverQuestsDataContainer' ),
			questGiverQuestsDataControlsContainerObject = document.getElementById( args.id + '_questGiverQuestsDataControlsContainer' ),
			questDescriptionObject = document.getElementById( args.id + '_questGiverQuestDescription' ),
			questObjectivesObject = document.getElementById( args.id + '_questGiverQuestObjectives' ),
			questGiverCloseButtonObject = document.getElementById( args.id + "_questGiverCloseButton" ),
			questGiverAcceptButtonObject = document.getElementById( args.id + "_questGiverAcceptButton" ),
			questGiverDeclineButtonObject = document.getElementById( args.id + "_questGiverDeclineButton" ),
			questGiverFinalizeButtonObject = document.getElementById( args.id + "_questGiverFinalizeButton" ),
			questGiverSpoilPolenObject = document.getElementById( args.id + "_questSpoilPolen" ),
			questGiverSpoilAmberObject = document.getElementById( args.id + "_questSpoilAmber" ),
			questGiverSpoilXPObject = document.getElementById( args.id + "_questSpoilXP" ),
			questGiverSpoilGloryObject = document.getElementById( args.id + "_questSpoilGlory" ),
			questGiverQuestsListControlUpObject = document.getElementById( args.id + "_questGiverQuestsListControlUp" ),
			questGiverQuestsListControlDownObject = document.getElementById( args.id + "_questGiverQuestsListControlDown" ),
			questGiverQuestsDataControlUpObject = document.getElementById( args.id + "_questGiverQuestsDataControlUp" ),
			questGiverQuestsDataControlDownObject = document.getElementById( args.id + "_questGiverQuestsDataControlDown" ),
			questGiverQuestsListItemsContainerObject = document.getElementById( args.id + "_questsListItemsContainer" ),
			questGiverQuestsListItemsObject = document.getElementById( args.id + "_questsListItems" );
		
		var _qd = questGiverObject.questsData, _ccD = Component.bugcraft.currentCharacterObject.characterData;
		
		// window management
		questGiverObject.isShowingQuests = true;
		questGiverQuestsListItemsObject.style.top = "0px";
		
		Component.bugcraft.pageQuestGiverHide = function()
		{
			clearTimeout( _autoQuestGiverCloseDistanceCheckTimeout );
			questGiverObject.startIdleMovementCountdown();
			
			Component.bugcraft.sound.characters.playCharacterVoiceExclusive( questGiverObject, "npc_bye" );
			
			Component.bugcraft.sound.ui.playEvent( "window", "buttonClose" );
			
			questGiverObject.isShowingQuests = false;
			questGiverPageObject.className = "hidden";
		}
		
		// "close" button event
		questGiverCloseButtonObject.onclick = function()
		{
			Component.bugcraft.sound.ui.playEvent( "window", "buttonClose" );
			
			questGiverPageObject.className = 'hidden';
			questGiverObject.isShowingQuests = false;
		};
		
		// "decline" button event
		questGiverDeclineButtonObject.onclick = function()
		{
			Component.bugcraft.sound.ui.playEvent( "window", "buttonClick" );
			
			questGiverPageObject.className = 'hidden';
			questGiverObject.isShowingQuests = false;
		};
		
		// mouse wheel scroll
		questGiverQuestsListItemsContainerObject.onmousewheel = function( e )
		{
			var mouseDelta = e.wheelDelta / 10;
			
			if(
				( mouseDelta > 0 && questGiverQuestsListItemsObject.offsetTop + mouseDelta <= 0 )
				|| ( mouseDelta < 0 && questGiverQuestsListItemsObject.offsetTop + mouseDelta > -questGiverQuestsListItemsObject.offsetHeight + questGiverQuestsListItemsContainerObject.offsetHeight )
			)
			{
				questGiverQuestsListItemsObject.style.top = ( questGiverQuestsListItemsObject.offsetTop + mouseDelta ) + "px";
			}
			else
			{
				if( mouseDelta > 0 )
				{
					questGiverQuestsListItemsObject.style.top = "0px";
				}
				else
				{
					questGiverQuestsListItemsObject.style.top = ( -questGiverQuestsListItemsObject.offsetHeight + questGiverQuestsListItemsContainerObject.offsetHeight ) + "px";
				}
			}
			
			return false;
		}
		
		// "up" button event
		questGiverQuestsListControlUpObject.onmousedown = function()
		{
			var _scrollTimeout = null;
			
			var _scrollFunction = function()
			{
				if( questGiverQuestsListItemsObject.offsetTop + 6 <= 0 )
				{
					questGiverQuestsListItemsObject.style.top = ( questGiverQuestsListItemsObject.offsetTop + 6 ) + "px";
				}
				else
				{
					questGiverQuestsListItemsObject.style.top = "0px";
				}
				
				_scrollTimeout = setTimeout( _scrollFunction, 100 );
			}
			
			var _scrollRemove = function()
			{
				clearTimeout( _scrollTimeout );
				
				Application.event.remove( document.body, "mouseup", _scrollRemove );
			};
			
			_scrollFunction();
			
			Application.event.add( document.body, "mouseup", _scrollRemove );
		};
		
		// "down" button event
		questGiverQuestsListControlDownObject.onmousedown = function()
		{
			var _scrollTimeout = null;
			
			var _scrollFunction = function()
			{
				if( questGiverQuestsListItemsObject.offsetTop - 6 > -questGiverQuestsListItemsObject.offsetHeight + questGiverQuestsListItemsContainerObject.offsetHeight )
				{
					questGiverQuestsListItemsObject.style.top = ( questGiverQuestsListItemsObject.offsetTop - 6 ) + "px";
				}
				else
				{
					questGiverQuestsListItemsObject.style.top = ( -questGiverQuestsListItemsObject.offsetHeight + questGiverQuestsListItemsContainerObject.offsetHeight ) + "px";
				}
				
				_scrollTimeout = setTimeout( _scrollFunction, 100 );
			}
			
			var _scrollRemove = function()
			{
				clearTimeout( _scrollTimeout );
				
				Application.event.remove( document.body, "mouseup", _scrollRemove );
			};
			
			_scrollFunction();
			
			Application.event.add( document.body, "mouseup", _scrollRemove );
		};
		
		var _hasGrabbableQuest = function()
		{
			for(var i in _qd)
			{
				if( _qd[ i ].grabbable == false )
				{
					continue;
				}
				
				return true;
			}
			
			return false;
		}
		
		// create individual quest items
		var _createQuestEntry = function( questID )
		{
			var _q = _qd[ questID ];
			
			var _showDetails = function()
			{
				for(var i=0;i<lines.length;i++)
				{
					if( lines[ i ] == questDivObject )
					{
						continue;
					}
					
					lines[ i ].className = "questListItem";
				}
				
				if( _q.isFinalized || _q.inProgress )
				{
					// quest is in progress or finalized
					
					questGiverAcceptButtonObject.className = "hidden";
					questGiverDeclineButtonObject.className = "hidden";
					
					if( _q.isFinalized )
					{
						questGiverFinalizeButtonObject.className = "questFinalize";
						
						questGiverFinalizeButtonObject.onclick = function( e )
						{
							Component.bugcraft.sound.ui.playEvent( "window", "buttonClick" );
							
							Application.websocket.socket.send( JSON.stringify({
																							c: "questFinalize",
																							questId: questID
																						}) );
						}
					}
					else
					{
						questGiverFinalizeButtonObject.className = "questProgress";
					}
				}
				else
				{
					// quest may be accepted / denied
					
					questGiverAcceptButtonObject.className = "questAccept";
					questGiverDeclineButtonObject.className = "questDecline";
					questGiverFinalizeButtonObject.className = "hidden";
				} 
				
				questDivObject.className = "questListItemSelected";
				
				if( _q.quest_award_polen != 0 )
				{
					questGiverSpoilPolenObject.className = "spoilPolen";
					questGiverSpoilPolenObject.innerHTML = _q.quest_award_polen;
				}
				else
				{
					questGiverSpoilPolenObject.className = "hidden";
				}
				
				if( _q.quest_award_amber != 0 )
				{
					questGiverSpoilAmberObject.className = "spoilAmber";
					questGiverSpoilAmberObject.innerHTML = _q.quest_award_amber;
				}
				else
				{
					questGiverSpoilAmberObject.className = "hidden";
				}
				
				if( _q.quest_award_xp != 0 )
				{
					questGiverSpoilXPObject.className = "spoilXP";
					questGiverSpoilXPObject.innerHTML = _q.quest_award_xp;
				}
				else
				{
					questGiverSpoilXPObject.className = "hidden";
				}
				
				if( _q.quest_award_glory != 0 )
				{
					questGiverSpoilGloryObject.className = "spoilGlory";
					questGiverSpoilGloryObject.innerHTML = _q.quest_award_glory;
				}
				else
				{
					questGiverSpoilGloryObject.className = "hidden";
				}
				
				questNameObject.innerHTML = _q.quest_name;
				questDescriptionObject.innerHTML = _q.quest_description.replace( "%targetName", _ccD.character_name ).replace( "%targetClass", _ccD.character_class ).replace( "%targetRace", _ccD.character_race );
				questObjectivesObject.innerHTML = _q.quest_objectives.replace( "%targetName", _ccD.character_name ).replace( "%targetClass", _ccD.character_class ).replace( "%targetRace", _ccD.character_race );
				
				questGiverAcceptButtonObject.onclick = function()
				{
					Component.bugcraft.sound.ui.playEvent( "window", "questGrab" );
					
					Application.websocket.socket.send( '{"c":"questStart", "questId":' + questID + ', "questGiverID":' + questGiverObject.characterData.character_id + '}' );
				}
				
				if( _questGiverScrollBarObject == null )
				{
					_questGiverScrollBarObject = new Application.effects.scroll.scrollbar(
																								questGiverQuestsDataControlsContainerObject,
																								new Application.effects.scroll.scroller(
																																	questGiverQuestsDataContainerObject,
																																	questGiverQuestsDataContainerObject.offsetWidth,
																																	questGiverQuestsDataContainerObject.offsetHeight
																																),
																								false
																							);
				}
				
				_questGiverScrollBarObject.resetHeight();
			}
			
			var questDivObject = document.createElement("div"), _ccD = Component.bugcraft.currentCharacterObject.characterData;
			questDivObject.className = "questListItem";
			questDivObject.innerHTML = _q.quest_name;
			
			questGiverQuestsListItemsObject.appendChild( questDivObject );
			
			Application.event.add( questDivObject, "click", _showDetails );
			
			if( lines.length == 1 )
			{
				return questDivObject;
			}
			
			_showDetails();
			
			return questDivObject;
		}
		
		var _autoCloseDistanceCheck = function()
		{
			if( _ccD.character_distance_to_target < 120 )
			{
				_autoQuestGiverCloseDistanceCheckTimeout = setTimeout( _autoCloseDistanceCheck, 150 );
				
				return;
			}
			
			// moved too far away from the target
			
			Component.bugcraft.pageQuestGiverHide();
		}
		
		//
		// Initialize
		//
		
		if( _hasGrabbableQuest() == false )
		{
			// no quest is grabbable
			
			return false;
		}
		
		Component.bugcraft.sound.ui.playEvent( "window", "bookOpen" );
		
		questGiverPageObject.className = "questGiver";
		questGiverNameObject.innerHTML = questGiverObject.characterData.character_name;
		questGiverQuestsListItemsObject.innerHTML = '';
		
		Component.bugcraft.scaleWindow( questGiverPageObject );
		
		//Component.bugcraft.positionRelativeWindow( questGiverPageObject );
		
		Component.bugcraft.sound.characters.playCharacterVoiceExclusive( questGiverObject, "npc_hi" );
		
		var lines = [];
		
		// many quests
		for(var i in _qd)
		{
			var _q = _qd[ i ];
			
			if( _q.grabbable == false )
			{
				// cannot grab this quest yet
				
				continue;
			}
			
			// this quest may be grabbed
			lines.push( _createQuestEntry( i ) );
		}
		
		_autoCloseDistanceCheck();
		
		return true;
	}
	
	Component.bugcraft.pageQuestGiverHide = function()
	{
		
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.pageQuestLog.js
*/


	/*
		Quest Log page
	*/
	
	var _questLogScrollBarObject = null;
	
	Component.bugcraft.pageQuestLog = function( args )
	{
		var questsPageObject = document.getElementById( args.id + '_questLogPage' ),
			questLogQuestsDataControlsContainerObject = document.getElementById( args.id + '_questLogQuestsDataControlsContainer' ),
			questLogQuestsDataContainerObject = document.getElementById( args.id + '_questLogQuestsDataContainer' );
		
		// ensure this code is run only once
		if( typeof Component.bugcraft.initializedPages.questLog != "undefined" )
		{
			Component.bugcraft.initializedPages.questLog = !Component.bugcraft.initializedPages.questLog;
			questsPageObject.className = ( questsPageObject.className == "hidden" ) ? "questLog" : "hidden";
			
			if( !Component.bugcraft.initializedPages.questLog )
			{
				Component.bugcraft.sound.ui.playEvent( "window", "bookOpen" );
				
				Component.bugcraft.scaleWindow( questsPageObject );
				
				if( _questLogScrollBarObject == null )
				{
					_questLogScrollBarObject = new Application.effects.scroll.scrollbar(
																								questLogQuestsDataControlsContainerObject,
																								new Application.effects.scroll.scroller(
																																	questLogQuestsDataContainerObject,
																																	questLogQuestsDataContainerObject.offsetWidth,
																																	questLogQuestsDataContainerObject.offsetHeight
																																),
																								false
																							);
				}
			}
			else
			{
				Component.bugcraft.sound.ui.playEvent( "window", "buttonClose" );
			}
			
			return;
		}
		
		if( !args.hidden )
		{
			questsPageObject.className = "questLog";
		}
		
		Component.bugcraft.initializedPages.questLog = true;
		
		//
		// Define internal variables
		//
		
		var questsProgress = {}, lines = {}, _ccD = Component.bugcraft.currentCharacterObject.characterData,
			questLogNameObject = document.getElementById( args.id + '_questLogName' ),
			questLogProgressQuestsContainerObject = document.getElementById( args.id + '_questLogProgressQuestsContainer' ),
			questLogProgressContainerObject = document.getElementById( args.id + '_questLogProgressContainer' ),
			questNameObject = document.getElementById( args.id + '_questLogQuestName' ),
			questDescriptionObject = document.getElementById( args.id + '_questLogQuestDescription' ),
			questObjectivesObject = document.getElementById( args.id + '_questLogQuestObjectives' ),
			questLogCloseButtonObject = document.getElementById( args.id + "_questLogCloseButton" ),
			questLogAbandonButtonObject = document.getElementById( args.id + "_questLogAbandonButton" ),
			questLogSpoilPolenObject = document.getElementById( args.id + "_questLogSpoilPolen" ),
			questLogSpoilAmberObject = document.getElementById( args.id + "_questLogSpoilAmber" ),
			questLogSpoilXPObject = document.getElementById( args.id + "_questLogSpoilXP" ),
			questLogSpoilGloryObject = document.getElementById( args.id + "_questLogSpoilGlory" ),
			questLogQuestsListControlUpObject = document.getElementById( args.id + "_questLogQuestsListControlUp" ),
			questLogQuestsListControlDownObject = document.getElementById( args.id + "_questLogQuestsListControlDown" ),
			questLogQuestsListItemsObject = document.getElementById( args.id + "_questLogQuestsListItemsContainer" ),
			questLogQuestConditionsObject = document.getElementById( args.id + "_questLogQuestConditions" ),
			questLogNoQuestsContainerObject = document.getElementById( args.id + "_questLogNoQuestsContainer" ),
			questLogQuestDetailsObject = document.getElementById( args.id + "_questLogQuestDetails" ),
			questLogQuestListItemsObject = document.getElementById( args.id + "_questLogListItems" );
		
		// "close" button event
		questLogCloseButtonObject.onclick = function()
		{
			Component.bugcraft.sound.ui.playEvent( "window", "buttonClose" );
			
			Component.bugcraft.initializedPages.questLog = !Component.bugcraft.initializedPages.questLog;
			
			questsPageObject.className = 'hidden';
		};
		
		//
		// Experimental Area
		//
		/*
		var killButton = document.getElementById( args.id + "_qtKillButton" );
		var killSquirrelButton = document.getElementById( args.id + "_qtKillSquirrelButton" );
		
		Application.event.add( killButton, "click", function()
		{
			Application.websocket.socket.send( JSON.stringify( {
																	c: "questEventTriggered_temp",
																	event: "kill"
																}) );
		});
		
		Application.event.add( killSquirrelButton, "click", function()
		{
			Application.websocket.socket.send( JSON.stringify( {
																	c: "questEventTriggered_temp",
																	event: "squirrelKill"
																}) );
		});
		*/
		
		//
		// Server Handlers
		//
		
		// quest start handler
		Application.websocket.handlers.questStart = function( jsonEl, ws )
		{
			if( jsonEl.r != 200 )
			{
				Application.debug.addError( "Error starting quest (" + jsonEl.r + ")" );
				
				return;
			}
			
			// hide the questLog interface
			Component.bugcraft.pageQuestGiverHide();
			
			// force a refresh of the active list
			Application.websocket.socket.send( '{"c":"questsGetActive"}' );
		}
		
		// handle quest abandonment
		Application.websocket.handlers.questAbandon = function( jsonEl, ws )
		{
			if( jsonEl.r != 200 )
			{
				Application.debug.addError( "Error abandon quest (" + jsonEl.r + ")" );
				
				return;
			}
			
			// force a refresh of the active list
			Application.websocket.socket.send( '{"c":"questsGetActive"}' );
		}
		
		// a quest condition's value has changed
		Application.websocket.handlers.questConditionUpdate = function( jsonEl, ws )
		{
			if( jsonEl.r != 200 )
			{
				Application.debug.addError( "Error receiving condition update: " + jsonEl.r );
				
				return;
			}
			
			var _questObject = lines[ jsonEl.questId ];
			
			_questObject._q.conditions[ jsonEl.condition ].currentValue = jsonEl.value;
			
			// update the quest tracking
			_questObject.updateQuestTrackingConditions();
			
			if( _questObject.isVisible )
			{
				_questObject.updateQuestConditions();
			}
		}
		
		// handle quest compelted event
		Application.websocket.handlers.questCompleted = function( jsonEl, ws )
		{
			// a quest has been completed
			
			
		}
		
		// handle quest finalize event (post click)
		Application.websocket.handlers.questFinalize = function( jsonEl, ws )
		{
			if( jsonEl.r != 200 )
			{
				Application.debug.add( "Error finalizing quest (" + jsonEl.r + ")" );
				
				return;
			}
			
			// force a refresh of the active list
			Application.websocket.socket.send( '{"c":"questsGetActive"}' );
			
			// hide the questLog interface
			Component.bugcraft.pageQuestGiverHide();
		}
		
		// get all active quests in the log
		Application.websocket.handlers.questsGetActive = function( jsonEl, ws )
		{
			lines = {};
			
			// erase the current list
			questLogQuestListItemsObject.innerHTML = '';
			questLogProgressContainerObject.className = "hidden";
			questLogProgressQuestsContainerObject.innerHTML = '';
			
			if( Object.keys( jsonEl.q ).length <= 0 )
			{
				// no quests
				
				questLogQuestDetailsObject.className = "hidden";
				questLogNoQuestsContainerObject.className = "questLogNoQuests";
			}
			else
			{
				questLogQuestDetailsObject.className = "";
				questLogNoQuestsContainerObject.className = "hidden";
			}
			
			// create individual quest entry
			var _createQuestEntry = function( questID )
			{
				var self = this;
				
				this._q = jsonEl.q[ questID ];
				this.isVisible = false;
				
				this._hideDetails = function()
				{
					self.isVisible = false;
					
					questDivObject.className = "questListItem";
				}
				
				this._showDetails = function()
				{
					// mark other entries as not selected
					for(var i in lines)
					{
						if( lines[ i ] == self )
						{
							continue;
						}
						
						lines[ i ]._hideDetails();
					}
					
					// select this entry
					questDivObject.className = "questListItemSelected";
					self.isVisible = true;
					
					if( self._q.quest_award_polen != 0 )
					{
						questLogSpoilPolenObject.className = "spoilPolen";
						questLogSpoilPolenObject.innerHTML = self._q.quest_award_polen;
					}
					else
					{
						questLogSpoilPolenObject.className = "hidden";
					}
					
					if( self._q.quest_award_amber != 0 )
					{
						questLogSpoilAmberObject.className = "spoilAmber";
						questLogSpoilAmberObject.innerHTML = self._q.quest_award_amber;
					}
					else
					{
						questLogSpoilAmberObject.className = "hidden";
					}
					
					if( self._q.quest_award_xp != 0 )
					{
						questLogSpoilXPObject.className = "spoilXP";
						questLogSpoilXPObject.innerHTML = self._q.quest_award_xp;
					}
					else
					{
						questLogSpoilXPObject.className = "hidden";
					}
					
					if( self._q.quest_award_glory != 0 )
					{
						questLogSpoilGloryObject.className = "spoilGlory";
						questLogSpoilGloryObject.innerHTML = self._q.quest_award_glory;
					}
					else
					{
						questLogSpoilGloryObject.className = "hidden";
					}
					
					questNameObject.innerHTML = self._q.name;
					questDescriptionObject.innerHTML = self._q.description.replace( "%targetName", _ccD.character_name ).replace( "%targetClass", _ccD.character_class ).replace( "%targetRace", _ccD.character_race );
					questObjectivesObject.innerHTML = self._q.objectives.replace( "%targetName", _ccD.character_name ).replace( "%targetClass", _ccD.character_class ).replace( "%targetRace", _ccD.character_race );
					
					self.updateQuestConditions();
					
					questLogAbandonButtonObject.onclick = function()
					{
						Component.bugcraft.sound.ui.playEvent( "window", "buttonClick" );
						
						Application.websocket.socket.send( '{"c":"questAbandon", "questId":' + questID + '}' );
					}
					
					if( _questLogScrollBarObject )
					{
						_questLogScrollBarObject.resetHeight();
					}
				}
				
				this.updateQuestConditions = function()
				{
					questLogQuestConditionsObject.innerHTML = '';
					
					for(var i in self._q.conditions)
					{
						var _condition = self._q.conditions[ i ];
						
						var conditionObject = document.createElement("div");
						conditionObject.className = ( _condition.currentValue < _condition.targetValue ) ? 'questCondition' : 'questConditionSolved';
						
						conditionObject.innerHTML = '<span class="conditionName">' + _condition.name + '</span><span class="conditionCurrentValue">' + _condition.currentValue + '</span> / <span class="conditionTargetValue">' + _condition.targetValue + '</span>';
						
						questLogQuestConditionsObject.appendChild( conditionObject );
					}
				}
				
				this.updateQuestTrackingConditions = function()
				{
					questTrackContainer.innerHTML = '<div class="questName">' + self._q.name + '</div>';
					
					for(var i in self._q.conditions)
					{
						var _condition = self._q.conditions[ i ];
						
						var conditionObject = document.createElement("div");
						conditionObject.className = ( _condition.currentValue < _condition.targetValue ) ? 'questCondition' : 'questConditionSolved';
						
						conditionObject.innerHTML = '<span class="conditionCurrentValue">' + _condition.currentValue + '</span>/<span class="conditionTargetValue">' + _condition.targetValue + '</span> - <span class="conditionName">' + _condition.name + '</span>';
						
						questTrackContainer.appendChild( conditionObject );
					}
				}
				
				var questTrackContainer = document.createElement("div");
				questTrackContainer.className = "questContainer";
				questLogProgressQuestsContainerObject.appendChild( questTrackContainer );
				
				// create the line in the grid
				var questDivObject = document.createElement("div");
				questDivObject.className = "questListItem";
				questDivObject.innerHTML = self._q.name;
				questDivObject.onclick = self._showDetails;
				
				// add the line to the grid
				questLogQuestListItemsObject.appendChild( questDivObject );
				
				// update the quest tracking
				this.updateQuestTrackingConditions();
				
				if( Object.keys( jsonEl.q )[ 0 ] == questID )
				{
					// ensure this happens only once
					questLogProgressContainerObject.className = "questLogProgress";
					
					// show the quest details
					self._showDetails();
				}
			}
			
			// go through each entry
			for( var i in jsonEl.q )
			{
				// this quest may be grabbed
				lines[ i ] = new _createQuestEntry( i );
			}
		}
		
		Application.websocket.socket.send( '{"c":"questsGetActive"}' );
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.pageSelectCharacter.js
*/

	
	/*
		Switch Character / New Character page
	*/
	
	Component.bugcraft.pageSelectCharacter = function( args )
	{
		var charactersListTabTitleObject = document.getElementById( args.id + '_tabTitle1' ),
			charactersListTabContentObject = document.getElementById( args.id + '_tabContent1' ),
			newCharacterTabTitleObject = document.getElementById( args.id + '_tabTitle2' ),
			newCharacterTabContentObject = document.getElementById( args.id + '_tabContent2' );
		
		//Component.bugcraft.sound.screen.selectCharacter();
		
		var self = this, _selectedCharObject = null;
		
		// create character handler. this is located here because it requires the variables to manipulate the tabs
		Application.websocket.handlers.createCharacter = function( jsonEl, ws )
		{
			if( jsonEl.r == 300 )
			{
				alert( "A character with the same name exists already" );
				
				return;
			}
			
			if( jsonEl.r != 200 )
			{
				Application.debug.addError( "Create character error " + jsonEl.r + " has occured" );
				
				return;
			}
			
			self.populateCurrentCharactersTab({
															id: args.id,
															selectedCharacterPosition: 0
														});
			
			newCharacterTabContentObject.className = "hidden";
			charactersListTabContentObject.className = "visible";
		}
		
		/*
			The current characters
		*/
		
		this.populateCurrentCharactersTab = function( args )
		{
			var charactersListObject = document.getElementById( args.id + "_charactersList" ),
				selectedCharacterImageObject = document.getElementById( args.id + "_selectedCharacterImage" ),
				selectedCharacterNameObject = document.getElementById( args.id + "_selectedCharacterNameContainer" ),
				newCharacterButtonObject = document.getElementById( args.id + "_newCharacterButton" );
			
			// reset the layout
			
			charactersListObject.innerHTML = '';
			selectedCharacterNameObject.innerHTML = '';
			
			// set the page background
			document.body.className = "alternateBodyBackground3";
			
			Application.websocket.handlers.selectCharacter = function( jsonEl, ws )
			{
				if( jsonEl.r != 200 )
				{
					return false;
				}
				
				// Redirect to the main page
				Component.bugcraft.redirectToMainPage();
			}
			
			Application.websocket.handlers.destroySession = function( jsonEl, ws )
			{
				if( jsonEl.r != 200 )
				{
					return false;
				}
				
				// Redirect to the main page
				Component.bugcraft.redirectToRealmListPage();
			}
			
			Application.websocket.handlers.getCharacters = function( jsonEl, ws )
			{
				if( jsonEl.r != 200 )
				{
					return false;
				}
				
				var deleteButtonObject = document.getElementById( args.id + "_deleteCharacterButton" ),
					loginButtonObject = document.getElementById( args.id + "_loginCharacterButton" ),
					backButtonObject = document.getElementById( args.id + "_backButton" ),
					charactersListScrollUpButtonObject = document.getElementById( args.id + "_upButton" ),
					charactersListScrollDownButtonObject = document.getElementById( args.id + "_downButton" ),
					_totalCharacters = 0, _newPos = 0, _scrollPos = 0, _maxListLength = 0, _scrollEaseInOutPointer = null,
					_oldCharObject = null;
				
				loginButtonObject.className = "loginCharacter";
				deleteButtonObject.className = "deleteCharacter";
				
				_selectedCharObject = null;
				
				var _scrollEaseInOut =	function ( args )
														{
															if( Math.round( _scrollPos ) == args.finalPos )
															{
																// reached the end
																
																_scrollPos = args.finalPos;
																
																charactersListObject.style.marginTop = _scrollPos + "px";
																
																return;
															}
															
															_scrollPos += ( args.finalPos - _scrollPos ) / 8;
															
															charactersListObject.style.marginTop = _scrollPos + "px";
															
															_scrollEaseInOutPointer = setTimeout(	function() 
																															{
																																_scrollEaseInOut({
																																						direction: -1,
																																						finalPos: args.finalPos
																																					});
																															}, 30 );
																
														}
				
				Application.websocket.handlers.deleteCharacter = function( jsonEl, ws )
				{
					if( jsonEl.r != 200 )
					{
						return false;
					}
					
					_totalCharacters--;
					
					if( _totalCharacters <= 1 )
					{
						// do not allow the deletion of the last character
						
						_hideDeleteButton();
					}
					
					// Remove this node
					if( _selectedCharObject.removeNode )
					{
						_selectedCharObject.removeNode( true );
					}
					else
					{
						_selectedCharObject.parentNode.removeChild(
													_selectedCharObject
												);
					}
					
					self.populateCurrentCharactersTab({
																id: args.id,
																selectedCharacterPosition: 0
															});
					
					newCharacterTabContentObject.className = "hidden";
					charactersListTabContentObject.className = "visible";
				}
				
				newCharacterButtonObject.onclick = function()
				{
					Component.bugcraft.sound.ui.playEvent( "window", "buttonClick" );
					
					self.populateNewCharacterTab({
														id: args.id,
														selectMemberSound: true
													});
					
					newCharacterTabContentObject.className = "visible";
					charactersListTabContentObject.className = "hidden";
				}
				
				loginButtonObject.onclick = function()
				{
					Component.bugcraft.sound.ui.playEvent( "window", "buttonClick" );
					
					Application.websocket.socket.send( '{"c":"selectCharacter","characterID":' + _selectedCharObject._characterData.character_id + '}' );
				}
				
				backButtonObject.onclick =	function()
				{
					Component.bugcraft.sound.ui.playEvent( "window", "buttonClick" );
					
					Application.websocket.socket.send( '{"c":"destroySession"}' );
				};
				
				deleteButtonObject.onclick =	function()
				{
					if( !_selectedCharObject )
					{
						return;
					}
					
					if( !confirm( "Are you sure you want to delete this character?" ) )
					{
						return;
					}
					
					Component.bugcraft.sound.ui.playEvent( "window", "buttonClick" );
					
					Application.websocket.socket.send( '{"c":"deleteCharacter","characterID":' + _selectedCharObject._characterData.character_id + '}' );
				};
				
				var _scrollUp = function()
				{
					clearTimeout ( _scrollEaseInOutPointer );
					_newPos = _scrollPos + 128;
					
					if( _newPos > 0 )
					{
						_newPos = 0;
					}
					
					_scrollEaseInOut({
										direction: 1,
										finalPos: _newPos
									});
				}
				
				var _scrollDown = function()
				{
					clearTimeout ( _scrollEaseInOutPointer );
					_newPos = _scrollPos - 128;
					
					//440 is the height of the listContainer div
					if( _newPos < _maxListLength + 440 )
					{
						//442 so that the last line under the char would not be seen
						_newPos = _maxListLength + 442;
					}	
					
					_scrollEaseInOut({
										direction: -1,
										finalPos: _newPos
									});
				};
				
				charactersListScrollUpButtonObject.onclick = _scrollUp;
				charactersListScrollDownButtonObject.onclick = _scrollDown;
				
				charactersListObject.onmousewheel = function( e )
				{
					if( e.wheelDelta / 10 > 0 )
					{
						_scrollUp();
					}
					else
					{
						_scrollDown();
					}
				};
				
				var _createCharacterItem = function( characterData )
				{
					var _characterDiv = document.createElement( "div" );
					_characterDiv.className = "characterEntry " + characterData.character_faction + "Character";
					_characterDiv.innerHTML = "<div class='icon" + characterData.character_race + "'><div class='levelContainer'>" + characterData.character_level + "</div></div>" +
																"<div class='information'>" +
																	"<div class='nameContainer'><span class='name'>" + characterData.character_name + "</span><span class='nameShadow'>" + characterData.character_name + "</span></div>" +
																	"<div class='zoneContainer'>" + characterData.character_zone + "</div>" +
																	"<span class='race'>" + characterData.character_race + "</span><span class='class'>" + characterData.character_class + "</span>" +
																"</div>";
					_characterDiv._characterData = characterData;
					
					charactersListObject.appendChild( _characterDiv );
					
					// character selection
					_characterDiv._clickFunction = function()
					{
						//Component.bugcraft.sound.ui.playEvent( "window", "buttonClick" );
						
						_oldCharObject = _selectedCharObject;
						
						_selectedCharObject = _characterDiv;
						
						if( _oldCharObject )
						{
							_oldCharObject._outFunction();
						}
						
						_characterDiv._overFunction();
						
						selectedCharacterImageObject.className = "image" + characterData.character_race;
						
						selectedCharacterNameObject.innerHTML = "<span class='name'>" + characterData.character_name + "</span>";
					};
					
					// special effects
					_characterDiv._overFunction = function()
					{
						_characterDiv.className = "characterEntry " + characterData.character_faction + "Character hover";
					}
					
					_characterDiv._outFunction = function()
					{
						if( _selectedCharObject == _characterDiv )
						{
							return;
						}
						
						_characterDiv.className = "characterEntry " + characterData.character_faction + "Character";
					}
					
					Application.event.add( _characterDiv, "mouseover", _characterDiv._overFunction );
					Application.event.add( _characterDiv, "mouseout", _characterDiv._outFunction );
					Application.event.add( _characterDiv, "click", _characterDiv._clickFunction );
					Application.event.add( _characterDiv, "dblclick", function( e )
					{
						_characterDiv._clickFunction( e );
						
						Application.websocket.socket.send( '{"c":"selectCharacter","characterID":' + _selectedCharObject._characterData.character_id + '}' );
					});
					
					return _characterDiv;
				}
				
				var _hideDeleteButton = function()
				{
					loginButtonObject.className = "hidden";
					deleteButtonObject.className = "hidden";
				}
				
				loginButtonObject.scrollIntoView( true );
				
				if( jsonEl.characters.length > 0 )
				{
					_totalCharacters = jsonEl.characters.length;
					
					for( var i=0;i<jsonEl.characters.length;i++)
					{
						var _attr = jsonEl.characters[ i ]
						
						var _c = _createCharacterItem( _attr );
						
						if( i == args.selectedCharacterPosition )
						{
							_c._clickFunction();
						}
					}
				}
				else
				{
					self.populateNewCharacterTab({
														id: args.id
													});
					
					newCharacterTabContentObject.className = "visible";
					charactersListTabContentObject.className = "hidden";
					
					_totalCharacters = 1;
					_hideDeleteButton();
				}
				
				//the length of the characters list in px ( must be negative )
				_maxListLength = -1 * ( _totalCharacters * 128 ); 
				
			}
			
			Application.websocket.socket.send( '{"c":"getCharacters"}' );
		};
		
		/*
			New Character Tab
		*/
		
		this.populateNewCharacterTab = function( args )
		{
			var createButtonObject = document.getElementById( args.id + "_createButton" ),
				changeRealmButtonObject = document.getElementById( args.id + "_changeRealmButton" ),
				newCharacterNameObject = document.getElementById( args.id + "_newCharacterName" ),
				memberLink1Object = document.getElementById( args.id + "_memberLink1" ),
				memberLink2Object = document.getElementById( args.id + "_memberLink2" ),
				memberLink3Object = document.getElementById( args.id + "_memberLink3" ),
				memberLink4Object = document.getElementById( args.id + "_memberLink4" ),
				memberLink5Object = document.getElementById( args.id + "_memberLink5" ),
				memberLink6Object = document.getElementById( args.id + "_memberLink6" ),
				description1Object = document.getElementById( args.id + "_description1" ),
				description2Object = document.getElementById( args.id + "_description2" ),
				description3Object = document.getElementById( args.id + "_description3" ),
				description4Object = document.getElementById( args.id + "_description4" ),
				description5Object = document.getElementById( args.id + "_description5" ),
				description6Object = document.getElementById( args.id + "_description6" ),
				playingRaceVoiceObject = null;
			
			var selectedMembersAssoc = [ "ant", "fireant", "butterfly", "bee", "ladybug", "mantis" ], selectedMemberRace = "";
			
			memberLink1Object.onclick = function() { _selectMember(1, true); };
			memberLink2Object.onclick = function() { _selectMember(2, true); };
			memberLink3Object.onclick = function() { _selectMember(3, true); };
			//memberLink4Object.onclick = function() { _selectMember(4, true); };
			//memberLink5Object.onclick = function() { _selectMember(5, true); };
			//memberLink6Object.onclick = function() { _selectMember(6, true); };
			
			if( !args.noBackgroundChange )
			{
				// set the page background
				document.body.className = "alternateBodyBackground2";
			}
			
			newCharacterNameObject.setAttribute( "defaultValue", newCharacterNameObject.value );
			
			Application.websocket.handlers.destroySession = function( jsonEl, ws )
			{
				if( jsonEl.r != 200 )
				{
					return false;
				}
				
				// Redirect to the main page
				Component.bugcraft.redirectToRealmListPage();
			}
			
			changeRealmButtonObject.onclick = function()
			{
				Component.bugcraft.sound.ui.playEvent( "window", "buttonClick" );
				
				newCharacterTabContentObject.className = "hidden";
				charactersListTabContentObject.className = "visible";
				
				self.populateCurrentCharactersTab({
															id: args.id,
															selectedCharacterPosition: 0
														});
				
				//Application.websocket.socket.send( '{"c":"destroySession"}' );
			};
			
			var _selectMember = function( memberID, playSound )
			{
				//Component.bugcraft.sound.ui.playEvent( "window", "buttonClick" );
				
				if( playSound == true )
				{
					if( playingRaceVoiceObject )
					{
						playingRaceVoiceObject.stop();
					}
					
					switch( memberID )
					{
						case 1:
							
							playingRaceVoiceObject = Component.bugcraft.sound.characters.playRaceVoiceOverwrite( "ant", "charge" );
							
						break;
						case 2:
							
							playingRaceVoiceObject = Component.bugcraft.sound.characters.playRaceVoiceOverwrite( "fireant", "charge" );
							
						break;
						case 3:
							
							playingRaceVoiceObject = Component.bugcraft.sound.characters.playRaceVoiceOverwrite( "butterfly", "charge" );
							
						break;
						case 4:
							
							playingRaceVoiceObject = Component.bugcraft.sound.characters.playRaceVoiceOverwrite( "bee", "charge" );
							
						break;
						case 5:
							
							playingRaceVoiceObject = Component.bugcraft.sound.characters.playRaceVoiceOverwrite( "ladybug", "charge" );
							
						break;
						case 6:
							
							playingRaceVoiceObject = Component.bugcraft.sound.characters.playRaceVoiceOverwrite( "mantis", "charge" );
							
						break;
					}
				}
				
				var iconObject = document.getElementById( args.id + "_icon" );
				
				for(var i=1;i<7;i++)
				{
					var descriptionObject = document.getElementById( args.id + "_description" + i );
					var memberObject = document.getElementById( args.id + "_memberLink" + i );
					
					if( i != memberID )
					{
						descriptionObject.className = "description hidden";
						memberObject.className = "member" + i;
					}
					else
					{
						descriptionObject.className = "description";
						memberObject.className = "member" + i + "Hover";
					}
				}
				
				selectedMemberRace = selectedMembersAssoc[ memberID - 1 ];
			}
			
			var _createCharacter = function()
			{
				if( /^[a-zA-Z]+$/.test( newCharacterNameObject.value ) == false )
				{
					alert( "Please enter a character name" );
					
					return;
				}
				
				Application.websocket.socket.send( '{"c":"createCharacter","name":"' + newCharacterNameObject.value + '","race":"' + selectedMemberRace + '"}' );
				
				newCharacterNameObject.value = newCharacterNameObject.getAttribute("defaultValue");
			};
			
			createButtonObject.onclick = function()
			{
				Component.bugcraft.sound.ui.playEvent( "window", "buttonClick" );
				
				_createCharacter();
			}
			
			newCharacterNameObject.scrollIntoView( true );
			
			newCharacterNameObject.onkeyup = function(e)
			{
				e = e ? e : window.event;
				
				if( newCharacterNameObject.value.length > 20 )
				{
					newCharacterNameObject.value = newCharacterNameObject.value.substring( 0 , 20 );
				}
				
				if( newCharacterNameObject.value.match( /^[a-zA-Z]+$/ ) )
				{
					// valid character name
					
					createButtonObject.className = "createCharacterButtonEnabled";
				}
				else
				{
					createButtonObject.className = "createCharacterButtonDisabled";
				}
				
				if( e.keyCode != 13 || newCharacterNameObject.value.length == 0 )
				{
					return;
				}
				
				if( !newCharacterNameObject.value.match( /^[a-zA-Z]+$/ ) )
				{
					alert( "Your character name may only contain letters");
					
					return;
				}
				
				_createCharacter();
			};
			
			newCharacterNameObject.onfocus = function()
			{
				if( newCharacterNameObject.value != newCharacterNameObject.getAttribute("defaultValue") )
				{
					return;
				}
				
				newCharacterNameObject.value = "";
			};
			
			newCharacterNameObject.onblur = function()
			{
				if( newCharacterNameObject.value.length != 0)
				{
					return;
				}
				
				newCharacterNameObject.value = newCharacterNameObject.getAttribute("defaultValue");
			};
			
			// Select a random character
			//_selectMember( Math.ceil( Math.random() * 6 ), args.selectMemberSound );
			_selectMember( Math.ceil( Math.random() * 3 ), args.selectMemberSound );
		};
		
		/*
			Initialize
		*/
		
		switch( Application.util.urlInformation.params )
		{
			case "characterList":
				
				if( Component.bugcraft.currentUserFacebookID != null )
				{
					newCharacterTabContentObject.className = "hidden";
					charactersListTabContentObject.className = "visible";
					
					this.populateNewCharacterTab({
														id: args.id,
														selectMemberSound: false,
														noBackgroundChange: true
													});
					
					this.populateCurrentCharactersTab({
																id: args.id,
																selectedCharacterPosition: 0
															});
				}
				
			break;
			case "newCharacter":
				
				newCharacterTabContentObject.className = "visible";
				charactersListTabContentObject.className = "hidden";
				
				this.populateCurrentCharactersTab({
															id: args.id,
															selectedCharacterPosition: 0
														});
				
				this.populateNewCharacterTab({
													id: args.id,
													selectMemberSound: true
												});
				
			break;
			default:
				
				newCharacterTabContentObject.className = "hidden";
				charactersListTabContentObject.className = "visible";
				
				this.populateNewCharacterTab({
													id: args.id,
													selectMemberSound: false,
													noBackgroundChange: true
												});
				
				this.populateCurrentCharactersTab({
															id: args.id,
															selectedCharacterPosition: 0
														});
				
		}
		
	};
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.pageSettings.js
*/


	/*
		Market page
	*/
	
	Component.bugcraft.pageSettings = function( args )
	{
		var settingsPageObject = document.getElementById( args.id + '_settingsPage' );
		
		if( typeof Component.bugcraft.initializedPages.settings != "undefined" )
		{
			Component.bugcraft.initializedPages.settings = !Component.bugcraft.initializedPages.settings;
			settingsPageObject.className = Component.bugcraft.initializedPages.settings ? "settingsPage" : "hidden";
			
			return;
		}
		
		Component.bugcraft.initializedPages.settings = true;
		settingsPageObject.className = "settingsPage";
		
		var returnToGameButtonObject = document.getElementById( args.id + "_returnToGameButton" ),
				videoSettingsButtonObject = document.getElementById( args.id + "_videoSettingsButton" ),
				interfaceSettingsButtonObject = document.getElementById( args.id + "_interfaceSettingsButton" ),
				soundSettingsButtonObject = document.getElementById( args.id + "_soundSettingsButton" ),
				logoutButtonObject = document.getElementById( args.id + "_logoutButton" );
		
		// sound settings button
		Application.event.add( soundSettingsButtonObject, "click", function( e )
		{
			Component.bugcraft.sound.ui.playEvent( "window", "buttonClick" );
			
			Component.bugcraft.pageSettingsSound( args );
			
			Component.bugcraft.initializedPages.settings = false;
			settingsPageObject.className = 'hidden';
		});
		
		// return to game button
		Application.event.add( returnToGameButtonObject, "click", function( e )
		{
			Component.bugcraft.sound.ui.playEvent( "window", "buttonClick" );
			
			Component.bugcraft.initializedPages.settings = false;
			settingsPageObject.className = 'hidden';
		});
		
		// logout button
		Application.event.add( logoutButtonObject, "click", function( e )
		{
			Component.bugcraft.sound.ui.playEvent( "window", "buttonClick" );
			
			Application.websocket.handlers.characterLogout = function( jsonEl, ws )
			{
				Component.bugcraft.initializedPages.settings = false;
				settingsPageObject.className = 'hidden';
				
				Application.websocket.handlers.characterLogoutCancel = function( jsonEl, ws )
				{
					_dc.remove();
				}
				
				var _dc = new Component.bugcraft.notificationPopup.disconnectCountdown({
																												id: args.id,
																												notificationText: "You will be auto logged out in [seconds] seconds ",
																												cancelLogoutText: "Cancel",
																												timeoutMiliseconds: jsonEl.t,
																												onCancel: function()
																												{
																													Application.websocket.socket.send( '{"c":"characterLogoutCancel"}' );
																												}
																											});
				
			}
			
			Application.websocket.socket.send( '{"c":"characterLogout"}' );
		});
	}
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.pageSettingsSound.js
*/


	/*
		Sound Settings Page
	*/
	
	Component.bugcraft.pageSettingsSound = function( args )
	{
		var soundSettingsPageObject = document.getElementById( args.id + '_soundSettingsPage' );
		
		// check whether to save anything to the system
		var _performTransactionChecker = function()
		{
			if( _performTransaction == false )
			{
				return;
			}
			
			_performTransaction = false;
			
			Application.websocket.handlers.userSettingsSet = function( jsonEl, ws )
			{
				if( jsonEl.r != 200 )
				{
					Application.debug.addError( "Error saving settings" );
				}
				
				
			}
			
			Application.websocket.socket.send( '{"c":"userSettingsSet", "v":' + spellEffects.voiceVolume + ',"m":' + Component.bugcraft.sound.zone.volume + ',"e":' + spellEffects.globalVolume + ',"a":' + spellEffects.ambientalVolume + '}' );
		}
		
		// check which state should be handled
		if( typeof Component.bugcraft.initializedPages.soundSettings != "undefined" )
		{
			Component.bugcraft.initializedPages.soundSettings = !Component.bugcraft.initializedPages.soundSettings;
			soundSettingsPageObject.className = Component.bugcraft.initializedPages.soundSettings ? "settingsSound" : "hidden";
			
			if( !Component.bugcraft.initializedPages.soundSettings )
			{
				_performTransactionChecker();
				Component.bugcraft.sound.ui.playEvent( "window", "buttonClose" );
			}
			
			return;
		}
		
		Component.bugcraft.initializedPages.soundSettings = true;
		soundSettingsPageObject.className = "settingsSound";
		
		var soundSettingsCloseButtonObject = document.getElementById( args.id + "_soundSettingsCloseButton" ),
			sliderContainer1Object = document.getElementById( args.id + "_sliderContainer1" ),
			sliderContainer2Object = document.getElementById( args.id + "_sliderContainer2" ),
			sliderContainer3Object = document.getElementById( args.id + "_sliderContainer3" ),
			sliderContainer4Object = document.getElementById( args.id + "_sliderContainer4" ),
			sliderButton1Object = document.getElementById( args.id + "_sliderButton1" ),
			sliderButton2Object = document.getElementById( args.id + "_sliderButton2" ),
			sliderButton3Object = document.getElementById( args.id + "_sliderButton3" ),
			sliderButton4Object = document.getElementById( args.id + "_sliderButton4" ),
			_performTransaction = false;
		
		// "close" button event
		Application.event.add( soundSettingsCloseButtonObject, "click", 	function()
		{
			_performTransactionChecker();
			
			Component.bugcraft.sound.ui.playEvent( "window", "buttonClose" );
			
			Component.bugcraft.initializedPages.soundSettings = !Component.bugcraft.initializedPages.soundSettings;
			soundSettingsPageObject.className = "hidden";
		});
		
		var _createSlider = function( sliderArgs )
		{
			var _maxX = sliderArgs.container.offsetWidth - 38;
			
			if( sliderArgs.value )
			{
				sliderArgs.button.style.marginLeft = ( sliderArgs.value * ( _maxX / 100 ) ) + "px";
			}
			
			Application.event.add( sliderArgs.button, "mousedown", function( e )
			{
				var _x = Application.util.style.getCurrent( sliderArgs.button, "marginLeft" ), _containerLeft = Application.util.style.getPos( sliderArgs.container ).left, _t = null;
				
				var _removeFunction = function()
				{
					clearTimeout( _t );
					
					Application.event.remove( document.body, "mousemove", _moveFunction );
					Application.event.remove( document.body, "mouseup", _removeFunction );
				}
				
				var _moveFunction = function( eF )
				{
					_x = Math.max( eF.x - _containerLeft - 20, 0 );
				}
				
				var _sliderPositionChange = function()
				{
					if( _x > _maxX	)
					{
						_x = _maxX;
					}
					
					sliderArgs.button.style.marginLeft = _x + "px";
					
					sliderArgs.onChange( Math.round( _x / ( _maxX / 100 ) ) );
					
					_t = setTimeout( _sliderPositionChange, 40 );
				}
				
				_sliderPositionChange();
				
				Application.event.add( document.body, "mousemove", _moveFunction );
				Application.event.add( document.body, "mouseup", _removeFunction );
			});
		}
		
		// voice
		_createSlider({
					container: sliderContainer1Object,
					button: sliderButton1Object,
					value: spellEffects.voiceVolume,
					onChange: function( sliderValue )
					{
						spellEffects.voiceVolume = sliderValue;
						Component.bugcraft.sound.characters.volume = sliderValue;
						
						_performTransaction = true;
					}
				});
		
		// music
		_createSlider({
					container: sliderContainer2Object,
					button: sliderButton2Object,
					value: Component.bugcraft.sound.zone.volume,
					onChange: function( sliderValue )
					{
						Component.bugcraft.sound.zone.changeVolume( sliderValue );
						Component.bugcraft.sound.screen.changeVolume( sliderValue );
						
						_performTransaction = true;
					}
				});
		
		// effects
		_createSlider({
					container: sliderContainer3Object,
					button: sliderButton3Object,
					value: spellEffects.globalVolume,
					onChange: function( sliderValue )
					{
						Component.bugcraft.sound.ui.volume = sliderValue;
						spellEffects.globalVolume = sliderValue;
						
						_performTransaction = true;
					}
				});
		
		// ambiental
		_createSlider({
					container: sliderContainer4Object,
					button: sliderButton4Object,
					value: spellEffects.ambientalVolume,
					onChange: function( sliderValue )
					{
						spellEffects.ambientalVolume = sliderValue;
						
						_performTransaction = true;
					}
				});
		
		// scale the window
		Component.bugcraft.scaleWindow( soundSettingsPageObject );
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.pageSpellBook.js
*/

	
	/*
		Spell book page
	*/
	
	Component.bugcraft.pageSpellBook = function( args )
	{
		var spellBookPageObject = document.getElementById( args.id + '_spellBookPage' );
		
		// ensure this code is run only once
		if( typeof Component.bugcraft.initializedPages.spellBook != "undefined" )
		{
			Component.bugcraft.initializedPages.spellBook = !Component.bugcraft.initializedPages.spellBook;
			spellBookPageObject.className = ( spellBookPageObject.className == "hidden" ) ? "spellBook" : "hidden";
			
			if( !Component.bugcraft.initializedPages.spellBook )
			{
				Component.bugcraft.sound.ui.playEvent( "window", "bookOpen" );
				
				Component.bugcraft.scaleWindow( spellBookPageObject );
			}
			else
			{
				Component.bugcraft.sound.ui.playEvent( "window", "buttonClose" );
			}
			
			return;
		}
		
		if( !args.hidden )
		{
			spellBookPageObject.className = "spellBook";
		}
		
		Component.bugcraft.initializedPages.spellBook = true;
		
		// make sure there is no context menu
		spellBookPageObject.oncontextmenu = function()
		{
			return false;
		}
		
		var spellsContainerObject = document.getElementById( args.id + '_spellsContainer' ),
			spellBookLeftArrowObject = document.getElementById( args.id + '_spellBookLeftArrow' ),
			spellBookRightArrowObject = document.getElementById( args.id + '_spellBookRightArrow' ),
			spellBookCloseButtonObject = document.getElementById( args.id + '_spellBookCloseButton' ),
			spellBookPlaceHolder1IconObject = document.getElementById( args.id + '_spellBookPlaceHolder1Icon' ),
			spellBookPlaceHolder2IconObject = document.getElementById( args.id + '_spellBookPlaceHolder2Icon' ),
			spellBookPlaceHolder3IconObject = document.getElementById( args.id + '_spellBookPlaceHolder3Icon' );
		
		var spellBookAssociations =
		{
			conqueror: document.getElementById( args.id + '_buffContainer1' ),
			champion: document.getElementById( args.id + '_buffContainer2' ),
			soldier: document.getElementById( args.id + '_buffContainer3' ),
			
			stalker: document.getElementById( args.id + '_buffContainer1' ),
			guide: document.getElementById( args.id + '_buffContainer2' ),
			scout: document.getElementById( args.id + '_buffContainer3' ),
			
			enzymage: document.getElementById( args.id + '_buffContainer1' ),
			sage: document.getElementById( args.id + '_buffContainer2' ),
			noble: document.getElementById( args.id + '_buffContainer3' ),
			
			misc: document.getElementById( args.id + '_buffContainer3' )
		};
		
		var spellPlaceHolders =
		{
			conqueror: document.getElementById( args.id + '_spellBookPlaceHolder1' ),
			champion: document.getElementById( args.id + '_spellBookPlaceHolder2' ),
			soldier: document.getElementById( args.id + '_spellBookPlaceHolder3' ),
			
			stalker: document.getElementById( args.id + '_spellBookPlaceHolder1' ),
			guide: document.getElementById( args.id + '_spellBookPlaceHolder2' ),
			scout: document.getElementById( args.id + '_spellBookPlaceHolder3' ),
			
			enzymage: document.getElementById( args.id + '_spellBookPlaceHolder1' ),
			sage: document.getElementById( args.id + '_spellBookPlaceHolder2' ),
			noble: document.getElementById( args.id + '_spellBookPlaceHolder3' )
		};
		
		var classTalentTreeAssociation =
		{
			soldier: [ "conqueror", "champion", "soldier" ],
			scout: [ "stalker", "guide", "scout" ],
			noble: [ "enzymage", "sage", "noble" ]
		};
		
		//
		// Show a specialization container
		//
		
		// show a page inside a specialization container
		var _lastVisibleContainer = null;
		var _switchToContainer = function( containerObject )
		{
			if( _lastVisibleContainer == containerObject )
			{
				return false;
			}
			
			if( _lastVisibleContainer )
			{
				_lastVisibleContainer.className = 'buffsContainerHidden';
			}
			
			containerObject.className = 'buffsContainer';
			_lastVisibleContainer = containerObject;
			
			// make sure the left and right buttons work using the selected container
			
			spellBookLeftArrowObject.onclick = function()
			{
				Component.bugcraft.sound.ui.playEvent( "window", "pageTurn" );
				
				_showPage( containerObject, -1 );
			};
			
			spellBookRightArrowObject.onclick = function()
			{
				Component.bugcraft.sound.ui.playEvent( "window", "pageTurn" );
				
				_showPage( containerObject, 1 );
			};
			
			return true;
		}
		
		// show the container associated to a specialization
		var _showContainer = function( holderObject, containerObject )
		{
			holderObject.className = "placeHolderSelected";
			
			for(var i in spellPlaceHolders)
			{
				if(
					spellPlaceHolders[ i ].className != "placeHolderSelected"
					|| spellPlaceHolders[ i ] == holderObject
				)
				{
					continue;
				}
				
				spellPlaceHolders[ i ].className = 'placeHolder';
				
				break;
			}
			
			_switchToContainer( containerObject );
		}
		
		// events association for the containers
		var _associateHolderWithContainer = function( holderObject, containerObject )
		{
			Application.event.add( holderObject, "click", function( e )
			{
				Component.bugcraft.sound.ui.playEvent( "window", "pageTurn" );
				
				_showContainer( holderObject, containerObject );
			});
		}
		
		//
		// Show a page inside the current specialization container
		//
		
		var _showPage = function( containerObject, pageNumber )
		{
			if( pageNumber == 0 )
			{
				if( containerObject.childNodes.length > 0 )
				{
					containerObject.childNodes[ pageNumber ].className = 'buffsContainerPage';
				}
				
				return true;
			}
			
			var _getOffsetPageNumber = function( currentPageNumber, offset )
			{
				if( currentPageNumber + offset >= containerObject.childNodes.length )
				{
					return 0;
				}
				else if( currentPageNumber + offset < 0 )
				{
					return containerObject.childNodes.length - 1;
				}
				
				return currentPageNumber + offset;
			}
			
			for(var i=0;i<containerObject.childNodes.length;i++)
			{
				if( containerObject.childNodes[ i ].className != 'buffsContainerPage' )
				{
					continue;
				}
				
				containerObject.childNodes[i].className = 'buffsContainerPageHidden';
				
				containerObject.childNodes[ _getOffsetPageNumber( i, pageNumber ) ].className = 'buffsContainerPage';
				
				break;
			}
		};
		
		//
		// Initialization
		//
		
		_associateHolderWithContainer( spellPlaceHolders.conqueror, spellBookAssociations.conqueror );
		_associateHolderWithContainer( spellPlaceHolders.champion, spellBookAssociations.champion );
		_associateHolderWithContainer( spellPlaceHolders.soldier, spellBookAssociations.soldier );
		
		_showContainer( spellPlaceHolders.noble, spellBookAssociations.noble ); // first container
		
		spellPlaceHolders.conqueror.style.backgroundImage = "url('/appSpecific/img/spellBook/" + classTalentTreeAssociation[ Component.bugcraft.currentCharacterObject.characterData.character_class ][0] + ".png')";
		spellPlaceHolders.conqueror.setAttribute("title", classTalentTreeAssociation[ Component.bugcraft.currentCharacterObject.characterData.character_class ][0] );
		spellPlaceHolders.champion.style.backgroundImage = "url('/appSpecific/img/spellBook/" + classTalentTreeAssociation[ Component.bugcraft.currentCharacterObject.characterData.character_class ][1] + ".png')";
		spellPlaceHolders.champion.setAttribute("title", classTalentTreeAssociation[ Component.bugcraft.currentCharacterObject.characterData.character_class ][1] );
		spellPlaceHolders.soldier.style.backgroundImage = "url('/appSpecific/img/spellBook/" + classTalentTreeAssociation[ Component.bugcraft.currentCharacterObject.characterData.character_class ][2] + ".png')";
		spellPlaceHolders.soldier.setAttribute("title", classTalentTreeAssociation[ Component.bugcraft.currentCharacterObject.characterData.character_class ][2] );
		
		// "close" button event
		Application.event.add( spellBookCloseButtonObject, "click", function()
		{
			Component.bugcraft.sound.ui.playEvent( "window", "buttonClose" );
			
			Component.bugcraft.initializedPages.spellBook = !Component.bugcraft.initializedPages.spellBook;
			
			spellBookPageObject.className = 'hidden';
		});
		
		//
		// Spellbook fetch & list
		//
		
		Application.websocket.handlers.listSpellBook = function( jsonEl, ws )
		{
			if( jsonEl.r != 200 )
			{
				Application.debug.add( "Error fetching spellbook (" + jsonEl.r + ")" );
			}
			
			Component.bugcraft.pageSpellBookAddBuff = function( _b, showSpellPage )
			{
				var buffContainer = spellBookAssociations[ _b.buff_tree ];
				
				if(
					buffContainer.childNodes.length == 0 ||																						// container holds no pages
					buffContainer.childNodes[ buffContainer.childNodes.length - 1 ].childNodes.length >= 8			// container's last page is full
				)
				{
					// need to create a new buff container page
					
					var buffContainerPage = document.createElement( "div" );
					buffContainerPage.className = showSpellPage ? 'buffsContainerPage' : 'buffsContainerPageHidden';
					
					buffContainer.appendChild( buffContainerPage );
				}
				
				if( Component.bugcraft.ui.buffObjects[ _b.buff_id ] )
				{
					// the buff is already defined and visible
					Component.bugcraft.ui.buffObjects[ _b.buff_id ].addCopy( new Component.bugcraft.ui.buffObject({
																																								buff: _b,
																																								targetArea: buffContainer.childNodes[ buffContainer.childNodes.length - 1 ],	// append to the last page
																																								modelType: 2
																																							}) );
					
					return;
				}
				
				Component.bugcraft.ui.buffObjects[ _b.buff_id ] = new Component.bugcraft.ui.buffObject({
																																								buff: _b,
																																								targetArea: buffContainer.childNodes[ buffContainer.childNodes.length - 1 ],	// append to the last page
																																								modelType: 2
																																							});
			}
			
			for(var i=0;i<jsonEl.b.length;i++)
			{
				Component.bugcraft.pageSpellBookAddBuff( jsonEl.b[ i ] );
			}
			
			_showPage( spellBookAssociations.conqueror, 0 );
			_showPage( spellBookAssociations.champion, 0 );
			_showPage( spellBookAssociations.soldier, 0 );
			
			if( !args.hidden )
			{
				// update buffs considering the target
				Component.bugcraft.ui.updateBuffsStatusConsideringTarget();
			}
		}
		
		// request listing
		Application.websocket.socket.send( '{"c":"listSpellBook"}' );
	}
	
	Component.bugcraft.pageSpellBookAddBuff = function( _buffData, showSpellPage ) { }	// this is redefined after the buffs are listed
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.pageTalentTree.js
*/


	/*
		Market page
	*/
	
	Component.bugcraft.pageTalentTree = function( args )
	{
		var talentTreePageObject = document.getElementById( args.id + '_talentTreePage' );
		
		if( typeof Component.bugcraft.initializedPages.talentTree != "undefined" )
		{
			Component.bugcraft.initializedPages.talentTree = !Component.bugcraft.initializedPages.talentTree;
			talentTreePageObject.className = Component.bugcraft.initializedPages.talentTree ? "talentTree" : "hidden";
			
			if( !Component.bugcraft.initializedPages.talentTree )
			{
				Component.bugcraft.sound.ui.playEvent( "window", "bookOpen" );
				
				Component.bugcraft.scaleWindow( talentTreePageObject );
			}
			else
			{
				Component.bugcraft.sound.ui.playEvent( "window", "buttonClose" );
			}
			
			return;
		}
		
		Component.bugcraft.initializedPages.talentTree = true;
		talentTreePageObject.className = "talentTree";
		
		//
		// Talent Tree listing
		//
		
		var treeBuffs = {}, popupObject = null,
			talentTreeCloseButtonObject = document.getElementById( args.id + "_talentTreeCloseButton" ),
			talentTreePointsSpentObject = document.getElementById( args.id + "_talentTreePointsSpent" ),
			talentTreePointsAvailableObject = document.getElementById( args.id + "_talentTreePointsAvailable" ),
			talentTreeLeftTreeTitleObject = document.getElementById( args.id + "_talentTreeLeftTreeTitle" ),
			talentTreeRightTreeTitleObject = document.getElementById( args.id + "_talentTreeRightTreeTitle" ),
			talentTreeLeftTreeObject = document.getElementById( args.id + "_talentTreeLeftTree" ),
			talentTreeRightTreeObject = document.getElementById( args.id + "_talentTreeRightTree" ),
			talentTreeLeftTreeBuffsObject = document.getElementById( args.id + "_talentTreeLeftTreeBuffs" ),
			talentTreeRightTreeBuffsObject = document.getElementById( args.id + "_talentTreeRightTreeBuffs" );
		
		// "close" button event
		Application.event.add( talentTreeCloseButtonObject, "click",	function()
		{
			if( popupObject )
			{
				popupObject.remove();
				popupObject = null;
			}
			
			Component.bugcraft.sound.ui.playEvent( "window", "buttonClose" );
			
			Component.bugcraft.initializedPages.talentTree = !Component.bugcraft.initializedPages.talentTree;
			
			talentTreePageObject.className = 'hidden';
		});
		
		switch( Component.bugcraft.currentCharacterObject.characterData.character_class )
		{
			case "soldier":
				
				talentTreeLeftTreeTitleObject.innerHTML = "champion";
				talentTreeRightTreeTitleObject.innerHTML = "conqueror";
				
				treeBuffs = { champion: {}, conqueror: {} };
				
			break;
			case "scout":
				
				talentTreeLeftTreeTitleObject.innerHTML = "guide";
				talentTreeRightTreeTitleObject.innerHTML = "stalker";
				
				treeBuffs = { guide: {}, stalker: {} };
				
			break;
			case "noble":
				
				talentTreeLeftTreeTitleObject.innerHTML = "sage";
				talentTreeRightTreeTitleObject.innerHTML = "enzymage";
				
				treeBuffs = { sage: {}, enzymage: {} };
				
			break;
		}
		
		Application.websocket.handlers.talentTreeList = function( jsonEl, ws )
		{
			if( jsonEl.r != 200 )
			{
				Application.debug.addError( "Error getting talentTreeList response " + jsonEl.r );
				
				return;
			}
			
			var pointsTotal = jsonEl.pt, pointsSpent = jsonEl.ps;
			
			Application.websocket.handlers.talentTreePurchaseBuff = function( jsonEl, ws )
			{
				if( jsonEl.r != 200 )
				{
					Application.debug.addError( "Error getting talentTreePurchaseBuff response " + jsonEl.r );
					
					return;
				}
				
				if( popupObject )
				{
					popupObject.remove();
					popupObject = null;
				}
				
				var _ct = treeBuffs[ jsonEl.bd.buff_tree ][ jsonEl.bd.buff_points ], _nt = treeBuffs[ jsonEl.bd.buff_tree ][ jsonEl.bd.buff_points + 1 ];
				pointsTotal = jsonEl.pt, pointsSpent = jsonEl.ps;	// update the globals
				
				// perform actions on the tree, ensuring its ongoing functionality
				_ct._markPurchased();
				_ct.cs_id = jsonEl.cs_id;
				_ct.updateTalentWheel();
				
				// add buff to the spellbook
				Component.bugcraft.pageSpellBookAddBuff( jsonEl.bd, true );
				Component.bugcraft.ui.updateBuffsStatusConsideringTarget();
				
				if( pointsSpent >= pointsTotal )
				{
					for(var i in treeBuffs )
					{
						for(var j in treeBuffs[i])
						{
							if( treeBuffs[i][j] == _ct )
							{
								// skip the current buff
								
								continue;
							}
							
							treeBuffs[i][j]._mouseOutFunction();
						}
					}
				}
				else if( _nt )
				{
					_nt._markEnabled();
				}
				
				talentTreePointsSpentObject.innerHTML = pointsSpent;
				talentTreePointsAvailableObject.innerHTML = pointsTotal - pointsSpent;
			}
			
			// buff icon creator
			var _createBuffArea = function( _b )
			{
				var self = this, isOnLeft = false;
				
				this.cs_id = _b.cs_id;
				
				this._markDisabled = function()
				{
					treeBuffObject.className = "treeBuffObject";
					treeBuffObject.style.backgroundImage = "url('/components/bugcraft/resources/public/img/abilities_large/disabled_" + _b.buff_id + ".png')";
					hoverObject.innerHTML = "<div class='tooltipTop'></div><div class='tooltipTitle'>" + _b.buff_name + "</div><div class='tooltipDescription'>" + _b.buff_description + "<div class='purchaseStatus'>You don't have enough points to purchase this talent.</div></div><div class='tooltipBottom'></div>";
					
					treeBuffObject.onclick = function()
					{
						
					}
				}
				
				this._markGrayedOut = function()
				{
					treeBuffObject.className = "treeBuffObject";
					treeBuffObject.style.backgroundImage = "url('/components/bugcraft/resources/public/img/abilities_large/darker_" + _b.buff_id + ".png')";
					hoverObject.innerHTML = "<div class='tooltipTop'></div><div class='tooltipTitle'>" + _b.buff_name + "</div><div class='tooltipDescription'>" + _b.buff_description + "<div class='purchaseStatus'>You must learn all previous talents, in this tree, before you can invest a point in this ability.</div></div><div class='tooltipBottom'></div>";
					
					treeBuffObject.onclick = function()
					{
						
					}
				}
				
				this._markPurchased = function()
				{
					treeBuffObject.className = "treeBuffObjectSelected";
					treeBuffObject.style.backgroundImage = "url('/components/bugcraft/resources/public/img/abilities_large/" + _b.buff_id + ".png')";
					hoverObject.innerHTML = "<div class='tooltipTop'></div><div class='tooltipTitle'>" + _b.buff_name + "</div><div class='tooltipDescription'>" + _b.buff_description + "<div class='purchaseStatus'>You already know this talent.</div></div><div class='tooltipBottom'></div>";
					
					treeBuffObject.onclick = function()
					{
						
					}
				}
				
				this._markEnabled = function()
				{
					treeBuffObject.className = "treeBuffObject";
					treeBuffObject.style.backgroundImage = "url('/components/bugcraft/resources/public/img/abilities_large/" + _b.buff_id + ".png')";
					hoverObject.innerHTML = "<div class='tooltipTop'></div><div class='tooltipTitle'>" + _b.buff_name + "</div><div class='tooltipDescription'>" + _b.buff_description + "<div class='purchaseStatus'>You can learn this ability right away.</div></div><div class='tooltipBottom'></div>";
					
					treeBuffObject.onclick = function()
					{
						if( popupObject )
						{
							popupObject.remove();
							popupObject = null;
						}
						
						popupObject = new Component.bugcraft.notificationPopup.yesNoPopup({
																							id: args.id,
																							name: "talentBuffPurchaseConfirm",
																							questionText: 'Do you want to learn "' + _b.buff_name + '" ?',
																							acceptText: "Yes, add to spellbook",
																							denyText: "No, choose another",
																							onAccept: function()
																							{
																								Application.websocket.socket.send( '{"c":"talentTreePurchaseBuff","tid":' + _b.buff_id + '}' );
																							},
																							onDeny: function()
																							{
																								popupObject.hide();
																							}
																						});
					}
				}
				
				this._mouseOutFunction = function( e )
				{
					if( self.cs_id != null )
					{
						// already purchased
						
						self._markPurchased();
					}
					else if( pointsTotal - pointsSpent > 0 && ( _b.buff_points == 1 || ( _b.buff_points > 1 &&  treeBuffs[ _b.buff_tree ][ _b.buff_points - 1 ].cs_id != null ) ) )
					{
						// parent purchased or i am the 1st, and i am not purchased. available for purchase
						
						self._markEnabled();
					}
					else
					{
						// parent not purchased and i am not purchased. not available for purchase
						
						self._markGrayedOut();
					}
					
					hoverObject.className = "hidden";
				};
				
				var treeBuffObject = document.createElement("div");
				
				var buffIconObject = document.createElement("div");
				buffIconObject.className = "buffIcon";
				
				var hoverObject = document.createElement("div");
				hoverObject.className = "hidden";
				
				treeBuffObject.appendChild( hoverObject );
				treeBuffObject.appendChild( buffIconObject );
				
				hoverObject.onmouseout = self._mouseOutFunction;
				treeBuffObject.onmouseout = self._mouseOutFunction;
				
				treeBuffObject.onmouseover = function()
				{
					hoverObject.className = "tooltip";
				}
				
				// decide on which side to show the buff
				if( _b.buff_tree == "sage" || _b.buff_tree == "champion" || _b.buff_tree == "guide" )
				{
					this.updateTalentWheel = function()
					{
						if( self.cs_id == null )
						{
							return false;
						}
						
						talentTreeLeftTreeBuffsObject.style.backgroundImage = "url('/appSpecific/img/talentTree/octogon/octogon_talentpage_filling" + ( _b.buff_points - 1 ) + "_left.png')";
						
						return true;
					}
					
					document.getElementById( args.id + '_talentTreeLeftBuff' + _b.buff_points ).appendChild( treeBuffObject );
				}
				else
				{
					this.updateTalentWheel = function()
					{
						if( self.cs_id == null )
						{
							return false;
						}
						
						talentTreeRightTreeBuffsObject.style.backgroundImage = "url('/appSpecific/img/talentTree/octogon/octogon_talentpage_filling" + ( _b.buff_points - 1 ) + "_right.png')";
						
						return true;
					}
					
					document.getElementById( args.id + '_talentTreeRightBuff' + _b.buff_points ).appendChild( treeBuffObject );
				}
				
				this.updateTalentWheel();
				this._mouseOutFunction();
			}
			
			// go through the list
			for(var i=0;i<jsonEl.b.length;i++)
			{
				var _b = jsonEl.b[ i ];
				
				treeBuffs[ _b.buff_tree ][ _b.buff_points ] = new _createBuffArea( _b );
			}
			
			talentTreePointsSpentObject.innerHTML = pointsSpent;
			talentTreePointsAvailableObject.innerHTML = pointsTotal - pointsSpent;
		}
		
		//
		// Initialization
		//
		
		Component.bugcraft.scaleWindow( talentTreePageObject );
		
		// Enter the LFG by default
		Application.websocket.socket.send( '{"c":"talentTreeList"}' );
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.pageVendor.js
*/


	/*
		Vendor page
	*/
	
	var _autoVendorCloseDistanceCheckTimeout = null;
	
	Component.bugcraft.pageVendor = function( vendorObject, args )
	{
		var _buybackItems = [], _ccd = Component.bugcraft.currentCharacterObject.characterData,
			vendorPageObject = document.getElementById( args.id + '_vendorPage' ),
			vendorWindowTitleObject = document.getElementById( args.id + '_vendorWindowTitle' ),
			vendorLeftArrowObject = document.getElementById( args.id + '_vendorLeftArrow' ),
			vendorRightArrowObject = document.getElementById( args.id + '_vendorRightArrow' ),
			vendorItemsContainerObject = document.getElementById( args.id + '_vendorItemsContainer' ),
			vendorItemsSoldButtonObject = document.getElementById( args.id + '_vendorItemsSoldButton' ),
			vendorItemsBuybackButtonObject = document.getElementById( args.id + '_vendorItemsBuybackButton' ),
			vendorSlotsContainerObject = document.getElementById( args.id + '_vendorSoldSlotsContainer' ),
			vendorBuybackSlotsContainerObject = document.getElementById( args.id + '_vendorBuyBackSlotsContainer' ),
			vendorCloseButtonObject = document.getElementById( args.id + '_vendorCloseButton' );
		
		var _initWindow = function()
		{
			Component.bugcraft.scaleWindow( vendorPageObject );
			//Component.bugcraft.positionRelativeWindow( vendorPageObject );
			
			if( vendorObject )
			{
				Component.bugcraft.sound.characters.playCharacterVoiceExclusive( vendorObject, "vendor_hi" );
				_autoCloseDistanceCheck();
			}
			
			if( !args.isAmberStore )
			{
				// request vendor items listing
				Application.websocket.socket.send( '{"c":"vendorItemsList","vID":' + vendorObject.characterData.character_id + '}' );
				
				vendorWindowTitleObject.innerHTML = vendorObject.characterData.character_name;
			}
			else
			{
				// request amber store listing
				Application.websocket.socket.send( '{"c":"vendorAmberItemsList"}' );
				
				vendorWindowTitleObject.innerHTML = "Amber Store";
			}
		}
		
		var _hideWindow = function()
		{
			clearTimeout( _autoVendorCloseDistanceCheckTimeout );
			
			if( vendorObject )
			{
				vendorObject.startIdleMovementCountdown();
				Component.bugcraft.sound.characters.playCharacterVoiceExclusive( vendorObject, "vendor_bye" );
			}
			
			Component.bugcraft.sound.ui.playEvent( "window", "buttonClose" );
			
			Component.bugcraft.initializedPages.vendor = !Component.bugcraft.initializedPages.vendor;
			
			vendorPageObject.className = "hidden";
			
			Component.bugcraft.pageBagsHide();
		}
		
		var _autoCloseDistanceCheck = function()
		{
			// ensure no overlaps occur
			clearTimeout( _autoVendorCloseDistanceCheckTimeout );
			
			if( _ccd.character_distance_to_target < 120 )
			{
				_autoVendorCloseDistanceCheckTimeout = setTimeout( _autoCloseDistanceCheck, 150 );
				
				return;
			}
			
			// moved too far away from the target
			
			_hideWindow();
		}
		
		//
		// Check if this has been populated before
		//
		
		if( Component.bugcraft.initializedPages.pageBags == true )
		{
			Component.bugcraft.pageBags( args );
		}
		
		if( typeof Component.bugcraft.initializedPages.vendor != "undefined" )
		{
			Component.bugcraft.initializedPages.vendor = !Component.bugcraft.initializedPages.vendor;
			vendorPageObject.className = Component.bugcraft.initializedPages.vendor ? "vendor" : "hidden";
			
			if( !Component.bugcraft.initializedPages.vendor )
			{
				Component.bugcraft.sound.ui.playEvent( "window", "buttonClose" );
			}
			else
			{
				Component.bugcraft.sound.ui.playEvent( "window", "bookOpen" );
			}
			
			_initWindow();
			
			return;
		}
		
		//
		// Initialize
		//
		
		Component.bugcraft.initializedPages.vendor = true;
		vendorPageObject.className = "vendor";
		
		_initWindow();
		
		// will create the cost content for an item / player
		var _getCostContent = function( costData )
		{
			var costContent = '';
			
			if( costData.amber > 0 )
			{
				// regular polen
				
				costContent += '<span class="amber" title="Amber">' + costData.amber + '</span>';
			}
			
			if( costData.polen > 10000 )
			{
				// refined polen
				
				costContent += '<span class="polenRefined" title="Refined Polen">' + Math.floor( costData.polen / 10000 ) + '</span>';
				
				if( Math.floor( ( costData.polen % 10000 ) / 100 ) > 0 )
				{
					costContent += '<span class="polenRegular" title="Regular Polen">' + Math.floor( ( costData.polen % 10000 ) / 100 ) + '</span>';
					
					if( Math.floor( costData.polen % 100 ) > 0 )
					{
						costContent += '<span class="polenCrude" title="Crude Polen">' + Math.floor( costData.polen % 100 ) + '</span>';
					}
				}
			}
			else if( costData.polen > 100 )
			{
				// regular polen
				
				costContent += '<span class="polenRegular" title="Regular Polen">' + Math.floor( costData.polen / 100 ) + '</span>';
				
				if( Math.floor( costData.polen % 100 ) )
				{
					costContent += '<span class="polenCrude" title="Crude Polen">' + Math.floor( costData.polen % 100 ) + '</span>';
				}
			}
			else if( costData.polen > 0 )
			{
				// regular polen
				
				costContent += '<span class="polenCrude" title="Crude Polen">' + costData.polen + '</span>';
			}
			
			return costContent;
		}
		
		var _moveItemToBackpack = function( _itemData )
		{
			var itemContainer = document.createElement("div"), _currentBottom = 100, _currentOpacity = 1, _currentZoom = 1,
				_backPackObjectCoords = Application.util.style.getPos( Component.bugcraft._layoutObjects.bottomBarMenuItem8Object );
			
			itemContainer.className = "vendorItemFloatingToBackpack";
			itemContainer.style.backgroundImage = 'url("' + Application.configuration.cdn.location[ 0 ].url + "/item_skins/" + _itemData.loot_id + '/' + _itemData.loot_id + '_64x64.png")';
			
			document.body.appendChild( itemContainer );
			
			// animation function
			var _animation = function()
			{
				itemContainer.style.opacity = ( _currentOpacity -= 0.05 );
				
				_currentZoom -= 0.05;
				
				itemContainer.style.transform = 'scale(' + _currentZoom + ')';
				itemContainer.style.MozTransform = 'scale(' + _currentZoom + ')';
				itemContainer.style.WebkitTransform = 'scale(' + _currentZoom + ')';
				
				itemContainer.style.left = Math.round( _backPackObjectCoords.left - 85 + Math.cos( _currentZoom ) * 100 ) + "px";
				itemContainer.style.top = Math.round( _backPackObjectCoords.top - 55 + Math.sin( 1 - _currentZoom ) * 100  ) + "px";
				
				if( _currentZoom <= 0 )
				{
					Application.util.html.removeNode( itemContainer );
					
					return;
				}
				
				setTimeout( _animation, 50 );
			}
			
			// play the associated sound
			Component.bugcraft.sound.ui.playEvent( "actionBar", "backpack" + ( ( _itemData.loot_armor_type != null ) ? ( _itemData.loot_armor_type[ 0 ].toUpperCase() + _itemData.loot_armor_type.substring( 1 ) ) : "Misc" ) + "Pickup" );
			
			// animate
			_animation();
		}
		
		// close button
		vendorCloseButtonObject.onclick = _hideWindow;
		
		//
		// Show a specialization container
		//
		
		var _showSoldItems = function()
		{
			// show the arrows
			vendorLeftArrowObject.className = "leftArrow";
			vendorRightArrowObject.className = "rightArrow";
			
			// set the classes
			vendorItemsSoldButtonObject.className = "itemsSoldButtonSelected";
			vendorItemsBuybackButtonObject.className = "itemsBuybackButton";
			
			vendorSlotsContainerObject.className = "vendorSlotsContainer";
			vendorBuybackSlotsContainerObject.className = "hidden";
		}
		
		// sell items
		vendorItemsSoldButtonObject.onclick = function()
		{
			// play the associated event
			Component.bugcraft.sound.ui.playEvent( "window", "pageTurn" );
			
			_showSoldItems();
		}
		
		// buyback
		vendorItemsBuybackButtonObject.onclick = function()
		{
			// play the associated event
			Component.bugcraft.sound.ui.playEvent( "window", "pageTurn" );
			
			// hide the arrows
			vendorLeftArrowObject.className = "leftArrowInvisible";
			vendorRightArrowObject.className = "rightArrowInvisible";
			
			// set the classes
			vendorItemsSoldButtonObject.className = "itemsSoldButton";
			vendorItemsBuybackButtonObject.className = "itemsBuybackButtonSelected";
			
			vendorSlotsContainerObject.className = "hidden";
			vendorBuybackSlotsContainerObject.className = "vendorSlotsContainer";
		}
		
		//
		// Create the buyback tab
		//
		
		var _createBuyBackTab = function()
		{
			vendorBuybackSlotsContainerObject.innerHTML = "";
			
			var _createEmptyItem = function( container )
			{
				var slotContainer = document.createElement("div");
				slotContainer.className = "slotEmpty";
				slotContainer.innerHTML = '<div class="slotItemIcon"></div><div class="slotItemDescription"><div class="slotItemName"></div><div class="slotItemCost"></div></div>';
				
				container.appendChild( slotContainer );
			}
			
			var _createItem = function( container, itemOrder )
			{
				var _itemData = _buybackItems[ itemOrder ], slotContainer = document.createElement("div");
				
				slotContainer.innerHTML = ( '<div class="slotItemIcon" style="background-image:url(\'' + Application.configuration.cdn.location[ 0 ].url + "/item_skins/" + _itemData.loot.loot_id + '/' + _itemData.loot.loot_id + '_48x48.png\')">' +
														( ( _itemData.amount > 1 ) ? "<div class='slotItemAmount' title='" + _itemData.amount + " items'>" + _itemData.amount + "</div>" : "" ) +
														'</div><div class="slotItemDescription"><div class="slotItemName' + _itemData.loot.loot_rarity + '">' + _itemData.loot.loot_name + '</div><div class="slotItemCost">' + _getCostContent({ polen: _itemData.loot.loot_sell_price_polen, amber: _itemData.loot.loot_sell_price_amber }) + '</div></div>' );
				
				( new Component.bugcraft.tooltip.item( slotContainer, _itemData.loot ) ).enable();
				
				if(
					_itemData.loot.loot_level_required <= _ccd.character_level
					&& ( _itemData.loot.loot_armor_type == null || ( _itemData.loot.loot_armor_type != null && _ccd.character_armor_accepted.toString().split( "," ).indexOf( _itemData.loot.loot_armor_type ) > -1 ) )
				)
				{
					slotContainer.className = "slotFull";
				}
				else
				{
					slotContainer.className = "slotDisabled";
				}
				
				slotContainer.onclick = function( e )
				{
					if( e.shiftKey )
					{
						// link object in chat
						
						Component.bugcraft.pageChatInsertObjectInInput({
																						objectName: _itemData.loot.loot_name,
																						objectType: "item" + _itemData.loot.loot_rarity,
																						objectID: _itemData.loot.loot_id
																					});
						
						return false;
					}
					
					// buy back the item
					
					Application.websocket.handlers.characterInventoryItemBuyback = function( jsonEl, ws )
					{
						if( jsonEl.r == 301 )
						{
							Component.bugcraft.sound.characters.playMainVoice( "cannotAfford" );
							
							return;
						}
						
						if( jsonEl.r == 302 )
						{
							Component.bugcraft.sound.characters.playMainVoice( "fullBag" );
							
							return;
						}
						
						if( jsonEl.r != 200 )
						{
							Application.debug.addError( "Received error " + jsonEl.r + " while buying back item having order number " + jsonEl.order );
							
							return;
						}
						
						// update the inventory
						new _moveItemToBackpack( _itemData );
						
						// set the loot in the inventory
						for(var i=0;i<jsonEl.l.length;i++)
						{
							// update the inventory for each modified item
							Component.bugcraft.pageProfileSetLoot({
																				loot: jsonEl.l[ i ]
																			});
						}
						
						// update the buyback list
						_buybackItems.splice( jsonEl.order, 1 );
						
						_createBuyBackTab();
					}
					
					Application.websocket.socket.send( '{"c":"characterInventoryItemBuyback","itemOrder":' + itemOrder + ',"vendor_id":' + ( vendorObject ? vendorObject.characterData.character_id : null ) + '}' );
				}
				
				container.appendChild( slotContainer );
			}
			
			// enumerate items
			for(var i=0;i<_buybackItems.length;i++)
			{
				new _createItem( vendorBuybackSlotsContainerObject, i );
			}
			
			// enumerate items
			for(var i=_buybackItems.length;i<12;i++)
			{
				_createEmptyItem( vendorBuybackSlotsContainerObject );
			}
		}
		
		// overwriting the add buyback item function
		Component.bugcraft.pageVendorAddBuybackItem = function( itemData )
		{
			_buybackItems.push( itemData );
			
			if( _buybackItems.length > 12 )
			{
				_buybackItems.shift();
			}
			
			Component.bugcraft.sound.ui.playEvent( "vendor", "itemSell" );
			
			_createBuyBackTab();
		}
		
		//
		// Store items fetch
		//
		
		Application.websocket.handlers.vendorAmberItemsList = Application.websocket.handlers.vendorItemsList = function( jsonEl, ws )
		{
			if( jsonEl.r != 200 )
			{
				Application.debug.add( "Error fetching loot (" + jsonEl.r + ")" );
				
				return;
			}
			
			var maxItemsPerPage = 12, item = {}, popupObject = null, itemsProcessed = 0, itemPages = [], currentItemPage = 0,
				vendorPlayerCurrencyObject = document.getElementById( args.id + '_vendorPlayerCurrency' );
			
			// store the buyback items. this list will later be altered
			_buybackItems = jsonEl.b;
			
			_showSoldItems();
			_createBuyBackTab();
			
			//
			// arrow events
			//
			
			vendorLeftArrowObject.onclick = function()
			{
				Component.bugcraft.sound.ui.playEvent( "window", "pageTurn" );
				
				itemPages[ currentItemPage ].hide();
				
				if( --currentItemPage < 0 )
				{
					currentItemPage = itemPages.length - 1;
				}
				
				itemPages[ currentItemPage ].show();
			}
			
			vendorRightArrowObject.onclick = function()
			{
				Component.bugcraft.sound.ui.playEvent( "window", "pageTurn" );
				
				itemPages[ currentItemPage ].hide();
				
				if( ++currentItemPage >= itemPages.length )
				{
					currentItemPage = 0;
				}
				
				itemPages[ currentItemPage ].show();
			}
			
			var _createItem = function( container, itemIndex )
			{
				var _itemData = jsonEl.l[ itemIndex ], slotContainer = document.createElement("div");
				
				slotContainer.innerHTML = ( '<div class="slotItemIcon" style="background-image:url(\'' + Application.configuration.cdn.location[ 0 ].url + "/item_skins/" + _itemData.loot_id + '/' + _itemData.loot_id + '_48x48.png\')">' +
														( ( _itemData.opi_loot_amount > 1 ) ? "<div class='slotItemAmount' title='" + _itemData.opi_loot_amount + " items'>" + _itemData.opi_loot_amount + "</div>" : "" ) +
														'</div><div class="slotItemDescription"><div class="slotItemName' + _itemData.loot_rarity + '">' + _itemData.loot_name + '</div><div class="slotItemCost">' + _getCostContent({ polen: _itemData.loot_buy_price_polen, amber: _itemData.loot_buy_price_amber }) + '</div></div>' );
				
				( new Component.bugcraft.tooltip.item( slotContainer, _itemData ) ).enable();
				
				if(
					_itemData.loot_level_required <= _ccd.character_level
					&& ( _itemData.loot_armor_type == null || ( _itemData.loot_armor_type != null && _ccd.character_armor_accepted.toString().split( "," ).indexOf( _itemData.loot_armor_type ) > -1 ) )
				)
				{
					slotContainer.className = "slotFull";
				}
				else
				{
					slotContainer.className = "slotDisabled";
				}
				
				slotContainer.onclick = function( e )
				{
					if( popupObject )
					{
						popupObject.remove();
						popupObject = null;
					}
					
					if( e.shiftKey )
					{
						// link object in chat
						
						Component.bugcraft.pageChatInsertObjectInInput({
																						objectName: _itemData.loot_name,
																						objectType: "item" + _itemData.loot_rarity,
																						objectID: _itemData.loot_id
																					});
						
						return false;
					}
					
					popupObject = new Component.bugcraft.notificationPopup.yesNoPopup({
																						id: args.id,
																						name: "vendorItemPurchaseConfirm",
																						questionText: 'You are about to purchase "' + _itemData.loot_name + '"',
																						acceptText: "Get looooot!",
																						denyText: "No, choose another",
																						onAccept: function()
																						{
																							//
																							// Vendor
																							//
																							
																							Application.websocket.handlers.vendorItemPurchase = function( jsonPurchaseEl, ws )
																							{
																								// item purchase action response
																								
																								if( jsonPurchaseEl.r == 301 )
																								{
																									Component.bugcraft.sound.characters.playMainVoice( "cannotAfford" );
																									
																									popupObject.hide();
																									
																									return;
																								}
																								
																								if( jsonPurchaseEl.r == 302 )
																								{
																									Component.bugcraft.sound.characters.playMainVoice( "fullBag" );
																									
																									popupObject.hide();
																									
																									return;
																								}
																								
																								if( jsonPurchaseEl.r != 200 )
																								{
																									Application.debug.addError( "Received error " + jsonPurchaseEl.r + " while purchasing item " + jsonPurchaseEl.item_id + ", quantity " + jsonPurchaseEl.quantity );
																									
																									return;
																								}
																								
																								new _moveItemToBackpack( _itemData );
																								
																								// set the loot in the inventory
																								for(var i=0;i<jsonPurchaseEl.l.length;i++)
																								{
																									// update the inventory for each modified item
																									Component.bugcraft.pageProfileSetLoot({
																																						loot: jsonPurchaseEl.l[ i ]
																																					});
																								}
																								
																								popupObject.hide();
																							}
																							
																							Application.websocket.socket.send( '{"c":"vendorItemPurchase","opi_id":' + _itemData.opi_id + ',"vendor_id":' + ( vendorObject ? vendorObject.characterData.character_id : null ) + '}' );
																						},
																						onDeny: function()
																						{
																							popupObject.hide();
																						}
																					});
				}
				
				container.appendChild( slotContainer );
			}
			
			var _createEmptyItem = function( container, itemIndex )
			{
				var slotContainer = document.createElement("div");
				slotContainer.className = "slotEmpty";
				slotContainer.innerHTML = '<div class="slotItemIcon"></div><div class="slotItemDescription"><div class="slotItemName"></div><div class="slotItemCost"></div></div>';
				
				container.appendChild( slotContainer );
			}
			
			var _createPage = function()
			{
				this.show = function()
				{
					this.pageContainer.className = "vendorItemPage";
				}
				
				this.hide = function()
				{
					this.pageContainer.className = "hidden";
				}
				
				this.pageContainer = document.createElement("div");
				this.hide();
				
				vendorSlotsContainerObject.appendChild( this.pageContainer );
			}
			
			//
			// Populate layout
			//
			
			// clear all previous content
			vendorSlotsContainerObject.innerHTML = "";
			
			// show items
			for(var i in jsonEl.l)
			{
				if( itemsProcessed % maxItemsPerPage == 0 )
				{
					// new page
					
					itemPages.push( new _createPage() );
				}
				
				item[ jsonEl.l[ i ].loot_id ] = new _createItem( itemPages[ itemPages.length - 1 ].pageContainer, i );
				
				itemsProcessed++;
			}
			
			// fill in the empty slots
			for(var i = Object.keys( item ).length % maxItemsPerPage; i<maxItemsPerPage; i++)
			{
				if( itemsProcessed % maxItemsPerPage == 0 )
				{
					// new page
					
					itemPages.push( new _createPage() );
				}
				
				_createEmptyItem( itemPages[ itemPages.length - 1 ].pageContainer, i );
				
				itemsProcessed++;
			}
			
			// show 1st page
			itemPages[ currentItemPage ].show();
			
			Component.bugcraft.pageVendorUpdatePlayerCurrency = function()
			{
				// player currency
				vendorPlayerCurrencyObject.innerHTML = _getCostContent({
																						polen: _ccd.character_polen,
																						amber: _ccd.character_amber
																					});
			}
			
			Component.bugcraft.pageVendorUpdatePlayerCurrency();
		}
	}
	
	Component.bugcraft.pageVendorUpdatePlayerCurrency = function()
	{
	
	}
	
	Component.bugcraft.pageVendorAddBuybackItem = function( itemData )
	{
	
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/worker.map.js
*/

	
	var dragContainer = {},
		square_width = 0,
		square_height = 0,
		big_size_width = 0,
		big_size_height = 0,
		mapWidth = 0,
		mapHeight = 0;
		

	self.addEventListener(
							'message',
							function(e) 
							{
								var data = e.data;
								switch (data.c)
								{
									case 'init':
									
										dragContainer = data.dragContainer;
										square_width = data.square_width;
										square_height = data.square_height;
										big_size_width = data.big_size_width;
										big_size_height = data.big_size_height;
										mapWidth = data.mapWidth;
										mapHeight = data.mapHeight;
									
										self.postMessage({
															c: data.c,
															r: 200
														});
									
									break;
									case 'checkMapMove':
									
										var dx = data.dx,
											dy = data.dy;
											
										//check for valid move START
										//map at 0 x
										if( dx > 0 && (dragContainer.offsetLeft + dx) > -square_width )
										{
											dx = -dragContainer.offsetLeft - square_width;
										}
										
										//map at 0 y
										if( dy > 0 && (dragContainer.offsetTop + dy) > -square_height )
										{
											dy = -dragContainer.offsetTop - square_height;
										}
										
										//map at max x
										if( dx < 0 && (dragContainer.offsetLeft + dx) < (-1) * (big_size_width - mapWidth + square_width) )
										{
											dx = -dragContainer.offsetLeft - (big_size_width - mapWidth + square_width) ;
										}
										
										//map at max y
										if( dy < 0 && (dragContainer.offsetTop + dy) < (-1) * (big_size_height - mapHeight + square_height) )
										{
											dy = -dragContainer.offsetTop - (big_size_height - mapHeight + square_height);
										}
										
										if( dx == 0 && dy == 0 )
										{
											self.postMessage({
															c: data.c,
															r: 300
														});
														
											return;
										}
										//check for valid move END
										
										var edx = 0, edy = 0;
										if( dragContainer.offsetLeft + dx < -300 )
										{
											if( Math.abs(dx) > square_width/2 )
											{
												edx = Math.floor(Math.abs(dx) / square_width);
												if( dx < 0 )
												{
													edx *= (-1);
												}
											}
										}
										
										if( dragContainer.offsetTop + dy < -300 )
										{
											if( Math.abs(dy) > square_height/2 )
											{
												edy = Math.floor(Math.abs(dy) / square_height);
												if( dy < 0 )
												{
													edy *= (-1);
												}
											}
										}
										
										self.postMessage({
															c: data.c,
															r: 200,
															dx: dx,
															dy: dy,
															edx: edx,
															edy: edy
														});
										
									break;
									case 'stop':
									
										self.postMessage('WORKER STOPPED: ' + data.msg + '. (buttons will no longer work)');
										self.close(); // Terminates the worker.
										
									break;
									default:
									
										self.postMessage('Unknown command: ' + data.msg);
								};
							},
							false);













/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.js
*/


	var spellEffects = {
		
		layer: [ [], [] ],
		layerCleaner: [ [], [] ],

		//--------------------volume realated--------------------
		soundIncrementor: 0,
		
		//effectSounds: [],
		
		globalVolume: 100,
		ambientalVolume: 100,
		voiceVolume: 100,
		
		volumeRangeShort: 361,
		volumeRangeMedium: 521,
		volumeRangeLong: 681,
		
		volumeByRange: function(
									sourceX, 
									sourceY, 
									targetX, 
									targetY, 
									range 
								)
								{
									var xRelative = sourceX - targetX;
									var yRelative = sourceY - targetY;

									var _distance = Math.sqrt( (xRelative * xRelative) + (yRelative * yRelative) );
									
									if( _distance > range )
									{
										return 0;
									}
									
									//alert('volume IN = ' + ( spellEffects.globalVolume - ( _distance * spellEffects.globalVolume / range ) ));
									return spellEffects.globalVolume - ( _distance * spellEffects.globalVolume / range );
								},
		
		volumeByRangeVoice: function(
									sourceX, 
									sourceY, 
									targetX, 
									targetY, 
									range 
								)
								{
									var xRelative = sourceX - targetX;
									var yRelative = sourceY - targetY;

									var _distance = Math.sqrt( (xRelative * xRelative) + (yRelative * yRelative) );
									
									if( _distance > range )
									{
										return 0;
									}
									
									return spellEffects.voiceVolume - ( _distance * spellEffects.voiceVolume / range );
								},
		
		volumeByRangeAmbiental: function(
													sourceX, 
													sourceY, 
													targetX, 
													targetY, 
													range 
												)
												{
													var xRelative = sourceX - targetX;
													var yRelative = sourceY - targetY;

													var _distance = Math.sqrt( (xRelative * xRelative) + (yRelative * yRelative) );
													
													if( _distance > range )
													{
														return 0;
													}
													
													//alert('volume IN = ' + ( spellEffects.globalVolume - ( _distance * spellEffects.globalVolume / range ) ));
													return spellEffects.ambientalVolume - ( _distance * spellEffects.ambientalVolume / range );
												},
		
		soundPan: function(
										sourceX, 
										targetX, 
										range 
									)
						{
							
							var xRelative = sourceX - targetX;
							
							if ( spellEffects.globalVolume < 1 )
							{
								return 0;
							}
							
							//alert('souind pan = ' + ( xRelative * 100 / range ) );
							return	xRelative * 100 / range;
						},
		//---------------------------------------------------------
		
		
		init: function()
		{
			
		}
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.1.js
*/

	
	spellEffects[ '1' ] = function( args )
	{
		var self = this,
				_ccd = Component.bugcraft.currentCharacterObject.characterData,
				_moveFrames = {},
				_tc = args.targetCharacter,
				_tcd = _tc.characterData,
				_changeFrameFunctionPointer = null,
				_currentIndex = 1,
				_maxFrames = 1,
				_backgroundSound = null;
		
		this.ID = spellEffects.layer[0].push( this ) - 1;
		this.characterSpellEffectID = _tc._internal.spellEffects.push( this ) - 1;
		this.offsetX = 20;
		this.offsetY = 20;
		this.rotation = _tcd.character_rotation;
		this.deleteRange = 40;
		this.previousX = _tcd.character_zone_x - this.offsetX;
		this.previousY = _tcd.character_zone_y - this.offsetY;
		
		// initialize
		
		var _soundLoop = function()
		{
			_backgroundSound = Application.sound.playExclusive({
												url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/1/1.mp3',
												volume: spellEffects.volumeByRangeVoice(
																			_ccd.character_zone_x,
																			_ccd.character_zone_y,
																			_tcd.character_zone_x,
																			_tcd.character_zone_y,
																			spellEffects.volumeRangeLong
																		),
												onFinish: function()
												{
													_soundLoop();
												}
											});
		}
		
		for(var i=1;i<=_maxFrames;i++)
		{
			_moveFrames[ i ] = { image: new Image(), alpha: 0 };
			_moveFrames[ i ].image.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/1/1' + i + '.png';
		}
		
		//draw the bombardierBeetleDeath spatter
		this.draw = function()
		{
			Map.ctx.save();
			
			Map.ctx.translate( self.previousX + self.offsetX + Map.viewPortX, self.previousY + self.offsetY + Map.viewPortY );
			
			Map.ctx.rotate( ( self.rotation - 90 ) * Math.PI / 180 );
			
			Map.ctx.shadowColor = 'rgba(0, 0, 0, 0.7)';
			Map.ctx.shadowOffsetX = 3;
			Map.ctx.shadowOffsetY = 3;
			
			Map.ctx.drawImage(
							_moveFrames[ _currentIndex ].image,
							- self.offsetX,
							- self.offsetY
						);
			
			Map.ctx.restore();
			
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the deathDecay
		this.remove = function()
		{
			clearTimeout( _changeFrameFunctionPointer );
			
			if( _backgroundSound )
			{
				_backgroundSound.stop();
			}
			
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[0][ this.ID ] = null;
			
			delete _tc._internal.spellEffects[ this.characterSpellEffectID ];
		}
		
		var _changeFrameFunction = function()
		{
			_currentIndex++;
			
			if( _currentIndex > _maxFrames )
			{
				_currentIndex = 1;
				
				setTimeout( _changeFrameFunction, 2000 + Math.random() * 5000 );
				
				return;
			}
			
			_changeFrameFunctionPointer = setTimeout( _changeFrameFunction, 100 );
		}
		
		_soundLoop();
		_changeFrameFunction();
		
	} //end bombardierBeetleDeath

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.2.js
*/

	
	spellEffects[ '2' ] = function( args )
	{
		var self = this,
				_ccd = Component.bugcraft.currentCharacterObject.characterData,
				_moveFrames = {},
				_tc = args.targetCharacter,
				_tcd = _tc.characterData,
				_changeFrameFunctionPointer = null,
				_currentIndex = 1,
				_maxFrames = 1;
		
		this.ID = spellEffects.layer[0].push( this ) - 1;
		this.characterSpellEffectID = _tc._internal.spellEffects.push( this ) - 1;
		this.offsetX = 20;
		this.offsetY = 20;
		this.rotation = _tcd.character_rotation;
		this.deleteRange = 40;
		this.previousX = _tcd.character_zone_x - this.offsetX;
		this.previousY = _tcd.character_zone_y - this.offsetY;
		
		// initialize
		
		Application.sound.playExclusive({
											url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/2/2.mp3',
											volume: spellEffects.volumeByRangeVoice(
																		_ccd.character_zone_x,
																		_ccd.character_zone_y,
																		_tcd.character_zone_x,
																		_tcd.character_zone_y,
																		spellEffects.volumeRangeLong
																	),
											onFinish: function()
											{
												
											}
										});
		
		for(var i=1;i<=_maxFrames;i++)
		{
			_moveFrames[ i ] = { image: new Image(), alpha: 0 };
			_moveFrames[ i ].image.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/2/2' + i + '.png';
		}
		
		//draw the bombardierBeetleDeath spatter
		this.draw = function()
		{
			Map.ctx.save();
			
			Map.ctx.translate( self.previousX + self.offsetX + Map.viewPortX, self.previousY + self.offsetY + Map.viewPortY );
			
			Map.ctx.rotate( ( self.rotation - 90 ) * Math.PI / 180 );
			
			Map.ctx.shadowColor = 'rgba(0, 0, 0, 0.7)';
			Map.ctx.shadowOffsetX = 3;
			Map.ctx.shadowOffsetY = 3;
			
			Map.ctx.drawImage(
							_moveFrames[ _currentIndex ].image,
							- self.offsetX,
							- self.offsetY
						);
			
			Map.ctx.restore();
			
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the deathDecay
		this.remove = function()
		{
			clearTimeout( _changeFrameFunctionPointer );
			
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[0][ this.ID ] = null;
			
			delete _tc._internal.spellEffects[ this.characterSpellEffectID ];
		}
		
		var _changeFrameFunction = function()
		{
			_currentIndex++;
			
			if( _currentIndex > _maxFrames )
			{
				_currentIndex = 1;
				
				setTimeout( _changeFrameFunction, 2000 + Math.random() * 5000 );
				
				return;
			}
			
			_changeFrameFunctionPointer = setTimeout( _changeFrameFunction, 100 );
		}
		
		_changeFrameFunction();
		
	} //end bombardierBeetleDeath

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.AlgaeBoxFoams.js
*/

	
	spellEffects[ 'AlgaeBoxFoams' ] = function( args )
	{
		var self = this,
				_moveFrames = {},
				_tc = args.targetCharacter,
				_tcd = _tc.characterData,
				_changeFrameFunctionPointer = null,
				_currentIndex = 1,
				_maxFrames = 12;
		
		this.ID = spellEffects.layer[0].push( this ) - 1;
		this.characterSpellEffectID = _tc._internal.spellEffects.push( this ) - 1;
		this.offsetX = 20;
		this.offsetY = 20;
		this.rotation = _tcd.character_rotation;
		this.deleteRange = 40;
		this.previousX = _tcd.character_zone_x - this.offsetX;
		this.previousY = _tcd.character_zone_y - this.offsetY;
		
		// initialize
		
		for(var i=1;i<=_maxFrames;i++)
		{
			_moveFrames[ i ] = { image: new Image(), alpha: 0 };
			_moveFrames[ i ].image.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/AlgaeBoxFoams/AlgaeBoxFoams' + i + '.png';
		}
		
		//draw the bombardierBeetleDeath spatter
		this.draw = function()
		{
			Map.ctx.save();
			
			Map.ctx.translate( self.previousX + self.offsetX + Map.viewPortX, self.previousY + self.offsetY + Map.viewPortY );
			
			Map.ctx.rotate( ( self.rotation - 90 ) * Math.PI / 180 );
			
			Map.ctx.shadowColor = 'rgba(0, 0, 0, 0.7)';
			Map.ctx.shadowOffsetX = 3;
			Map.ctx.shadowOffsetY = 3;
			
			Map.ctx.drawImage(
							_moveFrames[ _currentIndex ].image,
							- self.offsetX,
							- self.offsetY
						);
			
			Map.ctx.restore();
			
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the deathDecay
		this.remove = function()
		{
			clearTimeout( _changeFrameFunctionPointer );
			
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[0][ this.ID ] = null;
			
			delete _tc._internal.spellEffects[ this.characterSpellEffectID ];
		}
		
		var _changeFrameFunction = function()
		{
			_currentIndex++;
			
			if( _currentIndex > _maxFrames )
			{
				_currentIndex = 1;
				
				setTimeout( _changeFrameFunction, 2000 + Math.random() * 5000 );
				
				return;
			}
			
			_changeFrameFunctionPointer = setTimeout( _changeFrameFunction, 100 );
		}
		
		_changeFrameFunction();
		
	} //end bombardierBeetleDeath

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.AmpTransmit.js
*/

	
	spellEffects[ 'AmpTransmit' ] = function( args )
	{
		var self = this,
				_ccd = Component.bugcraft.currentCharacterObject.characterData,
				_moveFrames = {},
				_tc = args.targetCharacter,
				_tcd = _tc.characterData,
				_changeFrameFunctionPointer = null,
				_currentIndex = 1,
				_maxFrames = 9;
		
		this.ID = spellEffects.layer[0].push( this ) - 1;
		this.characterSpellEffectID = _tc._internal.spellEffects.push( this ) - 1;
		this.offsetX = 20;
		this.offsetY = 20;
		this.rotation = _tcd.character_rotation;
		this.deleteRange = 40;
		this.previousX = _tcd.character_zone_x - this.offsetX;
		this.previousY = _tcd.character_zone_y - this.offsetY;
		
		// initialize
		
		Application.sound.playExclusive({
											url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/AmpTransmit/AmpTransmit.mp3',
											volume: spellEffects.volumeByRangeVoice(
																		_ccd.character_zone_x,
																		_ccd.character_zone_y,
																		_tcd.character_zone_x,
																		_tcd.character_zone_y,
																		spellEffects.volumeRangeLong
																	),
											onFinish: function()
											{
												
											}
										});
		
		for(var i=1;i<=_maxFrames;i++)
		{
			_moveFrames[ i ] = { image: new Image(), alpha: 0 };
			_moveFrames[ i ].image.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/AmpTransmit/AmpTransmit' + i + '.png';
		}
		
		//draw the bombardierBeetleDeath spatter
		this.draw = function()
		{
			Map.ctx.save();
			
			Map.ctx.translate( self.previousX + self.offsetX + Map.viewPortX, self.previousY + self.offsetY + Map.viewPortY );
			
			Map.ctx.rotate( ( self.rotation - 90 ) * Math.PI / 180 );
			
			Map.ctx.shadowColor = 'rgba(0, 0, 0, 0.7)';
			Map.ctx.shadowOffsetX = 3;
			Map.ctx.shadowOffsetY = 3;
			
			Map.ctx.drawImage(
							_moveFrames[ _currentIndex ].image,
							- self.offsetX,
							- self.offsetY
						);
			
			Map.ctx.restore();
			
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the deathDecay
		this.remove = function()
		{
			clearTimeout( _changeFrameFunctionPointer );
			
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[0][ this.ID ] = null;
			
			delete _tc._internal.spellEffects[ this.characterSpellEffectID ];
		}
		
		var _changeFrameFunction = function()
		{
			_currentIndex++;
			
			if( _currentIndex > _maxFrames )
			{
				self.remove();
				
				return;
			}
			
			_changeFrameFunctionPointer = setTimeout( _changeFrameFunction, 100 );
		}
		
		_changeFrameFunction();
		
	} //end bombardierBeetleDeath

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.AmpTransmit2.js
*/

	
	spellEffects[ 'AmpTransmit2' ] = function( args )
	{
		var self = this,
				_moveFrames = {},
				_tc = args.targetCharacter,
				_tcd = _tc.characterData,
				_changeFrameFunctionPointer = null,
				_currentIndex = 1,
				_maxFrames = 9;
		
		this.ID = spellEffects.layer[0].push( this ) - 1;
		this.characterSpellEffectID = _tc._internal.spellEffects.push( this ) - 1;
		this.offsetX = 60;
		this.offsetY = 60;
		this.rotation = _tcd.character_rotation;
		this.deleteRange = 40;
		this.previousX = _tcd.character_zone_x - this.offsetX;
		this.previousY = _tcd.character_zone_y - this.offsetY;
		
		// initialize
		
		for(var i=1;i<=_maxFrames;i++)
		{
			_moveFrames[ i ] = { image: new Image(), alpha: 0 };
			_moveFrames[ i ].image.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/AmpTransmit2/AmpTransmit2' + i + '.png';
		}
		
		//draw the bombardierBeetleDeath spatter
		this.draw = function()
		{
			Map.ctx.save();
			
			Map.ctx.translate( self.previousX + self.offsetX + Map.viewPortX, self.previousY + self.offsetY + Map.viewPortY );
			
			Map.ctx.rotate( ( self.rotation - 90 ) * Math.PI / 180 );
			
			Map.ctx.shadowColor = 'rgba(0, 0, 0, 0.7)';
			Map.ctx.shadowOffsetX = 3;
			Map.ctx.shadowOffsetY = 3;
			
			Map.ctx.drawImage(
							_moveFrames[ _currentIndex ].image,
							- self.offsetX,
							- self.offsetY
						);
			
			Map.ctx.restore();
			
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the deathDecay
		this.remove = function()
		{
			clearTimeout( _changeFrameFunctionPointer );
			
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[0][ this.ID ] = null;
			
			delete _tc._internal.spellEffects[ this.characterSpellEffectID ];
		}
		
		var _changeFrameFunction = function()
		{
			_currentIndex++;
			
			if( _currentIndex > _maxFrames )
			{
				_currentIndex = 1;
				
				setTimeout( _changeFrameFunction, 2000 + Math.random() * 5000 );
				
				return;
			}
			
			_changeFrameFunctionPointer = setTimeout( _changeFrameFunction, 100 );
		}
		
		_changeFrameFunction();
		
	} //end bombardierBeetleDeath

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.AphidAngry.js
*/

	
	spellEffects[ 'AphidAngry' ] = function( args )
	{
		var self = this,
				_ccd = Component.bugcraft.currentCharacterObject.characterData,
				_moveFrames = {},
				_tc = args.targetCharacter,
				_tcd = _tc.characterData,
				_changeFrameFunctionPointer = null,
				_currentIndex = 1,
				_maxFrames = 1,
				_backgroundSound = null,
				_soundTimeoutPointer = null;
		
		this.ID = spellEffects.layer[0].push( this ) - 1;
		this.characterSpellEffectID = _tc._internal.spellEffects.push( this ) - 1;
		this.offsetX = 20;
		this.offsetY = 20;
		this.rotation = _tcd.character_rotation;
		this.deleteRange = 40;
		this.previousX = _tcd.character_zone_x - this.offsetX;
		this.previousY = _tcd.character_zone_y - this.offsetY;
		
		// initialize
		
		var _soundLoop = function()
		{
			_backgroundSound = Application.sound.playExclusive({
												url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/AphidAngry/AphidAngry.mp3',
												volume: spellEffects.volumeByRangeVoice(
																			_ccd.character_zone_x,
																			_ccd.character_zone_y,
																			_tcd.character_zone_x,
																			_tcd.character_zone_y,
																			spellEffects.volumeRangeLong
																		),
												onFinish: function()
												{
													_soundTimeoutPointer = setTimeout( function()
													{
														_soundLoop();
													}, 4 + Math.random() * ( 6 - [minDelay] ) );
												}
											});
		}
		
		for(var i=1;i<=_maxFrames;i++)
		{
			_moveFrames[ i ] = { image: new Image(), alpha: 0 };
			_moveFrames[ i ].image.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/AphidAngry/AphidAngry' + i + '.png';
		}
		
		//draw the bombardierBeetleDeath spatter
		this.draw = function()
		{
			Map.ctx.save();
			
			Map.ctx.translate( self.previousX + self.offsetX + Map.viewPortX, self.previousY + self.offsetY + Map.viewPortY );
			
			Map.ctx.rotate( ( self.rotation - 90 ) * Math.PI / 180 );
			
			Map.ctx.shadowColor = 'rgba(0, 0, 0, 0.7)';
			Map.ctx.shadowOffsetX = 3;
			Map.ctx.shadowOffsetY = 3;
			
			Map.ctx.drawImage(
							_moveFrames[ _currentIndex ].image,
							- self.offsetX,
							- self.offsetY
						);
			
			Map.ctx.restore();
			
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the deathDecay
		this.remove = function()
		{
			clearTimeout( _changeFrameFunctionPointer );
			clearTimeout( _soundTimeoutPointer );
			
			if( _backgroundSound )
			{
				_backgroundSound.stop();
			}
			
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[0][ this.ID ] = null;
			
			delete _tc._internal.spellEffects[ this.characterSpellEffectID ];
		}
		
		var _changeFrameFunction = function()
		{
			_currentIndex++;
			
			if( _currentIndex > _maxFrames )
			{
				_currentIndex = 1;
				
				setTimeout( _changeFrameFunction, 2000 + Math.random() * 5000 );
				
				return;
			}
			
			_changeFrameFunctionPointer = setTimeout( _changeFrameFunction, 100 );
		}
		
		_soundLoop();
		_changeFrameFunction();
		
	} //end bombardierBeetleDeath

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.AphidDeath.js
*/

	
	spellEffects[ 'AphidDeath' ] = function( args )
	{
		var self = this,
				_ccd = Component.bugcraft.currentCharacterObject.characterData,
				_moveFrames = {},
				_tc = args.targetCharacter,
				_tcd = _tc.characterData,
				_changeFrameFunctionPointer = null,
				_currentIndex = 1,
				_maxFrames = 6;
		
		this.ID = spellEffects.layer[0].push( this ) - 1;
		this.characterSpellEffectID = _tc._internal.spellEffects.push( this ) - 1;
		this.offsetX = 20;
		this.offsetY = 20;
		this.rotation = _tcd.character_rotation;
		this.deleteRange = 40;
		this.previousX = _tcd.character_zone_x - this.offsetX;
		this.previousY = _tcd.character_zone_y - this.offsetY;
		
		// initialize
		
		Application.sound.playExclusive({
											url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/AphidDeath/AphidDeath.mp3',
											volume: spellEffects.volumeByRangeVoice(
																		_ccd.character_zone_x,
																		_ccd.character_zone_y,
																		_tcd.character_zone_x,
																		_tcd.character_zone_y,
																		spellEffects.volumeRangeLong
																	),
											onFinish: function()
											{
												
											}
										});
		
		for(var i=1;i<=_maxFrames;i++)
		{
			_moveFrames[ i ] = { image: new Image(), alpha: 0 };
			_moveFrames[ i ].image.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/AphidDeath/AphidDeath' + i + '.png';
		}
		
		//draw the bombardierBeetleDeath spatter
		this.draw = function()
		{
			Map.ctx.save();
			
			Map.ctx.translate( self.previousX + self.offsetX + Map.viewPortX, self.previousY + self.offsetY + Map.viewPortY );
			
			Map.ctx.rotate( ( self.rotation - 90 ) * Math.PI / 180 );
			
			Map.ctx.shadowColor = 'rgba(0, 0, 0, 0.7)';
			Map.ctx.shadowOffsetX = 3;
			Map.ctx.shadowOffsetY = 3;
			
			Map.ctx.drawImage(
							_moveFrames[ _currentIndex ].image,
							- self.offsetX,
							- self.offsetY
						);
			
			Map.ctx.restore();
			
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the deathDecay
		this.remove = function()
		{
			clearTimeout( _changeFrameFunctionPointer );
			
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[0][ this.ID ] = null;
			
			delete _tc._internal.spellEffects[ this.characterSpellEffectID ];
		}
		
		var _changeFrameFunction = function()
		{
			_currentIndex++;
			
			if( _currentIndex > _maxFrames )
			{
				self.remove();
				
				return;
			}
			
			_changeFrameFunctionPointer = setTimeout( _changeFrameFunction, 100 );
		}
		
		_changeFrameFunction();
		
	} //end bombardierBeetleDeath

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.AphidLowZoneDrone.js
*/

	
	spellEffects[ 'AphidLowZoneDrone' ] = function( args )
	{
		var self = this,
				_ccd = Component.bugcraft.currentCharacterObject.characterData,
				_moveFrames = {},
				_tc = args.targetCharacter,
				_tcd = _tc.characterData,
				_changeFrameFunctionPointer = null,
				_currentIndex = 1,
				_maxFrames = 1,
				_backgroundSound = null,
				_soundTimeoutPointer = null;
		
		this.ID = spellEffects.layer[0].push( this ) - 1;
		this.characterSpellEffectID = _tc._internal.spellEffects.push( this ) - 1;
		this.offsetX = 20;
		this.offsetY = 20;
		this.rotation = _tcd.character_rotation;
		this.deleteRange = 40;
		this.previousX = _tcd.character_zone_x - this.offsetX;
		this.previousY = _tcd.character_zone_y - this.offsetY;
		
		// initialize
		
		var _soundLoop = function()
		{
			_backgroundSound = Application.sound.playExclusive({
												url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/AphidLowZoneDrone/AphidLowZoneDrone.mp3',
												volume: spellEffects.volumeByRangeVoice(
																			_ccd.character_zone_x,
																			_ccd.character_zone_y,
																			_tcd.character_zone_x,
																			_tcd.character_zone_y,
																			spellEffects.volumeRangeLong
																		),
												onFinish: function()
												{
													_soundTimeoutPointer = setTimeout( function()
													{
														_soundLoop();
													}, 4 + Math.random() * ( 6 - [minDelay] ) );
												}
											});
		}
		
		for(var i=1;i<=_maxFrames;i++)
		{
			_moveFrames[ i ] = { image: new Image(), alpha: 0 };
			_moveFrames[ i ].image.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/AphidLowZoneDrone/AphidLowZoneDrone' + i + '.png';
		}
		
		//draw the bombardierBeetleDeath spatter
		this.draw = function()
		{
			Map.ctx.save();
			
			Map.ctx.translate( self.previousX + self.offsetX + Map.viewPortX, self.previousY + self.offsetY + Map.viewPortY );
			
			Map.ctx.rotate( ( self.rotation - 90 ) * Math.PI / 180 );
			
			Map.ctx.shadowColor = 'rgba(0, 0, 0, 0.7)';
			Map.ctx.shadowOffsetX = 3;
			Map.ctx.shadowOffsetY = 3;
			
			Map.ctx.drawImage(
							_moveFrames[ _currentIndex ].image,
							- self.offsetX,
							- self.offsetY
						);
			
			Map.ctx.restore();
			
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the deathDecay
		this.remove = function()
		{
			clearTimeout( _changeFrameFunctionPointer );
			clearTimeout( _soundTimeoutPointer );
			
			if( _backgroundSound )
			{
				_backgroundSound.stop();
			}
			
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[0][ this.ID ] = null;
			
			delete _tc._internal.spellEffects[ this.characterSpellEffectID ];
		}
		
		var _changeFrameFunction = function()
		{
			_currentIndex++;
			
			if( _currentIndex > _maxFrames )
			{
				_currentIndex = 1;
				
				setTimeout( _changeFrameFunction, 2000 + Math.random() * 5000 );
				
				return;
			}
			
			_changeFrameFunctionPointer = setTimeout( _changeFrameFunction, 100 );
		}
		
		_soundLoop();
		_changeFrameFunction();
		
	} //end bombardierBeetleDeath

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.AphidZonedroned.js
*/

	
	spellEffects[ 'AphidZonedroned' ] = function( args )
	{
		var self = this,
				_ccd = Component.bugcraft.currentCharacterObject.characterData,
				_moveFrames = {},
				_tc = args.targetCharacter,
				_tcd = _tc.characterData,
				_changeFrameFunctionPointer = null,
				_currentIndex = 1,
				_maxFrames = 1,
				_backgroundSound = null,
				_soundTimeoutPointer = null;
		
		this.ID = spellEffects.layer[0].push( this ) - 1;
		this.characterSpellEffectID = _tc._internal.spellEffects.push( this ) - 1;
		this.offsetX = 20;
		this.offsetY = 20;
		this.rotation = _tcd.character_rotation;
		this.deleteRange = 40;
		this.previousX = _tcd.character_zone_x - this.offsetX;
		this.previousY = _tcd.character_zone_y - this.offsetY;
		
		// initialize
		
		var _soundLoop = function()
		{
			_backgroundSound = Application.sound.playExclusive({
												url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/AphidZonedroned/AphidZonedroned.mp3',
												volume: spellEffects.volumeByRangeVoice(
																			_ccd.character_zone_x,
																			_ccd.character_zone_y,
																			_tcd.character_zone_x,
																			_tcd.character_zone_y,
																			spellEffects.volumeRangeLong
																		),
												onFinish: function()
												{
													_soundTimeoutPointer = setTimeout( function()
													{
														_soundLoop();
													}, 4 + Math.random() * ( 6 - [minDelay] ) );
												}
											});
		}
		
		for(var i=1;i<=_maxFrames;i++)
		{
			_moveFrames[ i ] = { image: new Image(), alpha: 0 };
			_moveFrames[ i ].image.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/AphidZonedroned/AphidZonedroned' + i + '.png';
		}
		
		//draw the bombardierBeetleDeath spatter
		this.draw = function()
		{
			Map.ctx.save();
			
			Map.ctx.translate( self.previousX + self.offsetX + Map.viewPortX, self.previousY + self.offsetY + Map.viewPortY );
			
			Map.ctx.rotate( ( self.rotation - 90 ) * Math.PI / 180 );
			
			Map.ctx.shadowColor = 'rgba(0, 0, 0, 0.7)';
			Map.ctx.shadowOffsetX = 3;
			Map.ctx.shadowOffsetY = 3;
			
			Map.ctx.drawImage(
							_moveFrames[ _currentIndex ].image,
							- self.offsetX,
							- self.offsetY
						);
			
			Map.ctx.restore();
			
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the deathDecay
		this.remove = function()
		{
			clearTimeout( _changeFrameFunctionPointer );
			clearTimeout( _soundTimeoutPointer );
			
			if( _backgroundSound )
			{
				_backgroundSound.stop();
			}
			
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[0][ this.ID ] = null;
			
			delete _tc._internal.spellEffects[ this.characterSpellEffectID ];
		}
		
		var _changeFrameFunction = function()
		{
			_currentIndex++;
			
			if( _currentIndex > _maxFrames )
			{
				_currentIndex = 1;
				
				setTimeout( _changeFrameFunction, 2000 + Math.random() * 5000 );
				
				return;
			}
			
			_changeFrameFunctionPointer = setTimeout( _changeFrameFunction, 100 );
		}
		
		_soundLoop();
		_changeFrameFunction();
		
	} //end bombardierBeetleDeath

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.BlueWaveLoop.js
*/

	
	spellEffects[ 'BlueWaveLoop' ] = function( args )
	{
		var self = this,
				_moveFrames = {},
				_tc = args.targetCharacter,
				_tcd = _tc.characterData,
				_changeFrameFunctionPointer = null,
				_currentIndex = 1,
				_maxFrames = 9;
		
		this.ID = spellEffects.layer[0].push( this ) - 1;
		this.characterSpellEffectID = _tc._internal.spellEffects.push( this ) - 1;
		this.offsetX = 20;
		this.offsetY = 20;
		this.rotation = _tcd.character_rotation;
		this.deleteRange = 40;
		this.previousX = _tcd.character_zone_x - this.offsetX;
		this.previousY = _tcd.character_zone_y - this.offsetY;
		
		// initialize
		
		for(var i=1;i<=_maxFrames;i++)
		{
			_moveFrames[ i ] = { image: new Image(), alpha: 0 };
			_moveFrames[ i ].image.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/BlueWaveLoop/BlueWaveLoop' + i + '.png';
		}
		
		//draw the bombardierBeetleDeath spatter
		this.draw = function()
		{
			Map.ctx.save();
			
			Map.ctx.translate( self.previousX + self.offsetX + Map.viewPortX, self.previousY + self.offsetY + Map.viewPortY );
			
			Map.ctx.rotate( ( self.rotation - 90 ) * Math.PI / 180 );
			
			// Map.ctx.shadowColor = 'rgba(0, 0, 0, 0.7)';
			// Map.ctx.shadowOffsetX = 3;
			// Map.ctx.shadowOffsetY = 3;
			
			Map.ctx.drawImage(
							_moveFrames[ _currentIndex ].image,
							- self.offsetX,
							- self.offsetY
						);
			
			Map.ctx.restore();
			
			// Map.ctx.globalAlpha = 1;
		}
		
		//remove the deathDecay
		this.remove = function()
		{
			clearTimeout( _changeFrameFunctionPointer );
			
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[0][ this.ID ] = null;
			
			delete _tc._internal.spellEffects[ this.characterSpellEffectID ];
		}
		
		var _changeFrameFunction = function()
		{
			_currentIndex++;
			
			if( _currentIndex > _maxFrames )
			{
				_currentIndex = 1;
				
				setTimeout( _changeFrameFunction, 2000 + Math.random() * 5000 );
				
				return;
			}
			
			_changeFrameFunctionPointer = setTimeout( _changeFrameFunction, 100 );
		}
		
		_changeFrameFunction();
		
	} //end bombardierBeetleDeath

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.BoxWaved.js
*/

	
	spellEffects[ 'BoxWaved' ] = function( args )
	{
		var self = this,
				_moveFrames = {},
				_tc = args.targetCharacter,
				_tcd = _tc.characterData,
				_changeFrameFunctionPointer = null,
				_currentIndex = 1,
				_maxFrames = 8;
		
		this.ID = spellEffects.layer[0].push( this ) - 1;
		this.characterSpellEffectID = _tc._internal.spellEffects.push( this ) - 1;
		this.offsetX = 20;
		this.offsetY = 20;
		this.rotation = _tcd.character_rotation;
		this.deleteRange = 40;
		this.previousX = _tcd.character_zone_x - this.offsetX;
		this.previousY = _tcd.character_zone_y - this.offsetY;
		
		// initialize
		
		for(var i=1;i<=_maxFrames;i++)
		{
			_moveFrames[ i ] = { image: new Image(), alpha: 0 };
			_moveFrames[ i ].image.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/BoxWaved/BoxWaved' + i + '.png';
		}
		
		//draw the bombardierBeetleDeath spatter
		this.draw = function()
		{
			Map.ctx.save();
			
			Map.ctx.translate( self.previousX + self.offsetX + Map.viewPortX, self.previousY + self.offsetY + Map.viewPortY );
			
			Map.ctx.rotate( ( self.rotation - 90 ) * Math.PI / 180 );
			
			Map.ctx.shadowColor = 'rgba(0, 0, 0, 0.7)';
			Map.ctx.shadowOffsetX = 3;
			Map.ctx.shadowOffsetY = 3;
			
			Map.ctx.drawImage(
							_moveFrames[ _currentIndex ].image,
							- self.offsetX,
							- self.offsetY
						);
			
			Map.ctx.restore();
			
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the deathDecay
		this.remove = function()
		{
			clearTimeout( _changeFrameFunctionPointer );
			
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[0][ this.ID ] = null;
			
			delete _tc._internal.spellEffects[ this.characterSpellEffectID ];
		}
		
		var _changeFrameFunction = function()
		{
			_currentIndex++;
			
			if( _currentIndex > _maxFrames )
			{
				_currentIndex = 1;
				
				setTimeout( _changeFrameFunction, 2000 + Math.random() * 5000 );
				
				return;
			}
			
			_changeFrameFunctionPointer = setTimeout( _changeFrameFunction, 100 );
		}
		
		_changeFrameFunction();
		
	} //end bombardierBeetleDeath

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.BoxWavesRadiant.js
*/

	
	spellEffects[ 'BoxWavesRadiant' ] = function( args )
	{
		var self = this,
				_moveFrames = {},
				_tc = args.targetCharacter,
				_tcd = _tc.characterData,
				_changeFrameFunctionPointer = null,
				_currentIndex = 1,
				_maxFrames = 7;
		
		this.ID = spellEffects.layer[0].push( this ) - 1;
		this.characterSpellEffectID = _tc._internal.spellEffects.push( this ) - 1;
		this.offsetX = 60;
		this.offsetY = 60;
		this.rotation = _tcd.character_rotation;
		this.deleteRange = 40;
		this.previousX = _tcd.character_zone_x - this.offsetX;
		this.previousY = _tcd.character_zone_y - this.offsetY;
		
		// initialize
		
		for(var i=1;i<=_maxFrames;i++)
		{
			_moveFrames[ i ] = { image: new Image(), alpha: 0 };
			_moveFrames[ i ].image.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/BoxWavesRadiant/BoxWavesRadiant' + i + '.png';
		}
		
		//draw the bombardierBeetleDeath spatter
		this.draw = function()
		{
			Map.ctx.save();
			
			Map.ctx.translate( self.previousX + self.offsetX + Map.viewPortX, self.previousY + self.offsetY + Map.viewPortY );
			
			Map.ctx.rotate( ( self.rotation - 90 ) * Math.PI / 180 );
			
			// Map.ctx.shadowColor = 'rgba(0, 0, 0, 0.7)';
			// Map.ctx.shadowOffsetX = 3;
			// Map.ctx.shadowOffsetY = 3;
			
			Map.ctx.drawImage(
							_moveFrames[ _currentIndex ].image,
							- self.offsetX,
							- self.offsetY
						);
			
			Map.ctx.restore();
			
			// Map.ctx.globalAlpha = 1;
		}
		
		//remove the deathDecay
		this.remove = function()
		{
			clearTimeout( _changeFrameFunctionPointer );
			
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[0][ this.ID ] = null;
			
			delete _tc._internal.spellEffects[ this.characterSpellEffectID ];
		}
		
		var _changeFrameFunction = function()
		{
			_currentIndex++;
			
			if( _currentIndex > _maxFrames )
			{
				_currentIndex = 1;
				
				setTimeout( _changeFrameFunction, 2000 + Math.random() * 5000 );
				
				return;
			}
			
			_changeFrameFunctionPointer = setTimeout( _changeFrameFunction, 100 );
		}
		
		_changeFrameFunction();
		
	} //end bombardierBeetleDeath

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.CaveDripEerie.js
*/

	
	spellEffects[ 'CaveDripEerie' ] = function( args )
	{
		var self = this,
				_ccd = Component.bugcraft.currentCharacterObject.characterData,
				_moveFrames = {},
				_tc = args.targetCharacter,
				_tcd = _tc.characterData,
				_changeFrameFunctionPointer = null,
				_currentIndex = 1,
				_maxFrames = 1,
				_backgroundSound = null,
				_soundTimeoutPointer = null;
		
		this.ID = spellEffects.layer[0].push( this ) - 1;
		this.characterSpellEffectID = _tc._internal.spellEffects.push( this ) - 1;
		this.offsetX = 20;
		this.offsetY = 20;
		this.rotation = _tcd.character_rotation;
		this.deleteRange = 40;
		this.previousX = _tcd.character_zone_x - this.offsetX;
		this.previousY = _tcd.character_zone_y - this.offsetY;
		
		// initialize
		
		var _soundLoop = function()
		{
			_backgroundSound = Application.sound.playExclusive({
												url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/CaveDripEerie/CaveDripEerie.mp3',
												volume: spellEffects.volumeByRangeVoice(
																			_ccd.character_zone_x,
																			_ccd.character_zone_y,
																			_tcd.character_zone_x,
																			_tcd.character_zone_y,
																			spellEffects.volumeRangeLong
																		),
												onFinish: function()
												{
													_soundTimeoutPointer = setTimeout( function()
													{
														_soundLoop();
													}, 4 + Math.random() * ( 6 - 4 ) );
												}
											});
		}
		
		for(var i=1;i<=_maxFrames;i++)
		{
			_moveFrames[ i ] = { image: new Image(), alpha: 0 };
			_moveFrames[ i ].image.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/CaveDripEerie/CaveDripEerie' + i + '.png';
		}
		
		//draw the bombardierBeetleDeath spatter
		this.draw = function()
		{
			Map.ctx.save();
			
			Map.ctx.translate( self.previousX + self.offsetX + Map.viewPortX, self.previousY + self.offsetY + Map.viewPortY );
			
			Map.ctx.rotate( ( self.rotation - 90 ) * Math.PI / 180 );
			
			Map.ctx.shadowColor = 'rgba(0, 0, 0, 0.7)';
			Map.ctx.shadowOffsetX = 3;
			Map.ctx.shadowOffsetY = 3;
			
			Map.ctx.drawImage(
							_moveFrames[ _currentIndex ].image,
							- self.offsetX,
							- self.offsetY
						);
			
			Map.ctx.restore();
			
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the deathDecay
		this.remove = function()
		{
			clearTimeout( _changeFrameFunctionPointer );
			clearTimeout( _soundTimeoutPointer );
			
			if( _backgroundSound )
			{
				_backgroundSound.stop();
			}
			
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[0][ this.ID ] = null;
			
			delete _tc._internal.spellEffects[ this.characterSpellEffectID ];
		}
		
		var _changeFrameFunction = function()
		{
			_currentIndex++;
			
			if( _currentIndex > _maxFrames )
			{
				_currentIndex = 1;
				
				setTimeout( _changeFrameFunction, 2000 + Math.random() * 5000 );
				
				return;
			}
			
			_changeFrameFunctionPointer = setTimeout( _changeFrameFunction, 100 );
		}
		
		_soundLoop();
		_changeFrameFunction();
		
	} //end bombardierBeetleDeath

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.CoccoonExplode.js
*/

	
	spellEffects[ 'CoccoonExplode' ] = function( args )
	{
		var self = this,
				_moveFrames = {},
				_tc = args.targetCharacter,
				_tcd = _tc.characterData,
				_changeFrameFunctionPointer = null,
				_currentIndex = 1,
				_maxFrames = 5;
		
		this.ID = spellEffects.layer[0].push( this ) - 1;
		this.characterSpellEffectID = _tc._internal.spellEffects.push( this ) - 1;
		this.offsetX = 20;
		this.offsetY = 20;
		this.rotation = _tcd.character_rotation;
		this.deleteRange = 40;
		this.previousX = _tcd.character_zone_x - this.offsetX;
		this.previousY = _tcd.character_zone_y - this.offsetY;
		
		// initialize
		
		for(var i=1;i<=_maxFrames;i++)
		{
			_moveFrames[ i ] = { image: new Image(), alpha: 0 };
			_moveFrames[ i ].image.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/CoccoonExplode/CoccoonExplode' + i + '.png';
		}
		
		//draw the bombardierBeetleDeath spatter
		this.draw = function()
		{
			Map.ctx.save();
			
			Map.ctx.translate( self.previousX + self.offsetX + Map.viewPortX, self.previousY + self.offsetY + Map.viewPortY );
			
			Map.ctx.rotate( ( self.rotation - 90 ) * Math.PI / 180 );
			
			Map.ctx.shadowColor = 'rgba(0, 0, 0, 0.7)';
			Map.ctx.shadowOffsetX = 3;
			Map.ctx.shadowOffsetY = 3;
			
			Map.ctx.drawImage(
							_moveFrames[ _currentIndex ].image,
							- self.offsetX,
							- self.offsetY
						);
			
			Map.ctx.restore();
			
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the deathDecay
		this.remove = function()
		{
			clearTimeout( _changeFrameFunctionPointer );
			
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[0][ this.ID ] = null;
			
			delete _tc._internal.spellEffects[ this.characterSpellEffectID ];
		}
		
		var _changeFrameFunction = function()
		{
			_currentIndex++;
			
			if( _currentIndex > _maxFrames )
			{
				_currentIndex = 1;
				
				setTimeout( _changeFrameFunction, 2000 + Math.random() * 5000 );
				
				return;
			}
			
			_changeFrameFunctionPointer = setTimeout( _changeFrameFunction, 100 );
		}
		
		_changeFrameFunction();
		
	} //end bombardierBeetleDeath

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.CorpseCocSound.js
*/

	
	spellEffects[ 'CorpseCocSound' ] = function( args )
	{
		var self = this,
				_ccd = Component.bugcraft.currentCharacterObject.characterData,
				_moveFrames = {},
				_tc = args.targetCharacter,
				_tcd = _tc.characterData,
				_changeFrameFunctionPointer = null,
				_currentIndex = 1,
				_maxFrames = 14;
		
		this.ID = spellEffects.layer[0].push( this ) - 1;
		this.characterSpellEffectID = _tc._internal.spellEffects.push( this ) - 1;
		this.offsetX = 20;
		this.offsetY = 20;
		this.rotation = _tcd.character_rotation;
		this.deleteRange = 40;
		this.previousX = _tcd.character_zone_x - this.offsetX;
		this.previousY = _tcd.character_zone_y - this.offsetY;
		
		// initialize
		
		Application.sound.playExclusive({
											url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/CorpseCocSound/CorpseCocSound.mp3',
											volume: spellEffects.volumeByRangeVoice(
																		_ccd.character_zone_x,
																		_ccd.character_zone_y,
																		_tcd.character_zone_x,
																		_tcd.character_zone_y,
																		spellEffects.volumeRangeLong
																	),
											onFinish: function()
											{
												
											}
										});
		
		for(var i=1;i<=_maxFrames;i++)
		{
			_moveFrames[ i ] = { image: new Image(), alpha: 0 };
			_moveFrames[ i ].image.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/CorpseCocSound/CorpseCocSound' + i + '.png';
		}
		
		//draw the bombardierBeetleDeath spatter
		this.draw = function()
		{
			Map.ctx.save();
			
			Map.ctx.translate( self.previousX + self.offsetX + Map.viewPortX, self.previousY + self.offsetY + Map.viewPortY );
			
			Map.ctx.rotate( ( self.rotation - 90 ) * Math.PI / 180 );
			
			Map.ctx.shadowColor = 'rgba(0, 0, 0, 0.7)';
			Map.ctx.shadowOffsetX = 3;
			Map.ctx.shadowOffsetY = 3;
			
			Map.ctx.drawImage(
							_moveFrames[ _currentIndex ].image,
							- self.offsetX,
							- self.offsetY
						);
			
			Map.ctx.restore();
			
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the deathDecay
		this.remove = function()
		{
			clearTimeout( _changeFrameFunctionPointer );
			
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[0][ this.ID ] = null;
			
			delete _tc._internal.spellEffects[ this.characterSpellEffectID ];
		}
		
		var _changeFrameFunction = function()
		{
			_currentIndex++;
			
			if( _currentIndex > _maxFrames )
			{
				self.remove();
				
				return;
			}
			
			_changeFrameFunctionPointer = setTimeout( _changeFrameFunction, 100 );
		}
		
		_changeFrameFunction();
		
	} //end bombardierBeetleDeath

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.CorpseCocoon.js
*/

	
	spellEffects[ 'CorpseCocoon' ] = function( args )
	{
		var self = this,
				_ccd = Component.bugcraft.currentCharacterObject.characterData,
				_moveFrames = {},
				_tc = args.targetCharacter,
				_tcd = _tc.characterData,
				_changeFrameFunctionPointer = null,
				_currentIndex = 1,
				_maxFrames = 5;
		
		this.ID = spellEffects.layer[0].push( this ) - 1;
		this.characterSpellEffectID = _tc._internal.spellEffects.push( this ) - 1;
		this.offsetX = 20;
		this.offsetY = 20;
		this.rotation = _tcd.character_rotation;
		this.deleteRange = 40;
		this.previousX = _tcd.character_zone_x - this.offsetX;
		this.previousY = _tcd.character_zone_y - this.offsetY;
		
		// initialize
		
		for(var i=1;i<=_maxFrames;i++)
		{
			_moveFrames[ i ] = { image: new Image(), alpha: 0 };
			_moveFrames[ i ].image.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/CorpseCocoon/CorpseCocoon' + i + '.png';
		}
		
		//draw the bombardierBeetleDeath spatter
		this.draw = function()
		{
			Map.ctx.save();
			
			Map.ctx.translate( self.previousX + self.offsetX + Map.viewPortX, self.previousY + self.offsetY + Map.viewPortY );
			
			Map.ctx.rotate( ( self.rotation - 90 ) * Math.PI / 180 );
			
			Map.ctx.shadowColor = 'rgba(0, 0, 0, 0.7)';
			Map.ctx.shadowOffsetX = 3;
			Map.ctx.shadowOffsetY = 3;
			
			Map.ctx.drawImage(
							_moveFrames[ _currentIndex ].image,
							- self.offsetX,
							- self.offsetY
						);
			
			Map.ctx.restore();
			
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the deathDecay
		this.remove = function()
		{
			clearTimeout( _changeFrameFunctionPointer );
			
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[0][ this.ID ] = null;
			
			delete _tc._internal.spellEffects[ this.characterSpellEffectID ];
		}
		
		var _changeFrameFunction = function()
		{
			_currentIndex++;
			
			if( _currentIndex > _maxFrames )
			{
				self.remove();
				
				return;
			}
			
			_changeFrameFunctionPointer = setTimeout( _changeFrameFunction, 100 );
		}
		
		_changeFrameFunction();
		
	} //end bombardierBeetleDeath

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.Creak6sec.js
*/

	
	spellEffects[ 'Creak6sec' ] = function( args )
	{
		var self = this,
				_ccd = Component.bugcraft.currentCharacterObject.characterData,
				_moveFrames = {},
				_tc = args.targetCharacter,
				_tcd = _tc.characterData,
				_changeFrameFunctionPointer = null,
				_currentIndex = 1,
				_maxFrames = 1,
				_backgroundSound = null;
		
		this.ID = spellEffects.layer[0].push( this ) - 1;
		this.characterSpellEffectID = _tc._internal.spellEffects.push( this ) - 1;
		this.offsetX = 20;
		this.offsetY = 20;
		this.rotation = _tcd.character_rotation;
		this.deleteRange = 40;
		this.previousX = _tcd.character_zone_x - this.offsetX;
		this.previousY = _tcd.character_zone_y - this.offsetY;
		
		// initialize
		
		var _soundLoop = function()
		{
			_backgroundSound = Application.sound.playExclusive({
												url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/Creak6sec/Creak6sec.mp3',
												volume: spellEffects.volumeByRangeVoice(
																			_ccd.character_zone_x,
																			_ccd.character_zone_y,
																			_tcd.character_zone_x,
																			_tcd.character_zone_y,
																			spellEffects.volumeRangeLong
																		),
												onFinish: function()
												{
													_soundLoop();
												}
											});
		}
		
		for(var i=1;i<=_maxFrames;i++)
		{
			_moveFrames[ i ] = { image: new Image(), alpha: 0 };
			_moveFrames[ i ].image.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/Creak6sec/Creak6sec' + i + '.png';
		}
		
		//draw the bombardierBeetleDeath spatter
		this.draw = function()
		{
			Map.ctx.save();
			
			Map.ctx.translate( self.previousX + self.offsetX + Map.viewPortX, self.previousY + self.offsetY + Map.viewPortY );
			
			Map.ctx.rotate( ( self.rotation - 90 ) * Math.PI / 180 );
			
			Map.ctx.shadowColor = 'rgba(0, 0, 0, 0.7)';
			Map.ctx.shadowOffsetX = 3;
			Map.ctx.shadowOffsetY = 3;
			
			Map.ctx.drawImage(
							_moveFrames[ _currentIndex ].image,
							- self.offsetX,
							- self.offsetY
						);
			
			Map.ctx.restore();
			
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the deathDecay
		this.remove = function()
		{
			clearTimeout( _changeFrameFunctionPointer );
			
			if( _backgroundSound )
			{
				_backgroundSound.stop();
			}
			
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[0][ this.ID ] = null;
			
			delete _tc._internal.spellEffects[ this.characterSpellEffectID ];
		}
		
		var _changeFrameFunction = function()
		{
			_currentIndex++;
			
			if( _currentIndex > _maxFrames )
			{
				_currentIndex = 1;
				
				setTimeout( _changeFrameFunction, 2000 + Math.random() * 5000 );
				
				return;
			}
			
			_changeFrameFunctionPointer = setTimeout( _changeFrameFunction, 100 );
		}
		
		_soundLoop();
		_changeFrameFunction();
		
	} //end bombardierBeetleDeath

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.Droid.js
*/

	
	spellEffects[ 'Droid' ] = function( args )
	{
		var self = this,
				_ccd = Component.bugcraft.currentCharacterObject.characterData,
				_moveFrames = {},
				_tc = args.targetCharacter,
				_tcd = _tc.characterData,
				_changeFrameFunctionPointer = null,
				_currentIndex = 1,
				_maxFrames = 1;
		
		this.ID = spellEffects.layer[0].push( this ) - 1;
		this.characterSpellEffectID = _tc._internal.spellEffects.push( this ) - 1;
		this.offsetX = 20;
		this.offsetY = 20;
		this.rotation = _tcd.character_rotation;
		this.deleteRange = 40;
		this.previousX = _tcd.character_zone_x - this.offsetX;
		this.previousY = _tcd.character_zone_y - this.offsetY;
		
		// initialize
		
		Application.sound.playExclusive({
											url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/Droid/Droid.mp3',
											volume: spellEffects.volumeByRangeVoice(
																		_ccd.character_zone_x,
																		_ccd.character_zone_y,
																		_tcd.character_zone_x,
																		_tcd.character_zone_y,
																		spellEffects.volumeRangeLong
																	),
											onFinish: function()
											{
												
											}
										});
		
		for(var i=1;i<=_maxFrames;i++)
		{
			_moveFrames[ i ] = { image: new Image(), alpha: 0 };
			_moveFrames[ i ].image.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/Droid/Droid' + i + '.png';
		}
		
		//draw the bombardierBeetleDeath spatter
		this.draw = function()
		{
			Map.ctx.save();
			
			Map.ctx.translate( self.previousX + self.offsetX + Map.viewPortX, self.previousY + self.offsetY + Map.viewPortY );
			
			Map.ctx.rotate( ( self.rotation - 90 ) * Math.PI / 180 );
			
			Map.ctx.shadowColor = 'rgba(0, 0, 0, 0.7)';
			Map.ctx.shadowOffsetX = 3;
			Map.ctx.shadowOffsetY = 3;
			
			Map.ctx.drawImage(
							_moveFrames[ _currentIndex ].image,
							- self.offsetX,
							- self.offsetY
						);
			
			Map.ctx.restore();
			
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the deathDecay
		this.remove = function()
		{
			clearTimeout( _changeFrameFunctionPointer );
			
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[0][ this.ID ] = null;
			
			delete _tc._internal.spellEffects[ this.characterSpellEffectID ];
		}
		
		var _changeFrameFunction = function()
		{
			_currentIndex++;
			
			if( _currentIndex > _maxFrames )
			{
				_currentIndex = 1;
				
				setTimeout( _changeFrameFunction, 2000 + Math.random() * 5000 );
				
				return;
			}
			
			_changeFrameFunctionPointer = setTimeout( _changeFrameFunction, 100 );
		}
		
		_changeFrameFunction();
		
	} //end bombardierBeetleDeath

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.EggDeathz.js
*/

	
	spellEffects[ 'EggDeathz' ] = function( args )
	{
		var self = this,
				_ccd = Component.bugcraft.currentCharacterObject.characterData,
				_moveFrames = {},
				_tc = args.targetCharacter,
				_tcd = _tc.characterData,
				_changeFrameFunctionPointer = null,
				_currentIndex = 1,
				_maxFrames = 4;
		
		this.ID = spellEffects.layer[0].push( this ) - 1;
		this.characterSpellEffectID = _tc._internal.spellEffects.push( this ) - 1;
		this.offsetX = 20;
		this.offsetY = 20;
		this.rotation = _tcd.character_rotation;
		this.deleteRange = 40;
		this.previousX = _tcd.character_zone_x - this.offsetX;
		this.previousY = _tcd.character_zone_y - this.offsetY;
		
		// initialize
		
		Application.sound.playExclusive({
											url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/EggDeathz/EggDeathz.mp3',
											volume: spellEffects.volumeByRangeVoice(
																		_ccd.character_zone_x,
																		_ccd.character_zone_y,
																		_tcd.character_zone_x,
																		_tcd.character_zone_y,
																		spellEffects.volumeRangeLong
																	),
											onFinish: function()
											{
												
											}
										});
		
		for(var i=1;i<=_maxFrames;i++)
		{
			_moveFrames[ i ] = { image: new Image(), alpha: 0 };
			_moveFrames[ i ].image.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/EggDeathz/EggDeathz' + i + '.png';
		}
		
		//draw the bombardierBeetleDeath spatter
		this.draw = function()
		{
			Map.ctx.save();
			
			Map.ctx.translate( self.previousX + self.offsetX + Map.viewPortX, self.previousY + self.offsetY + Map.viewPortY );
			
			Map.ctx.rotate( ( self.rotation - 90 ) * Math.PI / 180 );
			
			Map.ctx.shadowColor = 'rgba(0, 0, 0, 0.7)';
			Map.ctx.shadowOffsetX = 3;
			Map.ctx.shadowOffsetY = 3;
			
			Map.ctx.drawImage(
							_moveFrames[ _currentIndex ].image,
							- self.offsetX,
							- self.offsetY
						);
			
			Map.ctx.restore();
			
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the deathDecay
		this.remove = function()
		{
			clearTimeout( _changeFrameFunctionPointer );
			
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[0][ this.ID ] = null;
			
			delete _tc._internal.spellEffects[ this.characterSpellEffectID ];
		}
		
		var _changeFrameFunction = function()
		{
			_currentIndex++;
			
			if( _currentIndex > _maxFrames )
			{
				self.remove();
				
				return;
			}
			
			_changeFrameFunctionPointer = setTimeout( _changeFrameFunction, 100 );
		}
		
		_changeFrameFunction();
		
	} //end bombardierBeetleDeath

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.EggDie.js
*/

	
	spellEffects[ 'EggDie' ] = function( args )
	{
		var self = this,
				_ccd = Component.bugcraft.currentCharacterObject.characterData,
				_moveFrames = {},
				_tc = args.targetCharacter,
				_tcd = _tc.characterData,
				_changeFrameFunctionPointer = null,
				_currentIndex = 1,
				_maxFrames = 5;
		
		this.ID = spellEffects.layer[0].push( this ) - 1;
		this.characterSpellEffectID = _tc._internal.spellEffects.push( this ) - 1;
		this.offsetX = 20;
		this.offsetY = 20;
		this.rotation = _tcd.character_rotation;
		this.deleteRange = 40;
		this.previousX = _tcd.character_zone_x - this.offsetX;
		this.previousY = _tcd.character_zone_y - this.offsetY;
		
		// initialize
		
		Application.sound.playExclusive({
											url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/EggDie/EggDie.mp3',
											volume: spellEffects.volumeByRangeVoice(
																		_ccd.character_zone_x,
																		_ccd.character_zone_y,
																		_tcd.character_zone_x,
																		_tcd.character_zone_y,
																		spellEffects.volumeRangeLong
																	),
											onFinish: function()
											{
												
											}
										});
		
		for(var i=1;i<=_maxFrames;i++)
		{
			_moveFrames[ i ] = { image: new Image(), alpha: 0 };
			_moveFrames[ i ].image.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/EggDie/EggDie' + i + '.png';
		}
		
		//draw the bombardierBeetleDeath spatter
		this.draw = function()
		{
			Map.ctx.save();
			
			Map.ctx.translate( self.previousX + self.offsetX + Map.viewPortX, self.previousY + self.offsetY + Map.viewPortY );
			
			Map.ctx.rotate( ( self.rotation - 90 ) * Math.PI / 180 );
			
			Map.ctx.shadowColor = 'rgba(0, 0, 0, 0.7)';
			Map.ctx.shadowOffsetX = 3;
			Map.ctx.shadowOffsetY = 3;
			
			Map.ctx.drawImage(
							_moveFrames[ _currentIndex ].image,
							- self.offsetX,
							- self.offsetY
						);
			
			Map.ctx.restore();
			
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the deathDecay
		this.remove = function()
		{
			clearTimeout( _changeFrameFunctionPointer );
			
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[0][ this.ID ] = null;
			
			delete _tc._internal.spellEffects[ this.characterSpellEffectID ];
		}
		
		var _changeFrameFunction = function()
		{
			_currentIndex++;
			
			if( _currentIndex > _maxFrames )
			{
				_currentIndex = 1;
				
				setTimeout( _changeFrameFunction, 2000 + Math.random() * 5000 );
				
				return;
			}
			
			_changeFrameFunctionPointer = setTimeout( _changeFrameFunction, 100 );
		}
		
		_changeFrameFunction();
		
	} //end bombardierBeetleDeath

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.EggDrone.js
*/

	
	spellEffects[ 'EggDrone' ] = function( args )
	{
		var self = this,
				_ccd = Component.bugcraft.currentCharacterObject.characterData,
				_moveFrames = {},
				_tc = args.targetCharacter,
				_tcd = _tc.characterData,
				_changeFrameFunctionPointer = null,
				_currentIndex = 1,
				_maxFrames = 1,
				_backgroundSound = null,
				_soundTimeoutPointer = null;
		
		this.ID = spellEffects.layer[0].push( this ) - 1;
		this.characterSpellEffectID = _tc._internal.spellEffects.push( this ) - 1;
		this.offsetX = 20;
		this.offsetY = 20;
		this.rotation = _tcd.character_rotation;
		this.deleteRange = 40;
		this.previousX = _tcd.character_zone_x - this.offsetX;
		this.previousY = _tcd.character_zone_y - this.offsetY;
		
		// initialize
		
		var _soundLoop = function()
		{
			_backgroundSound = Application.sound.playExclusive({
												url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/EggDrone/EggDrone.mp3',
												volume: spellEffects.volumeByRangeVoice(
																			_ccd.character_zone_x,
																			_ccd.character_zone_y,
																			_tcd.character_zone_x,
																			_tcd.character_zone_y,
																			spellEffects.volumeRangeLong
																		),
												onFinish: function()
												{
													_soundTimeoutPointer = setTimeout( function()
													{
														_soundLoop();
													}, 1 + Math.random() * ( 2 - 1 ) );
												}
											});
		}
		
		for(var i=1;i<=_maxFrames;i++)
		{
			_moveFrames[ i ] = { image: new Image(), alpha: 0 };
			_moveFrames[ i ].image.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/EggDrone/EggDrone' + i + '.png';
		}
		
		//draw the bombardierBeetleDeath spatter
		this.draw = function()
		{
			Map.ctx.save();
			
			Map.ctx.translate( self.previousX + self.offsetX + Map.viewPortX, self.previousY + self.offsetY + Map.viewPortY );
			
			Map.ctx.rotate( ( self.rotation - 90 ) * Math.PI / 180 );
			
			Map.ctx.shadowColor = 'rgba(0, 0, 0, 0.7)';
			Map.ctx.shadowOffsetX = 3;
			Map.ctx.shadowOffsetY = 3;
			
			Map.ctx.drawImage(
							_moveFrames[ _currentIndex ].image,
							- self.offsetX,
							- self.offsetY
						);
			
			Map.ctx.restore();
			
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the deathDecay
		this.remove = function()
		{
			clearTimeout( _changeFrameFunctionPointer );
			clearTimeout( _soundTimeoutPointer );
			
			if( _backgroundSound )
			{
				_backgroundSound.stop();
			}
			
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[0][ this.ID ] = null;
			
			delete _tc._internal.spellEffects[ this.characterSpellEffectID ];
		}
		
		var _changeFrameFunction = function()
		{
			_currentIndex++;
			
			if( _currentIndex > _maxFrames )
			{
				_currentIndex = 1;
				
				setTimeout( _changeFrameFunction, 2000 + Math.random() * 5000 );
				
				return;
			}
			
			_changeFrameFunctionPointer = setTimeout( _changeFrameFunction, 100 );
		}
		
		_soundLoop();
		_changeFrameFunction();
		
	} //end bombardierBeetleDeath

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.EggPulse.js
*/

	
	spellEffects[ 'EggPulse' ] = function( args )
	{
		var self = this,
				_ccd = Component.bugcraft.currentCharacterObject.characterData,
				_moveFrames = {},
				_tc = args.targetCharacter,
				_tcd = _tc.characterData,
				_changeFrameFunctionPointer = null,
				_currentIndex = 1,
				_maxFrames = 16,
				_backgroundSound = null,
				_soundTimeoutPointer = null;
		
		this.ID = spellEffects.layer[0].push( this ) - 1;
		this.characterSpellEffectID = _tc._internal.spellEffects.push( this ) - 1;
		this.offsetX = 20;
		this.offsetY = 20;
		this.rotation = _tcd.character_rotation;
		this.deleteRange = 40;
		this.previousX = _tcd.character_zone_x - this.offsetX;
		this.previousY = _tcd.character_zone_y - this.offsetY;
		
		// initialize
		
		var _soundLoop = function()
		{
			_backgroundSound = Application.sound.playExclusive({
												url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/EggPulse/EggPulse.mp3',
												volume: spellEffects.volumeByRangeVoice(
																			_ccd.character_zone_x,
																			_ccd.character_zone_y,
																			_tcd.character_zone_x,
																			_tcd.character_zone_y,
																			spellEffects.volumeRangeLong
																		),
												onFinish: function()
												{
													_soundTimeoutPointer = setTimeout( function()
													{
														_soundLoop();
													}, 1 + Math.random() * ( 2 - 1 ) );
												}
											});
		}
		
		for(var i=1;i<=_maxFrames;i++)
		{
			_moveFrames[ i ] = { image: new Image(), alpha: 0 };
			_moveFrames[ i ].image.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/EggPulse/EggPulse' + i + '.png';
		}
		
		//draw the bombardierBeetleDeath spatter
		this.draw = function()
		{
			Map.ctx.save();
			
			Map.ctx.translate( self.previousX + self.offsetX + Map.viewPortX, self.previousY + self.offsetY + Map.viewPortY );
			
			Map.ctx.rotate( ( self.rotation - 90 ) * Math.PI / 180 );
			
			Map.ctx.shadowColor = 'rgba(0, 0, 0, 0.7)';
			Map.ctx.shadowOffsetX = 3;
			Map.ctx.shadowOffsetY = 3;
			
			Map.ctx.drawImage(
							_moveFrames[ _currentIndex ].image,
							- self.offsetX,
							- self.offsetY
						);
			
			Map.ctx.restore();
			
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the deathDecay
		this.remove = function()
		{
			clearTimeout( _changeFrameFunctionPointer );
			clearTimeout( _soundTimeoutPointer );
			
			if( _backgroundSound )
			{
				_backgroundSound.stop();
			}
			
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[0][ this.ID ] = null;
			
			delete _tc._internal.spellEffects[ this.characterSpellEffectID ];
		}
		
		var _changeFrameFunction = function()
		{
			_currentIndex++;
			
			if( _currentIndex > _maxFrames )
			{
				_currentIndex = 1;
				
				setTimeout( _changeFrameFunction, 2000 + Math.random() * 5000 );
				
				return;
			}
			
			_changeFrameFunctionPointer = setTimeout( _changeFrameFunction, 100 );
		}
		
		_soundLoop();
		_changeFrameFunction();
		
	} //end bombardierBeetleDeath

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.FlagFlap.js
*/

	
	spellEffects[ 'FlagFlap' ] = function( args )
	{
		var self = this,
				_ccd = Component.bugcraft.currentCharacterObject.characterData,
				_moveFrames = {},
				_tc = args.targetCharacter,
				_tcd = _tc.characterData,
				_changeFrameFunctionPointer = null,
				_currentIndex = 1,
				_maxFrames = 1,
				_backgroundSound = null;
		
		this.ID = spellEffects.layer[0].push( this ) - 1;
		this.characterSpellEffectID = _tc._internal.spellEffects.push( this ) - 1;
		this.offsetX = 20;
		this.offsetY = 20;
		this.rotation = _tcd.character_rotation;
		this.deleteRange = 40;
		this.previousX = _tcd.character_zone_x - this.offsetX;
		this.previousY = _tcd.character_zone_y - this.offsetY;
		
		// initialize
		
		var _soundLoop = function()
		{
			_backgroundSound = Application.sound.playExclusive({
												url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/FlagFlap/FlagFlap.mp3',
												volume: spellEffects.volumeByRangeVoice(
																			_ccd.character_zone_x,
																			_ccd.character_zone_y,
																			_tcd.character_zone_x,
																			_tcd.character_zone_y,
																			spellEffects.volumeRangeLong
																		),
												onFinish: function()
												{
													_soundLoop();
												}
											});
		}
		
		// for(var i=1;i<=_maxFrames;i++)
		// {
		// 	_moveFrames[ i ] = { image: new Image(), alpha: 0 };
		// 	_moveFrames[ i ].image.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/FlagFlap/FlagFlap' + i + '.png';
		// }
		
		//draw the bombardierBeetleDeath spatter
		this.draw = function()
		{
			// Map.ctx.save();
			
			// Map.ctx.translate( self.previousX + self.offsetX + Map.viewPortX, self.previousY + self.offsetY + Map.viewPortY );
			
			// Map.ctx.rotate( ( self.rotation - 90 ) * Math.PI / 180 );
			
			// Map.ctx.shadowColor = 'rgba(0, 0, 0, 0.7)';
			// Map.ctx.shadowOffsetX = 3;
			// Map.ctx.shadowOffsetY = 3;
			
			// Map.ctx.drawImage(
			// 				_moveFrames[ _currentIndex ].image,
			// 				- self.offsetX,
			// 				- self.offsetY
			// 			);
			
			// Map.ctx.restore();
			
			// Map.ctx.globalAlpha = 1;
		}
		
		//remove the deathDecay
		this.remove = function()
		{
			clearTimeout( _changeFrameFunctionPointer );
			
			if( _backgroundSound )
			{
				_backgroundSound.stop();
			}
			
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[0][ this.ID ] = null;
			
			delete _tc._internal.spellEffects[ this.characterSpellEffectID ];
		}
		
		var _changeFrameFunction = function()
		{
			_currentIndex++;
			
			if( _currentIndex > _maxFrames )
			{
				_currentIndex = 1;
				
				setTimeout( _changeFrameFunction, 2000 + Math.random() * 5000 );
				
				return;
			}
			
			_changeFrameFunctionPointer = setTimeout( _changeFrameFunction, 100 );
		}
		
		_soundLoop();
		// _changeFrameFunction();
		
	} //end bombardierBeetleDeath

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.Flicker.js
*/

	
	spellEffects[ 'Flicker' ] = function( args )
	{
		var self = this,
				_ccd = Component.bugcraft.currentCharacterObject.characterData,
				_moveFrames = {},
				_tc = args.targetCharacter,
				_tcd = _tc.characterData,
				_changeFrameFunctionPointer = null,
				_currentIndex = 1,
				_maxFrames = 1,
				_backgroundSound = null,
				_soundTimeoutPointer = null;
		
		this.ID = spellEffects.layer[0].push( this ) - 1;
		this.characterSpellEffectID = _tc._internal.spellEffects.push( this ) - 1;
		this.offsetX = 20;
		this.offsetY = 20;
		this.rotation = _tcd.character_rotation;
		this.deleteRange = 40;
		this.previousX = _tcd.character_zone_x - this.offsetX;
		this.previousY = _tcd.character_zone_y - this.offsetY;
		
		// initialize
		
		var _soundLoop = function()
		{
			_backgroundSound = Application.sound.playExclusive({
												url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/Flicker/Flicker.mp3',
												volume: spellEffects.volumeByRangeVoice(
																			_ccd.character_zone_x,
																			_ccd.character_zone_y,
																			_tcd.character_zone_x,
																			_tcd.character_zone_y,
																			spellEffects.volumeRangeLong
																		),
												onFinish: function()
												{
													_soundTimeoutPointer = setTimeout( function()
													{
														_soundLoop();
													}, 1 + Math.random() * ( 2 - 1 ) );
												}
											});
		}
		
		for(var i=1;i<=_maxFrames;i++)
		{
			_moveFrames[ i ] = { image: new Image(), alpha: 0 };
			_moveFrames[ i ].image.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/Flicker/Flicker' + i + '.png';
		}
		
		//draw the bombardierBeetleDeath spatter
		this.draw = function()
		{
			Map.ctx.save();
			
			Map.ctx.translate( self.previousX + self.offsetX + Map.viewPortX, self.previousY + self.offsetY + Map.viewPortY );
			
			Map.ctx.rotate( ( self.rotation - 90 ) * Math.PI / 180 );
			
			Map.ctx.shadowColor = 'rgba(0, 0, 0, 0.7)';
			Map.ctx.shadowOffsetX = 3;
			Map.ctx.shadowOffsetY = 3;
			
			Map.ctx.drawImage(
							_moveFrames[ _currentIndex ].image,
							- self.offsetX,
							- self.offsetY
						);
			
			Map.ctx.restore();
			
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the deathDecay
		this.remove = function()
		{
			clearTimeout( _changeFrameFunctionPointer );
			clearTimeout( _soundTimeoutPointer );
			
			if( _backgroundSound )
			{
				_backgroundSound.stop();
			}
			
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[0][ this.ID ] = null;
			
			delete _tc._internal.spellEffects[ this.characterSpellEffectID ];
		}
		
		var _changeFrameFunction = function()
		{
			_currentIndex++;
			
			if( _currentIndex > _maxFrames )
			{
				_currentIndex = 1;
				
				setTimeout( _changeFrameFunction, 2000 + Math.random() * 5000 );
				
				return;
			}
			
			_changeFrameFunctionPointer = setTimeout( _changeFrameFunction, 100 );
		}
		
		_soundLoop();
		_changeFrameFunction();
		
	} //end bombardierBeetleDeath

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.GlowyWavesSound.js
*/

	
	spellEffects[ 'GlowyWavesSound' ] = function( args )
	{
		var self = this,
				_ccd = Component.bugcraft.currentCharacterObject.characterData,
				_moveFrames = {},
				_tc = args.targetCharacter,
				_tcd = _tc.characterData,
				_changeFrameFunctionPointer = null,
				_currentIndex = 1,
				_maxFrames = 9,
				_backgroundSound = null,
				_soundTimeoutPointer = null;
		
		this.ID = spellEffects.layer[0].push( this ) - 1;
		this.characterSpellEffectID = _tc._internal.spellEffects.push( this ) - 1;
		this.offsetX = 20;
		this.offsetY = 20;
		this.rotation = _tcd.character_rotation;
		this.deleteRange = 40;
		this.previousX = _tcd.character_zone_x - this.offsetX;
		this.previousY = _tcd.character_zone_y - this.offsetY;
		
		// initialize
		
		var _soundLoop = function()
		{
			_backgroundSound = Application.sound.playExclusive({
												url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/GlowyWavesSound/GlowyWavesSound.mp3',
												volume: spellEffects.volumeByRangeVoice(
																			_ccd.character_zone_x,
																			_ccd.character_zone_y,
																			_tcd.character_zone_x,
																			_tcd.character_zone_y,
																			spellEffects.volumeRangeLong
																		),
												onFinish: function()
												{
													_soundTimeoutPointer = setTimeout( function()
													{
														_soundLoop();
													}, 1 + Math.random() * ( 3 - [minDelay] ) );
												}
											});
		}
		
		for(var i=1;i<=_maxFrames;i++)
		{
			_moveFrames[ i ] = { image: new Image(), alpha: 0 };
			_moveFrames[ i ].image.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/GlowyWavesSound/GlowyWavesSound' + i + '.png';
		}
		
		//draw the bombardierBeetleDeath spatter
		this.draw = function()
		{
			Map.ctx.save();
			
			Map.ctx.translate( self.previousX + self.offsetX + Map.viewPortX, self.previousY + self.offsetY + Map.viewPortY );
			
			Map.ctx.rotate( ( self.rotation - 90 ) * Math.PI / 180 );
			
			Map.ctx.shadowColor = 'rgba(0, 0, 0, 0.7)';
			Map.ctx.shadowOffsetX = 3;
			Map.ctx.shadowOffsetY = 3;
			
			Map.ctx.drawImage(
							_moveFrames[ _currentIndex ].image,
							- self.offsetX,
							- self.offsetY
						);
			
			Map.ctx.restore();
			
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the deathDecay
		this.remove = function()
		{
			clearTimeout( _changeFrameFunctionPointer );
			clearTimeout( _soundTimeoutPointer );
			
			if( _backgroundSound )
			{
				_backgroundSound.stop();
			}
			
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[0][ this.ID ] = null;
			
			delete _tc._internal.spellEffects[ this.characterSpellEffectID ];
		}
		
		var _changeFrameFunction = function()
		{
			_currentIndex++;
			
			if( _currentIndex > _maxFrames )
			{
				_currentIndex = 1;
				
				setTimeout( _changeFrameFunction, 2000 + Math.random() * 5000 );
				
				return;
			}
			
			_changeFrameFunctionPointer = setTimeout( _changeFrameFunction, 100 );
		}
		
		_soundLoop();
		_changeFrameFunction();
		
	} //end bombardierBeetleDeath

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.JungleAmbient1min.js
*/

	
	spellEffects[ 'JungleAmbient1min' ] = function( args )
	{
		var self = this,
				_ccd = Component.bugcraft.currentCharacterObject.characterData,
				_moveFrames = {},
				_tc = args.targetCharacter,
				_tcd = _tc.characterData,
				_changeFrameFunctionPointer = null,
				_currentIndex = 1,
				_maxFrames = 1,
				_backgroundSound = null;
		
		this.ID = spellEffects.layer[0].push( this ) - 1;
		this.characterSpellEffectID = _tc._internal.spellEffects.push( this ) - 1;
		this.offsetX = 20;
		this.offsetY = 20;
		this.rotation = _tcd.character_rotation;
		this.deleteRange = 40;
		this.previousX = _tcd.character_zone_x - this.offsetX;
		this.previousY = _tcd.character_zone_y - this.offsetY;
		
		// initialize
		
		var _soundLoop = function()
		{
			_backgroundSound = Application.sound.playExclusive({
												url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/JungleAmbient1min/JungleAmbient1min.mp3',
												volume: spellEffects.volumeByRangeVoice(
																			_ccd.character_zone_x,
																			_ccd.character_zone_y,
																			_tcd.character_zone_x,
																			_tcd.character_zone_y,
																			spellEffects.volumeRangeLong
																		),
												onFinish: function()
												{
													_soundLoop();
												}
											});
		}
		
		for(var i=1;i<=_maxFrames;i++)
		{
			_moveFrames[ i ] = { image: new Image(), alpha: 0 };
			_moveFrames[ i ].image.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/JungleAmbient1min/JungleAmbient1min' + i + '.png';
		}
		
		//draw the bombardierBeetleDeath spatter
		this.draw = function()
		{
			Map.ctx.save();
			
			Map.ctx.translate( self.previousX + self.offsetX + Map.viewPortX, self.previousY + self.offsetY + Map.viewPortY );
			
			Map.ctx.rotate( ( self.rotation - 90 ) * Math.PI / 180 );
			
			Map.ctx.shadowColor = 'rgba(0, 0, 0, 0.7)';
			Map.ctx.shadowOffsetX = 3;
			Map.ctx.shadowOffsetY = 3;
			
			Map.ctx.drawImage(
							_moveFrames[ _currentIndex ].image,
							- self.offsetX,
							- self.offsetY
						);
			
			Map.ctx.restore();
			
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the deathDecay
		this.remove = function()
		{
			clearTimeout( _changeFrameFunctionPointer );
			
			if( _backgroundSound )
			{
				_backgroundSound.stop();
			}
			
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[0][ this.ID ] = null;
			
			delete _tc._internal.spellEffects[ this.characterSpellEffectID ];
		}
		
		var _changeFrameFunction = function()
		{
			_currentIndex++;
			
			if( _currentIndex > _maxFrames )
			{
				_currentIndex = 1;
				
				setTimeout( _changeFrameFunction, 2000 + Math.random() * 5000 );
				
				return;
			}
			
			_changeFrameFunctionPointer = setTimeout( _changeFrameFunction, 100 );
		}
		
		_soundLoop();
		_changeFrameFunction();
		
	} //end bombardierBeetleDeath

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.LargeWaveLoop.js
*/

	
	spellEffects[ 'LargeWaveLoop' ] = function( args )
	{
		var self = this,
				_moveFrames = {},
				_tc = args.targetCharacter,
				_tcd = _tc.characterData,
				_changeFrameFunctionPointer = null,
				_currentIndex = 1,
				_maxFrames = 9;
		
		this.ID = spellEffects.layer[0].push( this ) - 1;
		this.characterSpellEffectID = _tc._internal.spellEffects.push( this ) - 1;
		this.offsetX = 20;
		this.offsetY = 20;
		this.rotation = _tcd.character_rotation;
		this.deleteRange = 40;
		this.previousX = _tcd.character_zone_x - this.offsetX;
		this.previousY = _tcd.character_zone_y - this.offsetY;
		
		// initialize
		
		for(var i=1;i<=_maxFrames;i++)
		{
			_moveFrames[ i ] = { image: new Image(), alpha: 0 };
			_moveFrames[ i ].image.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/LargeWaveLoop/LargeWaveLoop' + i + '.png';
		}
		
		//draw the bombardierBeetleDeath spatter
		this.draw = function()
		{
			Map.ctx.save();
			
			Map.ctx.translate( self.previousX + self.offsetX + Map.viewPortX, self.previousY + self.offsetY + Map.viewPortY );
			
			Map.ctx.rotate( ( self.rotation - 90 ) * Math.PI / 180 );
			
			//Map.ctx.shadowColor = 'rgba(0, 0, 0, 0.7)';
			//Map.ctx.shadowOffsetX = 3;
			//Map.ctx.shadowOffsetY = 3;
			
			Map.ctx.drawImage(
							_moveFrames[ _currentIndex ].image,
							- self.offsetX,
							- self.offsetY
						);
			
			Map.ctx.restore();
			
			//Map.ctx.globalAlpha = 1;
		}
		
		//remove the deathDecay
		this.remove = function()
		{
			clearTimeout( _changeFrameFunctionPointer );
			
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[0][ this.ID ] = null;
			
			delete _tc._internal.spellEffects[ this.characterSpellEffectID ];
		}
		
		var _changeFrameFunction = function()
		{
			_currentIndex++;
			
			if( _currentIndex > _maxFrames )
			{
				_currentIndex = 1;
				
				setTimeout( _changeFrameFunction, 2000 + Math.random() * 5000 );
				
				return;
			}
			
			_changeFrameFunctionPointer = setTimeout( _changeFrameFunction, 100 );
		}
		
		_changeFrameFunction();
		
	} //end bombardierBeetleDeath

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.LongCreak.js
*/

	
	spellEffects[ 'LongCreak' ] = function( args )
	{
		var self = this,
				_ccd = Component.bugcraft.currentCharacterObject.characterData,
				_moveFrames = {},
				_tc = args.targetCharacter,
				_tcd = _tc.characterData,
				_changeFrameFunctionPointer = null,
				_currentIndex = 1,
				_maxFrames = 1;
		
		this.ID = spellEffects.layer[0].push( this ) - 1;
		this.characterSpellEffectID = _tc._internal.spellEffects.push( this ) - 1;
		this.offsetX = 20;
		this.offsetY = 20;
		this.rotation = _tcd.character_rotation;
		this.deleteRange = 40;
		this.previousX = _tcd.character_zone_x - this.offsetX;
		this.previousY = _tcd.character_zone_y - this.offsetY;
		
		// initialize
		
		Application.sound.playExclusive({
											url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/LongCreak/LongCreak.mp3',
											volume: spellEffects.volumeByRangeVoice(
																		_ccd.character_zone_x,
																		_ccd.character_zone_y,
																		_tcd.character_zone_x,
																		_tcd.character_zone_y,
																		spellEffects.volumeRangeLong
																	),
											onFinish: function()
											{
												
											}
										});
		
		// for(var i=1;i<=_maxFrames;i++)
		// {
		// 	_moveFrames[ i ] = { image: new Image(), alpha: 0 };
		// 	_moveFrames[ i ].image.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/LongCreak/LongCreak' + i + '.png';
		// }
		
		//draw the bombardierBeetleDeath spatter
		this.draw = function()
		{
			// Map.ctx.save();
			
			// Map.ctx.translate( self.previousX + self.offsetX + Map.viewPortX, self.previousY + self.offsetY + Map.viewPortY );
			
			// Map.ctx.rotate( ( self.rotation - 90 ) * Math.PI / 180 );
			
			// Map.ctx.shadowColor = 'rgba(0, 0, 0, 0.7)';
			// Map.ctx.shadowOffsetX = 3;
			// Map.ctx.shadowOffsetY = 3;
			
			// Map.ctx.drawImage(
			// 				_moveFrames[ _currentIndex ].image,
			// 				- self.offsetX,
			// 				- self.offsetY
			// 			);
			
			// Map.ctx.restore();
			
			// Map.ctx.globalAlpha = 1;
		}
		
		//remove the deathDecay
		this.remove = function()
		{
			clearTimeout( _changeFrameFunctionPointer );
			
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[0][ this.ID ] = null;
			
			delete _tc._internal.spellEffects[ this.characterSpellEffectID ];
		}
		
		var _changeFrameFunction = function()
		{
			_currentIndex++;
			
			if( _currentIndex > _maxFrames )
			{
				_currentIndex = 1;
				
				setTimeout( _changeFrameFunction, 2000 + Math.random() * 5000 );
				
				return;
			}
			
			_changeFrameFunctionPointer = setTimeout( _changeFrameFunction, 100 );
		}
		
		// _changeFrameFunction();
		
	} //end bombardierBeetleDeath

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.LongMellowWaves2min.js
*/

	
	spellEffects[ 'LongMellowWaves2min' ] = function( args )
	{
		var self = this,
				_ccd = Component.bugcraft.currentCharacterObject.characterData,
				_moveFrames = {},
				_tc = args.targetCharacter,
				_tcd = _tc.characterData,
				_changeFrameFunctionPointer = null,
				_currentIndex = 1,
				_maxFrames = 1,
				_backgroundSound = null;
		
		this.ID = spellEffects.layer[0].push( this ) - 1;
		this.characterSpellEffectID = _tc._internal.spellEffects.push( this ) - 1;
		this.offsetX = 20;
		this.offsetY = 20;
		this.rotation = _tcd.character_rotation;
		this.deleteRange = 40;
		this.previousX = _tcd.character_zone_x - this.offsetX;
		this.previousY = _tcd.character_zone_y - this.offsetY;
		
		// initialize
		
		var _soundLoop = function()
		{
			_backgroundSound = Application.sound.playExclusive({
												url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/LongMellowWaves2min/LongMellowWaves2min.mp3',
												volume: spellEffects.volumeByRangeVoice(
																			_ccd.character_zone_x,
																			_ccd.character_zone_y,
																			_tcd.character_zone_x,
																			_tcd.character_zone_y,
																			spellEffects.volumeRangeLong
																		),
												onFinish: function()
												{
													_soundLoop();
												}
											});
		}
		
		// for(var i=1;i<=_maxFrames;i++)
		// {
		// 	_moveFrames[ i ] = { image: new Image(), alpha: 0 };
		// 	_moveFrames[ i ].image.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/LongMellowWaves2min/LongMellowWaves2min' + i + '.png';
		// }
		
		//draw the bombardierBeetleDeath spatter
		this.draw = function()
		{
			// Map.ctx.save();
			
			// Map.ctx.translate( self.previousX + self.offsetX + Map.viewPortX, self.previousY + self.offsetY + Map.viewPortY );
			
			// Map.ctx.rotate( ( self.rotation - 90 ) * Math.PI / 180 );
			
			// Map.ctx.shadowColor = 'rgba(0, 0, 0, 0.7)';
			// Map.ctx.shadowOffsetX = 3;
			// Map.ctx.shadowOffsetY = 3;
			
			// Map.ctx.drawImage(
			// 				_moveFrames[ _currentIndex ].image,
			// 				- self.offsetX,
			// 				- self.offsetY
			// 			);
			
			// Map.ctx.restore();
			
			// Map.ctx.globalAlpha = 1;
		}
		
		//remove the deathDecay
		this.remove = function()
		{
			// clearTimeout( _changeFrameFunctionPointer );
			
			// if( _backgroundSound )
			// {
			// 	_backgroundSound.stop();
			// }
			
			// spellEffects.layerCleaner.push( this );
			// spellEffects.layer[0][ this.ID ] = null;
			
			// delete _tc._internal.spellEffects[ this.characterSpellEffectID ];
		}
		
		var _changeFrameFunction = function()
		{
			// _currentIndex++;
			
			// if( _currentIndex > _maxFrames )
			// {
			// 	_currentIndex = 1;
				
			// 	setTimeout( _changeFrameFunction, 2000 + Math.random() * 5000 );
				
			// 	return;
			// }
			
			// _changeFrameFunctionPointer = setTimeout( _changeFrameFunction, 100 );
		}
		
		_soundLoop();
		// _changeFrameFunction();
		
	} //end bombardierBeetleDeath

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.OceanWaves.js
*/

	
	spellEffects.OceanWaves = function( args )
	{
		var self = this,
				_moveFrames = {},
				_tc = args.targetCharacter,
				_tcd = _tc.characterData,
				_changeFrameFunctionPointer = null,
				_currentIndex = 1,
				_maxFrames = 9;
		
		this.ID = spellEffects.layer[0].push( this ) - 1;
		this.characterSpellEffectID = _tc._internal.spellEffects.push( this ) - 1;
		this.offsetX = 20;
		this.offsetY = 20;
		this.rotation = _tcd.character_rotation;
		this.deleteRange = 40;
		this.previousX = _tcd.character_zone_x - this.offsetX;
		this.previousY = _tcd.character_zone_y - this.offsetY;
		
		// initialize
		
		for(var i=1;i<=_maxFrames;i++)
		{
			_moveFrames[ i ] = { image: new Image(), alpha: 0 };
			_moveFrames[ i ].image.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/OceanWaves/OceanWaves' + i + '.png';
		}
		
		//draw the bombardierBeetleDeath spatter
		this.draw = function()
		{
			Map.ctx.save();
			
			Map.ctx.translate( self.previousX + self.offsetX + Map.viewPortX, self.previousY + self.offsetY + Map.viewPortY );
			
			Map.ctx.rotate( ( self.rotation - 90 ) * Math.PI / 180 );
			
			Map.ctx.shadowColor = 'rgba(0, 0, 0, 0.7)';
			Map.ctx.shadowOffsetX = 3;
			Map.ctx.shadowOffsetY = 3;
			
			Map.ctx.drawImage(
							_moveFrames[ _currentIndex ].image,
							- self.offsetX,
							- self.offsetY
						);
			
			Map.ctx.restore();
			
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the deathDecay
		this.remove = function()
		{
			clearTimeout( _changeFrameFunctionPointer );
			
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[0][ this.ID ] = null;
			
			delete _tc._internal.spellEffects[ this.characterSpellEffectID ];
		}
		
		var _changeFrameFunction = function()
		{
			_currentIndex++;
			
			if( _currentIndex > _maxFrames )
			{
				_currentIndex = 1;
				
				setTimeout( _changeFrameFunction, 2000 + Math.random() * 5000 );
				
				return;
			}
			
			_changeFrameFunctionPointer = setTimeout( _changeFrameFunction, 100 );
		}
		
		_changeFrameFunction();
		
	} //end bombardierBeetleDeath

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.PlantDeath.js
*/

	
	spellEffects[ 'PlantDeath' ] = function( args )
	{
		var self = this,
				_ccd = Component.bugcraft.currentCharacterObject.characterData,
				_moveFrames = {},
				_tc = args.targetCharacter,
				_tcd = _tc.characterData,
				_changeFrameFunctionPointer = null,
				_currentIndex = 1,
				_maxFrames = 8;
		
		this.ID = spellEffects.layer[0].push( this ) - 1;
		this.characterSpellEffectID = _tc._internal.spellEffects.push( this ) - 1;
		this.offsetX = 20;
		this.offsetY = 20;
		this.rotation = _tcd.character_rotation;
		this.deleteRange = 40;
		this.previousX = _tcd.character_zone_x - this.offsetX;
		this.previousY = _tcd.character_zone_y - this.offsetY;
		
		// initialize
		
		Application.sound.playExclusive({
											url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/PlantDeath/PlantDeath.mp3',
											volume: spellEffects.volumeByRangeVoice(
																		_ccd.character_zone_x,
																		_ccd.character_zone_y,
																		_tcd.character_zone_x,
																		_tcd.character_zone_y,
																		spellEffects.volumeRangeLong
																	),
											onFinish: function()
											{
												
											}
										});
		
		for(var i=1;i<=_maxFrames;i++)
		{
			_moveFrames[ i ] = { image: new Image(), alpha: 0 };
			_moveFrames[ i ].image.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/PlantDeath/PlantDeath' + i + '.png';
		}
		
		//draw the bombardierBeetleDeath spatter
		this.draw = function()
		{
			Map.ctx.save();
			
			Map.ctx.translate( self.previousX + self.offsetX + Map.viewPortX, self.previousY + self.offsetY + Map.viewPortY );
			
			Map.ctx.rotate( ( self.rotation - 90 ) * Math.PI / 180 );
			
			Map.ctx.shadowColor = 'rgba(0, 0, 0, 0.7)';
			Map.ctx.shadowOffsetX = 3;
			Map.ctx.shadowOffsetY = 3;
			
			Map.ctx.drawImage(
							_moveFrames[ _currentIndex ].image,
							- self.offsetX,
							- self.offsetY
						);
			
			Map.ctx.restore();
			
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the deathDecay
		this.remove = function()
		{
			clearTimeout( _changeFrameFunctionPointer );
			
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[0][ this.ID ] = null;
			
			delete _tc._internal.spellEffects[ this.characterSpellEffectID ];
		}
		
		var _changeFrameFunction = function()
		{
			_currentIndex++;
			
			if( _currentIndex > _maxFrames )
			{
				self.remove();
				
				return;
			}
			
			_changeFrameFunctionPointer = setTimeout( _changeFrameFunction, 100 );
		}
		
		_changeFrameFunction();
		
	} //end bombardierBeetleDeath

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.PlantDeath2.js
*/

	
	spellEffects[ 'PlantDeath2' ] = function( args )
	{
		var self = this,
				_ccd = Component.bugcraft.currentCharacterObject.characterData,
				_moveFrames = {},
				_tc = args.targetCharacter,
				_tcd = _tc.characterData,
				_changeFrameFunctionPointer = null,
				_currentIndex = 1,
				_maxFrames = 8;
		
		this.ID = spellEffects.layer[0].push( this ) - 1;
		this.characterSpellEffectID = _tc._internal.spellEffects.push( this ) - 1;
		this.offsetX = 20;
		this.offsetY = 20;
		this.rotation = _tcd.character_rotation;
		this.deleteRange = 40;
		this.previousX = _tcd.character_zone_x - this.offsetX;
		this.previousY = _tcd.character_zone_y - this.offsetY;
		
		// initialize
		
		Application.sound.playExclusive({
											url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/PlantDeath2/PlantDeath2.mp3',
											volume: spellEffects.volumeByRangeVoice(
																		_ccd.character_zone_x,
																		_ccd.character_zone_y,
																		_tcd.character_zone_x,
																		_tcd.character_zone_y,
																		spellEffects.volumeRangeLong
																	),
											onFinish: function()
											{
												
											}
										});
		
		for(var i=1;i<=_maxFrames;i++)
		{
			_moveFrames[ i ] = { image: new Image(), alpha: 0 };
			_moveFrames[ i ].image.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/PlantDeath2/PlantDeath2' + i + '.png';
		}
		
		//draw the bombardierBeetleDeath spatter
		this.draw = function()
		{
			Map.ctx.save();
			
			Map.ctx.translate( self.previousX + self.offsetX + Map.viewPortX, self.previousY + self.offsetY + Map.viewPortY );
			
			Map.ctx.rotate( ( self.rotation - 90 ) * Math.PI / 180 );
			
			Map.ctx.shadowColor = 'rgba(0, 0, 0, 0.7)';
			Map.ctx.shadowOffsetX = 3;
			Map.ctx.shadowOffsetY = 3;
			
			Map.ctx.drawImage(
							_moveFrames[ _currentIndex ].image,
							- self.offsetX,
							- self.offsetY
						);
			
			Map.ctx.restore();
			
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the deathDecay
		this.remove = function()
		{
			clearTimeout( _changeFrameFunctionPointer );
			
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[0][ this.ID ] = null;
			
			delete _tc._internal.spellEffects[ this.characterSpellEffectID ];
		}
		
		var _changeFrameFunction = function()
		{
			_currentIndex++;
			
			if( _currentIndex > _maxFrames )
			{
				self.remove();
				
				return;
			}
			
			_changeFrameFunctionPointer = setTimeout( _changeFrameFunction, 100 );
		}
		
		_changeFrameFunction();
		
	} //end bombardierBeetleDeath

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.PlantDie.js
*/

	
	spellEffects[ 'PlantDie' ] = function( args )
	{
		var self = this,
				_ccd = Component.bugcraft.currentCharacterObject.characterData,
				_moveFrames = {},
				_tc = args.targetCharacter,
				_tcd = _tc.characterData,
				_changeFrameFunctionPointer = null,
				_currentIndex = 1,
				_maxFrames = 8;
		
		this.ID = spellEffects.layer[0].push( this ) - 1;
		this.characterSpellEffectID = _tc._internal.spellEffects.push( this ) - 1;
		this.offsetX = 20;
		this.offsetY = 20;
		this.rotation = _tcd.character_rotation;
		this.deleteRange = 40;
		this.previousX = _tcd.character_zone_x - this.offsetX;
		this.previousY = _tcd.character_zone_y - this.offsetY;
		
		// initialize
		
		Application.sound.playExclusive({
											url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/PlantDie/PlantDie.mp3',
											volume: spellEffects.volumeByRangeVoice(
																		_ccd.character_zone_x,
																		_ccd.character_zone_y,
																		_tcd.character_zone_x,
																		_tcd.character_zone_y,
																		spellEffects.volumeRangeLong
																	),
											onFinish: function()
											{
												
											}
										});
		
		for(var i=1;i<=_maxFrames;i++)
		{
			_moveFrames[ i ] = { image: new Image(), alpha: 0 };
			_moveFrames[ i ].image.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/PlantDie/PlantDie' + i + '.png';
		}
		
		//draw the bombardierBeetleDeath spatter
		this.draw = function()
		{
			Map.ctx.save();
			
			Map.ctx.translate( self.previousX + self.offsetX + Map.viewPortX, self.previousY + self.offsetY + Map.viewPortY );
			
			Map.ctx.rotate( ( self.rotation - 90 ) * Math.PI / 180 );
			
			Map.ctx.shadowColor = 'rgba(0, 0, 0, 0.7)';
			Map.ctx.shadowOffsetX = 3;
			Map.ctx.shadowOffsetY = 3;
			
			Map.ctx.drawImage(
							_moveFrames[ _currentIndex ].image,
							- self.offsetX,
							- self.offsetY
						);
			
			Map.ctx.restore();
			
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the deathDecay
		this.remove = function()
		{
			clearTimeout( _changeFrameFunctionPointer );
			
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[0][ this.ID ] = null;
			
			delete _tc._internal.spellEffects[ this.characterSpellEffectID ];
		}
		
		var _changeFrameFunction = function()
		{
			_currentIndex++;
			
			if( _currentIndex > _maxFrames )
			{
				self.remove();
				
				return;
			}
			
			_changeFrameFunctionPointer = setTimeout( _changeFrameFunction, 100 );
		}
		
		_changeFrameFunction();
		
	} //end bombardierBeetleDeath

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.PowerStation.js
*/

	
	spellEffects[ 'PowerStation' ] = function( args )
	{
		var self = this,
				_ccd = Component.bugcraft.currentCharacterObject.characterData,
				_moveFrames = {},
				_tc = args.targetCharacter,
				_tcd = _tc.characterData,
				_changeFrameFunctionPointer = null,
				_currentIndex = 1,
				_maxFrames = 1,
				_backgroundSound = null,
				_soundTimeoutPointer = null;
		
		this.ID = spellEffects.layer[0].push( this ) - 1;
		this.characterSpellEffectID = _tc._internal.spellEffects.push( this ) - 1;
		this.offsetX = 20;
		this.offsetY = 20;
		this.rotation = _tcd.character_rotation;
		this.deleteRange = 40;
		this.previousX = _tcd.character_zone_x - this.offsetX;
		this.previousY = _tcd.character_zone_y - this.offsetY;
		
		// initialize
		
		var _soundLoop = function()
		{
			_backgroundSound = Application.sound.playExclusive({
												url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/PowerStation/PowerStation.mp3',
												volume: spellEffects.volumeByRangeVoice(
																			_ccd.character_zone_x,
																			_ccd.character_zone_y,
																			_tcd.character_zone_x,
																			_tcd.character_zone_y,
																			spellEffects.volumeRangeLong
																		),
												onFinish: function()
												{
													_soundTimeoutPointer = setTimeout( function()
													{
														_soundLoop();
													}, 1 + Math.random() * ( 2 - 1 ) );
												}
											});
		}
		
		for(var i=1;i<=_maxFrames;i++)
		{
			_moveFrames[ i ] = { image: new Image(), alpha: 0 };
			_moveFrames[ i ].image.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/PowerStation/PowerStation' + i + '.png';
		}
		
		//draw the bombardierBeetleDeath spatter
		this.draw = function()
		{
			Map.ctx.save();
			
			Map.ctx.translate( self.previousX + self.offsetX + Map.viewPortX, self.previousY + self.offsetY + Map.viewPortY );
			
			Map.ctx.rotate( ( self.rotation - 90 ) * Math.PI / 180 );
			
			Map.ctx.shadowColor = 'rgba(0, 0, 0, 0.7)';
			Map.ctx.shadowOffsetX = 3;
			Map.ctx.shadowOffsetY = 3;
			
			Map.ctx.drawImage(
							_moveFrames[ _currentIndex ].image,
							- self.offsetX,
							- self.offsetY
						);
			
			Map.ctx.restore();
			
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the deathDecay
		this.remove = function()
		{
			clearTimeout( _changeFrameFunctionPointer );
			clearTimeout( _soundTimeoutPointer );
			
			if( _backgroundSound )
			{
				_backgroundSound.stop();
			}
			
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[0][ this.ID ] = null;
			
			delete _tc._internal.spellEffects[ this.characterSpellEffectID ];
		}
		
		var _changeFrameFunction = function()
		{
			_currentIndex++;
			
			if( _currentIndex > _maxFrames )
			{
				_currentIndex = 1;
				
				setTimeout( _changeFrameFunction, 2000 + Math.random() * 5000 );
				
				return;
			}
			
			_changeFrameFunctionPointer = setTimeout( _changeFrameFunction, 100 );
		}
		
		_soundLoop();
		_changeFrameFunction();
		
	} //end bombardierBeetleDeath

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.Rainforestoneminute.js
*/

	
	spellEffects[ 'Rainforestoneminute' ] = function( args )
	{
		var self = this,
				_ccd = Component.bugcraft.currentCharacterObject.characterData,
				_moveFrames = {},
				_tc = args.targetCharacter,
				_tcd = _tc.characterData,
				_changeFrameFunctionPointer = null,
				_currentIndex = 1,
				_maxFrames = 1,
				_backgroundSound = null;
		
		this.ID = spellEffects.layer[0].push( this ) - 1;
		this.characterSpellEffectID = _tc._internal.spellEffects.push( this ) - 1;
		this.offsetX = 20;
		this.offsetY = 20;
		this.rotation = _tcd.character_rotation;
		this.deleteRange = 40;
		this.previousX = _tcd.character_zone_x - this.offsetX;
		this.previousY = _tcd.character_zone_y - this.offsetY;
		
		// initialize
		
		var _soundLoop = function()
		{
			_backgroundSound = Application.sound.playExclusive({
												url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/Rainforestoneminute/Rainforestoneminute.mp3',
												volume: spellEffects.volumeByRangeVoice(
																			_ccd.character_zone_x,
																			_ccd.character_zone_y,
																			_tcd.character_zone_x,
																			_tcd.character_zone_y,
																			spellEffects.volumeRangeLong
																		),
												onFinish: function()
												{
													_soundLoop();
												}
											});
		}
		
		for(var i=1;i<=_maxFrames;i++)
		{
			_moveFrames[ i ] = { image: new Image(), alpha: 0 };
			_moveFrames[ i ].image.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/Rainforestoneminute/Rainforestoneminute' + i + '.png';
		}
		
		//draw the bombardierBeetleDeath spatter
		this.draw = function()
		{
			Map.ctx.save();
			
			Map.ctx.translate( self.previousX + self.offsetX + Map.viewPortX, self.previousY + self.offsetY + Map.viewPortY );
			
			Map.ctx.rotate( ( self.rotation - 90 ) * Math.PI / 180 );
			
			Map.ctx.shadowColor = 'rgba(0, 0, 0, 0.7)';
			Map.ctx.shadowOffsetX = 3;
			Map.ctx.shadowOffsetY = 3;
			
			Map.ctx.drawImage(
							_moveFrames[ _currentIndex ].image,
							- self.offsetX,
							- self.offsetY
						);
			
			Map.ctx.restore();
			
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the deathDecay
		this.remove = function()
		{
			clearTimeout( _changeFrameFunctionPointer );
			
			if( _backgroundSound )
			{
				_backgroundSound.stop();
			}
			
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[0][ this.ID ] = null;
			
			delete _tc._internal.spellEffects[ this.characterSpellEffectID ];
		}
		
		var _changeFrameFunction = function()
		{
			_currentIndex++;
			
			if( _currentIndex > _maxFrames )
			{
				_currentIndex = 1;
				
				setTimeout( _changeFrameFunction, 2000 + Math.random() * 5000 );
				
				return;
			}
			
			_changeFrameFunctionPointer = setTimeout( _changeFrameFunction, 100 );
		}
		
		_soundLoop();
		_changeFrameFunction();
		
	} //end bombardierBeetleDeath

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.RiverFlow.js
*/

	
	spellEffects.RiverFlow = function( args )
	{
		var self = this,
				_moveFrames = {},
				_tc = args.targetCharacter,
				_tcd = _tc.characterData,
				_changeFrameFunctionPointer = null,
				_currentIndex = 1,
				_maxFrames = 10;
		
		this.ID = spellEffects.layer[0].push( this ) - 1;
		this.characterSpellEffectID = _tc._internal.spellEffects.push( this ) - 1;
		this.offsetX = 20;
		this.offsetY = 20;
		this.rotation = _tcd.character_rotation;
		this.deleteRange = 40;
		this.previousX = _tcd.character_zone_x - this.offsetX;
		this.previousY = _tcd.character_zone_y - this.offsetY;
		
		// initialize
		
		for(var i=1;i<=_maxFrames;i++)
		{
			_moveFrames[ i ] = { image: new Image(), alpha: 0 };
			_moveFrames[ i ].image.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/RiverFlow/RiverFlow' + i + '.png';
		}
		
		//draw the bombardierBeetleDeath spatter
		this.draw = function()
		{
			Map.ctx.save();
			
			Map.ctx.translate( self.previousX + self.offsetX + Map.viewPortX, self.previousY + self.offsetY + Map.viewPortY );
			
			Map.ctx.rotate( ( self.rotation - 90 ) * Math.PI / 180 );
			
			Map.ctx.shadowColor = 'rgba(0, 0, 0, 0.7)';
			Map.ctx.shadowOffsetX = 3;
			Map.ctx.shadowOffsetY = 3;
			
			Map.ctx.drawImage(
							_moveFrames[ _currentIndex ].image,
							- self.offsetX,
							- self.offsetY
						);
			
			Map.ctx.restore();
			
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the deathDecay
		this.remove = function()
		{
			clearTimeout( _changeFrameFunctionPointer );
			
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[0][ this.ID ] = null;
			
			delete _tc._internal.spellEffects[ this.characterSpellEffectID ];
		}
		
		var _changeFrameFunction = function()
		{
			_currentIndex++;
			
			if( _currentIndex > _maxFrames )
			{
				_currentIndex = 1;
				
				setTimeout( _changeFrameFunction, 2000 + Math.random() * 5000 );
				
				return;
			}
			
			_changeFrameFunctionPointer = setTimeout( _changeFrameFunction, 100 );
		}
		
		_changeFrameFunction();
		
	} //end bombardierBeetleDeath

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.RiverLong.js
*/

	
	spellEffects[ 'RiverLong' ] = function( args )
	{
		var self = this,
				_ccd = Component.bugcraft.currentCharacterObject.characterData,
				_moveFrames = {},
				_tc = args.targetCharacter,
				_tcd = _tc.characterData,
				_changeFrameFunctionPointer = null,
				_currentIndex = 1,
				_maxFrames = 1,
				_backgroundSound = null;
		
		this.ID = spellEffects.layer[0].push( this ) - 1;
		this.characterSpellEffectID = _tc._internal.spellEffects.push( this ) - 1;
		this.offsetX = 20;
		this.offsetY = 20;
		this.rotation = _tcd.character_rotation;
		this.deleteRange = 40;
		this.previousX = _tcd.character_zone_x - this.offsetX;
		this.previousY = _tcd.character_zone_y - this.offsetY;
		
		// initialize
		
		var _soundLoop = function()
		{
			_backgroundSound = Application.sound.playExclusive({
												url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/RiverLong/RiverLong.mp3',
												volume: spellEffects.volumeByRangeVoice(
																			_ccd.character_zone_x,
																			_ccd.character_zone_y,
																			_tcd.character_zone_x,
																			_tcd.character_zone_y,
																			spellEffects.volumeRangeLong
																		),
												onFinish: function()
												{
													_soundLoop();
												}
											});
		}
		
		for(var i=1;i<=_maxFrames;i++)
		{
			_moveFrames[ i ] = { image: new Image(), alpha: 0 };
			_moveFrames[ i ].image.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/RiverLong/RiverLong' + i + '.png';
		}
		
		//draw the bombardierBeetleDeath spatter
		this.draw = function()
		{
			Map.ctx.save();
			
			Map.ctx.translate( self.previousX + self.offsetX + Map.viewPortX, self.previousY + self.offsetY + Map.viewPortY );
			
			Map.ctx.rotate( ( self.rotation - 90 ) * Math.PI / 180 );
			
			Map.ctx.shadowColor = 'rgba(0, 0, 0, 0.7)';
			Map.ctx.shadowOffsetX = 3;
			Map.ctx.shadowOffsetY = 3;
			
			Map.ctx.drawImage(
							_moveFrames[ _currentIndex ].image,
							- self.offsetX,
							- self.offsetY
						);
			
			Map.ctx.restore();
			
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the deathDecay
		this.remove = function()
		{
			clearTimeout( _changeFrameFunctionPointer );
			
			if( _backgroundSound )
			{
				_backgroundSound.stop();
			}
			
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[0][ this.ID ] = null;
			
			delete _tc._internal.spellEffects[ this.characterSpellEffectID ];
		}
		
		var _changeFrameFunction = function()
		{
			_currentIndex++;
			
			if( _currentIndex > _maxFrames )
			{
				_currentIndex = 1;
				
				setTimeout( _changeFrameFunction, 2000 + Math.random() * 5000 );
				
				return;
			}
			
			_changeFrameFunctionPointer = setTimeout( _changeFrameFunction, 100 );
		}
		
		_soundLoop();
		_changeFrameFunction();
		
	} //end bombardierBeetleDeath

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.RiverWaves.js
*/

	
	spellEffects.RiverWaves = function( args )
	{
		var self = this,
				_moveFrames = {},
				_tc = args.targetCharacter,
				_tcd = _tc.characterData,
				_changeFrameFunctionPointer = null,
				_currentIndex = 1,
				_maxFrames = 10;
		
		this.ID = spellEffects.layer[0].push( this ) - 1;
		this.characterSpellEffectID = _tc._internal.spellEffects.push( this ) - 1;
		this.offsetX = 20;
		this.offsetY = 20;
		this.rotation = _tcd.character_rotation;
		this.deleteRange = 40;
		this.previousX = _tcd.character_zone_x - this.offsetX;
		this.previousY = _tcd.character_zone_y - this.offsetY;
		
		// initialize
		
		for(var i=1;i<=_maxFrames;i++)
		{
			_moveFrames[ i ] = { image: new Image(), alpha: 0 };
			_moveFrames[ i ].image.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/RiverWaves/RiverWaves' + i + '.png';
		}
		
		//draw the bombardierBeetleDeath spatter
		this.draw = function()
		{
			Map.ctx.save();
			
			Map.ctx.translate( self.previousX + self.offsetX + Map.viewPortX, self.previousY + self.offsetY + Map.viewPortY );
			
			Map.ctx.rotate( ( self.rotation - 90 ) * Math.PI / 180 );
			
			Map.ctx.shadowColor = 'rgba(0, 0, 0, 0.7)';
			Map.ctx.shadowOffsetX = 3;
			Map.ctx.shadowOffsetY = 3;
			
			Map.ctx.drawImage(
							_moveFrames[ _currentIndex ].image,
							- self.offsetX,
							- self.offsetY
						);
			
			Map.ctx.restore();
			
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the deathDecay
		this.remove = function()
		{
			clearTimeout( _changeFrameFunctionPointer );
			
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[0][ this.ID ] = null;
			
			delete _tc._internal.spellEffects[ this.characterSpellEffectID ];
		}
		
		var _changeFrameFunction = function()
		{
			_currentIndex++;
			
			if( _currentIndex > _maxFrames )
			{
				_currentIndex = 1;
				
				setTimeout( _changeFrameFunction, 2000 + Math.random() * 5000 );
				
				return;
			}
			
			_changeFrameFunctionPointer = setTimeout( _changeFrameFunction, 100 );
		}
		
		_changeFrameFunction();
		
	} //end bombardierBeetleDeath

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.RummageJunk.js
*/

	
	spellEffects[ 'RummageJunk' ] = function( args )
	{
		var self = this,
				_ccd = Component.bugcraft.currentCharacterObject.characterData,
				_moveFrames = {},
				_tc = args.targetCharacter,
				_tcd = _tc.characterData,
				_changeFrameFunctionPointer = null,
				_currentIndex = 1,
				_maxFrames = 4;
		
		this.ID = spellEffects.layer[0].push( this ) - 1;
		this.characterSpellEffectID = _tc._internal.spellEffects.push( this ) - 1;
		this.offsetX = 20;
		this.offsetY = 20;
		this.rotation = _tcd.character_rotation;
		this.deleteRange = 40;
		this.previousX = _tcd.character_zone_x - this.offsetX;
		this.previousY = _tcd.character_zone_y - this.offsetY;
		
		// initialize
		
		Application.sound.playExclusive({
											url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/RummageJunk/RummageJunk.mp3',
											volume: spellEffects.volumeByRangeVoice(
																		_ccd.character_zone_x,
																		_ccd.character_zone_y,
																		_tcd.character_zone_x,
																		_tcd.character_zone_y,
																		spellEffects.volumeRangeLong
																	),
											onFinish: function()
											{
												
											}
										});
		
		for(var i=1;i<=_maxFrames;i++)
		{
			_moveFrames[ i ] = { image: new Image(), alpha: 0 };
			_moveFrames[ i ].image.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/RummageJunk/RummageJunk' + i + '.png';
		}
		
		//draw the bombardierBeetleDeath spatter
		this.draw = function()
		{
			Map.ctx.save();
			
			Map.ctx.translate( self.previousX + self.offsetX + Map.viewPortX, self.previousY + self.offsetY + Map.viewPortY );
			
			Map.ctx.rotate( ( self.rotation - 90 ) * Math.PI / 180 );
			
			Map.ctx.shadowColor = 'rgba(0, 0, 0, 0.7)';
			Map.ctx.shadowOffsetX = 3;
			Map.ctx.shadowOffsetY = 3;
			
			Map.ctx.drawImage(
							_moveFrames[ _currentIndex ].image,
							- self.offsetX,
							- self.offsetY
						);
			
			Map.ctx.restore();
			
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the deathDecay
		this.remove = function()
		{
			clearTimeout( _changeFrameFunctionPointer );
			
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[0][ this.ID ] = null;
			
			delete _tc._internal.spellEffects[ this.characterSpellEffectID ];
		}
		
		var _changeFrameFunction = function()
		{
			_currentIndex++;
			
			if( _currentIndex > _maxFrames )
			{
				self.remove();
				
				return;
			}
			
			_changeFrameFunctionPointer = setTimeout( _changeFrameFunction, 100 );
		}
		
		_changeFrameFunction();
		
	} //end bombardierBeetleDeath

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.RummageMetal.js
*/

	
	spellEffects[ 'RummageMetal' ] = function( args )
	{
		var self = this,
				_ccd = Component.bugcraft.currentCharacterObject.characterData,
				_moveFrames = {},
				_tc = args.targetCharacter,
				_tcd = _tc.characterData,
				_changeFrameFunctionPointer = null,
				_currentIndex = 1,
				_maxFrames = 5;
		
		this.ID = spellEffects.layer[0].push( this ) - 1;
		this.characterSpellEffectID = _tc._internal.spellEffects.push( this ) - 1;
		this.offsetX = 20;
		this.offsetY = 20;
		this.rotation = _tcd.character_rotation;
		this.deleteRange = 40;
		this.previousX = _tcd.character_zone_x - this.offsetX;
		this.previousY = _tcd.character_zone_y - this.offsetY;
		
		// initialize
		
		Application.sound.playExclusive({
											url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/RummageMetal/RummageMetal.mp3',
											volume: spellEffects.volumeByRangeVoice(
																		_ccd.character_zone_x,
																		_ccd.character_zone_y,
																		_tcd.character_zone_x,
																		_tcd.character_zone_y,
																		spellEffects.volumeRangeLong
																	),
											onFinish: function()
											{
												
											}
										});
		
		for(var i=1;i<=_maxFrames;i++)
		{
			_moveFrames[ i ] = { image: new Image(), alpha: 0 };
			_moveFrames[ i ].image.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/RummageMetal/RummageMetal' + i + '.png';
		}
		
		//draw the bombardierBeetleDeath spatter
		this.draw = function()
		{
			Map.ctx.save();
			
			Map.ctx.translate( self.previousX + self.offsetX + Map.viewPortX, self.previousY + self.offsetY + Map.viewPortY );
			
			Map.ctx.rotate( ( self.rotation - 90 ) * Math.PI / 180 );
			
			Map.ctx.shadowColor = 'rgba(0, 0, 0, 0.7)';
			Map.ctx.shadowOffsetX = 3;
			Map.ctx.shadowOffsetY = 3;
			
			Map.ctx.drawImage(
							_moveFrames[ _currentIndex ].image,
							- self.offsetX,
							- self.offsetY
						);
			
			Map.ctx.restore();
			
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the deathDecay
		this.remove = function()
		{
			clearTimeout( _changeFrameFunctionPointer );
			
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[0][ this.ID ] = null;
			
			delete _tc._internal.spellEffects[ this.characterSpellEffectID ];
		}
		
		var _changeFrameFunction = function()
		{
			_currentIndex++;
			
			if( _currentIndex > _maxFrames )
			{
				self.remove();
				
				return;
			}
			
			_changeFrameFunctionPointer = setTimeout( _changeFrameFunction, 100 );
		}
		
		_changeFrameFunction();
		
	} //end bombardierBeetleDeath

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.SeaWingBell.js
*/

	
	spellEffects[ 'SeaWingBell' ] = function( args )
	{
		var self = this,
				_ccd = Component.bugcraft.currentCharacterObject.characterData,
				_moveFrames = {},
				_tc = args.targetCharacter,
				_tcd = _tc.characterData,
				_changeFrameFunctionPointer = null,
				_currentIndex = 1,
				_maxFrames = 1,
				_backgroundSound = null;
		
		this.ID = spellEffects.layer[0].push( this ) - 1;
		this.characterSpellEffectID = _tc._internal.spellEffects.push( this ) - 1;
		this.offsetX = 20;
		this.offsetY = 20;
		this.rotation = _tcd.character_rotation;
		this.deleteRange = 40;
		this.previousX = _tcd.character_zone_x - this.offsetX;
		this.previousY = _tcd.character_zone_y - this.offsetY;
		
		// initialize
		
		var _soundLoop = function()
		{
			_backgroundSound = Application.sound.playExclusive({
												url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/SeaWingBell/SeaWingBell.mp3',
												volume: spellEffects.volumeByRangeVoice(
																			_ccd.character_zone_x,
																			_ccd.character_zone_y,
																			_tcd.character_zone_x,
																			_tcd.character_zone_y,
																			spellEffects.volumeRangeLong
																		),
												onFinish: function()
												{
													_soundLoop();
												}
											});
		}
		
		for(var i=1;i<=_maxFrames;i++)
		{
			_moveFrames[ i ] = { image: new Image(), alpha: 0 };
			_moveFrames[ i ].image.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/SeaWingBell/SeaWingBell' + i + '.png';
		}
		
		//draw the bombardierBeetleDeath spatter
		this.draw = function()
		{
			Map.ctx.save();
			
			Map.ctx.translate( self.previousX + self.offsetX + Map.viewPortX, self.previousY + self.offsetY + Map.viewPortY );
			
			Map.ctx.rotate( ( self.rotation - 90 ) * Math.PI / 180 );
			
			Map.ctx.shadowColor = 'rgba(0, 0, 0, 0.7)';
			Map.ctx.shadowOffsetX = 3;
			Map.ctx.shadowOffsetY = 3;
			
			Map.ctx.drawImage(
							_moveFrames[ _currentIndex ].image,
							- self.offsetX,
							- self.offsetY
						);
			
			Map.ctx.restore();
			
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the deathDecay
		this.remove = function()
		{
			clearTimeout( _changeFrameFunctionPointer );
			
			if( _backgroundSound )
			{
				_backgroundSound.stop();
			}
			
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[0][ this.ID ] = null;
			
			delete _tc._internal.spellEffects[ this.characterSpellEffectID ];
		}
		
		var _changeFrameFunction = function()
		{
			_currentIndex++;
			
			if( _currentIndex > _maxFrames )
			{
				_currentIndex = 1;
				
				setTimeout( _changeFrameFunction, 2000 + Math.random() * 5000 );
				
				return;
			}
			
			_changeFrameFunctionPointer = setTimeout( _changeFrameFunction, 100 );
		}
		
		_soundLoop();
		_changeFrameFunction();
		
	} //end bombardierBeetleDeath

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.ShipBell.js
*/

	
	spellEffects[ 'ShipBell' ] = function( args )
	{
		var self = this,
				_ccd = Component.bugcraft.currentCharacterObject.characterData,
				_moveFrames = {},
				_tc = args.targetCharacter,
				_tcd = _tc.characterData,
				_changeFrameFunctionPointer = null,
				_currentIndex = 1,
				_maxFrames = 1,
				_backgroundSound = null;
		
		this.ID = spellEffects.layer[0].push( this ) - 1;
		this.characterSpellEffectID = _tc._internal.spellEffects.push( this ) - 1;
		this.offsetX = 20;
		this.offsetY = 20;
		this.rotation = _tcd.character_rotation;
		this.deleteRange = 40;
		this.previousX = _tcd.character_zone_x - this.offsetX;
		this.previousY = _tcd.character_zone_y - this.offsetY;
		
		// initialize
		
		var _soundLoop = function()
		{
			_backgroundSound = Application.sound.playExclusive({
												url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/ShipBell/ShipBell.mp3',
												volume: spellEffects.volumeByRangeVoice(
																			_ccd.character_zone_x,
																			_ccd.character_zone_y,
																			_tcd.character_zone_x,
																			_tcd.character_zone_y,
																			spellEffects.volumeRangeLong
																		),
												onFinish: function()
												{
													_soundLoop();
												}
											});
		}
		
		for(var i=1;i<=_maxFrames;i++)
		{
			_moveFrames[ i ] = { image: new Image(), alpha: 0 };
			_moveFrames[ i ].image.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/ShipBell/ShipBell' + i + '.png';
		}
		
		//draw the bombardierBeetleDeath spatter
		this.draw = function()
		{
			Map.ctx.save();
			
			Map.ctx.translate( self.previousX + self.offsetX + Map.viewPortX, self.previousY + self.offsetY + Map.viewPortY );
			
			Map.ctx.rotate( ( self.rotation - 90 ) * Math.PI / 180 );
			
			Map.ctx.shadowColor = 'rgba(0, 0, 0, 0.7)';
			Map.ctx.shadowOffsetX = 3;
			Map.ctx.shadowOffsetY = 3;
			
			Map.ctx.drawImage(
							_moveFrames[ _currentIndex ].image,
							- self.offsetX,
							- self.offsetY
						);
			
			Map.ctx.restore();
			
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the deathDecay
		this.remove = function()
		{
			clearTimeout( _changeFrameFunctionPointer );
			
			if( _backgroundSound )
			{
				_backgroundSound.stop();
			}
			
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[0][ this.ID ] = null;
			
			delete _tc._internal.spellEffects[ this.characterSpellEffectID ];
		}
		
		var _changeFrameFunction = function()
		{
			_currentIndex++;
			
			if( _currentIndex > _maxFrames )
			{
				_currentIndex = 1;
				
				setTimeout( _changeFrameFunction, 2000 + Math.random() * 5000 );
				
				return;
			}
			
			_changeFrameFunctionPointer = setTimeout( _changeFrameFunction, 100 );
		}
		
		_soundLoop();
		_changeFrameFunction();
		
	} //end bombardierBeetleDeath

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.ShipDroneNormal.js
*/

	
	spellEffects[ 'ShipDroneNormal' ] = function( args )
	{
		var self = this,
				_ccd = Component.bugcraft.currentCharacterObject.characterData,
				_moveFrames = {},
				_tc = args.targetCharacter,
				_tcd = _tc.characterData,
				_changeFrameFunctionPointer = null,
				_currentIndex = 1,
				_maxFrames = 1,
				_backgroundSound = null,
				_soundTimeoutPointer = null;
		
		this.ID = spellEffects.layer[0].push( this ) - 1;
		this.characterSpellEffectID = _tc._internal.spellEffects.push( this ) - 1;
		this.offsetX = 20;
		this.offsetY = 20;
		this.rotation = _tcd.character_rotation;
		this.deleteRange = 40;
		this.previousX = _tcd.character_zone_x - this.offsetX;
		this.previousY = _tcd.character_zone_y - this.offsetY;
		
		// initialize
		
		var _soundLoop = function()
		{
			_backgroundSound = Application.sound.playExclusive({
												url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/ShipDroneNormal/ShipDroneNormal.mp3',
												volume: spellEffects.volumeByRangeVoice(
																			_ccd.character_zone_x,
																			_ccd.character_zone_y,
																			_tcd.character_zone_x,
																			_tcd.character_zone_y,
																			spellEffects.volumeRangeLong
																		),
												onFinish: function()
												{
													_soundTimeoutPointer = setTimeout( function()
													{
														_soundLoop();
													}, 1 + Math.random() * ( 1 - 1 ) );
												}
											});
		}
		
		for(var i=1;i<=_maxFrames;i++)
		{
			_moveFrames[ i ] = { image: new Image(), alpha: 0 };
			_moveFrames[ i ].image.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/ShipDroneNormal/ShipDroneNormal' + i + '.png';
		}
		
		//draw the bombardierBeetleDeath spatter
		this.draw = function()
		{
			Map.ctx.save();
			
			Map.ctx.translate( self.previousX + self.offsetX + Map.viewPortX, self.previousY + self.offsetY + Map.viewPortY );
			
			Map.ctx.rotate( ( self.rotation - 90 ) * Math.PI / 180 );
			
			Map.ctx.shadowColor = 'rgba(0, 0, 0, 0.7)';
			Map.ctx.shadowOffsetX = 3;
			Map.ctx.shadowOffsetY = 3;
			
			Map.ctx.drawImage(
							_moveFrames[ _currentIndex ].image,
							- self.offsetX,
							- self.offsetY
						);
			
			Map.ctx.restore();
			
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the deathDecay
		this.remove = function()
		{
			clearTimeout( _changeFrameFunctionPointer );
			clearTimeout( _soundTimeoutPointer );
			
			if( _backgroundSound )
			{
				_backgroundSound.stop();
			}
			
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[0][ this.ID ] = null;
			
			delete _tc._internal.spellEffects[ this.characterSpellEffectID ];
		}
		
		var _changeFrameFunction = function()
		{
			_currentIndex++;
			
			if( _currentIndex > _maxFrames )
			{
				_currentIndex = 1;
				
				setTimeout( _changeFrameFunction, 2000 + Math.random() * 5000 );
				
				return;
			}
			
			_changeFrameFunctionPointer = setTimeout( _changeFrameFunction, 100 );
		}
		
		_soundLoop();
		_changeFrameFunction();
		
	} //end bombardierBeetleDeath

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.ShipDroneScary.js
*/

	
	spellEffects[ 'ShipDroneScary' ] = function( args )
	{
		var self = this,
				_ccd = Component.bugcraft.currentCharacterObject.characterData,
				_moveFrames = {},
				_tc = args.targetCharacter,
				_tcd = _tc.characterData,
				_changeFrameFunctionPointer = null,
				_currentIndex = 1,
				_maxFrames = 1,
				_backgroundSound = null,
				_soundTimeoutPointer = null;
		
		this.ID = spellEffects.layer[0].push( this ) - 1;
		this.characterSpellEffectID = _tc._internal.spellEffects.push( this ) - 1;
		this.offsetX = 20;
		this.offsetY = 20;
		this.rotation = _tcd.character_rotation;
		this.deleteRange = 40;
		this.previousX = _tcd.character_zone_x - this.offsetX;
		this.previousY = _tcd.character_zone_y - this.offsetY;
		
		// initialize
		
		var _soundLoop = function()
		{
			_backgroundSound = Application.sound.playExclusive({
												url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/ShipDroneScary/ShipDroneScary.mp3',
												volume: spellEffects.volumeByRangeVoice(
																			_ccd.character_zone_x,
																			_ccd.character_zone_y,
																			_tcd.character_zone_x,
																			_tcd.character_zone_y,
																			spellEffects.volumeRangeLong
																		),
												onFinish: function()
												{
													_soundTimeoutPointer = setTimeout( function()
													{
														_soundLoop();
													}, 1 + Math.random() * ( 2 - 1 ) );
												}
											});
		}
		
		for(var i=1;i<=_maxFrames;i++)
		{
			_moveFrames[ i ] = { image: new Image(), alpha: 0 };
			_moveFrames[ i ].image.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/ShipDroneScary/ShipDroneScary' + i + '.png';
		}
		
		//draw the bombardierBeetleDeath spatter
		this.draw = function()
		{
			Map.ctx.save();
			
			Map.ctx.translate( self.previousX + self.offsetX + Map.viewPortX, self.previousY + self.offsetY + Map.viewPortY );
			
			Map.ctx.rotate( ( self.rotation - 90 ) * Math.PI / 180 );
			
			Map.ctx.shadowColor = 'rgba(0, 0, 0, 0.7)';
			Map.ctx.shadowOffsetX = 3;
			Map.ctx.shadowOffsetY = 3;
			
			Map.ctx.drawImage(
							_moveFrames[ _currentIndex ].image,
							- self.offsetX,
							- self.offsetY
						);
			
			Map.ctx.restore();
			
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the deathDecay
		this.remove = function()
		{
			clearTimeout( _changeFrameFunctionPointer );
			clearTimeout( _soundTimeoutPointer );
			
			if( _backgroundSound )
			{
				_backgroundSound.stop();
			}
			
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[0][ this.ID ] = null;
			
			delete _tc._internal.spellEffects[ this.characterSpellEffectID ];
		}
		
		var _changeFrameFunction = function()
		{
			_currentIndex++;
			
			if( _currentIndex > _maxFrames )
			{
				_currentIndex = 1;
				
				setTimeout( _changeFrameFunction, 2000 + Math.random() * 5000 );
				
				return;
			}
			
			_changeFrameFunctionPointer = setTimeout( _changeFrameFunction, 100 );
		}
		
		_soundLoop();
		_changeFrameFunction();
		
	} //end bombardierBeetleDeath

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.TeleportUsed.js
*/

	
	spellEffects[ 'TeleportUsed' ] = function( args )
	{
		var self = this,
				_moveFrames = {},
				_tc = args.targetCharacter,
				_tcd = _tc.characterData,
				_changeFrameFunctionPointer = null,
				_currentIndex = 1,
				_maxFrames = 9;
		
		this.ID = spellEffects.layer[0].push( this ) - 1;
		this.characterSpellEffectID = _tc._internal.spellEffects.push( this ) - 1;
		this.offsetX = 60;
		this.offsetY = 60;
		this.rotation = _tcd.character_rotation;
		this.deleteRange = 40;
		this.previousX = _tcd.character_zone_x - this.offsetX;
		this.previousY = _tcd.character_zone_y - this.offsetY;
		
		// initialize
		
		for(var i=1;i<=_maxFrames;i++)
		{
			_moveFrames[ i ] = { image: new Image(), alpha: 0 };
			_moveFrames[ i ].image.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/TeleportUsed/TeleportUsed' + i + '.png';
		}
		
		//draw the bombardierBeetleDeath spatter
		this.draw = function()
		{
			Map.ctx.save();
			
			Map.ctx.translate( self.previousX + self.offsetX + Map.viewPortX, self.previousY + self.offsetY + Map.viewPortY );
			
			Map.ctx.rotate( ( self.rotation - 90 ) * Math.PI / 180 );
			
			Map.ctx.shadowColor = 'rgba(0, 0, 0, 0.7)';
			Map.ctx.shadowOffsetX = 3;
			Map.ctx.shadowOffsetY = 3;
			
			Map.ctx.drawImage(
							_moveFrames[ _currentIndex ].image,
							- self.offsetX,
							- self.offsetY
						);
			
			Map.ctx.restore();
			
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the deathDecay
		this.remove = function()
		{
			clearTimeout( _changeFrameFunctionPointer );
			
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[0][ this.ID ] = null;
			
			delete _tc._internal.spellEffects[ this.characterSpellEffectID ];
		}
		
		var _changeFrameFunction = function()
		{
			_currentIndex++;
			
			if( _currentIndex > _maxFrames )
			{
				_currentIndex = 1;
				
				setTimeout( _changeFrameFunction, 2000 + Math.random() * 5000 );
				
				return;
			}
			
			_changeFrameFunctionPointer = setTimeout( _changeFrameFunction, 100 );
		}
		
		_changeFrameFunction();
		
	} //end bombardierBeetleDeath

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.UnderWater.js
*/

	
	spellEffects[ 'UnderWater' ] = function( args )
	{
		var self = this,
				_ccd = Component.bugcraft.currentCharacterObject.characterData,
				_moveFrames = {},
				_tc = args.targetCharacter,
				_tcd = _tc.characterData,
				_changeFrameFunctionPointer = null,
				_currentIndex = 1,
				_maxFrames = 1,
				_backgroundSound = null;
		
		this.ID = spellEffects.layer[0].push( this ) - 1;
		this.characterSpellEffectID = _tc._internal.spellEffects.push( this ) - 1;
		this.offsetX = 20;
		this.offsetY = 20;
		this.rotation = _tcd.character_rotation;
		this.deleteRange = 40;
		this.previousX = _tcd.character_zone_x - this.offsetX;
		this.previousY = _tcd.character_zone_y - this.offsetY;
		
		// initialize
		
		var _soundLoop = function()
		{
			_backgroundSound = Application.sound.playExclusive({
												url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/UnderWater/UnderWater.mp3',
												volume: spellEffects.volumeByRangeVoice(
																			_ccd.character_zone_x,
																			_ccd.character_zone_y,
																			_tcd.character_zone_x,
																			_tcd.character_zone_y,
																			spellEffects.volumeRangeLong
																		),
												onFinish: function()
												{
													_soundLoop();
												}
											});
		}
		
		for(var i=1;i<=_maxFrames;i++)
		{
			_moveFrames[ i ] = { image: new Image(), alpha: 0 };
			_moveFrames[ i ].image.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/UnderWater/UnderWater' + i + '.png';
		}
		
		//draw the bombardierBeetleDeath spatter
		this.draw = function()
		{
			Map.ctx.save();
			
			Map.ctx.translate( self.previousX + self.offsetX + Map.viewPortX, self.previousY + self.offsetY + Map.viewPortY );
			
			Map.ctx.rotate( ( self.rotation - 90 ) * Math.PI / 180 );
			
			Map.ctx.shadowColor = 'rgba(0, 0, 0, 0.7)';
			Map.ctx.shadowOffsetX = 3;
			Map.ctx.shadowOffsetY = 3;
			
			Map.ctx.drawImage(
							_moveFrames[ _currentIndex ].image,
							- self.offsetX,
							- self.offsetY
						);
			
			Map.ctx.restore();
			
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the deathDecay
		this.remove = function()
		{
			clearTimeout( _changeFrameFunctionPointer );
			
			if( _backgroundSound )
			{
				_backgroundSound.stop();
			}
			
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[0][ this.ID ] = null;
			
			delete _tc._internal.spellEffects[ this.characterSpellEffectID ];
		}
		
		var _changeFrameFunction = function()
		{
			_currentIndex++;
			
			if( _currentIndex > _maxFrames )
			{
				_currentIndex = 1;
				
				setTimeout( _changeFrameFunction, 2000 + Math.random() * 5000 );
				
				return;
			}
			
			_changeFrameFunctionPointer = setTimeout( _changeFrameFunction, 100 );
		}
		
		_soundLoop();
		_changeFrameFunction();
		
	} //end bombardierBeetleDeath

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.Underwater.js
*/

	
	spellEffects[ 'Underwater' ] = function( args )
	{
		var self = this,
				_ccd = Component.bugcraft.currentCharacterObject.characterData,
				_moveFrames = {},
				_tc = args.targetCharacter,
				_tcd = _tc.characterData,
				_changeFrameFunctionPointer = null,
				_currentIndex = 1,
				_maxFrames = 1,
				_backgroundSound = null;
		
		this.ID = spellEffects.layer[0].push( this ) - 1;
		this.characterSpellEffectID = _tc._internal.spellEffects.push( this ) - 1;
		this.offsetX = 20;
		this.offsetY = 20;
		this.rotation = _tcd.character_rotation;
		this.deleteRange = 40;
		this.previousX = _tcd.character_zone_x - this.offsetX;
		this.previousY = _tcd.character_zone_y - this.offsetY;
		
		// initialize
		
		var _soundLoop = function()
		{
			_backgroundSound = Application.sound.playExclusive({
												url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/Underwater/Underwater.mp3',
												volume: spellEffects.volumeByRangeVoice(
																			_ccd.character_zone_x,
																			_ccd.character_zone_y,
																			_tcd.character_zone_x,
																			_tcd.character_zone_y,
																			spellEffects.volumeRangeLong
																		),
												onFinish: function()
												{
													_soundLoop();
												}
											});
		}
		
		// for(var i=1;i<=_maxFrames;i++)
		// {
		// 	_moveFrames[ i ] = { image: new Image(), alpha: 0 };
		// 	_moveFrames[ i ].image.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/Underwater/Underwater' + i + '.png';
		// }
		
		//draw the bombardierBeetleDeath spatter
		this.draw = function()
		{
			
		}
		
		//remove the deathDecay
		this.remove = function()
		{
			return;
			clearTimeout( _changeFrameFunctionPointer );
			
			if( _backgroundSound )
			{
				_backgroundSound.stop();
			}
			
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[0][ this.ID ] = null;
			
			delete _tc._internal.spellEffects[ this.characterSpellEffectID ];
		}
		
		var _changeFrameFunction = function()
		{
			_currentIndex++;
			
			if( _currentIndex > _maxFrames )
			{
				_currentIndex = 1;
				
				setTimeout( _changeFrameFunction, 2000 + Math.random() * 5000 );
				
				return;
			}
			
			_changeFrameFunctionPointer = setTimeout( _changeFrameFunction, 100 );
		}
		
		_soundLoop();
		//_changeFrameFunction();
		
	} //end bombardierBeetleDeath

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.VEGEDEATH.js
*/

	
	spellEffects[ 'VEGEDEATH' ] = function( args )
	{
		var self = this,
				_ccd = Component.bugcraft.currentCharacterObject.characterData,
				_moveFrames = {},
				_tc = args.targetCharacter,
				_tcd = _tc.characterData,
				_changeFrameFunctionPointer = null,
				_currentIndex = 1,
				_maxFrames = 8;
		
		this.ID = spellEffects.layer[0].push( this ) - 1;
		this.characterSpellEffectID = _tc._internal.spellEffects.push( this ) - 1;
		this.offsetX = 20;
		this.offsetY = 20;
		this.rotation = _tcd.character_rotation;
		this.deleteRange = 40;
		this.previousX = _tcd.character_zone_x - this.offsetX;
		this.previousY = _tcd.character_zone_y - this.offsetY;
		
		// initialize
		
		Application.sound.playExclusive({
											url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/VEGEDEATH/VEGEDEATH.mp3',
											volume: spellEffects.volumeByRangeVoice(
																		_ccd.character_zone_x,
																		_ccd.character_zone_y,
																		_tcd.character_zone_x,
																		_tcd.character_zone_y,
																		spellEffects.volumeRangeLong
																	),
											onFinish: function()
											{
												
											}
										});
		
		for(var i=1;i<=_maxFrames;i++)
		{
			_moveFrames[ i ] = { image: new Image(), alpha: 0 };
			_moveFrames[ i ].image.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/VEGEDEATH/VEGEDEATH' + i + '.png';
		}
		
		//draw the bombardierBeetleDeath spatter
		this.draw = function()
		{
			Map.ctx.save();
			
			Map.ctx.translate( self.previousX + self.offsetX + Map.viewPortX, self.previousY + self.offsetY + Map.viewPortY );
			
			Map.ctx.rotate( ( self.rotation - 90 ) * Math.PI / 180 );
			
			Map.ctx.shadowColor = 'rgba(0, 0, 0, 0.7)';
			Map.ctx.shadowOffsetX = 3;
			Map.ctx.shadowOffsetY = 3;
			
			Map.ctx.drawImage(
							_moveFrames[ _currentIndex ].image,
							- self.offsetX,
							- self.offsetY
						);
			
			Map.ctx.restore();
			
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the deathDecay
		this.remove = function()
		{
			clearTimeout( _changeFrameFunctionPointer );
			
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[0][ this.ID ] = null;
			
			delete _tc._internal.spellEffects[ this.characterSpellEffectID ];
		}
		
		var _changeFrameFunction = function()
		{
			_currentIndex++;
			
			if( _currentIndex > _maxFrames )
			{
				self.remove();
				
				return;
			}
			
			_changeFrameFunctionPointer = setTimeout( _changeFrameFunction, 100 );
		}
		
		_changeFrameFunction();
		
	} //end bombardierBeetleDeath

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.WaterTrickle.js
*/

	
	spellEffects[ 'WaterTrickle' ] = function( args )
	{
		var self = this,
				_ccd = Component.bugcraft.currentCharacterObject.characterData,
				_moveFrames = {},
				_tc = args.targetCharacter,
				_tcd = _tc.characterData,
				_changeFrameFunctionPointer = null,
				_currentIndex = 1,
				_maxFrames = 1,
				_backgroundSound = null;
		
		this.ID = spellEffects.layer[0].push( this ) - 1;
		this.characterSpellEffectID = _tc._internal.spellEffects.push( this ) - 1;
		this.offsetX = 20;
		this.offsetY = 20;
		this.rotation = _tcd.character_rotation;
		this.deleteRange = 40;
		this.previousX = _tcd.character_zone_x - this.offsetX;
		this.previousY = _tcd.character_zone_y - this.offsetY;
		
		// initialize
		
		var _soundLoop = function()
		{
			_backgroundSound = Application.sound.playExclusive({
												url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/WaterTrickle/WaterTrickle.mp3',
												volume: spellEffects.volumeByRangeVoice(
																			_ccd.character_zone_x,
																			_ccd.character_zone_y,
																			_tcd.character_zone_x,
																			_tcd.character_zone_y,
																			spellEffects.volumeRangeLong
																		),
												onFinish: function()
												{
													_soundLoop();
												}
											});
		}
		
		for(var i=1;i<=_maxFrames;i++)
		{
			_moveFrames[ i ] = { image: new Image(), alpha: 0 };
			_moveFrames[ i ].image.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/WaterTrickle/WaterTrickle' + i + '.png';
		}
		
		//draw the bombardierBeetleDeath spatter
		this.draw = function()
		{
			Map.ctx.save();
			
			Map.ctx.translate( self.previousX + self.offsetX + Map.viewPortX, self.previousY + self.offsetY + Map.viewPortY );
			
			Map.ctx.rotate( ( self.rotation - 90 ) * Math.PI / 180 );
			
			Map.ctx.shadowColor = 'rgba(0, 0, 0, 0.7)';
			Map.ctx.shadowOffsetX = 3;
			Map.ctx.shadowOffsetY = 3;
			
			Map.ctx.drawImage(
							_moveFrames[ _currentIndex ].image,
							- self.offsetX,
							- self.offsetY
						);
			
			Map.ctx.restore();
			
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the deathDecay
		this.remove = function()
		{
			clearTimeout( _changeFrameFunctionPointer );
			
			if( _backgroundSound )
			{
				_backgroundSound.stop();
			}
			
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[0][ this.ID ] = null;
			
			delete _tc._internal.spellEffects[ this.characterSpellEffectID ];
		}
		
		var _changeFrameFunction = function()
		{
			_currentIndex++;
			
			if( _currentIndex > _maxFrames )
			{
				_currentIndex = 1;
				
				setTimeout( _changeFrameFunction, 2000 + Math.random() * 5000 );
				
				return;
			}
			
			_changeFrameFunctionPointer = setTimeout( _changeFrameFunction, 100 );
		}
		
		_soundLoop();
		_changeFrameFunction();
		
	} //end bombardierBeetleDeath

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.WaterWave.js
*/

	
	spellEffects[ 'WaterWave' ] = function( args )
	{
		var self = this,
				_ccd = Component.bugcraft.currentCharacterObject.characterData,
				_moveFrames = {},
				_tc = args.targetCharacter,
				_tcd = _tc.characterData,
				_changeFrameFunctionPointer = null,
				_currentIndex = 1,
				_maxFrames = 1,
				_backgroundSound = null;
		
		this.ID = spellEffects.layer[0].push( this ) - 1;
		this.characterSpellEffectID = _tc._internal.spellEffects.push( this ) - 1;
		this.offsetX = 20;
		this.offsetY = 20;
		this.rotation = _tcd.character_rotation;
		this.deleteRange = 40;
		this.previousX = _tcd.character_zone_x - this.offsetX;
		this.previousY = _tcd.character_zone_y - this.offsetY;
		
		// initialize
		
		var _soundLoop = function()
		{
			
			_backgroundSound = Application.sound.playExclusive({
												url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/WaterWave/WaterWave.mp3',
												volume: spellEffects.volumeByRangeVoice(
																			_ccd.character_zone_x,
																			_ccd.character_zone_y,
																			_tcd.character_zone_x,
																			_tcd.character_zone_y,
																			spellEffects.volumeRangeLong
																		),
												onFinish: function()
												{
													_soundLoop();
												}
											});
		}
		
		for(var i=1;i<=_maxFrames;i++)
		{
			_moveFrames[ i ] = { image: new Image(), alpha: 0 };
			_moveFrames[ i ].image.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/WaterWave/WaterWave' + i + '.png';
		}
		
		//draw the bombardierBeetleDeath spatter
		this.draw = function()
		{
			Map.ctx.save();
			
			Map.ctx.translate( self.previousX + self.offsetX + Map.viewPortX, self.previousY + self.offsetY + Map.viewPortY );
			
			Map.ctx.rotate( ( self.rotation - 90 ) * Math.PI / 180 );
			
			Map.ctx.shadowColor = 'rgba(0, 0, 0, 0.7)';
			Map.ctx.shadowOffsetX = 3;
			Map.ctx.shadowOffsetY = 3;
			
			Map.ctx.drawImage(
							_moveFrames[ _currentIndex ].image,
							- self.offsetX,
							- self.offsetY
						);
			
			Map.ctx.restore();
			
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the deathDecay
		this.remove = function()
		{
			clearTimeout( _changeFrameFunctionPointer );
			
			if( _backgroundSound )
			{
				_backgroundSound.stop();
			}
			
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[0][ this.ID ] = null;
			
			delete _tc._internal.spellEffects[ this.characterSpellEffectID ];
		}
		
		var _changeFrameFunction = function()
		{
			_currentIndex++;
			
			if( _currentIndex > _maxFrames )
			{
				_currentIndex = 1;
				
				setTimeout( _changeFrameFunction, 2000 + Math.random() * 5000 );
				
				return;
			}
			
			_changeFrameFunctionPointer = setTimeout( _changeFrameFunction, 100 );
		}
		
		_soundLoop();
		_changeFrameFunction();
		
	} //end bombardierBeetleDeath

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.Wave1.js
*/

	
	spellEffects[ 'Wave1' ] = function( args )
	{
		var self = this,
				_ccd = Component.bugcraft.currentCharacterObject.characterData,
				_moveFrames = {},
				_tc = args.targetCharacter,
				_tcd = _tc.characterData,
				_changeFrameFunctionPointer = null,
				_currentIndex = 1,
				_maxFrames = 1,
				_backgroundSound = null;
		
		this.ID = spellEffects.layer[0].push( this ) - 1;
		this.characterSpellEffectID = _tc._internal.spellEffects.push( this ) - 1;
		this.offsetX = 20;
		this.offsetY = 20;
		this.rotation = _tcd.character_rotation;
		this.deleteRange = 40;
		this.previousX = _tcd.character_zone_x - this.offsetX;
		this.previousY = _tcd.character_zone_y - this.offsetY;
		
		// initialize
		
		var _soundLoop = function()
		{
			_backgroundSound = Application.sound.playExclusive({
												url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/Wave1/Wave1.mp3',
												volume: spellEffects.volumeByRangeVoice(
																			_ccd.character_zone_x,
																			_ccd.character_zone_y,
																			_tcd.character_zone_x,
																			_tcd.character_zone_y,
																			spellEffects.volumeRangeLong
																		),
												onFinish: function()
												{
													_soundLoop();
												}
											});
		}
		
		for(var i=1;i<=_maxFrames;i++)
		{
			_moveFrames[ i ] = { image: new Image(), alpha: 0 };
			_moveFrames[ i ].image.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/Wave1/Wave1' + i + '.png';
		}
		
		//draw the bombardierBeetleDeath spatter
		this.draw = function()
		{
			Map.ctx.save();
			
			Map.ctx.translate( self.previousX + self.offsetX + Map.viewPortX, self.previousY + self.offsetY + Map.viewPortY );
			
			Map.ctx.rotate( ( self.rotation - 90 ) * Math.PI / 180 );
			
			Map.ctx.shadowColor = 'rgba(0, 0, 0, 0.7)';
			Map.ctx.shadowOffsetX = 3;
			Map.ctx.shadowOffsetY = 3;
			
			Map.ctx.drawImage(
							_moveFrames[ _currentIndex ].image,
							- self.offsetX,
							- self.offsetY
						);
			
			Map.ctx.restore();
			
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the deathDecay
		this.remove = function()
		{
			clearTimeout( _changeFrameFunctionPointer );
			
			if( _backgroundSound )
			{
				_backgroundSound.stop();
			}
			
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[0][ this.ID ] = null;
			
			delete _tc._internal.spellEffects[ this.characterSpellEffectID ];
		}
		
		var _changeFrameFunction = function()
		{
			_currentIndex++;
			
			if( _currentIndex > _maxFrames )
			{
				_currentIndex = 1;
				
				setTimeout( _changeFrameFunction, 2000 + Math.random() * 5000 );
				
				return;
			}
			
			_changeFrameFunctionPointer = setTimeout( _changeFrameFunction, 100 );
		}
		
		_soundLoop();
		_changeFrameFunction();
		
	} //end bombardierBeetleDeath

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.WaveySounds.js
*/

	
	spellEffects[ 'WaveySounds' ] = function( args )
	{
		var self = this,
				_ccd = Component.bugcraft.currentCharacterObject.characterData,
				_moveFrames = {},
				_tc = args.targetCharacter,
				_tcd = _tc.characterData,
				_changeFrameFunctionPointer = null,
				_currentIndex = 1,
				_maxFrames = 7,
				_backgroundSound = null,
				_soundTimeoutPointer = null;
		
		this.ID = spellEffects.layer[0].push( this ) - 1;
		this.characterSpellEffectID = _tc._internal.spellEffects.push( this ) - 1;
		this.offsetX = 20;
		this.offsetY = 20;
		this.rotation = _tcd.character_rotation;
		this.deleteRange = 40;
		this.previousX = _tcd.character_zone_x - this.offsetX;
		this.previousY = _tcd.character_zone_y - this.offsetY;
		
		// initialize
		
		var _soundLoop = function()
		{
			_backgroundSound = Application.sound.playExclusive({
												url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/WaveySounds/WaveySounds.mp3',
												volume: spellEffects.volumeByRangeVoice(
																			_ccd.character_zone_x,
																			_ccd.character_zone_y,
																			_tcd.character_zone_x,
																			_tcd.character_zone_y,
																			spellEffects.volumeRangeLong
																		),
												onFinish: function()
												{
													_soundTimeoutPointer = setTimeout( function()
													{
														_soundLoop();
													}, 2 + Math.random() * ( 4 - 2 ) );
												}
											});
		}
		
		for(var i=1;i<=_maxFrames;i++)
		{
			_moveFrames[ i ] = { image: new Image(), alpha: 0 };
			_moveFrames[ i ].image.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/WaveySounds/WaveySounds' + i + '.png';
		}
		
		//draw the bombardierBeetleDeath spatter
		this.draw = function()
		{
			Map.ctx.save();
			
			Map.ctx.translate( self.previousX + self.offsetX + Map.viewPortX, self.previousY + self.offsetY + Map.viewPortY );
			
			Map.ctx.rotate( ( self.rotation - 90 ) * Math.PI / 180 );
			
			Map.ctx.shadowColor = 'rgba(0, 0, 0, 0.7)';
			Map.ctx.shadowOffsetX = 3;
			Map.ctx.shadowOffsetY = 3;
			
			Map.ctx.drawImage(
							_moveFrames[ _currentIndex ].image,
							- self.offsetX,
							- self.offsetY
						);
			
			Map.ctx.restore();
			
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the deathDecay
		this.remove = function()
		{
			clearTimeout( _changeFrameFunctionPointer );
			clearTimeout( _soundTimeoutPointer );
			
			if( _backgroundSound )
			{
				_backgroundSound.stop();
			}
			
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[0][ this.ID ] = null;
			
			delete _tc._internal.spellEffects[ this.characterSpellEffectID ];
		}
		
		var _changeFrameFunction = function()
		{
			_currentIndex++;
			
			if( _currentIndex > _maxFrames )
			{
				_currentIndex = 1;
				
				setTimeout( _changeFrameFunction, 2000 + Math.random() * 5000 );
				
				return;
			}
			
			_changeFrameFunctionPointer = setTimeout( _changeFrameFunction, 100 );
		}
		
		_soundLoop();
		_changeFrameFunction();
		
	} //end bombardierBeetleDeath

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.adiexplodecocoon.js
*/

	
	spellEffects[ 'adiexplodecocoon' ] = function( args )
	{
		var self = this,
				_ccd = Component.bugcraft.currentCharacterObject.characterData,
				_moveFrames = {},
				_tc = args.targetCharacter,
				_tcd = _tc.characterData,
				_changeFrameFunctionPointer = null,
				_currentIndex = 1,
				_maxFrames = 5;
		
		this.ID = spellEffects.layer[0].push( this ) - 1;
		this.characterSpellEffectID = _tc._internal.spellEffects.push( this ) - 1;
		this.offsetX = 20;
		this.offsetY = 20;
		this.rotation = _tcd.character_rotation;
		this.deleteRange = 40;
		this.previousX = _tcd.character_zone_x - this.offsetX;
		this.previousY = _tcd.character_zone_y - this.offsetY;
		
		// initialize
		
		Application.sound.playExclusive({
											url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/adiexplodecocoon/adiexplodecocoon.mp3',
											volume: spellEffects.volumeByRangeVoice(
																		_ccd.character_zone_x,
																		_ccd.character_zone_y,
																		_tcd.character_zone_x,
																		_tcd.character_zone_y,
																		spellEffects.volumeRangeLong
																	),
											onFinish: function()
											{
												
											}
										});
		
		for(var i=1;i<=_maxFrames;i++)
		{
			_moveFrames[ i ] = { image: new Image(), alpha: 0 };
			_moveFrames[ i ].image.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/adiexplodecocoon/adiexplodecocoon' + i + '.png';
		}
		
		//draw the bombardierBeetleDeath spatter
		this.draw = function()
		{
			Map.ctx.save();
			
			Map.ctx.translate( self.previousX + self.offsetX + Map.viewPortX, self.previousY + self.offsetY + Map.viewPortY );
			
			Map.ctx.rotate( ( self.rotation - 90 ) * Math.PI / 180 );
			
			Map.ctx.shadowColor = 'rgba(0, 0, 0, 0.7)';
			Map.ctx.shadowOffsetX = 3;
			Map.ctx.shadowOffsetY = 3;
			
			Map.ctx.drawImage(
							_moveFrames[ _currentIndex ].image,
							- self.offsetX,
							- self.offsetY
						);
			
			Map.ctx.restore();
			
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the deathDecay
		this.remove = function()
		{
			clearTimeout( _changeFrameFunctionPointer );
			
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[0][ this.ID ] = null;
			
			delete _tc._internal.spellEffects[ this.characterSpellEffectID ];
		}
		
		var _changeFrameFunction = function()
		{
			_currentIndex++;
			
			if( _currentIndex > _maxFrames )
			{
				self.remove();
				
				return;
			}
			
			_changeFrameFunctionPointer = setTimeout( _changeFrameFunction, 100 );
		}
		
		_changeFrameFunction();
		
	} //end bombardierBeetleDeath

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.adiwavetest.js
*/

	
	spellEffects[ 'adiwavetest' ] = function( args )
	{
		var self = this,
				_ccd = Component.bugcraft.currentCharacterObject.characterData,
				_moveFrames = {},
				_tc = args.targetCharacter,
				_tcd = _tc.characterData,
				_changeFrameFunctionPointer = null,
				_currentIndex = 1,
				_maxFrames = 1,
				_backgroundSound = null,
				_soundTimeoutPointer = null;
		
		this.ID = spellEffects.layer[0].push( this ) - 1;
		this.characterSpellEffectID = _tc._internal.spellEffects.push( this ) - 1;
		this.offsetX = 20;
		this.offsetY = 20;
		this.rotation = _tcd.character_rotation;
		this.deleteRange = 40;
		this.previousX = _tcd.character_zone_x - this.offsetX;
		this.previousY = _tcd.character_zone_y - this.offsetY;
		
		// initialize
		
		var _soundLoop = function()
		{
			_backgroundSound = Application.sound.playExclusive({
												url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/adiwavetest/adiwavetest.mp3',
												volume: spellEffects.volumeByRangeVoice(
																			_ccd.character_zone_x,
																			_ccd.character_zone_y,
																			_tcd.character_zone_x,
																			_tcd.character_zone_y,
																			spellEffects.volumeRangeLong
																		),
												onFinish: function()
												{
													_soundTimeoutPointer = setTimeout( function()
													{
														_soundLoop();
													}, 2 + Math.random() * ( 3 - 2 ) );
												}
											});
		}
		
		for(var i=1;i<=_maxFrames;i++)
		{
			_moveFrames[ i ] = { image: new Image(), alpha: 0 };
			_moveFrames[ i ].image.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/adiwavetest/adiwavetest' + i + '.png';
		}
		
		//draw the bombardierBeetleDeath spatter
		this.draw = function()
		{
			Map.ctx.save();
			
			Map.ctx.translate( self.previousX + self.offsetX + Map.viewPortX, self.previousY + self.offsetY + Map.viewPortY );
			
			Map.ctx.rotate( ( self.rotation - 90 ) * Math.PI / 180 );
			
			Map.ctx.shadowColor = 'rgba(0, 0, 0, 0.7)';
			Map.ctx.shadowOffsetX = 3;
			Map.ctx.shadowOffsetY = 3;
			
			Map.ctx.drawImage(
							_moveFrames[ _currentIndex ].image,
							- self.offsetX,
							- self.offsetY
						);
			
			Map.ctx.restore();
			
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the deathDecay
		this.remove = function()
		{
			clearTimeout( _changeFrameFunctionPointer );
			clearTimeout( _soundTimeoutPointer );
			
			if( _backgroundSound )
			{
				_backgroundSound.stop();
			}
			
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[0][ this.ID ] = null;
			
			delete _tc._internal.spellEffects[ this.characterSpellEffectID ];
		}
		
		var _changeFrameFunction = function()
		{
			_currentIndex++;
			
			if( _currentIndex > _maxFrames )
			{
				_currentIndex = 1;
				
				setTimeout( _changeFrameFunction, 2000 + Math.random() * 5000 );
				
				return;
			}
			
			_changeFrameFunctionPointer = setTimeout( _changeFrameFunction, 100 );
		}
		
		_soundLoop();
		_changeFrameFunction();
		
	} //end bombardierBeetleDeath

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.alabala.js
*/

	
	spellEffects[ 'alabala' ] = function( args )
	{
		var self = this,
				_ccd = Component.bugcraft.currentCharacterObject.characterData,
				_moveFrames = {},
				_tc = args.targetCharacter,
				_tcd = _tc.characterData,
				_changeFrameFunctionPointer = null,
				_currentIndex = 1,
				_maxFrames = 8,
				_backgroundSound = null,
				_soundTimeoutPointer = null;
		
		this.ID = spellEffects.layer[0].push( this ) - 1;
		this.characterSpellEffectID = _tc._internal.spellEffects.push( this ) - 1;
		this.offsetX = 20;
		this.offsetY = 20;
		this.rotation = _tcd.character_rotation;
		this.deleteRange = 40;
		this.previousX = _tcd.character_zone_x - this.offsetX;
		this.previousY = _tcd.character_zone_y - this.offsetY;
		
		// initialize
		
		var _soundLoop = function()
		{
			_backgroundSound = Application.sound.playExclusive({
												url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/alabala/alabala.mp3',
												volume: spellEffects.volumeByRangeVoice(
																			_ccd.character_zone_x,
																			_ccd.character_zone_y,
																			_tcd.character_zone_x,
																			_tcd.character_zone_y,
																			spellEffects.volumeRangeLong
																		),
												onFinish: function()
												{
													_soundTimeoutPointer = setTimeout( function()
													{
														_soundLoop();
													}, 0 + Math.random() * ( 0 - 0 ) );
												}
											});
		}
		
		for(var i=1;i<=_maxFrames;i++)
		{
			_moveFrames[ i ] = { image: new Image(), alpha: 0 };
			_moveFrames[ i ].image.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/alabala/alabala' + i + '.png';
		}
		
		//draw the bombardierBeetleDeath spatter
		this.draw = function()
		{
			Map.ctx.save();
			
			Map.ctx.translate( self.previousX + self.offsetX + Map.viewPortX, self.previousY + self.offsetY + Map.viewPortY );
			
			Map.ctx.rotate( ( self.rotation - 90 ) * Math.PI / 180 );
			
			Map.ctx.shadowColor = 'rgba(0, 0, 0, 0.7)';
			Map.ctx.shadowOffsetX = 3;
			Map.ctx.shadowOffsetY = 3;
			
			Map.ctx.drawImage(
							_moveFrames[ _currentIndex ].image,
							- self.offsetX,
							- self.offsetY
						);
			
			Map.ctx.restore();
			
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the deathDecay
		this.remove = function()
		{
			clearTimeout( _changeFrameFunctionPointer );
			clearTimeout( _soundTimeoutPointer );
			
			if( _backgroundSound )
			{
				_backgroundSound.stop();
			}
			
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[0][ this.ID ] = null;
			
			delete _tc._internal.spellEffects[ this.characterSpellEffectID ];
		}
		
		var _changeFrameFunction = function()
		{
			_currentIndex++;
			
			if( _currentIndex > _maxFrames )
			{
				_currentIndex = 1;
				
				setTimeout( _changeFrameFunction, 2000 + Math.random() * 5000 );
				
				return;
			}
			
			_changeFrameFunctionPointer = setTimeout( _changeFrameFunction, 100 );
		}
		
		_soundLoop();
		_changeFrameFunction();
		
	} //end bombardierBeetleDeath

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.ambientRadialSounds.js
*/


	spellEffects.ambientRadialSounds = function( args )
	{
		this.ID = spellEffects.layer[0].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		
		var self = this, _playTimeoutPointer = [], _playSoundObject = [], _tcd = args.targetCharacter.characterData, _soundObjects = [];
		
		this.remove = function()
		{
			for(var i=0;i<_soundObjects.length;i++)
			{
				clearTimeout( _playTimeoutPointer[ i ] );
			
				if( _playSoundObject[ i ] )
				{
					_playSoundObject[ i ].stop();
					//_playSoundObject[ i ].destruct();
				}
				
				delete args.targetCharacter._internal.soundEffects[ _soundObjects[ i ] ];
			}
			
			spellEffects.layer[0][ this.ID ] = null;
			delete args.targetCharacter._internal.spellEffects[ this.characterSpellEffectID ];
		}
		
		this.draw = function()
		{
			
		}
		
		var _soundLoop = function( _soundObjectIndex, maxDelay, streamSounds )
		{
			if( !Component.bugcraft.currentCharacterObject )
			{
				setTimeout( function()
				{
					_soundLoop( _soundObjectIndex, maxDelay, streamSounds );
				}, 3000 );		// retry in 3 sec
				
				return false;
			}
			
			var _ccd = Component.bugcraft.currentCharacterObject.characterData;
			
			_playSoundObject[ _soundObjectIndex ] = Application.sound.playRandomExclusive({
																											url: streamSounds,
																											volume: spellEffects.volumeByRangeAmbiental(
																																							_tcd.character_zone_x, 
																																							_tcd.character_zone_y, 
																																							_ccd.character_zone_x, 
																																							_ccd.character_zone_y, 
																																							spellEffects.volumeRangeLong 
																																						),
																											onFinish: function()
																											{
																												_playTimeoutPointer[ _soundObjectIndex ] = setTimeout( function()
																												{
																													_soundLoop( _soundObjectIndex, maxDelay, streamSounds );
																												}, 10000 + Math.random() * maxDelay );
																											}
																										});
			
			if( _playSoundObject[ _soundObjectIndex ] == false )
			{
				// the same sound must be playing already
				
				setTimeout( function()
				{
					_soundLoop( _soundObjectIndex, maxDelay, streamSounds );
				}, 600000 );		// retry in 1 min
				
				return false;
			}
			
			if( _soundObjects[ _soundObjectIndex ] == null )
			{
				// this sound in particular hasn't been indexed yet in the sound array associated to the player
				
				_soundObjects[ _soundObjectIndex ] = args.targetCharacter._internal.soundEffects.push( _playSoundObject[ _soundObjectIndex ] ) - 1;
			}
			
			args.targetCharacter._internal.soundEffects[ _soundObjects[ _soundObjectIndex ] ] = _playSoundObject[ _soundObjectIndex ];
		}
		
		//
		// Initialize
		//
		
		var _queueLoop = function( _soundObjectIndex, maxDelay, streamSounds )
		{
			setTimeout( function()
			{
				_soundLoop( _soundObjectIndex, maxDelay, streamSounds );
			}, 2000 + Math.random() * 5000 );
		}
		
		for(var i in args.streams)
		{
			for(var j=0;j<args.streams[ i ].length;j++)
			{
				args.streams[ i ][ j ] = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/ambient/' + args.streams[ i ][ j ] + '.mp3';
			}
			
			// ensure a minimum delay
			_queueLoop( _soundObjects.push( null ) - 1, i, args.streams[ i ] );
		}
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.areaNatureVines.js
*/


	spellEffects.areaNatureVines = function( args )
	{
		this.ID = spellEffects.layer[0].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		this.alpha = 1;
		this.duration = 2500;
		this.offsetX = 125;
		this.offsetY = 125;
		this.rotation = 0;
		this.deleteRange = 250;
		this.previousX = args.targetCharacter.characterData.character_zone_x - this.offsetX;
		this.previousY = args.targetCharacter.characterData.character_zone_y - this.offsetY;
		
		var self = this;
		
		var areaNatureVinesImageObject = new Image();
		areaNatureVinesImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/other/aura_nature_vines_purple.png';
		
		//draw the the areaNatureVines
		this.draw = function()
		{
			Map.ctx.globalAlpha = self.alpha;
			
			Map.ctx.save();
			
			Map.ctx.drawImage(
							areaNatureVinesImageObject,
							args.targetCharacter.characterData.character_zone_x + Map.viewPortX - self.offsetX,
							args.targetCharacter.characterData.character_zone_y + Map.viewPortY - self.offsetY
						);
										
			self.previousX = args.targetCharacter.characterData.character_zone_x - self.offsetX;
			self.previousY = args.targetCharacter.characterData.character_zone_y - self.offsetY;
										
			Map.ctx.restore();
			
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the areaNatureVines
		this.remove = function()
		{
			clearTimeout( _fadeInOutFunctionPointer );
			
			var _timeout = setInterval( function()
												{
													self.alpha -= 0.1;
													
													if( self.alpha > 0 )
													{
														return;
													}
													
													spellEffects.layerCleaner.push( this );
													spellEffects.layer[0][ this.ID ] = null;
													delete args.targetCharacter._internal.spellEffects[ this.characterSpellEffectID ];
													
													clearInterval( _timeout );
													
												}, 100 );
		}

		//self.alpha = 0;	
		
		var opacityVariation = 0;
		
		var _fadeInOutFunction =  function()
												{
													self.alpha = Math.abs( Math.sin( opacityVariation ) );

													opacityVariation += Math.PI / 32;
													
													if (self.alpha < 0.6 )
													{
														self.alpha = 0.6;
													}
													
													_fadeInOutFunctionPointer = setTimeout( _fadeInOutFunction, 30 );
												}	
												
		//var _fadeInOutFunctionPointer = setTimeout( _fadeInOutFunction, 1 );
		
	} //end the areaNatureVines

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.asdadasa.js
*/

	
	spellEffects[ 'asdadasa' ] = function( args )
	{
		var self = this,
				_ccd = Component.bugcraft.currentCharacterObject.characterData,
				_moveFrames = {},
				_tc = args.targetCharacter,
				_tcd = _tc.characterData,
				_changeFrameFunctionPointer = null,
				_currentIndex = 1,
				_maxFrames = 4,
				_backgroundSound = null,
				_soundTimeoutPointer = null;
		
		this.ID = spellEffects.layer[0].push( this ) - 1;
		this.characterSpellEffectID = _tc._internal.spellEffects.push( this ) - 1;
		this.offsetX = 20;
		this.offsetY = 20;
		this.rotation = _tcd.character_rotation;
		this.deleteRange = 40;
		this.previousX = _tcd.character_zone_x - this.offsetX;
		this.previousY = _tcd.character_zone_y - this.offsetY;
		
		// initialize
		
		var _soundLoop = function()
		{
			_backgroundSound = Application.sound.playExclusive({
												url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/asdadasa/asdadasa.mp3',
												volume: spellEffects.volumeByRangeVoice(
																			_ccd.character_zone_x,
																			_ccd.character_zone_y,
																			_tcd.character_zone_x,
																			_tcd.character_zone_y,
																			spellEffects.volumeRangeLong
																		),
												onFinish: function()
												{
													_soundTimeoutPointer = setTimeout( function()
													{
														_soundLoop();
													}, 5 + Math.random() * ( 10 - 5 ) );
												}
											});
		}
		
		for(var i=1;i<=_maxFrames;i++)
		{
			_moveFrames[ i ] = { image: new Image(), alpha: 0 };
			_moveFrames[ i ].image.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/asdadasa/asdadasa' + i + '.png';
		}
		
		//draw the bombardierBeetleDeath spatter
		this.draw = function()
		{
			Map.ctx.save();
			
			Map.ctx.translate( self.previousX + self.offsetX + Map.viewPortX, self.previousY + self.offsetY + Map.viewPortY );
			
			Map.ctx.rotate( ( self.rotation - 90 ) * Math.PI / 180 );
			
			Map.ctx.shadowColor = 'rgba(0, 0, 0, 0.7)';
			Map.ctx.shadowOffsetX = 3;
			Map.ctx.shadowOffsetY = 3;
			
			Map.ctx.drawImage(
							_moveFrames[ _currentIndex ].image,
							- self.offsetX,
							- self.offsetY
						);
			
			Map.ctx.restore();
			
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the deathDecay
		this.remove = function()
		{
			clearTimeout( _changeFrameFunctionPointer );
			clearTimeout( _soundTimeoutPointer );
			
			if( _backgroundSound )
			{
				_backgroundSound.stop();
			}
			
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[0][ this.ID ] = null;
			
			delete _tc._internal.spellEffects[ this.characterSpellEffectID ];
		}
		
		var _changeFrameFunction = function()
		{
			_currentIndex++;
			
			if( _currentIndex > _maxFrames )
			{
				_currentIndex = 1;
				
				setTimeout( _changeFrameFunction, 2000 + Math.random() * 5000 );
				
				return;
			}
			
			_changeFrameFunctionPointer = setTimeout( _changeFrameFunction, 100 );
		}
		
		_soundLoop();
		_changeFrameFunction();
		
	} //end bombardierBeetleDeath

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.auraBlue.js
*/


	spellEffects.auraBlue = function( args )
	{
		this.ID = spellEffects.layer[0].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		this.alpha = 1;
		this.offsetX = 60;
		this.offsetY = 60;
		this.rotation = Math.random() * (Math.PI * 2);
		this.deleteRange = 120;
		this.previousX = args.targetCharacter.characterData.character_zone_x - this.offsetX;
		this.previousY = args.targetCharacter.characterData.character_zone_y - this.offsetY;
		this.duration = 5000 - Component.bugcraft.latency;
		
		var self = this;
		
		var auraBlueImageObject = new Image();
		auraBlueImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/aura/blue/aura_blue1' + args.component + '.png';
		
		//draw the auraBlue
		this.draw = function()
		{
			Map.ctx.globalAlpha = self.alpha;
			
			Map.ctx.save();
			
			Map.ctx.translate( args.targetCharacter.characterData.character_zone_x + Map.viewPortX, args.targetCharacter.characterData.character_zone_y + Map.viewPortY );
			
			Map.ctx.rotate( self.rotation );
			
			Map.ctx.drawImage(
											auraBlueImageObject,
											- self.offsetX,
											- self.offsetY
										);
	
			self.previousX = args.targetCharacter.characterData.character_zone_x - self.offsetX;
			self.previousY = args.targetCharacter.characterData.character_zone_y - self.offsetY;
	
			Map.ctx.restore();
			
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the auraBlue
		this.remove = function()
		{
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[0][ this.ID ] = null;
			delete args.targetCharacter._internal.spellEffects[ this.characterSpellEffectID ];
		}
		
		
		
		switch( args.component )
		{
			case 0:	
				self.alpha = 0;
				
				var auraBlueSound = soundManager.createSound({
						id: 'auraBlue' + ( ++spellEffects.soundIncrementor ),
						url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/aura/vanishing_whoosh.mp3',
						volume: spellEffects.volumeByRange ( Component.bugcraft.currentCharacterObject.characterData.character_zone_x, Component.bugcraft.currentCharacterObject.characterData.character_zone_y, args.targetCharacter.characterData.character_zone_x, args.targetCharacter.characterData.character_zone_y, spellEffects.volumeRangeLong )
				});
				
				this.spellEffectSoundID = args.targetCharacter._internal.soundEffects.push( auraBlueSound ) - 1;
				
				soundManager.play( 'auraBlue' + spellEffects.soundIncrementor, 
												{
													onfinish: function () 
													{
														delete args.targetCharacter._internal.soundEffects[ self.spellEffectSoundID ];	
													}
												});
				
				var _animateFunction =	function()
																	{
																		if( self.alpha < 1 )
																		{
																			self.alpha += 0.2;
																		}
			
																		_animateFunctionPointer = setTimeout( _animateFunction, 50 );
																	}			
			break;
			case 1:
				self.alpha = 0;
				var _animateFunction =	function()
																	{
																		if( self.alpha < 1 )
																		{
																			self.alpha += 0.2;
																		}
																		
																		self.rotation += Math.PI / 32;

																		_animateFunctionPointer = setTimeout( _animateFunction, 50 );
																	}						
			break;
			case 2:
				self.alpha = 0;
				var _animateFunction =	function()
																	{
																		if( self.alpha < 1 )
																		{
																			self.alpha += 0.2;
																		}

																		self.rotation -= Math.PI / 32;

																		_animateFunctionPointer = setTimeout( _animateFunction, 50 );
																	}						
			break;
		}
		
		var _animateFunctionPointer = setTimeout( _animateFunction, 50 );
		
		setTimeout( function() 
								{ 
									clearTimeout( _animateFunctionPointer );
									
									var _t = setInterval( function()
																		{
																			self.alpha -= 0.1;
																			
																			if( self.alpha > 0 )
																			{
																				return;
																			}
																			
																			self.remove();
																			
																			clearInterval( _t );
																			
																		}, 40 );
								}, self.duration );
	} //end spinning aura

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.auraBlue133.js
*/


	spellEffects.auraBlue133 = function( args )
	{
		this.ID = spellEffects.layer[0].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		this.alpha = 1;
		this.offsetX = 60;
		this.offsetY = 60;
		this.rotation = Math.random() * (Math.PI * 2);
		this.deleteRange = 120;
		this.previousX = args.targetCharacter.characterData.character_zone_x - this.offsetX;
		this.previousY = args.targetCharacter.characterData.character_zone_y - this.offsetY;
		this.duration = 240000 - Component.bugcraft.latency;
		
		var self = this;
		
		var auraBlueImageObject = new Image();
		auraBlueImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/aura/blue/aura_blue1' + args.component + '.png';
		
		//draw the auraBlue
		this.draw = function()
		{
			Map.ctx.globalAlpha = self.alpha;
			
			Map.ctx.save();
			
			Map.ctx.translate( args.targetCharacter.characterData.character_zone_x + Map.viewPortX, args.targetCharacter.characterData.character_zone_y + Map.viewPortY );
			
			Map.ctx.rotate( self.rotation );
			
			Map.ctx.drawImage(
											auraBlueImageObject,
											- self.offsetX,
											- self.offsetY
										);
	
			self.previousX = args.targetCharacter.characterData.character_zone_x - self.offsetX;
			self.previousY = args.targetCharacter.characterData.character_zone_y - self.offsetY;
	
			Map.ctx.restore();
			
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the auraBlue
		this.remove = function()
		{
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[0][ this.ID ] = null;
			delete args.targetCharacter._internal.spellEffects[ this.characterSpellEffectID ];
		}
		
		
		
		switch( args.component )
		{
			case 0:	
				self.alpha = 0;
				
				var auraBlueSound = soundManager.createSound({
						id: 'auraBlue' + ( ++spellEffects.soundIncrementor ),
						url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/buffs/woosh short.mp3',
						volume: spellEffects.volumeByRange ( Component.bugcraft.currentCharacterObject.characterData.character_zone_x, Component.bugcraft.currentCharacterObject.characterData.character_zone_y, args.targetCharacter.characterData.character_zone_x, args.targetCharacter.characterData.character_zone_y, spellEffects.volumeRangeLong )
				});
				
				this.spellEffectSoundID = args.targetCharacter._internal.soundEffects.push( auraBlueSound ) - 1;
				
				soundManager.play( 'auraBlue' + spellEffects.soundIncrementor, 
												{
													onfinish: function () 
													{
														delete args.targetCharacter._internal.soundEffects[ self.spellEffectSoundID ];	
													}
												});
				
				var _animateFunction =	function()
																	{
																		if( self.alpha < 1 )
																		{
																			self.alpha += 0.2;
																		}
			
																		_animateFunctionPointer = setTimeout( _animateFunction, 50 );
																	}			
			break;
			case 1:
				self.alpha = 0;
				var _animateFunction =	function()
																	{
																		if( self.alpha < 1 )
																		{
																			self.alpha += 0.2;
																		}
																		
																		self.rotation += Math.PI / 32;

																		_animateFunctionPointer = setTimeout( _animateFunction, 50 );
																	}						
			break;
			case 2:
				self.alpha = 0;
				var _animateFunction =	function()
																	{
																		if( self.alpha < 1 )
																		{
																			self.alpha += 0.2;
																		}

																		self.rotation -= Math.PI / 32;

																		_animateFunctionPointer = setTimeout( _animateFunction, 50 );
																	}						
			break;
		}
		
		var _animateFunctionPointer = setTimeout( _animateFunction, 50 );
		
		setTimeout( function() 
								{ 
									clearTimeout( _animateFunctionPointer );
									
									var _t = setInterval( function()
																		{
																			self.alpha -= 0.1;
																			
																			if( self.alpha > 0 )
																			{
																				return;
																			}
																			
																			self.remove();
																			
																			clearInterval( _t );
																			
																		}, 40 );
								}, self.duration );
	} //end spinning aura

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.auraBlueComplete.js
*/


	spellEffects.auraBlueComplete = function( args )
	{
		this.ID = spellEffects.layer[1].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		
		this.draw = function()
		{
			
		}
		
		var effect0 = new spellEffects.auraBlue({ 			
				sourceCharacter: args.sourceCharacter,														
				targetCharacter: args.targetCharacter,
				component: 0
		});
		var effect1 = new spellEffects.auraBlue({ 																							
				sourceCharacter: args.sourceCharacter,
				targetCharacter: args.targetCharacter,
				component: 1
		});
		var effect2 = new spellEffects.auraBlue({ 																						
				sourceCharacter: args.sourceCharacter,
				targetCharacter: args.targetCharacter,
				component: 2
		});

		this.remove = function()
		{
			effect0.remove();
			effect1.remove();
			effect2.remove();
			
			spellEffects.layer[1][ self.ID ] = null;
				
			delete args.targetCharacter._internal.spellEffects[ self.characterSpellEffectID ];
		}
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.auraBlueComplete133.js
*/


	spellEffects.auraBlue133Complete = function( args )
	{
		this.ID = spellEffects.layer[1].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		
		this.draw = function()
		{
			
		}
		
		var effect0 = new spellEffects.auraBlue133({ 			
				sourceCharacter: args.sourceCharacter,														
				targetCharacter: args.targetCharacter,
				component: 0
		});
		var effect1 = new spellEffects.auraBlue133({ 																							
				sourceCharacter: args.sourceCharacter,
				targetCharacter: args.targetCharacter,
				component: 1
		});
		var effect2 = new spellEffects.auraBlue133({ 																						
				sourceCharacter: args.sourceCharacter,
				targetCharacter: args.targetCharacter,
				component: 2
		});

		this.remove = function()
		{
			effect0.remove();
			effect1.remove();
			effect2.remove();
			
			spellEffects.layer[1][ self.ID ] = null;
				
			delete args.targetCharacter._internal.spellEffects[ self.characterSpellEffectID ];
		}
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.auraColors.js
*/


	spellEffects.auraColors = function( args )
	{
		this.ID = spellEffects.layer[1].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		this.alpha = 1;
		this.offsetX = 30;
		this.offsetY = 30;
		this.rotation = Math.random() * (Math.PI * 2);
		this.deleteRange = 60;
		this.previousX = args.targetCharacter.characterData.character_zone_x - this.offsetX;
		this.previousY = args.targetCharacter.characterData.character_zone_y - this.offsetY;
		this.duration = 15000 - Component.bugcraft.latency;
		
		var self = this;
		
		var auraColorsImageObject = new Image();
		auraColorsImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/aura/colors/colors0.png';
		
		var auraColorsSound = soundManager.createSound({
				id: 'auraColors' + ( ++spellEffects.soundIncrementor ),
				url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/sound.mp3', 
				volume: spellEffects.volumeByRange ( Component.bugcraft.currentCharacterObject.characterData.character_zone_x, Component.bugcraft.currentCharacterObject.characterData.character_zone_y, args.targetCharacter.characterData.character_zone_x, args.targetCharacter.characterData.character_zone_y, spellEffects.volumeRangeLong )
		});
		
		/*this.spellEffectSoundID = args.targetCharacter._internal.soundEffects.push( auraColorsSound ) - 1;
		
		soundManager.play( 'auraColors' + spellEffects.soundIncrementor, 
										{
											onfinish: function () 
											{
												delete args.targetCharacter._internal.soundEffects[ self.spellEffectSoundID ];	
											}
										});
		*/
		//draw the auraColors
		this.draw = function()
		{
			Map.ctx.globalAlpha = self.alpha;
			
			Map.ctx.save();
			
			Map.ctx.translate( args.targetCharacter.characterData.character_zone_x + Map.viewPortX, args.targetCharacter.characterData.character_zone_y + Map.viewPortY );
			
			Map.ctx.rotate( self.rotation );
			
			Map.ctx.drawImage(
							auraColorsImageObject,
							- self.offsetX,
							- self.offsetY
						);
						
			self.previousX = args.targetCharacter.characterData.character_zone_x - self.offsetX;
			self.previousY = args.targetCharacter.characterData.character_zone_y - self.offsetY;
						
			Map.ctx.restore();
						
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the auraColors
		this.remove = function()
		{
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[1][ this.ID ] = null;
			clearTimeout( _animateFunctionPointer );
			clearTimeout( _spinColorsAuraPointer );
			delete args.targetCharacter._internal.spellEffects[ this.characterSpellEffectID ];
		}
		
		var i = 0;
		
		var _animateFunction =  function()
															{
																auraColorsImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/aura/colors/colors' + ( i++ % 12 ) + '.png';

																_animateFunctionPointer = setTimeout( _animateFunction, 60 );
															}	
							
		var _spinColorsAura =	function()
															{
																self.rotation -= Math.PI / 25;
															
																_spinColorsAuraPointer = setTimeout( _spinColorsAura, 20 );
															}	
		
		var _animateFunctionPointer = setTimeout( _animateFunction, 60 );
		var _spinColorsAuraPointer = setTimeout( _spinColorsAura, 20 );
		
		setTimeout( function()
							{
								var _t = setInterval( function()
													{
														self.alpha -= 0.1;
														
														if( self.alpha > 0 )
														{
															return;
														}
														
														self.remove();
														
														clearInterval( _t );
														
													}, 60 );
						
							}, self.duration );
							
	} //end auraColors

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.auraColorsCyan.js
*/


	spellEffects.auraColorsCyan = function( args )
	{
		this.ID = spellEffects.layer[1].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		this.alpha = 1;
		this.offsetX = 20;
		this.offsetY = 20;
		this.deleteRange = 40;
		this.previousX = args.targetCharacter.characterData.character_zone_x - this.offsetX;
		this.previousY = args.targetCharacter.characterData.character_zone_y - this.offsetY;
		this.duration = 5000 - Component.bugcraft.latency;
		
		var self = this;
		
		var auraColorsCyanImageObject = new Image();
		auraColorsCyanImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/aura/colors/cyan/cast_cyan0.png';
		
		var auraColorsCyanSound = soundManager.createSound({
				id: 'auraColorsCyan' + ( ++spellEffects.soundIncrementor ),
				url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/sound.mp3', 
				volume: spellEffects.volumeByRange ( Component.bugcraft.currentCharacterObject.characterData.character_zone_x, Component.bugcraft.currentCharacterObject.characterData.character_zone_y, args.targetCharacter.characterData.character_zone_x, args.targetCharacter.characterData.character_zone_y, spellEffects.volumeRangeLong )
		});
		/*
		this.spellEffectSoundID = args.targetCharacter._internal.soundEffects.push( auraColorsCyanSound ) - 1;
		
		soundManager.play( 'auraColorsCyan' + spellEffects.soundIncrementor, 
										{
											onfinish: function () 
											{
												delete args.targetCharacter._internal.soundEffects[ self.spellEffectSoundID ];	
											}
										});
		*/
		//draw the auraColorsCyan
		this.draw = function()
		{
			Map.ctx.globalAlpha = self.alpha;
			
			Map.ctx.drawImage(
							auraColorsCyanImageObject,
							args.targetCharacter.characterData.character_zone_x + Map.viewPortX - self.offsetX,
							args.targetCharacter.characterData.character_zone_y + Map.viewPortY - self.offsetX
						);
						
			self.previousX = args.targetCharacter.characterData.character_zone_x - self.offsetX;
			self.previousY = args.targetCharacter.characterData.character_zone_y - self.offsetY;
						
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the auraColorsCyan
		this.remove = function()
		{
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[1][ this.ID ] = null;
			delete args.targetCharacter._internal.spellEffects[ this.characterSpellEffectID ];
		}
		
		var i = 0;
		var _animate =  function()
							{
								auraColorsCyanImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/aura/colors/cyan/cast_cyan' + ( i++ % 4 ) + '.png';
								
								setTimeout( _animate, 80 );
							}
							
		_animate();
							
		setTimeout( function()
							{
								var _t = setInterval( function()
													{
														self.alpha -= 0.1;
														
														if( self.alpha > 0 )
														{
															return;
														}
														
														self.remove();
														
														clearInterval( _t );
														
													}, 60 );
						
							}, self.duration );
							
	} //end auraColorsCyan
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.auraElectric.js
*/


	spellEffects.auraElectric = function( args )
	{
		this.ID = spellEffects.layer[0].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		this.alpha = 1;
		this.offsetX = 40;
		this.offsetY = 40;
		this.rotation = Math.random() * (Math.PI * 2);
		this.deleteRange = 80;
		this.previousX = args.targetCharacter.characterData.character_zone_x - this.offsetX;
		this.previousY = args.targetCharacter.characterData.character_zone_y - this.offsetY;
		this.duration = 5000 - Component.bugcraft.latency;
		
		var self = this;
		
		var auraElectricImageObject = new Image();
		auraElectricImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/aura/electric/electric_surge01.png';
		
		var auraElectricSound = soundManager.createSound({
				id: 'auraElectric' + ( ++spellEffects.soundIncrementor ),
				url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/electric/electric_sparks_part' + Math.floor( Math.random() * 4	) + '.mp3',
				volume: spellEffects.volumeByRange ( Component.bugcraft.currentCharacterObject.characterData.character_zone_x, Component.bugcraft.currentCharacterObject.characterData.character_zone_y, args.targetCharacter.characterData.character_zone_x, args.targetCharacter.characterData.character_zone_y, spellEffects.volumeRangeLong )
		});
		
		this.spellEffectSoundID = args.targetCharacter._internal.soundEffects.push( auraElectricSound ) - 1;
		
		soundManager.play( 'auraElectric' + spellEffects.soundIncrementor, 
										{
											onfinish: function () 
											{
												delete args.targetCharacter._internal.soundEffects[ self.spellEffectSoundID ];	
											}
										});
		
		//
		//draw the auraElectric effect
		//
		this.draw = function()
		{
			Map.ctx.globalAlpha = self.alpha;
			
			Map.ctx.save();
			
			Map.ctx.translate( args.targetCharacter.characterData.character_zone_x + Map.viewPortX, args.targetCharacter.characterData.character_zone_y + Map.viewPortY );
			
			Map.ctx.rotate( self.rotation );
			
			Map.ctx.drawImage(
							auraElectricImageObject,
							- self.offsetX,
							- self.offsetY
						);
						
			self.previousX = args.targetCharacter.characterData.character_zone_x - self.offsetX;
			self.previousY = args.targetCharacter.characterData.character_zone_y - self.offsetY;
						
			Map.ctx.restore();
			
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the auraElectric effect
		this.remove = function()
		{
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[0][ this.ID ] = null;
			delete args.targetCharacter._internal.spellEffects[ this.characterSpellEffectID ];
		}
		
		var frame = 0;
		
		var _t = setInterval( function()
												{
													self.rotation += Math.PI / ( Math.floor( Math.random() * 64 ) + 1 );
													
													auraElectricImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/aura/electric/electric_surge0' + Math.floor( Math.random() * 6) + '.png';
												}, 50 )									
		
		setTimeout( function() 
								{ 
								
									var _timeout = setInterval( function()
																		{
																			self.alpha -= 0.1;
																			
																			if( self.alpha > 0 )
																			{
																				return;
																			}
																			
																			self.remove();
																			
																			clearInterval( _t );
																			
																			clearInterval( _timeout );
																			
																		}, 100 );
								}, self.duration );
	} //end auraElectric shockwave

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.auraElectricBlue.js
*/


	spellEffects.auraElectricBlue = function( args )
	{
		this.ID = spellEffects.layer[0].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		this.alpha = 1;
		this.offsetX = 30;
		this.offsetY = 30;
		this.rotation = Math.random() * (Math.PI * 2);
		this.deleteRange = 60;
		this.previousX = args.targetCharacter.characterData.character_zone_x - this.offsetX;
		this.previousY = args.targetCharacter.characterData.character_zone_y - this.offsetY;
		this.duration = 5000 - Component.bugcraft.latency;
		
		var self = this;
		
		var auraElectricBlueImageObject = new Image();
		auraElectricBlueImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/aura/electric/electric_spintremor1.png';
		
		var auraElectricBlueSound = soundManager.createSound({
				id: 'auraElectricBlue' + ( ++spellEffects.soundIncrementor ),
				url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/electric/electric_sparks_part' + Math.floor( Math.random() * 4	) + '.mp3',
				volume: spellEffects.volumeByRange ( Component.bugcraft.currentCharacterObject.characterData.character_zone_x, Component.bugcraft.currentCharacterObject.characterData.character_zone_y, args.targetCharacter.characterData.character_zone_x, args.targetCharacter.characterData.character_zone_y, spellEffects.volumeRangeLong )
		});
		
		this.spellEffectSoundID = args.targetCharacter._internal.soundEffects.push( auraElectricBlueSound ) - 1;
		
		soundManager.play( 'auraElectricBlue' + spellEffects.soundIncrementor, 
										{
											onfinish: function () 
											{
												delete args.targetCharacter._internal.soundEffects[ self.spellEffectSoundID ];	
											}
										});
		
		//
		//draw the auraElectricBlue effect
		//
		this.draw = function()
		{
			
			Map.ctx.globalAlpha = self.alpha;
			
			Map.ctx.save();
			
			Map.ctx.translate( args.targetCharacter.characterData.character_zone_x + Map.viewPortX, args.targetCharacter.characterData.character_zone_y + Map.viewPortY );
			
			Map.ctx.rotate( self.rotation );
			
			Map.ctx.drawImage(
							auraElectricBlueImageObject,
							- self.offsetX,
							- self.offsetY
						);
						
			self.previousX = args.targetCharacter.characterData.character_zone_x - self.offsetX;
			self.previousY = args.targetCharacter.characterData.character_zone_y - self.offsetY;
						
			Map.ctx.restore();
			
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the auraElectricBlue effect
		this.remove = function()
		{
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[0][ this.ID ] = null;
			delete args.targetCharacter._internal.spellEffects[ this.characterSpellEffectID ];
		}
		
		var frame = 0;
		
		var _t =	setInterval( function()
												{
													self.rotation += Math.PI / Math.floor( Math.random() * 128 );
													
													auraElectricBlueImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/aura/electric/electric_spintremor' + Math.floor( Math.random() * 4) + '.png';
												}, 50 )									
		
		setTimeout( function() 
								{ 
								
									var _timeout = setInterval( function()
																		{
																			self.alpha -= 0.1;
																			
																			if( self.alpha > 0 )
																			{
																				return;
																			}
																			
																			self.remove();
																			
																			clearInterval( _t );
																			
																			clearInterval( _timeout );
																			
																		}, 100 );
								}, self.duration );
	} //end auraElectricBlue shockwave

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.auraElectrictComplete.js
*/


	spellEffects.auraElectricComplete = function( args )
	{
		this.ID = spellEffects.layer[1].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		
		this.draw = function()
		{
			
		}
		
		var effect0 = new spellEffects.auraElectric({ 			
				sourceCharacter: args.sourceCharacter,														
				targetCharacter: args.targetCharacter,
				component: 0
		});
		var effect1 = new spellEffects.auraElectric({ 																							
				sourceCharacter: args.sourceCharacter,
				targetCharacter: args.targetCharacter,
				component: 1
		});
		
		this.remove = function()
		{
			effect0.remove();
			effect1.remove();
			
			spellEffects.layer[1][ self.ID ] = null;
				
			delete args.targetCharacter._internal.spellEffects[ self.characterSpellEffectID ];
		}
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.auraGolden.js
*/


	spellEffects.auraGolden = function( args )
	{
		this.ID = spellEffects.layer[0].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		this.alpha = 1;
		this.offsetX = 30;
		this.offsetY = 30;
		this.rotation = Math.random() * (Math.PI * 2);
		this.deleteRange = 60;
		this.previousX = args.targetCharacter.characterData.character_zone_x - this.offsetX;
		this.previousY = args.targetCharacter.characterData.character_zone_y - this.offsetY;
		this.duration = 5000 - Component.bugcraft.latency;
		
		var self = this;
		
		var auraGoldenImageObject = new Image();
		auraGoldenImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/aura/golden/golden_aura_awesome' + args.component + '.png';
		
		//draw the auraGolden
		this.draw = function()
		{
			Map.ctx.globalAlpha = self.alpha;
			
			Map.ctx.save();
			
			Map.ctx.translate( args.targetCharacter.characterData.character_zone_x + Map.viewPortX, args.targetCharacter.characterData.character_zone_y + Map.viewPortY );
			
			Map.ctx.rotate( self.rotation );
			
			Map.ctx.drawImage(
											auraGoldenImageObject,
											- self.offsetX,
											- self.offsetY
										);
	
			self.previousX = args.targetCharacter.characterData.character_zone_x - self.offsetX;
			self.previousY = args.targetCharacter.characterData.character_zone_y - self.offsetY;
	
			Map.ctx.restore();
			
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the auraGolden
		this.remove = function()
		{
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[0][ this.ID ] = null;
			delete args.targetCharacter._internal.spellEffects[ this.characterSpellEffectID ];
		}
		
		
		
		switch( args.component )
		{
			case 0:	
				self.alpha = 0;
				
				var auraGoldenSound = soundManager.createSound({
						id: 'auraGolden' + ( ++spellEffects.soundIncrementor ),
						url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/bolt/darkBolt1.mp3',
						volume: spellEffects.volumeByRange ( Component.bugcraft.currentCharacterObject.characterData.character_zone_x, Component.bugcraft.currentCharacterObject.characterData.character_zone_y, args.targetCharacter.characterData.character_zone_x, args.targetCharacter.characterData.character_zone_y, spellEffects.volumeRangeLong )
				});
				
				this.spellEffectSoundID = args.targetCharacter._internal.soundEffects.push( auraGoldenSound ) - 1;
				
				soundManager.play( 'auraGolden' + spellEffects.soundIncrementor, 
												{
													onfinish: function () 
													{
														delete args.targetCharacter._internal.soundEffects[ self.spellEffectSoundID ];	
													}
												});
				
				var _animateFunction =	function()
																	{
																		if( self.alpha < 1 )
																		{
																			self.alpha += 0.2;
																		}
			
																		_animateFunctionPointer = setTimeout( _animateFunction, 50 );
																	}			
			break;
			case 1:
				self.alpha = 0;
				var _animateFunction =	function()
																	{
																		if( self.alpha < 1 )
																		{
																			self.alpha += 0.2;
																		}
																		
																		self.rotation += Math.PI / 32;

																		_animateFunctionPointer = setTimeout( _animateFunction, 50 );
																	}						
			break;
			case 2:
				self.alpha = 0;
				var _animateFunction =	function()
																	{
																		if( self.alpha < 1 )
																		{
																			self.alpha += 0.2;
																		}

																		self.rotation -= Math.PI / 32;

																		_animateFunctionPointer = setTimeout( _animateFunction, 50 );
																	}						
			break;
			case 3:
				self.alpha = 0;
				var _animateFunction =	function()
																	{
																		if( self.alpha < 1 )
																		{
																			self.alpha += 0.2;
																		}

																		self.rotation += Math.PI / 32;

																		_animateFunctionPointer = setTimeout( _animateFunction, 50 );
																	}						
			break;
		}
		
		var _animateFunctionPointer = setTimeout( _animateFunction, 50 );
		
		setTimeout( function() 
								{ 
									clearTimeout( _animateFunctionPointer );
									
									var _t = setInterval( function()
																		{
																			self.alpha -= 0.1;
																			
																			if( self.alpha > 0 )
																			{
																				return;
																			}
																			
																			self.remove();
																			
																			clearInterval( _t );
																			
																		}, 40 );
								}, self.duration );
	} //end spinning aura

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.auraGoldenComplete.js
*/


	spellEffects.auraGoldenComplete = function( args )
	{
		this.ID = spellEffects.layer[1].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		
		this.draw = function()
		{
			
		}
		
		var effect0 = new spellEffects.auraGolden({ 			
				sourceCharacter: args.sourceCharacter,														
				targetCharacter: args.targetCharacter,
				component: 0
		});
		
		var effect1 = new spellEffects.auraGolden({ 																						
				sourceCharacter: args.sourceCharacter,
				targetCharacter: args.targetCharacter,
				component: 1
		});
		
		var effect2 = new spellEffects.auraGolden({ 			
				sourceCharacter: args.sourceCharacter,														
				targetCharacter: args.targetCharacter,
				component: 2
		});
		
		var effect3 = new spellEffects.auraGolden({ 																						
				sourceCharacter: args.sourceCharacter,
				targetCharacter: args.targetCharacter,
				component: 3
		});

		this.remove = function()
		{
			effect0.remove();
			effect1.remove();
			effect2.remove();
			effect3.remove();
			
			spellEffects.layer[1][ self.ID ] = null;
				
			delete args.targetCharacter._internal.spellEffects[ self.characterSpellEffectID ];
		}
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.auraMagic.js
*/


	spellEffects.auraMagic = function( args )
	{
		this.ID = spellEffects.layer[0].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		this.alpha = 1;
		this.offsetX = 60;
		this.offsetY = 60;
		this.rotation = Math.random() * (Math.PI * 2);
		this.deleteRange = 130;
		this.previousX = args.targetCharacter.characterData.character_zone_x - this.offsetX - 5;
		this.previousY = args.targetCharacter.characterData.character_zone_y - this.offsetY - 5;
		this.duration = 5000 - Component.bugcraft.latency;
		
		var self = this;
		
		var auraMagicImageObject = new Image();
		auraMagicImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/aura/magic/auraMagic' + args.component + '.png';
		
		//draw the auraMagic
		this.draw = function()
		{
			Map.ctx.globalAlpha = self.alpha;
			
			Map.ctx.save();
			
			Map.ctx.translate( args.targetCharacter.characterData.character_zone_x + Map.viewPortX, args.targetCharacter.characterData.character_zone_y + Map.viewPortY );
			
			Map.ctx.rotate( self.rotation );
			
			Map.ctx.drawImage(
											auraMagicImageObject,
											- self.offsetX,
											- self.offsetY
										);
										
			self.previousX = args.targetCharacter.characterData.character_zone_x - self.offsetX - 5;
			self.previousY = args.targetCharacter.characterData.character_zone_y - self.offsetY - 5;
	
			Map.ctx.restore();
			
			Map.ctx.globalAlpha = 1;
			
			
		}
		
		//remove the auraMagic
		
		
		this.remove = function()
		{
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[0][ this.ID ] = null;
			delete args.targetCharacter._internal.spellEffects[ this.characterSpellEffectID ];
		}
		
		
		
		switch( args.component )
		{
			case 0:	
				self.alpha = 0;
				
				var auraMagicSound = soundManager.createSound({
						id: 'auraMagic' + ( ++spellEffects.soundIncrementor ),
						url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/magic/magic_impact.mp3',
						volume: spellEffects.volumeByRange ( Component.bugcraft.currentCharacterObject.characterData.character_zone_x, Component.bugcraft.currentCharacterObject.characterData.character_zone_y, args.targetCharacter.characterData.character_zone_x, args.targetCharacter.characterData.character_zone_y, spellEffects.volumeRangeLong )
				});
				
				this.spellEffectSoundID = args.targetCharacter._internal.soundEffects.push( auraMagicSound ) - 1;
				
				soundManager.play( 'auraMagic' + spellEffects.soundIncrementor, 
												{
													onfinish: function () 
													{
														delete args.targetCharacter._internal.soundEffects[ self.spellEffectSoundID ];	
													}
												});
				
				var _animateFunction =	function()
																	{
																		if( self.alpha < 1 )
																		{
																			self.alpha += 0.2;
																		}
																		
																		self.rotation -= Math.PI / 32;

																		_animateFunctionPointer = setTimeout( _animateFunction, 50 );
																	}			
			break;
			case 1:
				self.alpha = 0;
				var _animateFunction =	function()
																	{
																		if( self.alpha < 1 )
																		{
																			self.alpha += 0.2;
																		}
																		
																		self.rotation += Math.PI / 32;

																		_animateFunctionPointer = setTimeout( _animateFunction, 50 );
																	}						
			break;
			case 2:
				self.alpha = 0;
				var _animateFunction =	function()
																	{
																		if( self.alpha < 1 )
																		{
																			self.alpha += 0.2;
																		}

																		self.rotation += Math.PI / 32;

																		_animateFunctionPointer = setTimeout( _animateFunction, 50 );
																	}						
			break;
		}
		
		var _animateFunctionPointer = setTimeout( _animateFunction, 50 );
		
		setTimeout( function() 
								{ 
									clearTimeout( _animateFunctionPointer );
									
									var _t = setInterval( function()
																		{
																			self.alpha -= 0.1;
																			
																			if( self.alpha > 0 )
																			{
																				return;
																			}
																			
																			self.remove();
																			
																			clearInterval( _t );
																			
																		}, 40 );
								}, self.duration );
	} //end spinning aura

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.auraMagicComplete.js
*/


	spellEffects.auraMagicComplete = function( args )
	{
		this.ID = spellEffects.layer[1].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		
		this.draw = function()
		{
			
		}
		
		var effect0 = new spellEffects.auraMagic({ 			
				sourceCharacter: args.sourceCharacter,														
				targetCharacter: args.targetCharacter,
				component: 0
		});
		
		var effect1 = new spellEffects.auraMagic({ 																						
				sourceCharacter: args.sourceCharacter,
				targetCharacter: args.targetCharacter,
				component: 1
		});
		
		var effect2 = new spellEffects.auraMagic({ 			
				sourceCharacter: args.sourceCharacter,														
				targetCharacter: args.targetCharacter,
				component: 2
		});
		
		this.remove = function()
		{
			effect0.remove();
			effect1.remove();
			effect2.remove();
			
			spellEffects.layer[1][ self.ID ] = null;
				
			delete args.targetCharacter._internal.spellEffects[ self.characterSpellEffectID ];
		}
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.auraMagicGreen.js
*/


	spellEffects.auraMagicGreen = function( args )
	{
		this.ID = spellEffects.layer[0].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		this.alpha = 1;
		this.offsetX = 50;
		this.offsetY = 50;
		this.rotation = Math.random() * (Math.PI * 2);
		this.deleteRange = 100;
		this.previousX = args.targetCharacter.characterData.character_zone_x - this.offsetX;
		this.previousY = args.targetCharacter.characterData.character_zone_y - this.offsetY;
		this.duration = 5000 - Component.bugcraft.latency;
		
		var self = this;
		
		var auraMagicGreenImageObject = new Image();
		auraMagicGreenImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/aura/magic/aura_magic_green' + args.component + '.png';
		
		//draw the auraMagicGreen
		this.draw = function()
		{
			Map.ctx.globalAlpha = self.alpha;
			
			Map.ctx.save();
			
			Map.ctx.translate( args.targetCharacter.characterData.character_zone_x + Map.viewPortX, args.targetCharacter.characterData.character_zone_y + Map.viewPortY );
			
			Map.ctx.rotate( self.rotation );
			
			Map.ctx.drawImage(
								auraMagicGreenImageObject,
								- self.offsetX,
								- self.offsetY
							);
			
			self.previousX = args.targetCharacter.characterData.character_zone_x - self.offsetX;
			self.previousY = args.targetCharacter.characterData.character_zone_y - self.offsetY;
	
			Map.ctx.restore();
			
			Map.ctx.globalAlpha = 1;
			
			
		}
		
		//remove the auraMagicGreen
		this.remove = function()
		{
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[0][ this.ID ] = null;
			delete args.targetCharacter._internal.spellEffects[ this.characterSpellEffectID ];
		}
		
		
		
		switch( args.component )
		{
			case 0:	
				self.alpha = 0;
				
				var auraMagicGreenSound = soundManager.createSound({
						id: 'auraMagicGreen' + ( ++spellEffects.soundIncrementor ),
						url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/magic/magical_shimmer.mp3',
						volume: spellEffects.volumeByRange ( Component.bugcraft.currentCharacterObject.characterData.character_zone_x, Component.bugcraft.currentCharacterObject.characterData.character_zone_y, args.targetCharacter.characterData.character_zone_x, args.targetCharacter.characterData.character_zone_y, spellEffects.volumeRangeLong )
				});
				
				this.spellEffectSoundID = args.targetCharacter._internal.soundEffects.push( auraMagicGreenSound ) - 1;
				
				soundManager.play( 'auraMagicGreen' + spellEffects.soundIncrementor, 
												{
													onfinish: function () 
													{
														delete args.targetCharacter._internal.soundEffects[ self.spellEffectSoundID ];	
													}
												});
				
				var _animateFunction =	function()
																	{
																		if( self.alpha < 1 )
																		{
																			self.alpha += 0.2;
																		}
																	
																		self.rotation -= Math.PI / 64;

																		_animateFunctionPointer = setTimeout( _animateFunction, 50 );
																	}			
			break;
			case 1:
				self.alpha = 0;
				var _animateFunction =	function()
																	{
																		if( self.alpha < 1 )
																		{
																			self.alpha += 0.2;
																		}
																		
																		self.rotation -= Math.PI / 32;

																		_animateFunctionPointer = setTimeout( _animateFunction, 50 );
																	}						
			break;
			case 2:
				self.alpha = 0;
				var _animateFunction =	function()
																	{
																		if( self.alpha < 1 )
																		{
																			self.alpha += 0.2;
																		}

																		self.rotation += Math.PI / 32;

																		_animateFunctionPointer = setTimeout( _animateFunction, 50 );
																	}						
			break;
		}
		
		var _animateFunctionPointer = setTimeout( _animateFunction, 50 );
		
		setTimeout( function() 
								{ 
									clearTimeout( _animateFunctionPointer );
								
									var _t = setInterval( function()
																		{
																			self.alpha -= 0.1;
																			
																			if( self.alpha > 0 )
																			{
																				return;
																			}
																			
																			self.remove();
																			
																			clearInterval( _t );
																			
																		}, 40 );
								}, self.duration );
	} //end spinning aura

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.auraMagicGreenComplete.js
*/


	spellEffects.auraMagicGreenComplete = function( args )
	{
		this.ID = spellEffects.layer[1].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		
		this.draw = function()
		{
			
		}
		
		var effect0 = new spellEffects.auraMagicGreen({ 			
				sourceCharacter: args.sourceCharacter,														
				targetCharacter: args.targetCharacter,
				component: 0
		});
		
		var effect1 = new spellEffects.auraMagicGreen({ 																						
				sourceCharacter: args.sourceCharacter,
				targetCharacter: args.targetCharacter,
				component: 1
		});
		
		var effect2 = new spellEffects.auraMagicGreen({ 			
				sourceCharacter: args.sourceCharacter,														
				targetCharacter: args.targetCharacter,
				component: 2
		});
		
		this.remove = function()
		{
			effect0.remove();
			effect1.remove();
			effect2.remove();
			
			spellEffects.layer[1][ self.ID ] = null;
				
			delete args.targetCharacter._internal.spellEffects[ self.characterSpellEffectID ];
		}
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.auraMagicPurple.js
*/


	spellEffects.auraMagicPurple = function( args )
	{
		this.ID = spellEffects.layer[0].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		this.alpha = 1;
		this.offsetX = 50;
		this.offsetY = 50;
		this.rotation = Math.random() * (Math.PI * 2);
		this.deleteRange = 100;
		this.previousX = args.targetCharacter.characterData.character_zone_x - this.offsetX;
		this.previousY = args.targetCharacter.characterData.character_zone_y - this.offsetY;
		this.duration = 240000 - Component.bugcraft.latency;
		
		var self = this;
		
		var auraMagicPurpleImageObject = new Image();
		auraMagicPurpleImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/aura/magic/auraMagicPurple' + args.component + '.png';
		
		//draw the auraMagicPurple
		this.draw = function()
		{
			Map.ctx.globalAlpha = self.alpha;
			
			Map.ctx.save();
			
			Map.ctx.translate( args.targetCharacter.characterData.character_zone_x + Map.viewPortX, args.targetCharacter.characterData.character_zone_y + Map.viewPortY );
			
			Map.ctx.rotate( self.rotation );
			
			Map.ctx.drawImage(
											auraMagicPurpleImageObject,
											- self.offsetX,
											- self.offsetY
										);
										
			self.previousX = args.targetCharacter.characterData.character_zone_x - self.offsetX;
			self.previousY = args.targetCharacter.characterData.character_zone_y - self.offsetY;
	
			Map.ctx.restore();
			
			Map.ctx.globalAlpha = 1;
			
			
		}
		
		//remove the auraMagicPurple
		this.remove = function()
		{
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[0][ this.ID ] = null;
			delete args.targetCharacter._internal.spellEffects[ this.characterSpellEffectID ];
		}
		
		
		
		switch( args.component )
		{
			case 0:	
				var auraMagicPurpleSound = soundManager.createSound({
						id: 'auraMagicPurple' + ( ++spellEffects.soundIncrementor ),
						url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/magic/whoosh_bright.mp3',
						volume: spellEffects.volumeByRange ( Component.bugcraft.currentCharacterObject.characterData.character_zone_x, Component.bugcraft.currentCharacterObject.characterData.character_zone_y, args.targetCharacter.characterData.character_zone_x, args.targetCharacter.characterData.character_zone_y, spellEffects.volumeRangeLong )
				});
				
				this.spellEffectSoundID = args.targetCharacter._internal.soundEffects.push( auraMagicPurpleSound ) - 1;
				
				soundManager.play( 'auraMagicPurple' + spellEffects.soundIncrementor, 
												{
													onfinish: function () 
													{
														delete args.targetCharacter._internal.soundEffects[ self.spellEffectSoundID ];	
													}
												});
				self.alpha = 0;
				var _animateFunction =	function()
																	{
																		if( self.alpha < 1 )
																		{
																			self.alpha += 0.2;
																		}
																		
																		self.rotation -= Math.PI / 32;

																		_animateFunctionPointer = setTimeout( _animateFunction, 50 );
																	}			
			break;
			case 1:
				self.alpha = 0;
				var _animateFunction =	function()
																	{
																		if( self.alpha < 1 )
																		{
																			self.alpha += 0.2;
																		}
																		
																		self.rotation += Math.PI / 32;

																		_animateFunctionPointer = setTimeout( _animateFunction, 50 );
																	}						
			break;
		}
		
		var _animateFunctionPointer = setTimeout( _animateFunction, 50 );
		
		setTimeout( function() 
								{ 
									clearTimeout( _animateFunctionPointer );
								
									var _t = setInterval( function()
																		{
																			self.alpha -= 0.1;
																			
																			if( self.alpha > 0 )
																			{
																				return;
																			}
																			
																			self.remove();
																			
																			clearInterval( _t );
																			
																		}, 40 );
								}, self.duration );
	} //end spinning aura

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.auraMagicPurpleComplete.js
*/


	spellEffects.auraMagicPurpleComplete = function( args )
	{
		this.ID = spellEffects.layer[1].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		
		this.draw = function()
		{
			
		}
		
		var effect0 = new spellEffects.auraMagicPurple({ 			
				sourceCharacter: args.sourceCharacter,														
				targetCharacter: args.targetCharacter,
				component: 0
		});
		
		var effect1 = new spellEffects.auraMagicPurple({ 																						
				sourceCharacter: args.sourceCharacter,
				targetCharacter: args.targetCharacter,
				component: 1
		});
		
		this.remove = function()
		{
			effect0.remove();
			effect1.remove();
			
			spellEffects.layer[1][ self.ID ] = null;
				
			delete args.targetCharacter._internal.spellEffects[ self.characterSpellEffectID ];
		}
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.auraRevive.js
*/

	
	spellEffects.auraRevive = function( args )
	{
		var _c = args.targetCharacter, _cd = _c.characterData;
		
		this.ID = spellEffects.layer[0].push( this ) - 1;
		this.characterSpellEffectID = _c._internal.spellEffects.push( this ) - 1;
		this.alpha = 1;
		this.offsetX = 100; //half the width of the image 
		this.offsetY = 100; //half the height of the image
		this.deleteRange = 300; // greatest of the height or widht of the image
		this.previousX = _cd.character_zone_x - this.offsetX - 100; // both previousX/Y used to erase the image from the canvas
		this.previousY = _cd.character_zone_y - this.offsetY - 100;
		
		var self = this, _images = [], _rotationSpeed = [], _timeoutPointers = [], _rotation = [], _framesAmount = 5;
		
		var _startRotation = function( index )
		{
			var _rotationFunction = function()
			{
				_rotation[ index ] += 0.01 * index;
				
				_timeoutPointers[ index ] = setTimeout( _rotationFunction, _rotationSpeed[ index ] );
			}
			
			_rotationFunction();
		}
		
		for(var i=0;i<_framesAmount;i++)
		{
			_images[ i ] = new Image();
			_images[ i ].src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/auraRevive/aura_revive_twirl' + i + '.png';
			
			_rotation[ i ] = Math.random() * Math.PI * 2;
			_rotationSpeed[ i ] = 40 + Math.random() * 200;
			
			_startRotation( i );
		}
		
		//draw the anteriumFlag
		this.draw = function()
		{
			Map.ctx.globalAlpha = self.alpha;
			
			Map.ctx.save();
			
			Map.ctx.translate( _cd.character_zone_x + Map.viewPortX, _cd.character_zone_y + Map.viewPortY );
			
			for(var i=0;i<5;i++)
			{
				Map.ctx.rotate( _rotation[ i ] );
				
				Map.ctx.drawImage(
										_images[ i ],
										- self.offsetX,
										- self.offsetY
									);
			}
			
			self.previousX = _cd.character_zone_x - self.offsetX - 50;
			self.previousY = _cd.character_zone_y - self.offsetY - 50;
			
			Map.ctx.restore();
			
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the anteriumFlag
		this.remove = function()
		{
			for(var i=0;i<_framesAmount;i++)
			{
				clearTimeout( _timeoutPointers[ i ] );
			}
			
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[0][ this.ID ] = null;
			delete _c._internal.spellEffects[ this.characterSpellEffectID ];
		}
		
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.auraSpin.js
*/


	spellEffects.auraSpin = function( args )
	{
		this.ID = spellEffects.layer[0].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		this.alpha = 1;
		this.offsetX = 50;
		this.offsetY = 50;
		this.rotation = Math.random() * (Math.PI * 2);
		this.deleteRange = 100;
		this.previousX = args.targetCharacter.characterData.character_zone_x - this.offsetX;
		this.previousY = args.targetCharacter.characterData.character_zone_y - this.offsetY;
		this.duration = 5000 - Component.bugcraft.latency;
		
		var self = this;
		
		var auraSpinImageObject = new Image();
		auraSpinImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/aura/white_spinning_galaxy2cross.png';
		
		var auraSpinSound = soundManager.createSound({
				id: 'auraSpin' + ( ++spellEffects.soundIncrementor ),
				url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/aura/fortify.mp3', 
				volume: spellEffects.volumeByRange ( Component.bugcraft.currentCharacterObject.characterData.character_zone_x, Component.bugcraft.currentCharacterObject.characterData.character_zone_y, args.targetCharacter.characterData.character_zone_x, args.targetCharacter.characterData.character_zone_y, spellEffects.volumeRangeLong )
		});
		
		this.spellEffectSoundID = args.targetCharacter._internal.soundEffects.push( auraSpinSound ) - 1;
		
		soundManager.play( 'auraSpin' + spellEffects.soundIncrementor, 
										{
											onfinish: function () 
											{
												delete args.targetCharacter._internal.soundEffects[ self.spellEffectSoundID ];	
											}
										});

		//draw the auraSpin
		this.draw = function()
		{
			Map.ctx.globalAlpha = self.alpha;
			
			Map.ctx.save();
			
			Map.ctx.translate( args.targetCharacter.characterData.character_zone_x + Map.viewPortX, args.targetCharacter.characterData.character_zone_y + Map.viewPortY );
			
			Map.ctx.rotate( self.rotation );
			
			Map.ctx.drawImage(
											auraSpinImageObject,
											- self.offsetX,
											- self.offsetY
										);
										
			self.previousX = args.targetCharacter.characterData.character_zone_x - self.offsetX;
			self.previousY = args.targetCharacter.characterData.character_zone_y - self.offsetY;
										
			Map.ctx.restore();
			
			Map.ctx.globalAlpha = 1;
			
		}
		
		//remove the auraSpin
		this.remove = function()
		{
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[0][ this.ID ] = null;
			clearTimeout( _animateFunctionPointer );
			delete args.targetCharacter._internal.spellEffects[ this.characterSpellEffectID ];
		}

		var _animateFunction =	function()
															{
																self.rotation -= Math.PI / 16;

																_animateFunctionPointer = setTimeout( _animateFunction, 50 );
															}			
															
		var _animateFunctionPointer = setTimeout( _animateFunction, 50 );
		
		setTimeout( function() 
								{ 
									var _t = setInterval( function()
																		{
																			self.alpha -= 0.1;
																			
																			if( self.alpha > 0 )
																			{
																				return;
																			}
																			
																			self.remove();
																			
																			clearInterval( _t );
																			
																		}, 200 );
								}, self.duration );
	} //end spinning aura

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.auraSpin102.js
*/


	spellEffects.auraSpin102 = function( args )
	{
		this.ID = spellEffects.layer[0].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		this.alpha = 1;
		this.offsetX = 50;
		this.offsetY = 50;
		this.rotation = Math.random() * (Math.PI * 2);
		this.deleteRange = 100;
		this.previousX = args.targetCharacter.characterData.character_zone_x - this.offsetX;
		this.previousY = args.targetCharacter.characterData.character_zone_y - this.offsetY;
		this.duration = 5000 - Component.bugcraft.latency;
		
		var self = this;
		
		var auraSpinImageObject = new Image();
		auraSpinImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/aura/white_spinning_galaxy2cross.png';
		
		var auraSpinSound = soundManager.createSound({
				id: 'auraSpin' + ( ++spellEffects.soundIncrementor ),
				url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/buffs/woosh short.mp3',
				volume: spellEffects.volumeByRange ( Component.bugcraft.currentCharacterObject.characterData.character_zone_x, Component.bugcraft.currentCharacterObject.characterData.character_zone_y, args.targetCharacter.characterData.character_zone_x, args.targetCharacter.characterData.character_zone_y, spellEffects.volumeRangeLong )
		});
		
		this.spellEffectSoundID = args.targetCharacter._internal.soundEffects.push( auraSpinSound ) - 1;
		
		soundManager.play( 'auraSpin' + spellEffects.soundIncrementor, 
										{
											onfinish: function () 
											{
												delete args.targetCharacter._internal.soundEffects[ self.spellEffectSoundID ];	
											}
										});

		//draw the auraSpin
		this.draw = function()
		{
			Map.ctx.globalAlpha = self.alpha;
			
			Map.ctx.save();
			
			Map.ctx.translate( args.targetCharacter.characterData.character_zone_x + Map.viewPortX, args.targetCharacter.characterData.character_zone_y + Map.viewPortY );
			
			Map.ctx.rotate( self.rotation );
			
			Map.ctx.drawImage(
											auraSpinImageObject,
											- self.offsetX,
											- self.offsetY
										);
										
			self.previousX = args.targetCharacter.characterData.character_zone_x - self.offsetX;
			self.previousY = args.targetCharacter.characterData.character_zone_y - self.offsetY;
										
			Map.ctx.restore();
			
			Map.ctx.globalAlpha = 1;
			
		}
		
		//remove the auraSpin
		this.remove = function()
		{
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[0][ this.ID ] = null;
			clearTimeout( _animateFunctionPointer );
			delete args.targetCharacter._internal.spellEffects[ this.characterSpellEffectID ];
		}

		var _animateFunction =	function()
															{
																self.rotation -= Math.PI / 16;

																_animateFunctionPointer = setTimeout( _animateFunction, 50 );
															}			
															
		var _animateFunctionPointer = setTimeout( _animateFunction, 50 );
		
		setTimeout( function() 
								{ 
									var _t = setInterval( function()
																		{
																			self.alpha -= 0.1;
																			
																			if( self.alpha > 0 )
																			{
																				return;
																			}
																			
																			self.remove();
																			
																			clearInterval( _t );
																			
																		}, 200 );
								}, self.duration );
	} //end spinning aura

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.auraSpin3.js
*/


	spellEffects.auraSpin3 = function( args )
	{
		this.ID = spellEffects.layer[0].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		this.alpha = 1;
		this.offsetX = 50;
		this.offsetY = 50;
		this.rotation = Math.random() * (Math.PI * 2);
		this.deleteRange = 100;
		this.previousX = args.targetCharacter.characterData.character_zone_x - this.offsetX;
		this.previousY = args.targetCharacter.characterData.character_zone_y - this.offsetY;
		this.duration = 240000 - Component.bugcraft.latency;
		
		var self = this;
		
		var auraSpinImageObject = new Image();
		auraSpinImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/aura/white_spinning_galaxy2cross.png';
		
		var auraSpinSound = soundManager.createSound({
				id: 'auraSpin' + ( ++spellEffects.soundIncrementor ),
				url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/buffs/orchestral-scary-impact.mp3',
				volume: spellEffects.volumeByRange ( Component.bugcraft.currentCharacterObject.characterData.character_zone_x, Component.bugcraft.currentCharacterObject.characterData.character_zone_y, args.targetCharacter.characterData.character_zone_x, args.targetCharacter.characterData.character_zone_y, spellEffects.volumeRangeLong )
		});
		
		this.spellEffectSoundID = args.targetCharacter._internal.soundEffects.push( auraSpinSound ) - 1;
		
		soundManager.play( 'auraSpin' + spellEffects.soundIncrementor, 
										{
											onfinish: function () 
											{
												delete args.targetCharacter._internal.soundEffects[ self.spellEffectSoundID ];	
											}
										});

		//draw the auraSpin
		this.draw = function()
		{
			Map.ctx.globalAlpha = self.alpha;
			
			Map.ctx.save();
			
			Map.ctx.translate( args.targetCharacter.characterData.character_zone_x + Map.viewPortX, args.targetCharacter.characterData.character_zone_y + Map.viewPortY );
			
			Map.ctx.rotate( self.rotation );
			
			Map.ctx.drawImage(
											auraSpinImageObject,
											- self.offsetX,
											- self.offsetY
										);
										
			self.previousX = args.targetCharacter.characterData.character_zone_x - self.offsetX;
			self.previousY = args.targetCharacter.characterData.character_zone_y - self.offsetY;
										
			Map.ctx.restore();
			
			Map.ctx.globalAlpha = 1;
			
		}
		
		//remove the auraSpin
		this.remove = function()
		{
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[0][ this.ID ] = null;
			clearTimeout( _animateFunctionPointer );
			delete args.targetCharacter._internal.spellEffects[ this.characterSpellEffectID ];
		}

		var _animateFunction =	function()
															{
																self.rotation -= Math.PI / 16;

																_animateFunctionPointer = setTimeout( _animateFunction, 50 );
															}			
															
		var _animateFunctionPointer = setTimeout( _animateFunction, 50 );
		
		setTimeout( function() 
								{ 
									var _t = setInterval( function()
																		{
																			self.alpha -= 0.1;
																			
																			if( self.alpha > 0 )
																			{
																				return;
																			}
																			
																			self.remove();
																			
																			clearInterval( _t );
																			
																		}, 200 );
								}, self.duration );
	} //end spinning aura

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.auraSpinGreen.js
*/


	spellEffects.auraSpinGreen = function( args )
	{
		this.ID = spellEffects.layer[0].push( this ) - 1;
		this.alpha = 1;
		this.offsetX = 30;
		this.offsetY = 30;
		this.rotation = Math.random() * (Math.PI * 2);
		this.deleteRange = 60;
		this.previousX = args.targetCharacter.characterData.character_zone_x - this.offsetX;
		this.previousY = args.targetCharacter.characterData.character_zone_y - this.offsetY;
		this.duration = 5000 - Component.bugcraft.latency;
		
		var self = this;
		
		var auraSpinGreenImageObject = new Image();
		auraSpinGreenImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/aura/spinning_aura2.png';
		
		var auraSpinGreenSound = soundManager.createSound({
				id: 'auraSpinGreen' + ( ++spellEffects.soundIncrementor ),
				url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/aura/rising_zush.mp3',
				volume: spellEffects.volumeByRange ( Component.bugcraft.currentCharacterObject.characterData.character_zone_x, Component.bugcraft.currentCharacterObject.characterData.character_zone_y, args.targetCharacter.characterData.character_zone_x, args.targetCharacter.characterData.character_zone_y, spellEffects.volumeRangeLong )
		});
		
		this.spellEffectSoundID = args.targetCharacter._internal.soundEffects.push( auraSpinGreenSound ) - 1;
		
		soundManager.play( 'auraSpinGreen' + spellEffects.soundIncrementor, 
										{
											onfinish: function () 
											{
												delete args.targetCharacter._internal.soundEffects[ self.spellEffectSoundID ];	
											}
										});

		//draw the auraSpinGreen
		this.draw = function()
		{
			Map.ctx.globalAlpha = self.alpha;
			
			Map.ctx.save();
			
			Map.ctx.translate( args.targetCharacter.characterData.character_zone_x + Map.viewPortX, args.targetCharacter.characterData.character_zone_y + Map.viewPortY );
			
			Map.ctx.rotate( self.rotation );
			
			Map.ctx.drawImage(
											auraSpinGreenImageObject,
											- self.offsetX,
											- self.offsetY
										);
										
			self.previousX = args.targetCharacter.characterData.character_zone_x - self.offsetX;
			self.previousY = args.targetCharacter.characterData.character_zone_y - self.offsetY;
										
			Map.ctx.restore();
			
			Map.ctx.globalAlpha = 1;
			
			
		}
		
		//remove the auraSpinGreen
		this.remove = function()
		{
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[0][ this.ID ] = null;
		}

		var _animateFunction =	function()
															{
																self.rotation -= Math.PI / 8;

																setTimeout( _animateFunction, 30 );
															}			
		_animateFunction();
		
		setTimeout( function() 
								{ 
									var _t = setInterval( function()
																		{
																			self.alpha -= 0.1;
																			
																			if( self.alpha > 0 )
																			{
																				return;
																			}
																			
																			self.remove();
																			
																			clearInterval( _t );
																			
																		}, 200 );
								}, self.duration );
	} //end spinning aura

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.auraStar.js
*/


	spellEffects.auraStar = function( args )
	{
		this.ID = spellEffects.layer[0].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		this.alpha = 1;
		this.offsetX = 50;
		this.offsetY = 50;
		this.rotation = Math.random() * (Math.PI * 2);
		this.deleteRange = 100;
		this.previousX = args.targetCharacter.characterData.character_zone_x - this.offsetX;
		this.previousY = args.targetCharacter.characterData.character_zone_y - this.offsetY;
		this.duration = 5000 - Component.bugcraft.latency;
		
		var self = this;
		
		var auraStarImageObject = new Image();
		auraStarImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/aura/star/star_spinning' + args.component + '.png';
		
		//draw the auraStar
		this.draw = function()
		{
			Map.ctx.globalAlpha = self.alpha;
			
			Map.ctx.save();
			
			Map.ctx.translate( args.targetCharacter.characterData.character_zone_x + Map.viewPortX, args.targetCharacter.characterData.character_zone_y + Map.viewPortY );
			
			Map.ctx.rotate( self.rotation );
			
			Map.ctx.drawImage(
											auraStarImageObject,
											- self.offsetX,
											- self.offsetY
										);
									
			self.previousX = args.targetCharacter.characterData.character_zone_x - self.offsetX;
			self.previousY = args.targetCharacter.characterData.character_zone_y - self.offsetY;
										
			Map.ctx.restore();
			
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the auraStar
		this.remove = function()
		{
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[0][ this.ID ] = null;
			clearTimeout( _animateFunctionPointer );
			delete args.targetCharacter._internal.spellEffects[ this.characterSpellEffectID ];
		}

		switch( args.component )
		{
			case 0:		
				var _animateFunction =	function()
																	{
																		var auraStarSound = soundManager.createSound({
																				id: 'auraStar' + ( ++spellEffects.soundIncrementor ),
																				url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/aura/star_aura' + Math.floor( Math.random() * 2 ) + '.mp3',
																				volume: spellEffects.volumeByRange ( Component.bugcraft.currentCharacterObject.characterData.character_zone_x, Component.bugcraft.currentCharacterObject.characterData.character_zone_y, args.targetCharacter.characterData.character_zone_x, args.targetCharacter.characterData.character_zone_y, spellEffects.volumeRangeLong )
																		});

																		this.spellEffectSoundID = args.targetCharacter._internal.soundEffects.push( auraStarSound ) - 1;
																	
																		soundManager.play( 'auraStar' + spellEffects.soundIncrementor, 
																										{
																											onfinish: function () 
																											{
																												delete args.targetCharacter._internal.soundEffects[ self.spellEffectSoundID ];	
																											}
																										});

																	}			
			break;
			case 1:
				var _animateFunction =	function()
																	{
																		self.rotation -= Math.PI / 32;

																		_animateFunctionPointer = setTimeout( _animateFunction, 50 );
																	}						
			break;
			case 2:
				var _animateFunction =	function()
																	{
																		self.rotation += Math.PI / 32;

																		_animateFunctionPointer = setTimeout( _animateFunction, 50 );
																	}			
																	
			break;
		}
		
		var _animateFunctionPointer = setTimeout( _animateFunction, 10 );
		
		setTimeout( function() 
								{ 
									var _t = setInterval( function()
																		{
																			self.alpha -= 0.1;
																			
																			if( self.alpha > 0 )
																			{
																				return;
																			}
																			
																			self.remove();
																			
																			clearInterval( _t );
																			
																		}, 200 );
								}, self.duration );
	} //end spinning aura

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.auraStar9.js
*/


	spellEffects.auraStar9 = function( args )
	{
		this.ID = spellEffects.layer[0].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		this.alpha = 1;
		this.offsetX = 50;
		this.offsetY = 50;
		this.rotation = Math.random() * (Math.PI * 2);
		this.deleteRange = 100;
		this.previousX = args.targetCharacter.characterData.character_zone_x - this.offsetX;
		this.previousY = args.targetCharacter.characterData.character_zone_y - this.offsetY;
		this.duration = 3000 - Component.bugcraft.latency;
		
		var self = this;
		
		var auraStarImageObject = new Image();
		auraStarImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/aura/star/star_spinning' + args.component + '.png';
		
		//draw the auraStar
		this.draw = function()
		{
			Map.ctx.globalAlpha = self.alpha;
			
			Map.ctx.save();
			
			Map.ctx.translate( args.targetCharacter.characterData.character_zone_x + Map.viewPortX, args.targetCharacter.characterData.character_zone_y + Map.viewPortY );
			
			Map.ctx.rotate( self.rotation );
			
			Map.ctx.drawImage(
											auraStarImageObject,
											- self.offsetX,
											- self.offsetY
										);
									
			self.previousX = args.targetCharacter.characterData.character_zone_x - self.offsetX;
			self.previousY = args.targetCharacter.characterData.character_zone_y - self.offsetY;
										
			Map.ctx.restore();
			
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the auraStar
		this.remove = function()
		{
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[0][ this.ID ] = null;
			clearTimeout( _animateFunctionPointer );
			delete args.targetCharacter._internal.spellEffects[ this.characterSpellEffectID ];
		}

		switch( args.component )
		{
			case 0:		
				var _animateFunction =	function()
																	{
																		var auraStarSound = soundManager.createSound({
																				id: 'auraStar' + ( ++spellEffects.soundIncrementor ),
																				url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/buffs/woosh short.mp3',
																				volume: spellEffects.volumeByRange ( Component.bugcraft.currentCharacterObject.characterData.character_zone_x, Component.bugcraft.currentCharacterObject.characterData.character_zone_y, args.targetCharacter.characterData.character_zone_x, args.targetCharacter.characterData.character_zone_y, spellEffects.volumeRangeLong )
																		});

																		this.spellEffectSoundID = args.targetCharacter._internal.soundEffects.push( auraStarSound ) - 1;
																	
																		soundManager.play( 'auraStar' + spellEffects.soundIncrementor, 
																										{
																											onfinish: function () 
																											{
																												delete args.targetCharacter._internal.soundEffects[ self.spellEffectSoundID ];	
																											}
																										});

																	}			
			break;
			case 1:
				var _animateFunction =	function()
																	{
																		self.rotation -= Math.PI / 32;

																		_animateFunctionPointer = setTimeout( _animateFunction, 50 );
																	}						
			break;
			case 2:
				var _animateFunction =	function()
																	{
																		self.rotation += Math.PI / 32;

																		_animateFunctionPointer = setTimeout( _animateFunction, 50 );
																	}			
																	
			break;
		}
		
		var _animateFunctionPointer = setTimeout( _animateFunction, 10 );
		
		setTimeout( function() 
								{ 
									var _t = setInterval( function()
																		{
																			self.alpha -= 0.1;
																			
																			if( self.alpha > 0 )
																			{
																				return;
																			}
																			
																			self.remove();
																			
																			clearInterval( _t );
																			
																		}, 200 );
								}, self.duration );
	} //end spinning aura

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.auraStar9Complete.js
*/


	spellEffects.auraStar9Complete = function( args )
	{
		this.ID = spellEffects.layer[1].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		
		this.draw = function()
		{
			
		}
		
		var effect0 = new spellEffects.auraStar9({ 			
				sourceCharacter: args.sourceCharacter,														
				targetCharacter: args.targetCharacter,
				component: 0
		});
		
		var effect1 = new spellEffects.auraStar9({ 																						
				sourceCharacter: args.sourceCharacter,
				targetCharacter: args.targetCharacter,
				component: 1
		});
		
		var effect2 = new spellEffects.auraStar9({ 			
				sourceCharacter: args.sourceCharacter,														
				targetCharacter: args.targetCharacter,
				component: 2
		});
		
		this.remove = function()
		{
			effect0.remove();
			effect1.remove();
			effect2.remove();
			
			spellEffects.layer[1][ self.ID ] = null;
				
			delete args.targetCharacter._internal.spellEffects[ self.characterSpellEffectID ];
		}
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.auraStarComplete.js
*/


	spellEffects.auraStarComplete = function( args )
	{
		this.ID = spellEffects.layer[1].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		
		this.draw = function()
		{
			
		}
		
		var effect0 = new spellEffects.auraStar({ 			
				sourceCharacter: args.sourceCharacter,														
				targetCharacter: args.targetCharacter,
				component: 0
		});
		
		var effect1 = new spellEffects.auraStar({ 																						
				sourceCharacter: args.sourceCharacter,
				targetCharacter: args.targetCharacter,
				component: 1
		});
		
		var effect2 = new spellEffects.auraStar({ 			
				sourceCharacter: args.sourceCharacter,														
				targetCharacter: args.targetCharacter,
				component: 2
		});
		
		this.remove = function()
		{
			effect0.remove();
			effect1.remove();
			effect2.remove();
			
			spellEffects.layer[1][ self.ID ] = null;
				
			delete args.targetCharacter._internal.spellEffects[ self.characterSpellEffectID ];
		}
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.auraTime.js
*/


	spellEffects.auraTime = function( args )
	{
		this.ID = spellEffects.layer[0].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		this.alpha = 1;
		this.offsetX = 42;
		this.offsetY = 42;
		this.rotation = Math.random() * (Math.PI * 2);
		this.deleteRange = 84;
		this.previousX = args.targetCharacter.characterData.character_zone_x - this.offsetX;
		this.previousY = args.targetCharacter.characterData.character_zone_y - this.offsetY;
		this.duration = 5000 - Component.bugcraft.latency;
		
		var self = this;
		
		var auraTimeImageObject = new Image();
		auraTimeImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/aura/time/timeAura' + args.component + '.png';
		
		//draw the auraTime
		this.draw = function()
		{
			Map.ctx.globalAlpha = self.alpha;
			
			Map.ctx.save();
			
			Map.ctx.translate( args.targetCharacter.characterData.character_zone_x + Map.viewPortX, args.targetCharacter.characterData.character_zone_y + Map.viewPortY );
			
			Map.ctx.rotate( self.rotation );
			
			Map.ctx.drawImage(
											auraTimeImageObject,
											- self.offsetX,
											- self.offsetY
										);
	
			self.previousX = args.targetCharacter.characterData.character_zone_x - self.offsetX;
			self.previousY = args.targetCharacter.characterData.character_zone_y - self.offsetY;
	
			Map.ctx.restore();
			
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the auraTime
		this.remove = function()
		{
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[0][ this.ID ] = null;
			delete args.targetCharacter._internal.spellEffects[ this.characterSpellEffectID ];
		}
		
		
		
		switch( args.component )
		{
			case 0:	
				
				var auraTimeSound = soundManager.createSound({
						id: 'auraTime' + ( ++spellEffects.soundIncrementor ),
						url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/aura/slowing time - magic.mp3',
						volume: spellEffects.volumeByRange ( Component.bugcraft.currentCharacterObject.characterData.character_zone_x, Component.bugcraft.currentCharacterObject.characterData.character_zone_y, args.targetCharacter.characterData.character_zone_x, args.targetCharacter.characterData.character_zone_y, spellEffects.volumeRangeLong )
				});
				
				this.spellEffectSoundID = args.targetCharacter._internal.soundEffects.push( auraTimeSound ) - 1;
						
				soundManager.play( 'auraTime' + spellEffects.soundIncrementor, 
												{
													onfinish: function () 
													{
														delete args.targetCharacter._internal.soundEffects[ self.spellEffectSoundID ];	
													}
												});
				
				self.alpha = 0;
				var _animateFunction =	function()
																	{
																		if( self.alpha < 1 )
																		{
																			self.alpha += 0.2;
																		}
																	
																		self.rotation -= Math.PI / 64;

																		_animateFunctionPointer = setTimeout( _animateFunction, 50 );
																	}			
			break;
			case 1:
				self.alpha = 0;
				var _animateFunction =	function()
																	{
																		if( self.alpha < 1 )
																		{
																			self.alpha += 0.2;
																		}
																		
																		self.rotation += Math.PI / 32;

																		_animateFunctionPointer = setTimeout( _animateFunction, 50 );
																	}						
			break;
			case 2:
				self.alpha = 0;
				var _animateFunction =	function()
																	{
																		if( self.alpha < 1 )
																		{
																			self.alpha += 0.2;
																		}

																		self.rotation -= Math.PI / 32;

																		_animateFunctionPointer = setTimeout( _animateFunction, 50 );
																	}						
			break;
			case 3:
				self.alpha = 0;
				var _animateFunction =	function()
																	{
																		if( self.alpha < 1 )
																		{
																			self.alpha += 0.2;
																		}
																		
																		self.rotation += Math.PI / 16;

																		_animateFunctionPointer = setTimeout( _animateFunction, 50 );
																	}						
			break;
		}
		
		var _animateFunctionPointer = setTimeout( _animateFunction, 50 );
		
		setTimeout( function() 
								{ 
									clearTimeout( _animateFunctionPointer );
									
									var _t = setInterval( function()
																		{
																			self.alpha -= 0.1;
																			
																			if( self.alpha > 0 )
																			{
																				return;
																			}
																			
																			self.remove();
																			
																			clearInterval( _t );
																			
																		}, 40 );
								}, self.duration );
	} //end spinning aura

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.auraTime151.js
*/


	spellEffects.auraTime151 = function( args )
	{
		this.ID = spellEffects.layer[0].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		this.alpha = 1;
		this.offsetX = 42;
		this.offsetY = 42;
		this.rotation = Math.random() * (Math.PI * 2);
		this.deleteRange = 84;
		this.previousX = args.targetCharacter.characterData.character_zone_x - this.offsetX;
		this.previousY = args.targetCharacter.characterData.character_zone_y - this.offsetY;
		this.duration = 10000 - Component.bugcraft.latency;
		
		var self = this;
		
		var auraTimeImageObject = new Image();
		auraTimeImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/aura/time/timeAura' + args.component + '.png';
		
		//draw the auraTime
		this.draw = function()
		{
			Map.ctx.globalAlpha = self.alpha;
			
			Map.ctx.save();
			
			Map.ctx.translate( args.targetCharacter.characterData.character_zone_x + Map.viewPortX, args.targetCharacter.characterData.character_zone_y + Map.viewPortY );
			
			Map.ctx.rotate( self.rotation );
			
			Map.ctx.drawImage(
											auraTimeImageObject,
											- self.offsetX,
											- self.offsetY
										);
	
			self.previousX = args.targetCharacter.characterData.character_zone_x - self.offsetX;
			self.previousY = args.targetCharacter.characterData.character_zone_y - self.offsetY;
	
			Map.ctx.restore();
			
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the auraTime
		this.remove = function()
		{
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[0][ this.ID ] = null;
			delete args.targetCharacter._internal.spellEffects[ this.characterSpellEffectID ];
		}
		
		
		
		switch( args.component )
		{
			case 0:	
				
				var auraTimeSound = soundManager.createSound({
						id: 'auraTime' + ( ++spellEffects.soundIncrementor ),
						url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/buffs/woosh short.mp3',
						volume: spellEffects.volumeByRange ( Component.bugcraft.currentCharacterObject.characterData.character_zone_x, Component.bugcraft.currentCharacterObject.characterData.character_zone_y, args.targetCharacter.characterData.character_zone_x, args.targetCharacter.characterData.character_zone_y, spellEffects.volumeRangeLong )
				});
				
				this.spellEffectSoundID = args.targetCharacter._internal.soundEffects.push( auraTimeSound ) - 1;
						
				soundManager.play( 'auraTime' + spellEffects.soundIncrementor, 
												{
													onfinish: function () 
													{
														delete args.targetCharacter._internal.soundEffects[ self.spellEffectSoundID ];	
													}
												});
				
				self.alpha = 0;
				var _animateFunction =	function()
																	{
																		if( self.alpha < 1 )
																		{
																			self.alpha += 0.2;
																		}
																	
																		self.rotation -= Math.PI / 64;

																		_animateFunctionPointer = setTimeout( _animateFunction, 50 );
																	}			
			break;
			case 1:
				self.alpha = 0;
				var _animateFunction =	function()
																	{
																		if( self.alpha < 1 )
																		{
																			self.alpha += 0.2;
																		}
																		
																		self.rotation += Math.PI / 32;

																		_animateFunctionPointer = setTimeout( _animateFunction, 50 );
																	}						
			break;
			case 2:
				self.alpha = 0;
				var _animateFunction =	function()
																	{
																		if( self.alpha < 1 )
																		{
																			self.alpha += 0.2;
																		}

																		self.rotation -= Math.PI / 32;

																		_animateFunctionPointer = setTimeout( _animateFunction, 50 );
																	}						
			break;
			case 3:
				self.alpha = 0;
				var _animateFunction =	function()
																	{
																		if( self.alpha < 1 )
																		{
																			self.alpha += 0.2;
																		}
																		
																		self.rotation += Math.PI / 16;

																		_animateFunctionPointer = setTimeout( _animateFunction, 50 );
																	}						
			break;
		}
		
		var _animateFunctionPointer = setTimeout( _animateFunction, 50 );
		
		setTimeout( function() 
								{ 
									clearTimeout( _animateFunctionPointer );
									
									var _t = setInterval( function()
																		{
																			self.alpha -= 0.1;
																			
																			if( self.alpha > 0 )
																			{
																				return;
																			}
																			
																			self.remove();
																			
																			clearInterval( _t );
																			
																		}, 40 );
								}, self.duration );
	} //end spinning aura

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.auraTime151Complete.js
*/


	spellEffects.auraTime151Complete = function( args )
	{
		this.ID = spellEffects.layer[1].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		
		this.draw = function()
		{
			
		}
		
		var effect0 = new spellEffects.auraTime151({ 			
				sourceCharacter: args.sourceCharacter,														
				targetCharacter: args.targetCharacter,
				component: 0
		});
		
		var effect1 = new spellEffects.auraTime151({ 																						
				sourceCharacter: args.sourceCharacter,
				targetCharacter: args.targetCharacter,
				component: 1
		});
		
		var effect2 = new spellEffects.auraTime151({ 			
				sourceCharacter: args.sourceCharacter,														
				targetCharacter: args.targetCharacter,
				component: 2
		});
		
		var effect3 = new spellEffects.auraTime151({ 			
				sourceCharacter: args.sourceCharacter,														
				targetCharacter: args.targetCharacter,
				component: 3
		});
		
		this.remove = function()
		{
			effect0.remove();
			effect1.remove();
			effect2.remove();
			effect3.remove();
			
			spellEffects.layer[1][ self.ID ] = null;
				
			delete args.targetCharacter._internal.spellEffects[ self.characterSpellEffectID ];
		}
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.auraTimeComplete.js
*/


	spellEffects.auraTimeComplete = function( args )
	{
		this.ID = spellEffects.layer[1].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		
		this.draw = function()
		{
			
		}
		
		var effect0 = new spellEffects.auraTime({ 			
				sourceCharacter: args.sourceCharacter,														
				targetCharacter: args.targetCharacter,
				component: 0
		});
		
		var effect1 = new spellEffects.auraTime({ 																						
				sourceCharacter: args.sourceCharacter,
				targetCharacter: args.targetCharacter,
				component: 1
		});
		
		var effect2 = new spellEffects.auraTime({ 			
				sourceCharacter: args.sourceCharacter,														
				targetCharacter: args.targetCharacter,
				component: 2
		});
		
		var effect3 = new spellEffects.auraTime({ 			
				sourceCharacter: args.sourceCharacter,														
				targetCharacter: args.targetCharacter,
				component: 3
		});
		
		this.remove = function()
		{
			effect0.remove();
			effect1.remove();
			effect2.remove();
			effect3.remove();
			
			spellEffects.layer[1][ self.ID ] = null;
				
			delete args.targetCharacter._internal.spellEffects[ self.characterSpellEffectID ];
		}
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.beetleSummoner.js
*/

	
	spellEffects.beetleSummoner = function( args )
	{
		var self = this,
				_moveFrames = {},
				_tc = args.targetCharacter,
				_tcd = _tc.characterData,
				_changeFrameFunctionPointer = null,
				_currentIndex = 1;
		
		this.ID = spellEffects.layer[0].push( this ) - 1;
		this.characterSpellEffectID = _tc._internal.spellEffects.push( this ) - 1;
		this.offsetX = 20;
		this.offsetY = 20;
		this.rotation = _tcd.character_rotation;
		this.deleteRange = 40;
		this.previousX = _tcd.character_zone_x - this.offsetX;
		this.previousY = _tcd.character_zone_y - this.offsetY;
		
		// initialize
		
		for(var i=1;i<=13;i++)
		{
			_moveFrames[ i ] = { image: new Image(), alpha: 0 };
			_moveFrames[ i ].image.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/beetleSummoner/plant' + i + '.png';
		}
		
		//draw the bombardierBeetleDeath spatter
		this.draw = function()
		{
			Map.ctx.save();
			
			Map.ctx.translate( self.previousX + self.offsetX + Map.viewPortX, self.previousY + self.offsetY + Map.viewPortY );
			
			Map.ctx.rotate( ( self.rotation - 90 ) * Math.PI / 180 );
			
			Map.ctx.shadowColor = 'rgba(0, 0, 0, 0.7)';
			Map.ctx.shadowOffsetX = 3;
			Map.ctx.shadowOffsetY = 3;
			
			Map.ctx.drawImage(
							_moveFrames[ _currentIndex ].image,
							- self.offsetX,
							- self.offsetY
						);
			
			Map.ctx.restore();
			
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the deathDecay
		this.remove = function()
		{
			clearTimeout( _changeFrameFunctionPointer );
			
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[0][ this.ID ] = null;
			
			delete _tc._internal.spellEffects[ this.characterSpellEffectID ];
		}
		
		var _changeFrameFunction = function()
		{
			_currentIndex++;
			
			if( _currentIndex > 13 )
			{
				_currentIndex = 1;
				
				setTimeout( _changeFrameFunction, 2000 + Math.random() * 5000 );
				
				return;
			}
			
			_changeFrameFunctionPointer = setTimeout( _changeFrameFunction, 100 );
		}
		
		_changeFrameFunction();
		
	} //end bombardierBeetleDeath

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.bolt.js
*/


	spellEffects.bolt = function( args )
	{
		this.ID = spellEffects.layer[1].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		this.alpha = 1;
		this.offsetX = 22;
		this.offsetY = 15;
		this.duration = 500;
		this.speed = 12;
		this.removeDistance = 35;
		this.rotation = 0;
		this.deleteRange = 310;
		this.previousX = args.sourceCharacter.characterData.character_zone_x - this.offsetX - 153;
		this.previousY = args.sourceCharacter.characterData.character_zone_y - this.offsetY - 113;
		
		var dateStart = new Date();
		var startTime = dateStart.getTime();
		var dateEnd = 0;
		var endTime = 0;
		
		var dx = 0;
		var dy = 0;
		
		var self = this;
		
		var boltImageObject = new Image();
		boltImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/bolt.png';
		
		var lightImageObject = new Image();
		lightImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/light/light_circle_v2_01.png';
		
		var boltSound = soundManager.createSound({
				id: 'bolt' + ( ++spellEffects.soundIncrementor ),
				url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/bolt.mp3',
				volume: spellEffects.volumeByRange ( Component.bugcraft.currentCharacterObject.characterData.character_zone_x, Component.bugcraft.currentCharacterObject.characterData.character_zone_y, args.targetCharacter.characterData.character_zone_x, args.targetCharacter.characterData.character_zone_y, spellEffects.volumeRangeLong )
		});
		
		this.spellEffectSoundID = args.targetCharacter._internal.soundEffects.push( boltSound ) - 1;
		
		soundManager.play( 'bolt' + spellEffects.soundIncrementor, 
										{
											onfinish: function () 
											{
												delete args.targetCharacter._internal.soundEffects[ self.spellEffectSoundID ];	
											}
										});
		
		var boltPositionX = args.sourceCharacter.characterData.character_zone_x;
		var boltPositionY = args.sourceCharacter.characterData.character_zone_y;
		
		//
		//draw the bolt effect
		//
		this.draw = function()
		{
			self.computeTrajectory();
		
			Map.ctx.globalAlpha = self.alpha;
			
			Map.ctx.save();
			
			Map.ctx.translate( boltPositionX + Map.viewPortX, boltPositionY + Map.viewPortY );
			
			Map.ctx.rotate( self.rotation );
			
			
			
			Map.ctx.drawImage(
											lightImageObject,
											- 153,
											- 118
										)
			
			Map.ctx.drawImage(
											boltImageObject,
											- self.offsetX,
											- self.offsetY
										)
										
			self.previousX = boltPositionX - self.offsetX - 153;
			self.previousY = boltPositionY - self.offsetY - 113;

			Map.ctx.restore();
										
			Map.ctx.globalAlpha = 1;

		}
		
		this.computeTrajectory = function()
		{	 
			// remove the effect if the projectile is less than self.removeDistance px to the target
			var distanceToTarget = Math.floor( Math.sqrt( (args.targetCharacter.characterData.character_zone_x - boltPositionX ) * (args.targetCharacter.characterData.character_zone_x - boltPositionX ) + (args.targetCharacter.characterData.character_zone_y - boltPositionY ) * (args.targetCharacter.characterData.character_zone_y - boltPositionY ) ) )
			if ( distanceToTarget < self.removeDistance )
			{
				self.remove();
				
				//var dateEnd = new Date();
				//var endTime = dateEnd.getTime();
				
				//Application.debug.addError( "----------elapsed ms = " + ( endTime - startTime )  );
				
				args.afterFunction();
			}
			
			//Application.debug.addError( "distance to target = " + ( distanceToTarget )  );
			//Application.debug.addError( "----------elapsed ms = " + ( endTime - startTime )  );
			
			dateEnd = new Date();
			endTime = dateEnd.getTime();
			
			self.speed = distanceToTarget *  15 / (self.duration - endTime + startTime);
	
			// angle calculations
			//self.rotation = Math.atan2( ( boltPositionY - args.targetCharacter.characterData.character_zone_y ), ( boltPositionX - args.targetCharacter.characterData.character_zone_x ) ) * 57.2957;
			
			if ( args.targetCharacter.characterData.character_zone_x > boltPositionX )
			{
				self.rotation = Math.atan( (boltPositionY - args.targetCharacter.characterData.character_zone_y) / (boltPositionX - args.targetCharacter.characterData.character_zone_x) );
				//alert('quadran bottom-right + top-right');
			}

			if ( args.targetCharacter.characterData.character_zone_x < boltPositionX && args.targetCharacter.characterData.character_zone_y >= boltPositionY )
			{
				 self.rotation = Math.atan( (boltPositionY - args.targetCharacter.characterData.character_zone_y) / (boltPositionX - args.targetCharacter.characterData.character_zone_x) ) + Math.PI;
				//alert('quadran bottom-left');
			}
			
			if ( args.targetCharacter.characterData.character_zone_x < boltPositionX && args.targetCharacter.characterData.character_zone_y < boltPositionY )
			{
				 self.rotation = Math.atan( (boltPositionY - args.targetCharacter.characterData.character_zone_y) / (boltPositionX - args.targetCharacter.characterData.character_zone_x) ) - Math.PI ;
				//alert('quadran top-left');
			}
																					
			//set step distances
			 dx = Math.floor(this.speed * Math.cos( self.rotation ));
			 dy = Math.floor(this.speed * Math.sin( self.rotation ));
			
			boltPositionX += dx;
			boltPositionY += dy;
			
		}
		
		
		//remove the dust effect
		
		this.remove = function()
		{
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[1][ this.ID ] = null;
			delete args.targetCharacter._internal.spellEffects[ this.characterSpellEffectID ];
		}
		
	} //end bolt

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.boltAcid.js
*/


	spellEffects.boltAcid = function( args )
	{
		this.ID = spellEffects.layer[1].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		this.alpha = 1;
		this.offsetX = 42;
		this.offsetY = 12;
		this.duration = 500;
		this.speed = 12;
		this.removeDistance = 60;
		this.rotation = 0;
		this.deleteRange = 102;
		this.previousX = args.sourceCharacter.characterData.character_zone_x - this.offsetX - 5;
		this.previousY = args.sourceCharacter.characterData.character_zone_y - this.offsetY - 30;
		
		var dateStart = new Date();
		var startTime = dateStart.getTime();
		var dateEnd = 0;
		var endTime = 0;
		
		var dx = 0;
		var dy = 0;
		
		var self = this;
		
		var boltAcidImageObject = new Image();
		boltAcidImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/bolt/acidBolt/bolt_acid_glow0.png';
		
		var boltAcidSound = soundManager.createSound({
				id: 'boltAcid' + ( ++spellEffects.soundIncrementor ),
				url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/bolt/mud_splat.mp3',
				volume: spellEffects.volumeByRange ( Component.bugcraft.currentCharacterObject.characterData.character_zone_x, Component.bugcraft.currentCharacterObject.characterData.character_zone_y, args.targetCharacter.characterData.character_zone_x, args.targetCharacter.characterData.character_zone_y, spellEffects.volumeRangeLong )
		});
		
		this.spellEffectSoundID = args.targetCharacter._internal.soundEffects.push( boltAcidSound ) - 1;
		
		soundManager.play( 'boltAcid' + spellEffects.soundIncrementor, 
										{
											onfinish: function () 
											{
												delete args.targetCharacter._internal.soundEffects[ self.spellEffectSoundID ];	
											}
										});

		var boltPositionX = args.sourceCharacter.characterData.character_zone_x;
		var boltPositionY = args.sourceCharacter.characterData.character_zone_y;
		
		//
		//draw the bolt effect
		//
		this.draw = function()
		{
		
			self.computeTrajectory();
		
			Map.ctx.globalAlpha = self.alpha;
			
			Map.ctx.save();
			
			Map.ctx.translate( boltPositionX + Map.viewPortX, boltPositionY + Map.viewPortY );
			
			Map.ctx.rotate( self.rotation );
			
			Map.ctx.shadowOffsetX = 9;
			Map.ctx.shadowOffsetY = 9;
			Map.ctx.shadowColor   = 'rgba(0, 0, 0, 0.75)';
			
			Map.ctx.drawImage(
											boltAcidImageObject,
											-self.offsetX,
											-self.offsetY
										);
										
			self.previousX = boltPositionX - self.offsetX - 5;
			self.previousY = boltPositionY - self.offsetY - 30;

			Map.ctx.restore();
										
			Map.ctx.globalAlpha = 1;

		}
		
		this.computeTrajectory = function()
		{	 
			// remove the effect if the projectile is less than self.removeDistance px to the target
			var distanceToTarget = Math.floor( Math.sqrt( (args.targetCharacter.characterData.character_zone_x - boltPositionX ) * (args.targetCharacter.characterData.character_zone_x - boltPositionX ) + (args.targetCharacter.characterData.character_zone_y - boltPositionY ) * (args.targetCharacter.characterData.character_zone_y - boltPositionY ) ) )
			if ( distanceToTarget < self.removeDistance )
			{
				self.remove();
				
				args.afterFunction();
			}
			
			dateEnd = new Date();
			endTime = dateEnd.getTime();
			
			self.speed = distanceToTarget *  15 / (self.duration - endTime + startTime);
			
			// angle calculations
			if ( args.targetCharacter.characterData.character_zone_x > boltPositionX )
			{
				self.rotation = Math.atan( (boltPositionY - args.targetCharacter.characterData.character_zone_y) / (boltPositionX - args.targetCharacter.characterData.character_zone_x) );
				//alert('quadran bottom-right + top-right');
			}

			if ( args.targetCharacter.characterData.character_zone_x < boltPositionX && args.targetCharacter.characterData.character_zone_y >= boltPositionY )
			{
				 self.rotation = Math.atan( (boltPositionY - args.targetCharacter.characterData.character_zone_y) / (boltPositionX - args.targetCharacter.characterData.character_zone_x) ) + Math.PI;
				//alert('quadran bottom-left');
			}
			
			if ( args.targetCharacter.characterData.character_zone_x < boltPositionX && args.targetCharacter.characterData.character_zone_y < boltPositionY )
			{
				 self.rotation = Math.atan( (boltPositionY - args.targetCharacter.characterData.character_zone_y) / (boltPositionX - args.targetCharacter.characterData.character_zone_x) ) - Math.PI ;
				//alert('quadran top-left');
			}
																					
			//set step distances
			 dx = Math.floor(this.speed * Math.cos( self.rotation ));
			 dy = Math.floor(this.speed * Math.sin( self.rotation ));
			
			boltPositionX += dx;
			boltPositionY += dy;
			
		}
		
		//remove the dust effect		
		this.remove = function()
		{
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[1][ this.ID ] = null;
			clearTimeout( _animateAcidBoltPointer );
			delete args.targetCharacter._internal.spellEffects[ this.characterSpellEffectID ];
		}

		var i = 0;
		
		var _animateAcidBolt = function()
											{
												boltAcidImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/bolt/acidBolt/bolt_acid_glow' + ( i++ % 4 ) + '.png';
												
												_animateAcidBoltPointer = setTimeout( _animateAcidBolt, 100 );
											}
		
		var _animateAcidBoltPointer = setTimeout( _animateAcidBolt, 100 );
		
	} //end boltAcid
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.boltAcid128.js
*/


	spellEffects.boltAcid128 = function( args )
	{
		this.ID = spellEffects.layer[1].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		this.alpha = 1;
		this.offsetX = 42;
		this.offsetY = 12;
		this.duration = 500;
		this.speed = 12;
		this.removeDistance = 60;
		this.rotation = 0;
		this.deleteRange = 102;
		this.previousX = args.sourceCharacter.characterData.character_zone_x - this.offsetX - 5;
		this.previousY = args.sourceCharacter.characterData.character_zone_y - this.offsetY - 30;
		
		var dateStart = new Date();
		var startTime = dateStart.getTime();
		var dateEnd = 0;
		var endTime = 0;
		
		var dx = 0;
		var dy = 0;
		
		var self = this;
		
		var boltAcidImageObject = new Image();
		boltAcidImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/bolt/acidBolt/bolt_acid_glow0.png';
		
		var boltAcidSound = soundManager.createSound({
				id: 'boltAcid' + ( ++spellEffects.soundIncrementor ),
				url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/elements/fire_woosh.mp3',
				volume: spellEffects.volumeByRange ( Component.bugcraft.currentCharacterObject.characterData.character_zone_x, Component.bugcraft.currentCharacterObject.characterData.character_zone_y, args.targetCharacter.characterData.character_zone_x, args.targetCharacter.characterData.character_zone_y, spellEffects.volumeRangeLong )
		});
		
		this.spellEffectSoundID = args.targetCharacter._internal.soundEffects.push( boltAcidSound ) - 1;
		
		soundManager.play( 'boltAcid' + spellEffects.soundIncrementor, 
										{
											onfinish: function () 
											{
												delete args.targetCharacter._internal.soundEffects[ self.spellEffectSoundID ];	
											}
										});

		var boltPositionX = args.sourceCharacter.characterData.character_zone_x;
		var boltPositionY = args.sourceCharacter.characterData.character_zone_y;
		
		//
		//draw the bolt effect
		//
		this.draw = function()
		{
		
			self.computeTrajectory();
		
			Map.ctx.globalAlpha = self.alpha;
			
			Map.ctx.save();
			
			Map.ctx.translate( boltPositionX + Map.viewPortX, boltPositionY + Map.viewPortY );
			
			Map.ctx.rotate( self.rotation );
			
			Map.ctx.shadowOffsetX = 9;
			Map.ctx.shadowOffsetY = 9;
			Map.ctx.shadowColor   = 'rgba(0, 0, 0, 0.75)';
			
			Map.ctx.drawImage(
											boltAcidImageObject,
											-self.offsetX,
											-self.offsetY
										);
										
			self.previousX = boltPositionX - self.offsetX - 5;
			self.previousY = boltPositionY - self.offsetY - 30;

			Map.ctx.restore();
										
			Map.ctx.globalAlpha = 1;

		}
		
		this.computeTrajectory = function()
		{	 
			// remove the effect if the projectile is less than self.removeDistance px to the target
			var distanceToTarget = Math.floor( Math.sqrt( (args.targetCharacter.characterData.character_zone_x - boltPositionX ) * (args.targetCharacter.characterData.character_zone_x - boltPositionX ) + (args.targetCharacter.characterData.character_zone_y - boltPositionY ) * (args.targetCharacter.characterData.character_zone_y - boltPositionY ) ) )
			if ( distanceToTarget < self.removeDistance )
			{
				self.remove();
				
				args.afterFunction();
			}
			
			dateEnd = new Date();
			endTime = dateEnd.getTime();
			
			self.speed = distanceToTarget *  15 / (self.duration - endTime + startTime);
			
			// angle calculations
			if ( args.targetCharacter.characterData.character_zone_x > boltPositionX )
			{
				self.rotation = Math.atan( (boltPositionY - args.targetCharacter.characterData.character_zone_y) / (boltPositionX - args.targetCharacter.characterData.character_zone_x) );
				//alert('quadran bottom-right + top-right');
			}

			if ( args.targetCharacter.characterData.character_zone_x < boltPositionX && args.targetCharacter.characterData.character_zone_y >= boltPositionY )
			{
				 self.rotation = Math.atan( (boltPositionY - args.targetCharacter.characterData.character_zone_y) / (boltPositionX - args.targetCharacter.characterData.character_zone_x) ) + Math.PI;
				//alert('quadran bottom-left');
			}
			
			if ( args.targetCharacter.characterData.character_zone_x < boltPositionX && args.targetCharacter.characterData.character_zone_y < boltPositionY )
			{
				 self.rotation = Math.atan( (boltPositionY - args.targetCharacter.characterData.character_zone_y) / (boltPositionX - args.targetCharacter.characterData.character_zone_x) ) - Math.PI ;
				//alert('quadran top-left');
			}
																					
			//set step distances
			 dx = Math.floor(this.speed * Math.cos( self.rotation ));
			 dy = Math.floor(this.speed * Math.sin( self.rotation ));
			
			boltPositionX += dx;
			boltPositionY += dy;
			
		}
		
		//remove the dust effect		
		this.remove = function()
		{
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[1][ this.ID ] = null;
			clearTimeout( _animateAcidBoltPointer );
			delete args.targetCharacter._internal.spellEffects[ this.characterSpellEffectID ];
		}

		var i = 0;
		
		var _animateAcidBolt = function()
											{
												boltAcidImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/bolt/acidBolt/bolt_acid_glow' + ( i++ % 4 ) + '.png';
												
												_animateAcidBoltPointer = setTimeout( _animateAcidBolt, 100 );
											}
		
		var _animateAcidBoltPointer = setTimeout( _animateAcidBolt, 100 );
		
	} //end boltAcid
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.boltAmberTrap.js
*/


	spellEffects.boltAmberTrap = function( args )
	{
		this.ID = spellEffects.layer[1].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		this.alpha = 1;
		this.offsetX = 42;
		this.offsetY = 12;
		this.duration = 500;
		this.speed = 12;
		this.removeDistance = 60;
		this.rotation = 0;
		this.deleteRange = 102;
		this.previousX = args.sourceCharacter.characterData.character_zone_x - this.offsetX - 5;
		this.previousY = args.sourceCharacter.characterData.character_zone_y - this.offsetY - 30;
		
		var dateStart = new Date();
		var startTime = dateStart.getTime();
		var dateEnd = 0;
		var endTime = 0;
		
		var dx = 0;
		var dy = 0;
		
		var self = this;
		
		var boltAmberTrapImageObject = new Image();
		boltAmberTrapImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/bolt/amberTrapBolt/bolt_ambertrap_glowvar0.png';
		
		var boltAmberTrapSound = soundManager.createSound({
				id: 'boltAmberTrap' + ( ++spellEffects.soundIncrementor ),
				url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/elements/fire_ball.mp3',
				volume: spellEffects.volumeByRange ( Component.bugcraft.currentCharacterObject.characterData.character_zone_x, Component.bugcraft.currentCharacterObject.characterData.character_zone_y, args.targetCharacter.characterData.character_zone_x, args.targetCharacter.characterData.character_zone_y, spellEffects.volumeRangeLong )
		});
		
		this.spellEffectSoundID = args.targetCharacter._internal.soundEffects.push( boltAmberTrapSound ) - 1;
		
		soundManager.play( 'boltAmberTrap' + spellEffects.soundIncrementor, 
										{
											onfinish: function () 
											{
												delete args.targetCharacter._internal.soundEffects[ self.spellEffectSoundID ];	
											}
										});

		var boltPositionX = args.sourceCharacter.characterData.character_zone_x;
		var boltPositionY = args.sourceCharacter.characterData.character_zone_y;
		
		//
		//draw the bolt effect
		//
		this.draw = function()
		{
		
			self.computeTrajectory();
		
			Map.ctx.globalAlpha = self.alpha;
			
			Map.ctx.save();
			
			Map.ctx.translate( boltPositionX + Map.viewPortX, boltPositionY + Map.viewPortY );
			
			Map.ctx.rotate( self.rotation );
			
			Map.ctx.shadowOffsetX = 9;
			Map.ctx.shadowOffsetY = 9;
			Map.ctx.shadowColor   = 'rgba(0, 0, 0, 0.75)';
			
			Map.ctx.drawImage(
											boltAmberTrapImageObject,
											-self.offsetX,
											-self.offsetY
										)

			self.previousX = boltPositionX - self.offsetX - 5;
			self.previousY = boltPositionY - self.offsetY - 30;
										
			Map.ctx.restore();
										
			Map.ctx.globalAlpha = 1;

		}
		
		this.computeTrajectory = function()
		{	 
			// remove the effect if the projectile is less than self.removeDistance px to the target
			var distanceToTarget = Math.floor( Math.sqrt( (args.targetCharacter.characterData.character_zone_x - boltPositionX ) * (args.targetCharacter.characterData.character_zone_x - boltPositionX ) + (args.targetCharacter.characterData.character_zone_y - boltPositionY ) * (args.targetCharacter.characterData.character_zone_y - boltPositionY ) ) )
			if ( distanceToTarget < self.removeDistance )
			{
				self.remove();
				
				args.afterFunction();
			}
	
			dateEnd = new Date();
			endTime = dateEnd.getTime();
			
			self.speed = distanceToTarget *  15 / (self.duration - endTime + startTime);
	
			// angle calculations
			if ( args.targetCharacter.characterData.character_zone_x > boltPositionX )
			{
				self.rotation = Math.atan( (boltPositionY - args.targetCharacter.characterData.character_zone_y) / (boltPositionX - args.targetCharacter.characterData.character_zone_x) );
				//alert('quadran bottom-right + top-right');
			}

			if ( args.targetCharacter.characterData.character_zone_x < boltPositionX && args.targetCharacter.characterData.character_zone_y >= boltPositionY )
			{
				 self.rotation = Math.atan( (boltPositionY - args.targetCharacter.characterData.character_zone_y) / (boltPositionX - args.targetCharacter.characterData.character_zone_x) ) + Math.PI;
				//alert('quadran bottom-left');
			}
			
			if ( args.targetCharacter.characterData.character_zone_x < boltPositionX && args.targetCharacter.characterData.character_zone_y < boltPositionY )
			{
				 self.rotation = Math.atan( (boltPositionY - args.targetCharacter.characterData.character_zone_y) / (boltPositionX - args.targetCharacter.characterData.character_zone_x) ) - Math.PI ;
				//alert('quadran top-left');
			}
																					
			//set step distances
			 dx = Math.floor(this.speed * Math.cos( self.rotation ));
			 dy = Math.floor(this.speed * Math.sin( self.rotation ));
			
			boltPositionX += dx;
			boltPositionY += dy;
			
		}
		
		//remove the dust effect
		this.remove = function()
		{
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[1][ this.ID ] = null;
			clearInterval( _cycleImagePointer );
			delete args.targetCharacter._internal.spellEffects[ this.characterSpellEffectID ];
		}

		var i = 0;
		
		var _cycleImage = function()
											{
												boltAmberTrapImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/bolt/amberTrapBolt/bolt_ambertrap_glowvar' + ( i++ % 5 ) + '.png';
												
												_cycleImagePointer = setTimeout( _cycleImage, 75 );
											}
		
		var _cycleImagePointer = setTimeout( _cycleImage, 100 );
		
	} //end boltAmberTrap

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.boltLiquify.js
*/


	spellEffects.boltLiquify = function( args )
	{
		this.ID = spellEffects.layer[1].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		this.alpha = 1;
		this.offsetX = 42;
		this.offsetY = 12;
		this.duration = 500;
		this.speed = 12;
		this.removeDistance = 60;
		this.rotation = 0;
		this.deleteRange = 102;
		this.previousX = args.sourceCharacter.characterData.character_zone_x - this.offsetX - 5;
		this.previousY = args.sourceCharacter.characterData.character_zone_y - this.offsetY - 30;
		
		var dateStart = new Date();
		var startTime = dateStart.getTime();
		var dateEnd = 0;
		var endTime = 0;
		
		var dx = 0;
		var dy = 0;
		
		var self = this;
		
		var boltLiquifyImageObject = new Image();
		boltLiquifyImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/bolt/liquify/bolt_liquify_glow0.png';
		
		var boltLiquifySound = soundManager.createSound({
				id: 'boltLiquify' + ( ++spellEffects.soundIncrementor ),
				url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/elements/fire_woosh.mp3',
				volume: spellEffects.volumeByRange ( Component.bugcraft.currentCharacterObject.characterData.character_zone_x, Component.bugcraft.currentCharacterObject.characterData.character_zone_y, args.targetCharacter.characterData.character_zone_x, args.targetCharacter.characterData.character_zone_y, spellEffects.volumeRangeLong )
		});
		
		this.spellEffectSoundID = args.targetCharacter._internal.soundEffects.push( boltLiquifySound ) - 1;
		
		soundManager.play( 'boltLiquify' + spellEffects.soundIncrementor, 
										{
											onfinish: function () 
											{
												delete args.targetCharacter._internal.soundEffects[ self.spellEffectSoundID ];	
											}
										});

		var boltPositionX = args.sourceCharacter.characterData.character_zone_x;
		var boltPositionY = args.sourceCharacter.characterData.character_zone_y;
		
		//
		//draw the bolt effect
		//
		this.draw = function()
		{
		
			self.computeTrajectory();
		
			Map.ctx.globalAlpha = self.alpha;
			
			Map.ctx.save();
			
			Map.ctx.translate( boltPositionX + Map.viewPortX, boltPositionY + Map.viewPortY );
			
			Map.ctx.rotate( self.rotation );
			
			Map.ctx.shadowOffsetX = 9;
			Map.ctx.shadowOffsetY = 9;
			Map.ctx.shadowColor   = 'rgba(0, 0, 0, 0.75)';
			
			Map.ctx.drawImage(
											boltLiquifyImageObject,
											- self.offsetX,
											- self.offsetY
										)

			self.previousX = boltPositionX - self.offsetX - 5;
			self.previousY = boltPositionY - self.offsetY - 30;
										
			Map.ctx.restore();
										
			Map.ctx.globalAlpha = 1;

		}
		
		this.computeTrajectory = function()
		{	 
			// remove the effect if the projectile is less than self.removeDistance px to the target
			var distanceToTarget = Math.floor( Math.sqrt( (args.targetCharacter.characterData.character_zone_x - boltPositionX ) * (args.targetCharacter.characterData.character_zone_x - boltPositionX ) + (args.targetCharacter.characterData.character_zone_y - boltPositionY ) * (args.targetCharacter.characterData.character_zone_y - boltPositionY ) ) )
			if ( distanceToTarget < self.removeDistance )
			{
				self.remove();

				args.afterFunction();
			}
			
			dateEnd = new Date();
			endTime = dateEnd.getTime();
			
			self.speed = distanceToTarget *  15 / (self.duration - endTime + startTime);
			
			// angle calculations
			if ( args.targetCharacter.characterData.character_zone_x > boltPositionX )
			{
				self.rotation = Math.atan( (boltPositionY - args.targetCharacter.characterData.character_zone_y) / (boltPositionX - args.targetCharacter.characterData.character_zone_x) );
				//alert('quadran bottom-right + top-right');
			}

			if ( args.targetCharacter.characterData.character_zone_x < boltPositionX && args.targetCharacter.characterData.character_zone_y >= boltPositionY )
			{
				 self.rotation = Math.atan( (boltPositionY - args.targetCharacter.characterData.character_zone_y) / (boltPositionX - args.targetCharacter.characterData.character_zone_x) ) + Math.PI;
				//alert('quadran bottom-left');
			}
			
			if ( args.targetCharacter.characterData.character_zone_x < boltPositionX && args.targetCharacter.characterData.character_zone_y < boltPositionY )
			{
				 self.rotation = Math.atan( (boltPositionY - args.targetCharacter.characterData.character_zone_y) / (boltPositionX - args.targetCharacter.characterData.character_zone_x) ) - Math.PI ;
				//alert('quadran top-left');
			}
																					
			//set step distances
			 dx = Math.floor(this.speed * Math.cos( self.rotation ));
			 dy = Math.floor(this.speed * Math.sin( self.rotation ));
			
			boltPositionX += dx;
			boltPositionY += dy;
			
		}
		
		//remove the dust effect		
		this.remove = function()
		{
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[1][ this.ID ] = null;
			clearInterval( _cycleImagePointer );
			delete args.targetCharacter._internal.spellEffects[ this.characterSpellEffectID ];
		}

		var i = 0;
		
		var _cycleImage = function()
										{
											boltLiquifyImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/bolt/liquify/bolt_liquify_glow' + ( i++ % 5 ) + '.png';
											
											_cycleImagePointer = setTimeout( _cycleImage, 75 );
										}
		
		var _cycleImagePointer = setTimeout( _cycleImage, 80 );
		
	} //end boltLiquify

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.boltOpportuneBlast.js
*/


	spellEffects.boltOpportuneBlast = function( args )
	{
		this.ID = spellEffects.layer[1].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		this.alpha = 1;
		this.offsetX = 42;
		this.offsetY = 12;
		this.duration = 500;
		this.speed = 12;
		this.removeDistance = 60;
		this.rotation = 0;
		this.deleteRange = 102;
		this.previousX = args.sourceCharacter.characterData.character_zone_x - this.offsetX - 5;
		this.previousY = args.sourceCharacter.characterData.character_zone_y - this.offsetY - 30;
		
		var dateStart = new Date();
		var startTime = dateStart.getTime();
		var dateEnd = 0;
		var endTime = 0;
		
		var dx = 0;
		var dy = 0;
		
		var self = this;
		
		var boltOpportuneBlastImageObject = new Image();
		boltOpportuneBlastImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/bolt/opportuneBlast/opportune_blast0.png';
		
		var boltOpportuneBlastSound = soundManager.createSound({
				id: 'boltOpportuneBlast' + ( ++spellEffects.soundIncrementor ),
				url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/bolt/woosh.mp3',
				volume: spellEffects.volumeByRange ( Component.bugcraft.currentCharacterObject.characterData.character_zone_x, Component.bugcraft.currentCharacterObject.characterData.character_zone_y, args.targetCharacter.characterData.character_zone_x, args.targetCharacter.characterData.character_zone_y, spellEffects.volumeRangeLong )
		});
		
		this.spellEffectSoundID = args.targetCharacter._internal.soundEffects.push( boltOpportuneBlastSound ) - 1;
		
		soundManager.play( 'boltOpportuneBlast' + spellEffects.soundIncrementor, 
										{
											onfinish: function () 
											{
												delete args.targetCharacter._internal.soundEffects[ self.spellEffectSoundID ];	
											}
										});

		var boltPositionX = args.sourceCharacter.characterData.character_zone_x;
		var boltPositionY = args.sourceCharacter.characterData.character_zone_y;
		
		//
		//draw the bolt effect
		//
		this.draw = function()
		{
		
			self.computeTrajectory();
		
			Map.ctx.globalAlpha = self.alpha;
			
			Map.ctx.save();
			
			Map.ctx.translate( boltPositionX + Map.viewPortX, boltPositionY + Map.viewPortY );
			
			Map.ctx.rotate( self.rotation );
			
			Map.ctx.shadowOffsetX = 9;
			Map.ctx.shadowOffsetY = 9;
			Map.ctx.shadowColor   = 'rgba(0, 0, 0, 0.75)';
			
			Map.ctx.drawImage(
											boltOpportuneBlastImageObject,
											- self.offsetX,
											- self.offsetY
										)
										
			self.previousX = boltPositionX - self.offsetX - 5;
			self.previousY = boltPositionY - self.offsetY - 30;

			Map.ctx.restore();
										
			Map.ctx.globalAlpha = 1;

		}
		
		this.computeTrajectory = function()
		{	 
			// remove the effect if the projectile is less than self.removeDistance px to the target
			var distanceToTarget = Math.floor( Math.sqrt( (args.targetCharacter.characterData.character_zone_x - boltPositionX ) * (args.targetCharacter.characterData.character_zone_x - boltPositionX ) + (args.targetCharacter.characterData.character_zone_y - boltPositionY ) * (args.targetCharacter.characterData.character_zone_y - boltPositionY ) ) )
			if ( distanceToTarget < self.removeDistance )
			{
				self.remove();

				args.afterFunction();
			}
		
			dateEnd = new Date();
			endTime = dateEnd.getTime();
			
			self.speed = distanceToTarget *  15 / (self.duration - endTime + startTime);
	
			// angle calculations
			if ( args.targetCharacter.characterData.character_zone_x > boltPositionX )
			{
				self.rotation = Math.atan( (boltPositionY - args.targetCharacter.characterData.character_zone_y) / (boltPositionX - args.targetCharacter.characterData.character_zone_x) );
				//alert('quadran bottom-right + top-right');
			}

			if ( args.targetCharacter.characterData.character_zone_x < boltPositionX && args.targetCharacter.characterData.character_zone_y >= boltPositionY )
			{
				 self.rotation = Math.atan( (boltPositionY - args.targetCharacter.characterData.character_zone_y) / (boltPositionX - args.targetCharacter.characterData.character_zone_x) ) + Math.PI;
				//alert('quadran bottom-left');
			}
			
			if ( args.targetCharacter.characterData.character_zone_x < boltPositionX && args.targetCharacter.characterData.character_zone_y < boltPositionY )
			{
				 self.rotation = Math.atan( (boltPositionY - args.targetCharacter.characterData.character_zone_y) / (boltPositionX - args.targetCharacter.characterData.character_zone_x) ) - Math.PI ;
				//alert('quadran top-left');
			}
																					
			//set step distances
			 dx = Math.floor(this.speed * Math.cos( self.rotation ));
			 dy = Math.floor(this.speed * Math.sin( self.rotation ));
			
			boltPositionX += dx;
			boltPositionY += dy;
			
		}
		
		//remove the dust effect
		var self = this;
		
		this.remove = function()
		{
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[1][ this.ID ] = null;
			clearTimeout( _cycleImagePointer );
			delete args.targetCharacter._internal.spellEffects[ this.characterSpellEffectID ];
		}

		var i = 0;
		
		var _cycleImage = function()
										{
											boltOpportuneBlastImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/bolt/opportuneBlast/opportune_blast' + ( i++ % 6 ) + '.png';
											
											_cycleImagePointer = setTimeout( _cycleImage, 100 );
										}
										
		var _cycleImagePointer = setTimeout( _cycleImage, 100 );
		
	} //end boltOpportuneBlast

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.boltOpportuneBlast154.js
*/


	spellEffects.boltOpportuneBlast154 = function( args )
	{
		this.ID = spellEffects.layer[1].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		this.alpha = 1;
		this.offsetX = 42;
		this.offsetY = 12;
		this.duration = 500;
		this.speed = 12;
		this.removeDistance = 60;
		this.rotation = 0;
		this.deleteRange = 102;
		this.previousX = args.sourceCharacter.characterData.character_zone_x - this.offsetX - 5;
		this.previousY = args.sourceCharacter.characterData.character_zone_y - this.offsetY - 30;
		
		var dateStart = new Date();
		var startTime = dateStart.getTime();
		var dateEnd = 0;
		var endTime = 0;
		
		var dx = 0;
		var dy = 0;
		
		var self = this;
		
		var boltOpportuneBlastImageObject = new Image();
		boltOpportuneBlastImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/bolt/opportuneBlast/opportune_blast0.png';
		
		var boltOpportuneBlastSound = soundManager.createSound({
				id: 'boltOpportuneBlast' + ( ++spellEffects.soundIncrementor ),
				url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/elements/fire_woosh.mp3',
				volume: spellEffects.volumeByRange ( Component.bugcraft.currentCharacterObject.characterData.character_zone_x, Component.bugcraft.currentCharacterObject.characterData.character_zone_y, args.targetCharacter.characterData.character_zone_x, args.targetCharacter.characterData.character_zone_y, spellEffects.volumeRangeLong )
		});
		
		this.spellEffectSoundID = args.targetCharacter._internal.soundEffects.push( boltOpportuneBlastSound ) - 1;
		
		soundManager.play( 'boltOpportuneBlast' + spellEffects.soundIncrementor, 
										{
											onfinish: function () 
											{
												delete args.targetCharacter._internal.soundEffects[ self.spellEffectSoundID ];	
											}
										});

		var boltPositionX = args.sourceCharacter.characterData.character_zone_x;
		var boltPositionY = args.sourceCharacter.characterData.character_zone_y;
		
		//
		//draw the bolt effect
		//
		this.draw = function()
		{
		
			self.computeTrajectory();
		
			Map.ctx.globalAlpha = self.alpha;
			
			Map.ctx.save();
			
			Map.ctx.translate( boltPositionX + Map.viewPortX, boltPositionY + Map.viewPortY );
			
			Map.ctx.rotate( self.rotation );
			
			Map.ctx.shadowOffsetX = 9;
			Map.ctx.shadowOffsetY = 9;
			Map.ctx.shadowColor   = 'rgba(0, 0, 0, 0.75)';
			
			Map.ctx.drawImage(
											boltOpportuneBlastImageObject,
											- self.offsetX,
											- self.offsetY
										)
										
			self.previousX = boltPositionX - self.offsetX - 5;
			self.previousY = boltPositionY - self.offsetY - 30;

			Map.ctx.restore();
										
			Map.ctx.globalAlpha = 1;

		}
		
		this.computeTrajectory = function()
		{	 
			// remove the effect if the projectile is less than self.removeDistance px to the target
			var distanceToTarget = Math.floor( Math.sqrt( (args.targetCharacter.characterData.character_zone_x - boltPositionX ) * (args.targetCharacter.characterData.character_zone_x - boltPositionX ) + (args.targetCharacter.characterData.character_zone_y - boltPositionY ) * (args.targetCharacter.characterData.character_zone_y - boltPositionY ) ) )
			if ( distanceToTarget < self.removeDistance )
			{
				self.remove();

				args.afterFunction();
			}
	
			dateEnd = new Date();
			endTime = dateEnd.getTime();
			
			self.speed = distanceToTarget *  15 / (self.duration - endTime + startTime);
	
			// angle calculations
			if ( args.targetCharacter.characterData.character_zone_x > boltPositionX )
			{
				self.rotation = Math.atan( (boltPositionY - args.targetCharacter.characterData.character_zone_y) / (boltPositionX - args.targetCharacter.characterData.character_zone_x) );
				//alert('quadran bottom-right + top-right');
			}

			if ( args.targetCharacter.characterData.character_zone_x < boltPositionX && args.targetCharacter.characterData.character_zone_y >= boltPositionY )
			{
				 self.rotation = Math.atan( (boltPositionY - args.targetCharacter.characterData.character_zone_y) / (boltPositionX - args.targetCharacter.characterData.character_zone_x) ) + Math.PI;
				//alert('quadran bottom-left');
			}
			
			if ( args.targetCharacter.characterData.character_zone_x < boltPositionX && args.targetCharacter.characterData.character_zone_y < boltPositionY )
			{
				 self.rotation = Math.atan( (boltPositionY - args.targetCharacter.characterData.character_zone_y) / (boltPositionX - args.targetCharacter.characterData.character_zone_x) ) - Math.PI ;
				//alert('quadran top-left');
			}
																					
			//set step distances
			 dx = Math.floor(this.speed * Math.cos( self.rotation ));
			 dy = Math.floor(this.speed * Math.sin( self.rotation ));
			
			boltPositionX += dx;
			boltPositionY += dy;
			
		}
		
		//remove the dust effect
		var self = this;
		
		this.remove = function()
		{
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[1][ this.ID ] = null;
			clearTimeout( _cycleImagePointer );
			delete args.targetCharacter._internal.spellEffects[ this.characterSpellEffectID ];
		}

		var i = 0;
		
		var _cycleImage = function()
										{
											boltOpportuneBlastImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/bolt/opportuneBlast/opportune_blast' + ( i++ % 6 ) + '.png';
											
											_cycleImagePointer = setTimeout( _cycleImage, 100 );
										}
										
		var _cycleImagePointer = setTimeout( _cycleImage, 100 );
		
	} //end boltOpportuneBlast

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.boltStickySpray.js
*/


	spellEffects.boltStickySpray = function( args )
	{
		this.ID = spellEffects.layer[1].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		this.alpha = 1;
		this.offsetX = 42;
		this.offsetY = 12;
		this.duration = 500;
		this.speed = 12;
		this.removeDistance = 60;
		this.rotation = 0;
		this.deleteRange = 102;
		this.previousX = args.sourceCharacter.characterData.character_zone_x - this.offsetX - 5;
		this.previousY = args.sourceCharacter.characterData.character_zone_y - this.offsetY - 30;
		
		var dateStart = new Date();
		var startTime = dateStart.getTime();
		var dateEnd = 0;
		var endTime = 0;
		
		var dx = 0;
		var dy = 0;
		
		var self = this;
		
		var boltStickySprayImageObject = new Image();
		boltStickySprayImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/bolt/stickySprayBolt/bolt_slow_glow0.png';
		
		var boltStickySpraySound = soundManager.createSound({
				id: 'boltStickySpray' + ( ++spellEffects.soundIncrementor ),
				url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/bolt/air reverse burst 1.mp3',
				volume: spellEffects.volumeByRange ( Component.bugcraft.currentCharacterObject.characterData.character_zone_x, Component.bugcraft.currentCharacterObject.characterData.character_zone_y, args.targetCharacter.characterData.character_zone_x, args.targetCharacter.characterData.character_zone_y, spellEffects.volumeRangeLong )
		});
		
		this.spellEffectSoundID = args.targetCharacter._internal.soundEffects.push( boltStickySpraySound ) - 1;
		
		soundManager.play( 'boltStickySpray' + spellEffects.soundIncrementor, 
										{
											onfinish: function () 
											{
												delete args.targetCharacter._internal.soundEffects[ self.spellEffectSoundID ];	
											}
										});

		var boltPositionX = args.sourceCharacter.characterData.character_zone_x;
		var boltPositionY = args.sourceCharacter.characterData.character_zone_y;
		
		//
		//draw the bolt effect
		//
		this.draw = function()
		{
		
			self.computeTrajectory();
		
			Map.ctx.globalAlpha = self.alpha;
			
			Map.ctx.save();
			
			Map.ctx.translate( boltPositionX + Map.viewPortX, boltPositionY + Map.viewPortY );
			
			Map.ctx.rotate( self.rotation );
			
			Map.ctx.shadowOffsetX = 9;
			Map.ctx.shadowOffsetY = 9;
			Map.ctx.shadowColor   = 'rgba(0, 0, 0, 0.75)';
			
			Map.ctx.drawImage(
											boltStickySprayImageObject,
											- self.offsetX,
											- self.offsetY
										)

			self.previousX = boltPositionX - self.offsetX - 5;
			self.previousY = boltPositionY - self.offsetY - 30;
										
			Map.ctx.restore();
										
			Map.ctx.globalAlpha = 1;

		}
		
		this.computeTrajectory = function()
		{	 
			// remove the effect if the projectile is less than self.removeDistance px to the target
			var distanceToTarget = Math.floor( Math.sqrt( (args.targetCharacter.characterData.character_zone_x - boltPositionX ) * (args.targetCharacter.characterData.character_zone_x - boltPositionX ) + (args.targetCharacter.characterData.character_zone_y - boltPositionY ) * (args.targetCharacter.characterData.character_zone_y - boltPositionY ) ) )
			if ( distanceToTarget < self.removeDistance )
			{
				self.remove();

				args.afterFunction();
			}
	
			dateEnd = new Date();
			endTime = dateEnd.getTime();
			
			self.speed = distanceToTarget *  15 / (self.duration - endTime + startTime);
	
			// angle calculations
			if ( args.targetCharacter.characterData.character_zone_x > boltPositionX )
			{
				self.rotation = Math.atan( (boltPositionY - args.targetCharacter.characterData.character_zone_y) / (boltPositionX - args.targetCharacter.characterData.character_zone_x) );
				//alert('quadran bottom-right + top-right');
			}

			if ( args.targetCharacter.characterData.character_zone_x < boltPositionX && args.targetCharacter.characterData.character_zone_y >= boltPositionY )
			{
				 self.rotation = Math.atan( (boltPositionY - args.targetCharacter.characterData.character_zone_y) / (boltPositionX - args.targetCharacter.characterData.character_zone_x) ) + Math.PI;
				//alert('quadran bottom-left');
			}
			
			if ( args.targetCharacter.characterData.character_zone_x < boltPositionX && args.targetCharacter.characterData.character_zone_y < boltPositionY )
			{
				 self.rotation = Math.atan( (boltPositionY - args.targetCharacter.characterData.character_zone_y) / (boltPositionX - args.targetCharacter.characterData.character_zone_x) ) - Math.PI ;
				//alert('quadran top-left');
			}
																					
			//set step distances
			 dx = Math.floor(this.speed * Math.cos( self.rotation ));
			 dy = Math.floor(this.speed * Math.sin( self.rotation ));
			
			boltPositionX += dx;
			boltPositionY += dy;
			
		}
		
		
		//remove the boltStickySpray effect
		this.remove = function()
		{
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[1][ this.ID ] = null;
			clearInterval( _cycleImagePointer );
			delete args.targetCharacter._internal.spellEffects[ this.characterSpellEffectID ];
		}

		var i = 0;
		
		var _cycleImage = function()
										{
											boltStickySprayImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/bolt/stickySprayBolt/bolt_slow_glow' + ( i++ % 4 ) + '.png';
											
											_cycleImagePointer = setTimeout( _cycleImage, 100 );
										}
		
		var _cycleImagePointer = setTimeout( _cycleImage, 100 );
		
	} //end boltStickySpray

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.boltStickySpray41.js
*/


	spellEffects.boltStickySpray41 = function( args )
	{
		this.ID = spellEffects.layer[1].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		this.alpha = 1;
		this.offsetX = 42;
		this.offsetY = 12;
		this.duration = 500;
		this.speed = 12;
		this.removeDistance = 60;
		this.rotation = 0;
		this.deleteRange = 102;
		this.previousX = args.sourceCharacter.characterData.character_zone_x - this.offsetX - 5;
		this.previousY = args.sourceCharacter.characterData.character_zone_y - this.offsetY - 30;
		
		var dateStart = new Date();
		var startTime = dateStart.getTime();
		var dateEnd = 0;
		var endTime = 0;
		
		var dx = 0;
		var dy = 0;
		
		var self = this;
		
		var boltStickySprayImageObject = new Image();
		boltStickySprayImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/bolt/stickySprayBolt/bolt_slow_glow0.png';
		
		var boltStickySpraySound = soundManager.createSound({
				id: 'boltStickySpray' + ( ++spellEffects.soundIncrementor ),
				url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/elements/fire_woosh.mp3',
				volume: spellEffects.volumeByRange ( Component.bugcraft.currentCharacterObject.characterData.character_zone_x, Component.bugcraft.currentCharacterObject.characterData.character_zone_y, args.targetCharacter.characterData.character_zone_x, args.targetCharacter.characterData.character_zone_y, spellEffects.volumeRangeLong )
		});
		
		this.spellEffectSoundID = args.targetCharacter._internal.soundEffects.push( boltStickySpraySound ) - 1;
		
		soundManager.play( 'boltStickySpray' + spellEffects.soundIncrementor, 
										{
											onfinish: function () 
											{
												delete args.targetCharacter._internal.soundEffects[ self.spellEffectSoundID ];	
											}
										});

		var boltPositionX = args.sourceCharacter.characterData.character_zone_x;
		var boltPositionY = args.sourceCharacter.characterData.character_zone_y;
		
		//
		//draw the bolt effect
		//
		this.draw = function()
		{
		
			self.computeTrajectory();
		
			Map.ctx.globalAlpha = self.alpha;
			
			Map.ctx.save();
			
			Map.ctx.translate( boltPositionX + Map.viewPortX, boltPositionY + Map.viewPortY );
			
			Map.ctx.rotate( self.rotation );
			
			Map.ctx.shadowOffsetX = 9;
			Map.ctx.shadowOffsetY = 9;
			Map.ctx.shadowColor   = 'rgba(0, 0, 0, 0.75)';
			
			Map.ctx.drawImage(
											boltStickySprayImageObject,
											- self.offsetX,
											- self.offsetY
										)

			self.previousX = boltPositionX - self.offsetX - 5;
			self.previousY = boltPositionY - self.offsetY - 30;
										
			Map.ctx.restore();
										
			Map.ctx.globalAlpha = 1;

		}
		
		this.computeTrajectory = function()
		{	 
			// remove the effect if the projectile is less than self.removeDistance px to the target
			var distanceToTarget = Math.floor( Math.sqrt( (args.targetCharacter.characterData.character_zone_x - boltPositionX ) * (args.targetCharacter.characterData.character_zone_x - boltPositionX ) + (args.targetCharacter.characterData.character_zone_y - boltPositionY ) * (args.targetCharacter.characterData.character_zone_y - boltPositionY ) ) )
			if ( distanceToTarget < self.removeDistance )
			{
				self.remove();

				args.afterFunction();
			}
			
			dateEnd = new Date();
			endTime = dateEnd.getTime();
			
			self.speed = distanceToTarget *  15 / (self.duration - endTime + startTime);
	
			// angle calculations
			if ( args.targetCharacter.characterData.character_zone_x > boltPositionX )
			{
				self.rotation = Math.atan( (boltPositionY - args.targetCharacter.characterData.character_zone_y) / (boltPositionX - args.targetCharacter.characterData.character_zone_x) );
				//alert('quadran bottom-right + top-right');
			}

			if ( args.targetCharacter.characterData.character_zone_x < boltPositionX && args.targetCharacter.characterData.character_zone_y >= boltPositionY )
			{
				 self.rotation = Math.atan( (boltPositionY - args.targetCharacter.characterData.character_zone_y) / (boltPositionX - args.targetCharacter.characterData.character_zone_x) ) + Math.PI;
				//alert('quadran bottom-left');
			}
			
			if ( args.targetCharacter.characterData.character_zone_x < boltPositionX && args.targetCharacter.characterData.character_zone_y < boltPositionY )
			{
				 self.rotation = Math.atan( (boltPositionY - args.targetCharacter.characterData.character_zone_y) / (boltPositionX - args.targetCharacter.characterData.character_zone_x) ) - Math.PI ;
				//alert('quadran top-left');
			}
																					
			//set step distances
			 dx = Math.floor(this.speed * Math.cos( self.rotation ));
			 dy = Math.floor(this.speed * Math.sin( self.rotation ));
			
			boltPositionX += dx;
			boltPositionY += dy;
			
		}
		
		
		//remove the boltStickySpray effect
		this.remove = function()
		{
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[1][ this.ID ] = null;
			clearInterval( _cycleImagePointer );
			delete args.targetCharacter._internal.spellEffects[ this.characterSpellEffectID ];
		}

		var i = 0;
		
		var _cycleImage = function()
										{
											boltStickySprayImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/bolt/stickySprayBolt/bolt_slow_glow' + ( i++ % 4 ) + '.png';
											
											_cycleImagePointer = setTimeout( _cycleImage, 100 );
										}
		
		var _cycleImagePointer = setTimeout( _cycleImage, 100 );
		
	} //end boltStickySpray

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.boltStickySprayNonCascade.js
*/


	spellEffects.boltStickySprayNonCascade = function( args )
	{
		this.ID = spellEffects.layer[1].push( this ) - 1;
		this.alpha = 1;
		this.offsetX = 42;
		this.offsetY = 12;
		this.duration = 500;
		this.speed = 12;
		this.removeDistance = 60;
		this.rotation = 0;
		this.deleteRange = 102;
		this.previousX = args.sourceCharacter.characterData.character_zone_x - this.offsetX - 5;
		this.previousY = args.sourceCharacter.characterData.character_zone_y - this.offsetY - 30;
		
		var dateStart = new Date();
		var startTime = dateStart.getTime();
		var dateEnd = 0;
		var endTime = 0;
		
		var dx = 0;
		var dy = 0;
		
		var self = this;
		
		var boltStickySprayImageObject = new Image();
		boltStickySprayImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/bolt/stickySprayBolt/bolt_slow_glow0.png';
		
		var boltStickySpraySound = soundManager.createSound({
				id: 'boltStickySpray' + ( ++soundIncrementor ),
				url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/boltStickySpray.mp3',
				volume: spellEffects.volumeByRange ( Component.bugcraft.currentCharacterObject.characterData.character_zone_x, Component.bugcraft.currentCharacterObject.characterData.character_zone_y, args.targetCharacter.characterData.character_zone_x, args.targetCharacter.characterData.character_zone_y, spellEffects.volumeRangeLong )
		});
		//boltStickySpraySound.play();

		var boltPositionX = args.sourceCharacter.characterData.character_zone_x;
		var boltPositionY = args.sourceCharacter.characterData.character_zone_y;
		
		//
		//draw the bolt effect
		//
		this.draw = function()
		{
		
			self.computeTrajectory();
		
			Map.ctx.globalAlpha = self.alpha;
			
			Map.ctx.save();
			
			Map.ctx.translate( boltPositionX, boltPositionY );
			
			Map.ctx.rotate( self.rotation );
			
			Map.ctx.shadowOffsetX = 9;
			Map.ctx.shadowOffsetY = 9;
			Map.ctx.shadowColor   = 'rgba(0, 0, 0, 0.75)';
			
			Map.ctx.drawImage(
											boltStickySprayImageObject,
											- self.offsetX,
											- self.offsetY
										)

			self.previousX = boltPositionX - self.offsetX - 5;
			self.previousY = boltPositionY - self.offsetY - 30;
										
			Map.ctx.restore();
										
			Map.ctx.globalAlpha = 1;

		}
		
		this.computeTrajectory = function()
		{	 
			// remove the effect if the projectile is less than self.removeDistance px to the target
			var distanceToTarget = Math.floor( Math.sqrt( (args.targetCharacter.characterData.character_zone_x - boltPositionX ) * (args.targetCharacter.characterData.character_zone_x - boltPositionX ) + (args.targetCharacter.characterData.character_zone_y - boltPositionY ) * (args.targetCharacter.characterData.character_zone_y - boltPositionY ) ) )
			if ( distanceToTarget < self.removeDistance )
			{
				self.remove();
			}
			
			dateEnd = new Date();
			endTime = dateEnd.getTime();
			
			self.speed = distanceToTarget *  15 / (self.duration - endTime + startTime);
			
			// angle calculations
			if ( args.targetCharacter.characterData.character_zone_x > boltPositionX )
			{
				self.rotation = Math.atan( (boltPositionY - args.targetCharacter.characterData.character_zone_y) / (boltPositionX - args.targetCharacter.characterData.character_zone_x) );
				//alert('quadran bottom-right + top-right');
			}

			if ( args.targetCharacter.characterData.character_zone_x < boltPositionX && args.targetCharacter.characterData.character_zone_y >= boltPositionY )
			{
				 self.rotation = Math.atan( (boltPositionY - args.targetCharacter.characterData.character_zone_y) / (boltPositionX - args.targetCharacter.characterData.character_zone_x) ) + Math.PI;
				//alert('quadran bottom-left');
			}
			
			if ( args.targetCharacter.characterData.character_zone_x < boltPositionX && args.targetCharacter.characterData.character_zone_y < boltPositionY )
			{
				 self.rotation = Math.atan( (boltPositionY - args.targetCharacter.characterData.character_zone_y) / (boltPositionX - args.targetCharacter.characterData.character_zone_x) ) - Math.PI ;
				//alert('quadran top-left');
			}
																					
			//set step distances
			 dx = Math.floor(this.speed * Math.cos( self.rotation ));
			 dy = Math.floor(this.speed * Math.sin( self.rotation ));
			
			boltPositionX += dx;
			boltPositionY += dy;
			
		}
		
		
		//remove the boltStickySpray effect
		this.remove = function()
		{
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[1][ this.ID ] = null;
			clearInterval( _cycleImagePointer );
		}

		var i = 0;
		
		var _cycleImage = function()
										{
											boltStickySprayImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/bolt/stickySprayBolt/bolt_slow_glow' + ( i++ % 4 ) + '.png';
											
											_cycleImagePointer = setTimeout( _cycleImage, 100 );
										}
		
		var _cycleImagePointer = setTimeout( _cycleImage, 100 );
		
	} //end boltStickySpray

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.bombardierBeetleDeath.js
*/

	
	spellEffects.bombardierBeetleDeath = function( args )
	{
		var self = this,
				_ccd = Component.bugcraft.currentCharacterObject.characterData,
				_deathFrames = {},
				_tc = args.targetCharacter,
				_tcd = _tc.characterData,
				_changeFrameFunctionPointer = null,
				_currentIndex = 1,
				_processingIndex = 1,
				_messImageAlpha = 0,
				_messIncrement = 0.1;
		
		this.ID = spellEffects.layer[0].push( this ) - 1;
		this.characterSpellEffectID = _tc._internal.spellEffects.push( this ) - 1;
		this.offsetX = 150;
		this.offsetY = 150;
		this.rotation = _tcd.character_rotation;
		this.deleteRange = 70;
		this.previousX = _tcd.character_zone_x - this.offsetX;
		this.previousY = _tcd.character_zone_y - this.offsetY;
		
		// initialize
		
		Application.sound.playExclusive({
											url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/bombardierBeetle/explosion.mp3',
											volume: spellEffects.volumeByRangeVoice(
																		_ccd.character_zone_x,
																		_ccd.character_zone_y,
																		_tcd.character_zone_x,
																		_tcd.character_zone_y,
																		spellEffects.volumeRangeLong
																	),
											onFinish: function()
											{
												
											}
										});
		
		var _corpseImage = new Image();
		_corpseImage.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/bombardierBeetle/corpse' + Math.ceil( Math.random() * 3 ) + '.png';
		
		for(var i=1;i<=8;i++)
		{
			_deathFrames[ i ] = { image: new Image(), alpha: 0 };
			_deathFrames[ i ].image.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/bombardierBeetle/' + i + '.png';
		}
		
		//draw the bombardierBeetleDeath spatter
		this.draw = function()
		{
			Map.ctx.save();
			
			Map.ctx.translate( self.previousX + self.offsetX + Map.viewPortX, self.previousY + self.offsetY + Map.viewPortY );
			
			Map.ctx.rotate( ( self.rotation - 90 ) * Math.PI / 180 );
			
			for(var i in _deathFrames)
			{
				var _ia = _deathFrames[ _currentIndex ];
				
				Map.ctx.globalAlpha = _ia.alpha;
				
				Map.ctx.drawImage(
								_ia.image,
								- self.offsetX,
								- self.offsetY
							);
			}
			
			Map.ctx.globalAlpha = _messImageAlpha;
			
			Map.ctx.drawImage( _corpseImage, -self.offsetX, -self.offsetY );
			
			Map.ctx.restore();
			
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the deathDecay
		this.remove = function()
		{
			clearTimeout( _changeFrameFunctionPointer );
			
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[0][ this.ID ] = null;
			
			delete _tc._internal.spellEffects[ this.characterSpellEffectID ];
		}
		
		var _messShow = function()
		{
			_messImageAlpha += _messIncrement;
			
			if( _messImageAlpha >= 1 )
			{
				_messImageAlpha = 1;
				_messIncrement = -0.1;
				
				_changeFrameFunctionPointer = setTimeout( _messShow, 5000 );
				
				return;
			}
			
			if( _messImageAlpha <= 0 )
			{
				_messImageAlpha = 0;
				self.remove();
				
				return;
			}
			
			_changeFrameFunctionPointer = setTimeout( _messShow, 100 );
		}
		
		var _changeFrameFunction = function()
		{
			_deathFrames[ _currentIndex ].alpha += 0.1;
			
			for(var i=_processingIndex - 1;i>0;i--)
			{
				if( i - 1 < 1 )
				{
					continue;
				}
				
				_deathFrames[ Math.min( i - 1, 8 ) ].alpha = Math.max( 0, _deathFrames[ Math.min( i, 8 ) ].alpha - 0.1 );
			}
			
			for(var i=_processingIndex;i<=_processingIndex + 1;i++)
			{
				if( i + 1 > 8 )
				{
					continue;
				}
				
				_deathFrames[ i + 1 ].alpha = Math.max( 0, _deathFrames[ i ].alpha - 0.1 );
			}
			
			if( _deathFrames[ _currentIndex ].alpha >= 1 )
			{
				_deathFrames[ _currentIndex ].alpha = 1;
				
				if( _currentIndex < 8 )
				{
					_currentIndex++;
				}
				
				if( _currentIndex == 4 )
				{
					_messShow();
				}
				
				_processingIndex++;
			}
			
			if( _currentIndex == 8 && _deathFrames[ _currentIndex ].alpha <= 0 )
			{
				return;
			}
			
			_changeFrameFunctionPointer = setTimeout( _changeFrameFunction, 65 );
		}
		
		_changeFrameFunction();
		
	} //end bombardierBeetleDeath

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.buffAwareness.js
*/


	spellEffects.buffAwareness = function( args )
	{
		this.ID = spellEffects.layer[0].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		this.alpha = 1;
		this.offsetX = 60;
		this.offsetY = 60;
		this.rotation = Math.random() * (Math.PI * 2);
		this.deleteRange = 120;
		this.previousX = args.targetCharacter.characterData.character_zone_x - this.offsetX;
		this.previousY = args.targetCharacter.characterData.character_zone_y - this.offsetY;
		this.duration = 2500 - Component.bugcraft.latency;
		
		var self = this;
		
		var buffAwarenessImageObject = new Image();
		buffAwarenessImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/buffs/awareness/awareness' + args.component + '.png';
		
		//draw the buffAwareness
		this.draw = function()
		{
			Map.ctx.globalAlpha = self.alpha;
			
			Map.ctx.save();
			
			Map.ctx.translate( args.targetCharacter.characterData.character_zone_x + Map.viewPortX, args.targetCharacter.characterData.character_zone_y + Map.viewPortY );
			
			Map.ctx.rotate( self.rotation );
			
			Map.ctx.drawImage(
											buffAwarenessImageObject,
											- self.offsetX,
											- self.offsetY
										);
	
			self.previousX = args.targetCharacter.characterData.character_zone_x - self.offsetX;
			self.previousY = args.targetCharacter.characterData.character_zone_y - self.offsetY;
	
			Map.ctx.restore();
			
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the buffAwareness
		this.remove = function()
		{
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[0][ this.ID ] = null;
			delete args.targetCharacter._internal.spellEffects[ this.characterSpellEffectID ];
		}
		
		
		
		switch( args.component )
		{
			case 0:	
				self.alpha = 0;
				
				var buffAwarenessSound = soundManager.createSound({
						id: 'buffAwareness' + ( ++spellEffects.soundIncrementor ),
						url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/buffs/cloak of magic - spell craft.mp3',
						volume: spellEffects.volumeByRange ( Component.bugcraft.currentCharacterObject.characterData.character_zone_x, Component.bugcraft.currentCharacterObject.characterData.character_zone_y, args.targetCharacter.characterData.character_zone_x, args.targetCharacter.characterData.character_zone_y, spellEffects.volumeRangeLong )
				});
				
				this.spellEffectSoundID = args.targetCharacter._internal.soundEffects.push( buffAwarenessSound ) - 1;
				
				soundManager.play( 'buffAwareness' + spellEffects.soundIncrementor, 
												{
													onfinish: function () 
													{
														delete args.targetCharacter._internal.soundEffects[ self.spellEffectSoundID ];	
													}
												});
				
				var _animateFunction =	function()
																	{
																		if( self.alpha < 1 )
																		{
																			self.alpha += 0.2;
																		}
																	
																		self.rotation -= Math.PI / 32;

																		_animateFunctionPointer = setTimeout( _animateFunction, 50 );
																	}			
			break;
			case 1:
				self.alpha = 0;
				
				self.offsetX = 50;
				self.offsetY = 50;
				
				var _animateFunction =	function()
																	{
																		if( self.alpha < 1 )
																		{
																			self.alpha += 0.2;
																		}
																		
																		self.rotation += Math.PI / 24;

																		_animateFunctionPointer = setTimeout( _animateFunction, 50 );
																	}						
			break;
		}
		
		var _animateFunctionPointer = setTimeout( _animateFunction, 50 );
		
		setTimeout( function() 
								{ 
									clearTimeout( _animateFunctionPointer );
									
									var _t = setInterval( function()
																		{
																			self.alpha -= 0.1;
																			
																			if( self.alpha > 0 )
																			{
																				return;
																			}
																			
																			self.remove();
																			
																			clearInterval( _t );
																			
																		}, 40 );
								}, self.duration );
	} //end spinning aura

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.buffAwarenessComplete.js
*/


	spellEffects.buffAwarenessComplete = function( args )
	{
		this.ID = spellEffects.layer[1].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		
		this.draw = function()
		{
			
		}
		
		var effect0 = new spellEffects.buffAwareness({ 			
				sourceCharacter: args.sourceCharacter,														
				targetCharacter: args.targetCharacter,
				component: 0
		});
		
		var effect1 = new spellEffects.buffAwareness({ 																						
				sourceCharacter: args.sourceCharacter,
				targetCharacter: args.targetCharacter,
				component: 1
		});
		
		this.remove = function()
		{
			effect0.remove();
			effect1.remove();
			
			spellEffects.layer[1][ self.ID ] = null;
				
			delete args.targetCharacter._internal.spellEffects[ self.characterSpellEffectID ];
		}
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.buffBloodDrop.js
*/


	spellEffects.buffBloodDrop = function( args )
	{
		this.ID = spellEffects.layer[1].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		this.alpha = 1;
		this.offsetX = 25;
		this.offsetY = 25;
		this.rotation = Math.random() * (Math.PI * 2);
		this.deleteRange = 50;
		this.previousX = args.targetCharacter.characterData.character_zone_x - this.offsetX;
		this.previousY = args.targetCharacter.characterData.character_zone_y - this.offsetY;
		
		var self = this;
		
		var buffBloodDropImageObject = new Image();
		buffBloodDropImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/buffs/bloodDrop/blood1.png';
		
		var buffBloodDropSound = soundManager.createSound({
				id: 'buffBloodDrop' + ( ++spellEffects.soundIncrementor ),
				url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/water/waterDrop2.mp3', 
				volume: spellEffects.volumeByRange ( Component.bugcraft.currentCharacterObject.characterData.character_zone_x, Component.bugcraft.currentCharacterObject.characterData.character_zone_y, args.targetCharacter.characterData.character_zone_x, args.targetCharacter.characterData.character_zone_y, spellEffects.volumeRangeLong )
		});
		
		this.spellEffectSoundID = args.targetCharacter._internal.soundEffects.push( buffBloodDropSound ) - 1;
		
		soundManager.play( 'buffBloodDrop' + spellEffects.soundIncrementor, 
										{
											onfinish: function () 
											{
												delete args.targetCharacter._internal.soundEffects[ self.spellEffectSoundID ];	
											}
										});
		
		//draw the buffBloodDrop
		this.draw = function()
		{
			Map.ctx.globalAlpha = self.alpha;
			
			Map.ctx.save();
			
			Map.ctx.drawImage(
											buffBloodDropImageObject,
											args.targetCharacter.characterData.character_zone_x + Map.viewPortX - self.offsetX,
											args.targetCharacter.characterData.character_zone_y + Map.viewPortY - self.offsetY
										);
										
			Map.ctx.shadowOffsetX = 5;
			Map.ctx.shadowOffsetY = 5;
			Map.ctx.shadowColor   = 'rgba(0, 0, 0, 0.75)';
		
			Map.ctx.restore();
		
			self.previousX = args.targetCharacter.characterData.character_zone_x - self.offsetX;
			self.previousY = args.targetCharacter.characterData.character_zone_y - self.offsetY;
		
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the buffBloodDrop		
		this.remove = function()
		{
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[1][ this.ID ] = null;
			clearTimeout( _animateFunctionPointer );
			delete args.targetCharacter._internal.spellEffects[ this.characterSpellEffectID ];
		}
		
		var i = 1;
		
		var _animateFunction = function()
												{
													buffBloodDropImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/heal/healingOil/healing oil' + i++ + '.png';
													
													if( i < 9 )
													{
														_animateFunctionPointer = setTimeout( _animateFunction, 50 );
														return;
													}
													
													var _t = setInterval( function()
																		{
																			self.alpha -= 0.1;
																			
																			if( self.alpha > 0 )
																			{
																				return;
																			}
																			
																			self.remove();
																			
																			clearInterval( _t );
																			
																		}, 60 );
											
												}							
		
		var _animateFunctionPointer = setTimeout( _animateFunction, 50 );
							
	} //end buffBloodDrop

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.buffBloodDrop4.js
*/


	spellEffects.buffBloodDrop4 = function( args )
	{
		this.ID = spellEffects.layer[1].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		this.alpha = 1;
		this.offsetX = 25;
		this.offsetY = 25;
		this.rotation = Math.random() * (Math.PI * 2);
		this.deleteRange = 50;
		this.previousX = args.targetCharacter.characterData.character_zone_x - this.offsetX;
		this.previousY = args.targetCharacter.characterData.character_zone_y - this.offsetY;
		
		var self = this;
		
		var buffBloodDropImageObject = new Image();
		buffBloodDropImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/buffs/bloodDrop/blood1.png';
		
		var buffBloodDropSound = soundManager.createSound({
				id: 'buffBloodDrop' + ( ++spellEffects.soundIncrementor ),
				url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/buffs/orchestral-scary-impact.mp3',
				volume: spellEffects.volumeByRange ( Component.bugcraft.currentCharacterObject.characterData.character_zone_x, Component.bugcraft.currentCharacterObject.characterData.character_zone_y, args.targetCharacter.characterData.character_zone_x, args.targetCharacter.characterData.character_zone_y, spellEffects.volumeRangeLong )
		});
		
		this.spellEffectSoundID = args.targetCharacter._internal.soundEffects.push( buffBloodDropSound ) - 1;
		
		soundManager.play( 'buffBloodDrop' + spellEffects.soundIncrementor, 
										{
											onfinish: function () 
											{
												delete args.targetCharacter._internal.soundEffects[ self.spellEffectSoundID ];	
											}
										});
		
		//draw the buffBloodDrop
		this.draw = function()
		{
			Map.ctx.globalAlpha = self.alpha;
			
			Map.ctx.save();
			
			Map.ctx.drawImage(
											buffBloodDropImageObject,
											args.targetCharacter.characterData.character_zone_x + Map.viewPortX - self.offsetX,
											args.targetCharacter.characterData.character_zone_y + Map.viewPortY - self.offsetY
										);
										
			Map.ctx.shadowOffsetX = 5;
			Map.ctx.shadowOffsetY = 5;
			Map.ctx.shadowColor   = 'rgba(0, 0, 0, 0.75)';
		
			Map.ctx.restore();
		
			self.previousX = args.targetCharacter.characterData.character_zone_x - self.offsetX;
			self.previousY = args.targetCharacter.characterData.character_zone_y - self.offsetY;
		
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the buffBloodDrop		
		this.remove = function()
		{
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[1][ this.ID ] = null;
			clearTimeout( _animateFunctionPointer );
			delete args.targetCharacter._internal.spellEffects[ this.characterSpellEffectID ];
		}
		
		var i = 1;
		
		var _animateFunction = function()
												{
													buffBloodDropImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/heal/healingOil/healing oil' + i++ + '.png';
													
													if( i < 9 )
													{
														_animateFunctionPointer = setTimeout( _animateFunction, 50 );
														return;
													}
													
													var _t = setInterval( function()
																		{
																			self.alpha -= 0.1;
																			
																			if( self.alpha > 0 )
																			{
																				return;
																			}
																			
																			self.remove();
																			
																			clearInterval( _t );
																			
																		}, 60 );
											
												}							
		
		var _animateFunctionPointer = setTimeout( _animateFunction, 50 );
							
	} //end buffBloodDrop

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.buffCleanse.js
*/


	spellEffects.buffCleanse = function( args )
	{
		this.ID = spellEffects.layer[1].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		this.alpha = 1;
		this.offsetX = 30;
		this.offsetY = 30;
		this.rotation = Math.random() * (Math.PI * 2);
		this.deleteRange = 60;
		this.previousX = args.targetCharacter.characterData.character_zone_x - this.offsetX;
		this.previousY = args.targetCharacter.characterData.character_zone_y - this.offsetY;
		this.duration = 5000 - Component.bugcraft.latency;
		
		var self = this;
		
		var buffCleanseImageObject = new Image();
		buffCleanseImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/buffs/cleanse/cleanse0.png';
		
		var buffCleanseSound = soundManager.createSound({
				id: 'buffCleanse' + ( ++spellEffects.soundIncrementor ),
				url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/buffs/Science Fiction - Fiction Magical Swell Spell Digital Beeps 01.mp3',
				volume: spellEffects.volumeByRange ( Component.bugcraft.currentCharacterObject.characterData.character_zone_x, Component.bugcraft.currentCharacterObject.characterData.character_zone_y, args.targetCharacter.characterData.character_zone_x, args.targetCharacter.characterData.character_zone_y, spellEffects.volumeRangeLong )
		});
		
		this.spellEffectSoundID = args.targetCharacter._internal.soundEffects.push( buffCleanseSound ) - 1;
		
		soundManager.play( 'buffCleanse' + spellEffects.soundIncrementor, 
										{
											onfinish: function () 
											{
												delete args.targetCharacter._internal.soundEffects[ self.spellEffectSoundID ];	
											}
										});
		
		//draw the buffCleanse
		this.draw = function()
		{
			Map.ctx.globalAlpha = self.alpha;
			
			Map.ctx.save();
			
			Map.ctx.translate( args.targetCharacter.characterData.character_zone_x + Map.viewPortX, args.targetCharacter.characterData.character_zone_y + Map.viewPortY );
			
			Map.ctx.rotate( self.rotation );
			
			Map.ctx.drawImage(
											buffCleanseImageObject,
											- self.offsetX,
											- self.offsetY
										);
	
			self.previousX = args.targetCharacter.characterData.character_zone_x - self.offsetX;
			self.previousY = args.targetCharacter.characterData.character_zone_y - self.offsetY;
	
			Map.ctx.restore();
			
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the buffCleanse
		this.remove = function()
		{
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[1][ this.ID ] = null;
			clearTimeout( _animateFunctionPointer );
			delete args.targetCharacter._internal.spellEffects[ this.characterSpellEffectID ];
		}

		var _animateFunction =	function()
															{
																if( self.alpha < 1 )
																{
																	self.alpha += 0.2;
																}
															
																self.rotation += Math.PI / 16;
																
																if ( self.rotation > ( Math.PI * 2 ) )
																{
																	clearTimeout( _animateFunctionPointer );
																		
																	self.rotation = 0;
																	
																	setTimeout( function()
																						{
																							buffCleanseImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/buffs/cleanse/cleanse1.png';
																							
																							setTimeout( function()
																												{
																													buffCleanseImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/buffs/cleanse/cleanse2.png';
																													
																													setTimeout( function()
																																		{
																																			buffCleanseImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/buffs/cleanse/cleanse3.png';

																																			var _t = setInterval( function()
																																								{
																																									self.alpha -= 0.1;
																																									
																																									if( self.alpha > 0 )
																																									{
																																										return;
																																									}
																																									
																																									self.remove();
																																									
																																									clearInterval( _t );
																																									
																																								}, 20 );
																																		}, 75 );
																												}, 75 );
																						}, 75 );
																}

																_animateFunctionPointer = setTimeout( _animateFunction, 30 );
															}	
															
		var _animateFunctionPointer = setTimeout( _animateFunction, 1 );
			
	} //end buffCleanse

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.buffCloseShell.js
*/


	spellEffects.buffCloseShell = function( args )
	{
		this.ID = spellEffects.layer[1].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		this.alpha = 1;
		this.offsetX = 25;
		this.offsetY = 30;
		this.rotation = Math.random() * (Math.PI * 2);
		this.deleteRange = 60;
		this.previousX = args.targetCharacter.characterData.character_zone_x - this.offsetX;
		this.previousY = args.targetCharacter.characterData.character_zone_y - this.offsetY;
		
		var self = this;
		
		var buffCloseShellImageObject = new Image();
		buffCloseShellImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/buffs/closeShell/close_shell0.png';
		
		var buffCloseShellSound = soundManager.createSound({
				id: 'buffCloseShell' + ( ++spellEffects.soundIncrementor ),
				url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/buffs/woosh fast.mp3', 
				volume: spellEffects.volumeByRange ( Component.bugcraft.currentCharacterObject.characterData.character_zone_x, Component.bugcraft.currentCharacterObject.characterData.character_zone_y, args.targetCharacter.characterData.character_zone_x, args.targetCharacter.characterData.character_zone_y, spellEffects.volumeRangeLong )
		});
		
		this.spellEffectSoundID = args.targetCharacter._internal.soundEffects.push( buffCloseShellSound ) - 1;
		
		soundManager.play( 'buffCloseShell' + spellEffects.soundIncrementor, 
										{
											onfinish: function () 
											{
												delete args.targetCharacter._internal.soundEffects[ self.spellEffectSoundID ];	
											}
										});
		
		//draw the buffCloseShell
		this.draw = function()
		{
			Map.ctx.globalAlpha = self.alpha;
			
			Map.ctx.drawImage(
											buffCloseShellImageObject,
											args.targetCharacter.characterData.character_zone_x + Map.viewPortX - self.offsetX,
											args.targetCharacter.characterData.character_zone_y + Map.viewPortY - self.offsetY
										);
							
			self.previousX = args.targetCharacter.characterData.character_zone_x - self.offsetX;
			self.previousY = args.targetCharacter.characterData.character_zone_y - self.offsetY;
		
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the buffCloseShell
		this.remove = function()
		{
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[1][ this.ID ] = null;
			clearTimeout( _animateFunctionPointer );
			delete args.targetCharacter._internal.spellEffects[ this.characterSpellEffectID ];
		}
		
		var i = 0;
		
		var _animateFunction = function()
												{
													buffCloseShellImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/buffs/closeShell/close_shell' + i++ + '.png';
													
													if( i < 4 )
													{
														_animateFunctionPointer = setTimeout( _animateFunction, 50 );
														return;
													}
												
													var _t = setInterval( function()
																					{
																						self.alpha -= 0.1;
																						
																						if( self.alpha > 0 )
																						{
																							return;
																						}
																						
																						self.remove();
																						
																						clearInterval( _t );
																						
																					}, 60 );
																					
												}
												
		var _animateFunctionPointer = setTimeout( _animateFunction, 50 );
							
	} //end waxShell

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.buffColdBlood.js
*/


	spellEffects.buffColdBlood = function( args )
	{
		this.ID = spellEffects.layer[1].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		this.alpha = 1;
		this.duration = 2500;
		this.offsetX = 30;
		this.offsetY = 30;
		this.rotation = 0;
		this.stepDistance = 3;
		this.deleteRange = 60;
		this.previousX = args.targetCharacter.characterData.character_zone_x - this.offsetX;
		this.previousY = args.targetCharacter.characterData.character_zone_y - this.offsetY;
		
		var self = this;
		
		var yMovement = 0;
		
		var buffColdBloodImageObject = new Image();
		buffColdBloodImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/buffs/coldBlood/cold_blood' + args.component + '.png';
		
		//draw the the buffColdBlood
		this.draw = function()
		{
			Map.ctx.globalAlpha = self.alpha;
			
			Map.ctx.save();
			
			Map.ctx.translate( args.targetCharacter.characterData.character_zone_x + Map.viewPortX, args.targetCharacter.characterData.character_zone_y + Map.viewPortY );
			
			Map.ctx.rotate( self.rotation );
			
			Map.ctx.drawImage(
							buffColdBloodImageObject,
							- self.offsetX,
							- self.offsetY + yMovement
						);
										
			self.previousX = args.targetCharacter.characterData.character_zone_x - self.offsetX;
			self.previousY = args.targetCharacter.characterData.character_zone_y - self.offsetY + yMovement;
										
			Map.ctx.restore();
			
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the buffColdBlood
		this.remove = function()
		{
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[1][ this.ID ] = null;
			delete args.targetCharacter._internal.spellEffects[ this.characterSpellEffectID ];
		}
			
		switch( args.component )
		{
			case 0:
				var buffColdBloodSound = soundManager.createSound({
						id: 'buffColdBlood' + ( ++spellEffects.soundIncrementor ),
						url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/buffs/orchestral-scary-impact.mp3',
						volume: spellEffects.volumeByRange ( Component.bugcraft.currentCharacterObject.characterData.character_zone_x, Component.bugcraft.currentCharacterObject.characterData.character_zone_y, args.targetCharacter.characterData.character_zone_x, args.targetCharacter.characterData.character_zone_y, spellEffects.volumeRangeLong )
				});
				
				this.spellEffectSoundID = args.targetCharacter._internal.soundEffects.push( buffColdBloodSound ) - 1;
				
				soundManager.play( 'buffColdBlood' + spellEffects.soundIncrementor, 
										{
											onfinish: function () 
											{
												delete args.targetCharacter._internal.soundEffects[ self.spellEffectSoundID ];	
											}
										});
				
				self.alpha = 0;
				
				var _animateFunction =	function()
																	{
																		if( self.alpha < 1 )
																		{
																			self.alpha += 0.2;
																		}
																		
																		self.rotation += Math.PI / 32;

																		_animateFunctionPointer = setTimeout( _animateFunction, 50 );
																	}						
			break;
			case 1:
				
				var _animateFunction =	function()
													{
														
														yMovement -= self.stepDistance;
														
														if( yMovement < - 50 )
														{
															yMovement = - 50;
															
															self.alpha -= 0.1;
														}
														
														if( self.alpha < 0 )
														{
															self.alpha = 0;
														
															return;
														}
														
														_animateFunctionPointer = setTimeout( _animateFunction, 40 );
													}
											
			break;
		}
		
		var _animateFunctionPointer = setTimeout( _animateFunction, 1 );
		
		setTimeout( function() 
								{ 
									clearTimeout( _animateFunctionPointer );
									
									var _timeout = setInterval( function()
																		{
																			self.alpha -= 0.1;
																			
																			if( self.alpha > 0 )
																			{
																				return;
																			}
																			
																			self.remove();
																			
																			clearInterval( _timeout );
																			
																		}, 100 );
								}, self.duration );
		
	} //end the buffColdBlood

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.buffColdBloodComplete.js
*/


	spellEffects.buffColdBloodComplete = function( args )
	{
		this.ID = spellEffects.layer[1].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		
		this.draw = function()
		{
			
		}
		
		var effect0 = new spellEffects.buffColdBlood({ 			
				sourceCharacter: args.sourceCharacter,														
				targetCharacter: args.targetCharacter,
				component: 0
		});
		
		var effect1 = new spellEffects.buffColdBlood({ 																						
				sourceCharacter: args.sourceCharacter,
				targetCharacter: args.targetCharacter,
				component: 1
		});
		
		this.remove = function()
		{
			effect0.remove();
			effect1.remove();
			
			spellEffects.layer[1][ self.ID ] = null;
				
			delete args.targetCharacter._internal.spellEffects[ self.characterSpellEffectID ];
		}
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.buffCunning.js
*/


	spellEffects.buffCunning = function( args )
	{
		this.ID = spellEffects.layer[1].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		this.alpha = 1;
		this.duration = 4000;
		this.offsetX = 30;
		this.offsetY = 30;
		this.rotation = 0;
		this.deleteRange = 60;
		this.previousX = args.targetCharacter.characterData.character_zone_x - this.offsetX;
		this.previousY = args.targetCharacter.characterData.character_zone_y - this.offsetY;
		
		var self = this;
		
		var effectPositionOffset = 0;
		
		var buffCunningImageObject = new Image();
		buffCunningImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/buffs/cunning/cunning' + args.component + '.png';
		
		//draw the the buffCunning
		this.draw = function()
		{
			Map.ctx.globalAlpha = self.alpha;
			
			Map.ctx.save();
			
			Map.ctx.translate( args.targetCharacter.characterData.character_zone_x + Map.viewPortX, args.targetCharacter.characterData.character_zone_y + Map.viewPortY + effectPositionOffset );
			
			Map.ctx.rotate( self.rotation );
			
			Map.ctx.drawImage(
							buffCunningImageObject,
							- self.offsetX,
							- self.offsetY
						);
										
			self.previousX = args.targetCharacter.characterData.character_zone_x - self.offsetX;
			self.previousY = args.targetCharacter.characterData.character_zone_y - self.offsetY + effectPositionOffset;
										
			Map.ctx.restore();
			
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the buffCunning
		this.remove = function()
		{
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[1][ this.ID ] = null;
			delete args.targetCharacter._internal.spellEffects[ this.characterSpellEffectID ];
		}
			
		switch( args.component )
		{
			case 0:
				effectPositionOffset = -20;
				
				var buffCunningSound = soundManager.createSound({
						id: 'buffCunning' + ( ++spellEffects.soundIncrementor ),
						url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/buffs/woosh short.mp3',
						volume: spellEffects.volumeByRange ( Component.bugcraft.currentCharacterObject.characterData.character_zone_x, Component.bugcraft.currentCharacterObject.characterData.character_zone_y, args.targetCharacter.characterData.character_zone_x, args.targetCharacter.characterData.character_zone_y, spellEffects.volumeRangeLong )
				});
				
				this.spellEffectSoundID = args.targetCharacter._internal.soundEffects.push( buffCunningSound ) - 1;
				
				soundManager.play( 'buffCunning' + spellEffects.soundIncrementor, 
												{
													onfinish: function () 
													{
														delete args.targetCharacter._internal.soundEffects[ self.spellEffectSoundID ];	
													}
												});

				self.alpha = 0;
				
				var opacityVariation = Math.PI / 2;
				
				var _animateFunction =	function()
																	{
																		self.alpha = Math.abs( Math.sin( opacityVariation ) );

																		opacityVariation += Math.PI / 32;
																		
																		if (self.alpha < 0.5 )
																		{
																			self.alpha = 0.5;
																		}
																		
																		self.rotation -= Math.PI / 32;

																		_animateFunctionPointer = setTimeout( _animateFunction, 50 );
																	}						
			break;
			case 1:
				effectPositionOffset = -20;
			
				self.alpha = 0;

				var opacityVariation = 0;
				
				var _animateFunction =  function()
														{
															self.alpha = Math.abs( Math.sin( opacityVariation ) );

															opacityVariation += Math.PI / 32;
															
															if (self.alpha < 0.5 )
															{
																self.alpha = 0.5;
															}
															
															_animateFunctionPointer = setTimeout( _animateFunction, 50 );
														}							

			break;
		}
		
		var _animateFunctionPointer = setTimeout( _animateFunction, 1 );
		
		setTimeout( function() 
								{ 
									clearTimeout( _animateFunctionPointer );
									
									var _timeout = setInterval( function()
																		{
																			self.alpha -= 0.1;
																			
																			if( self.alpha > 0 )
																			{
																				return;
																			}
																			
																			self.remove();
																			
																			clearInterval( _timeout );
																			
																		}, 100 );
								}, self.duration );
		
	} //end the buffCunning

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.buffCunningComplete.js
*/


	spellEffects.buffCunningComplete = function( args )
	{
		this.ID = spellEffects.layer[1].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		
		this.draw = function()
		{
			
		}
		
		var effect0 = new spellEffects.buffCunning({ 			
				sourceCharacter: args.sourceCharacter,														
				targetCharacter: args.targetCharacter,
				component: 0
		});
		
		var effect1 = new spellEffects.buffCunning({ 																						
				sourceCharacter: args.sourceCharacter,
				targetCharacter: args.targetCharacter,
				component: 1
		});
		
		this.remove = function()
		{
			effect0.remove();
			effect1.remove();
			
			spellEffects.layer[1][ self.ID ] = null;
				
			delete args.targetCharacter._internal.spellEffects[ self.characterSpellEffectID ];
		}
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.buffEnrage.js
*/


	spellEffects.buffEnrage = function( args )
	{
		this.ID = spellEffects.layer[1].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		this.alpha = 1;
		this.offsetX = 30;
		this.offsetY = 50;
		this.rotation = Math.random() * (Math.PI * 2);
		this.deleteRange = 60;
		this.previousX = args.targetCharacter.characterData.character_zone_x - this.offsetX;
		this.previousY = args.targetCharacter.characterData.character_zone_y - this.offsetY;
		this.duration = 15000 - Component.bugcraft.latency;
		
		var self = this;
		
		var buffEnrageImageObject = new Image();
		buffEnrageImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/enrage/enrage03.png';
		
		var buffEnrageSound = soundManager.createSound({
				id: 'buffEnrage' + ( ++spellEffects.soundIncrementor ),
				url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/enrage/enrage' + Math.floor( Math.random() * 2 ) + '.mp3',
				volume: spellEffects.volumeByRange ( Component.bugcraft.currentCharacterObject.characterData.character_zone_x, Component.bugcraft.currentCharacterObject.characterData.character_zone_y, args.targetCharacter.characterData.character_zone_x, args.targetCharacter.characterData.character_zone_y, spellEffects.volumeRangeLong )
		});
		
		this.spellEffectSoundID = args.targetCharacter._internal.soundEffects.push( buffEnrageSound ) - 1;
		
		soundManager.play( 'buffEnrage' + spellEffects.soundIncrementor, 
										{
											onfinish: function () 
											{
												delete args.targetCharacter._internal.soundEffects[ self.spellEffectSoundID ];	
											}
										});
		
		//
		//draw the buffEnrage effect
		//
		this.draw = function()
		{
			Map.ctx.globalAlpha = self.alpha;
			
			Map.ctx.drawImage(
											buffEnrageImageObject,
											args.targetCharacter.characterData.character_zone_x + Map.viewPortX - self.offsetX,
											args.targetCharacter.characterData.character_zone_y + Map.viewPortY - self.offsetY
										);
										
			self.previousX = args.targetCharacter.characterData.character_zone_x - self.offsetX;
			self.previousY = args.targetCharacter.characterData.character_zone_y - self.offsetY;
		
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the buffEnrage effect
		this.remove = function()
		{
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[1][ this.ID ] = null;
			delete args.targetCharacter._internal.spellEffects[ this.characterSpellEffectID ];
		}
		
		var opacityVariation = 0;
		
		var _animateFunction =  function()
												{
													self.alpha = Math.abs( Math.sin( opacityVariation ) );

													opacityVariation += Math.PI / 32;
													
													if (self.alpha < 0.5 )
													{
														self.alpha = 0.5;
													}
													
													_animateFunctionPointer = setTimeout( _animateFunction, 50 );
												}							
		
		var _animateFunctionPointer = setTimeout( _animateFunction, 50 );
		
		setTimeout( function() 
								{ 
									
									clearTimeout( _animateFunctionPointer );
								
									var _timeout = setInterval( function()
																		{
																			self.alpha -= 0.1;
																			
																			if( self.alpha > 0 )
																			{
																				return;
																			}
																			
																			self.remove();
																			
																			clearInterval( _timeout );
																			
																		}, 100 );
								}, self.duration );
		
	} //end buffEnrage shockwave

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.buffEnrage114.js
*/


	spellEffects.buffEnrage114 = function( args )
	{
		this.ID = spellEffects.layer[1].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		this.alpha = 1;
		this.offsetX = 30;
		this.offsetY = 50;
		this.rotation = Math.random() * (Math.PI * 2);
		this.deleteRange = 60;
		this.previousX = args.targetCharacter.characterData.character_zone_x - this.offsetX;
		this.previousY = args.targetCharacter.characterData.character_zone_y - this.offsetY;
		this.duration = 5000 - Component.bugcraft.latency;
		
		var self = this;
		
		var buffEnrageImageObject = new Image();
		buffEnrageImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/enrage/enrage03.png';
		
		var buffEnrageSound = soundManager.createSound({
				id: 'buffEnrage' + ( ++spellEffects.soundIncrementor ),
				url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/elements/fire_woosh.mp3',
				volume: spellEffects.volumeByRange ( Component.bugcraft.currentCharacterObject.characterData.character_zone_x, Component.bugcraft.currentCharacterObject.characterData.character_zone_y, args.targetCharacter.characterData.character_zone_x, args.targetCharacter.characterData.character_zone_y, spellEffects.volumeRangeLong )
		});
		
		this.spellEffectSoundID = args.targetCharacter._internal.soundEffects.push( buffEnrageSound ) - 1;
		
		soundManager.play( 'buffEnrage' + spellEffects.soundIncrementor, 
										{
											onfinish: function () 
											{
												delete args.targetCharacter._internal.soundEffects[ self.spellEffectSoundID ];	
											}
										});
		
		//
		//draw the buffEnrage effect
		//
		this.draw = function()
		{
			Map.ctx.globalAlpha = self.alpha;
			
			Map.ctx.drawImage(
											buffEnrageImageObject,
											args.targetCharacter.characterData.character_zone_x + Map.viewPortX - self.offsetX,
											args.targetCharacter.characterData.character_zone_y + Map.viewPortY - self.offsetY
										);
										
			self.previousX = args.targetCharacter.characterData.character_zone_x - self.offsetX;
			self.previousY = args.targetCharacter.characterData.character_zone_y - self.offsetY;
		
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the buffEnrage effect
		this.remove = function()
		{
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[1][ this.ID ] = null;
			delete args.targetCharacter._internal.spellEffects[ this.characterSpellEffectID ];
		}
		
		var opacityVariation = 0;
		
		var _animateFunction =  function()
												{
													self.alpha = Math.abs( Math.sin( opacityVariation ) );

													opacityVariation += Math.PI / 32;
													
													if (self.alpha < 0.5 )
													{
														self.alpha = 0.5;
													}
													
													_animateFunctionPointer = setTimeout( _animateFunction, 50 );
												}							
		
		var _animateFunctionPointer = setTimeout( _animateFunction, 50 );
		
		setTimeout( function() 
								{ 
									
									clearTimeout( _animateFunctionPointer );
								
									var _timeout = setInterval( function()
																		{
																			self.alpha -= 0.1;
																			
																			if( self.alpha > 0 )
																			{
																				return;
																			}
																			
																			self.remove();
																			
																			clearInterval( _timeout );
																			
																		}, 100 );
								}, self.duration );
		
	} //end buffEnrage shockwave

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.buffFortitude.js
*/


	spellEffects.buffFortitude = function( args )
	{
		this.ID = spellEffects.layer[1].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		this.alpha = 1;
		this.duration = 2000;
		this.offsetX = 30;
		this.offsetY = 30;
		this.rotation = 0;
		this.stepDistance = 2;
		this.maximumDistance = -40;
		this.deleteRange = 60;
		this.previousX = args.targetCharacter.characterData.character_zone_x - this.offsetX;
		this.previousY = args.targetCharacter.characterData.character_zone_y - this.offsetY;
		
		var self = this;
		
		var yMovement = 0;
		
		var buffFortitudeImageObject = new Image();
		buffFortitudeImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/buffs/fortitude/fortitude' + args.component + '.png';
		
		//draw the the buffFortitude
		this.draw = function()
		{
			Map.ctx.globalAlpha = self.alpha;
			
			Map.ctx.save();
			
			Map.ctx.translate( args.targetCharacter.characterData.character_zone_x + Map.viewPortX, args.targetCharacter.characterData.character_zone_y + Map.viewPortY );
			
			Map.ctx.rotate( self.rotation );
			
			Map.ctx.drawImage(
							buffFortitudeImageObject,
							- self.offsetX,
							- self.offsetY + yMovement
						);
										
			self.previousX = args.targetCharacter.characterData.character_zone_x - self.offsetX;
			self.previousY = args.targetCharacter.characterData.character_zone_y - self.offsetY + yMovement;
										
			Map.ctx.restore();
			
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the buffFortitude
		this.remove = function()
		{
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[1][ this.ID ] = null;
			delete args.targetCharacter._internal.spellEffects[ this.characterSpellEffectID ];
		}
			
		switch( args.component )
		{
			case 0:
			
				var buffFortitudeSound = soundManager.createSound({
						id: 'buffFortitude' + ( ++spellEffects.soundIncrementor ),
						url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/buffs/orchestral-scary-impact+ting-sha-bell.mp3',
						volume: spellEffects.volumeByRange ( Component.bugcraft.currentCharacterObject.characterData.character_zone_x, Component.bugcraft.currentCharacterObject.characterData.character_zone_y, args.targetCharacter.characterData.character_zone_x, args.targetCharacter.characterData.character_zone_y, spellEffects.volumeRangeLong )
				});
				
				this.spellEffectSoundID = args.targetCharacter._internal.soundEffects.push( buffFortitudeSound ) - 1;
			
				soundManager.play( 'buffFortitude' + spellEffects.soundIncrementor, 
												{
													onfinish: function () 
													{
														delete args.targetCharacter._internal.soundEffects[ self.spellEffectSoundID ];	
													}
												});
		
				self.alpha = 0;
				var _animateFunction =	function()
																	{
																		if( self.alpha < 1 )
																		{
																			self.alpha += 0.2;
																		}
																		
																		self.rotation += Math.PI / 32;

																		_animateFunctionPointer = setTimeout( _animateFunction, 40 );
																	}						
			break;
			case 1:
				
				var _animateFunction =	function()
														{
															
															yMovement -= self.stepDistance;
															
															if( yMovement < self.maximumDistance )
															{
																yMovement = self.maximumDistance;
																
																self.alpha -= 0.1;
																
																if( self.alpha < 0 )
																{
																	self.alpha = 0;
																
																	clearTimeout( _animateFunctionPointer );
																}
																
															}
															
															_animateFunctionPointer = setTimeout( _animateFunction, 40 );
														}
													
			break;
		}
		
		var _animateFunctionPointer = setTimeout( _animateFunction, 10 );
		
		setTimeout( function() 
								{ 
									clearTimeout( _animateFunctionPointer );
									
									var _timeout = setInterval( function()
																		{
																			self.alpha -= 0.1;
																			
																			if( self.alpha > 0 )
																			{
																				return;
																			}
																			
																			self.remove();
																			
																			clearInterval( _timeout );
																			
																		}, 60 );
								}, self.duration );
		
	} //end the buffFortitude

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.buffFortitudeComplete.js
*/


	spellEffects.buffFortitudeComplete = function( args )
	{
		var _iSpellEffects = args.targetCharacter._internal.spellEffects;
			
		for( var i in _iSpellEffects )
		{
			var spellEffectObject = _iSpellEffects[i].constructor;
			
			if( spellEffectObject != spellEffects.buffInspiringVigorComplete )
			{
				continue;
			}
			
			// effect needs to be removed
			
			_iSpellEffects[i].remove();
		}
	
		this.ID = spellEffects.layer[1].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		
		this.draw = function()
		{
			
		}
		
		var effect0 = new spellEffects.buffFortitude({ 			
				sourceCharacter: args.sourceCharacter,														
				targetCharacter: args.targetCharacter,
				component: 0
		});
		
		var effect1 = new spellEffects.buffFortitude({ 																						
				sourceCharacter: args.sourceCharacter,
				targetCharacter: args.targetCharacter,
				component: 1
		});
		
		this.remove = function()
		{
			effect0.remove();
			effect1.remove();
			
			spellEffects.layer[1][ self.ID ] = null;
				
			delete args.targetCharacter._internal.spellEffects[ self.characterSpellEffectID ];
		}
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.buffHealingOil.js
*/


	spellEffects.buffHealingOil = function( args )
	{
		this.ID = spellEffects.layer[1].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		this.alpha = 1;
		this.offsetX = 25;
		this.offsetY = 25;
		this.rotation = Math.random() * (Math.PI * 2);
		this.deleteRange = 50;
		this.previousX = args.targetCharacter.characterData.character_zone_x - this.offsetX;
		this.previousY = args.targetCharacter.characterData.character_zone_y - this.offsetY;
		
		var self = this;
		
		var buffHealingOilImageObject = new Image();
		buffHealingOilImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/heal/healingOil/healing oil0.png';
		
		var buffHealingOilSound = soundManager.createSound({
				id: 'buffHealingOil' + ( ++spellEffects.soundIncrementor ),
				url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/water/waterDrop2.mp3', 
				volume: spellEffects.volumeByRange ( Component.bugcraft.currentCharacterObject.characterData.character_zone_x, Component.bugcraft.currentCharacterObject.characterData.character_zone_y, args.targetCharacter.characterData.character_zone_x, args.targetCharacter.characterData.character_zone_y, spellEffects.volumeRangeLong )
		});
		
		this.spellEffectSoundID = args.targetCharacter._internal.soundEffects.push( buffHealingOilSound ) - 1;
		
		soundManager.play( 'buffHealingOil' + spellEffects.soundIncrementor, 
										{
											onfinish: function () 
											{
												delete args.targetCharacter._internal.soundEffects[ self.spellEffectSoundID ];	
											}
										});
		
		//draw the buffHealingOil
		this.draw = function()
		{
			Map.ctx.globalAlpha = self.alpha;
			
			Map.ctx.save();
			
			Map.ctx.drawImage(
											buffHealingOilImageObject,
											args.targetCharacter.characterData.character_zone_x + Map.viewPortX - self.offsetX,
											args.targetCharacter.characterData.character_zone_y + Map.viewPortY - self.offsetY
										);
										
			Map.ctx.shadowOffsetX = 5;
			Map.ctx.shadowOffsetY = 5;
			Map.ctx.shadowColor   = 'rgba(0, 0, 0, 0.75)';
		
			Map.ctx.restore();
		
			self.previousX = args.targetCharacter.characterData.character_zone_x - self.offsetX;
			self.previousY = args.targetCharacter.characterData.character_zone_y - self.offsetY;
		
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the buffHealingOil		
		this.remove = function()
		{
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[1][ this.ID ] = null;
			clearTimeout( _animateFunctionPointer );
			delete args.targetCharacter._internal.spellEffects[ this.characterSpellEffectID ];
			
		}
		
		var i = 0;
		
		var _animateFunction = function()
												{
													buffHealingOilImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/heal/healingOil/healing oil' + i++ + '.png';
													
													if( i < 9 )
													{
														_animateFunctionPointer = setTimeout( _animateFunction, 50 );
														return;
													}
													
													var _t = setInterval( function()
																		{
																			self.alpha -= 0.1;
																			
																			if( self.alpha > 0 )
																			{
																				return;
																			}
																			
																			self.remove();
																			
																			clearInterval( _t );
																			
																		}, 60 );
											
												}							
		
		var _animateFunctionPointer = setTimeout( _animateFunction, 50 );
							
	} //end buffHealingOil

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.buffHeart.js
*/


	spellEffects.buffHeart = function( args )
	{
		var _iSpellEffects = args.targetCharacter._internal.spellEffects;
			
		for( var i in _iSpellEffects )
		{
			var spellEffectObject = _iSpellEffects[i].constructor;
			
			if( spellEffectObject != spellEffects.buffHeart )
			{
				continue;
			}
			
			// effect needs to be removed
			
			_iSpellEffects[i].remove();
		}
	
		this.ID = spellEffects.layer[1].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		this.alpha = 1;
		this.offsetX = 30;
		this.offsetY = 30;
		this.rotation = Math.random() * (Math.PI * 2);
		this.deleteRange = 60;
		this.previousX = args.targetCharacter.characterData.character_zone_x - this.offsetX;
		this.previousY = args.targetCharacter.characterData.character_zone_y - this.offsetY;
		
		var self = this;
		
		var buffHeartImageObject = new Image();
		buffHeartImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/buffs/buffHeart/heart_buff0.png';
		
		var buffHeartSound = soundManager.createSound({
				id: 'buffHeart' + ( ++spellEffects.soundIncrementor ),
				url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/heartbeats/heartbeats.mp3', 
				volume: spellEffects.volumeByRange ( Component.bugcraft.currentCharacterObject.characterData.character_zone_x, Component.bugcraft.currentCharacterObject.characterData.character_zone_y, args.targetCharacter.characterData.character_zone_x, args.targetCharacter.characterData.character_zone_y, spellEffects.volumeRangeLong )
		});
		
		this.spellEffectSoundID = args.targetCharacter._internal.soundEffects.push( buffHeartSound ) - 1;
		
		soundManager.play( 'buffHeart' + spellEffects.soundIncrementor, 
										{
											onfinish: function () 
											{
												delete args.targetCharacter._internal.soundEffects[ self.spellEffectSoundID ];	
											}
										});
		
		//draw the buffHeart
		this.draw = function()
		{
			Map.ctx.globalAlpha = self.alpha;
			
			Map.ctx.drawImage(
											buffHeartImageObject,
											args.targetCharacter.characterData.character_zone_x + Map.viewPortX - self.offsetX,
											args.targetCharacter.characterData.character_zone_y + Map.viewPortY - self.offsetY
										);
		
			self.previousX = args.targetCharacter.characterData.character_zone_x - self.offsetX;
			self.previousY = args.targetCharacter.characterData.character_zone_y - self.offsetY;
		
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the buffHeart
		this.remove = function()
		{
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[1][ this.ID ] = null;
			delete args.targetCharacter._internal.spellEffects[ this.characterSpellEffectID ];
			buffHeartSound.stop();
		}
		
		setTimeout( function()
							{
								buffHeartImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/buffs/buffHeart/heart_buff1.png';
								
								setTimeout( function()
													{
														buffHeartImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/buffs/buffHeart/heart_buff2.png';
														
														setTimeout( function()
																			{
																				buffHeartImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/buffs/buffHeart/heart_buff3.png';
																				
																				setTimeout( function()
																									{
																										buffHeartImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/buffs/buffHeart/heart_buff2.png';
																										
																										setTimeout( function()
																															{
																																buffHeartImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/buffs/buffHeart/heart_buff3.png';
																	
																																setTimeout( function()
																																					{
																																						buffHeartImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/buffs/buffHeart/heart_buff2.png';
																																						
																																						setTimeout( function()
																																											{
																																												buffHeartImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/buffs/buffHeart/heart_buff3.png';
																													
																																												setTimeout( function()
																																																	{
																																																		buffHeartImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/buffs/buffHeart/heart_buff2.png';
																																																		
																																																		setTimeout( function()
																																																							{
																																																								buffHeartImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/buffs/buffHeart/heart_buff3.png';
																																									
																																																								setTimeout( function()
																																																													{
																																																														buffHeartImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/buffs/buffHeart/heart_buff2.png';
																																																														
																																																														setTimeout( function()
																																																																			{
																																																																				buffHeartImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/buffs/buffHeart/heart_buff3.png';
																																																					
																																																																				var _t = setInterval( function()
																																																																												{
																																																																													self.alpha -= 0.1;
																																																																													
																																																																													if( self.alpha > 0 )
																																																																													{
																																																																														return;
																																																																													}
																																																																													
																																																																													self.remove();
																																																																													
																																																																													clearInterval( _t );
																																																																													
																																																																												}, 60 );
																																																																			}, 100 );						
																																																													}, 850 );
																																																							}, 100 );						
																																																	}, 850 );
																																											}, 100 );						
																																					}, 850 );
																															}, 100 );						
																									}, 850 );
																			}, 75 );						
													}, 75 );
							}, 50 );
							
							
	} //end buffHeart

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.buffHerbalShield.js
*/


	spellEffects.buffHerbalShield = function( args )
	{
		this.ID = spellEffects.layer[1].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		this.alpha = 1;
		this.offsetX = 30;
		this.offsetY = 30;
		this.rotation = Math.random() * (Math.PI * 2);
		this.deleteRange = 60;
		this.previousX = args.targetCharacter.characterData.character_zone_x - this.offsetX;
		this.previousY = args.targetCharacter.characterData.character_zone_y - this.offsetY;
		
		var self = this;
		
		var buffHerbalShieldImageObject = new Image();
		buffHerbalShieldImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/buffs/shieldHerbal/herbal_shield0.png';
		
		var buffHerbalShieldSound = soundManager.createSound({
				id: 'buffHerbalShield' + ( ++spellEffects.soundIncrementor ),
				url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/buffs/whoosh_magical.mp3', 
				volume: spellEffects.volumeByRange ( Component.bugcraft.currentCharacterObject.characterData.character_zone_x, Component.bugcraft.currentCharacterObject.characterData.character_zone_y, args.targetCharacter.characterData.character_zone_x, args.targetCharacter.characterData.character_zone_y, spellEffects.volumeRangeLong )
		});
		
		this.spellEffectSoundID = args.targetCharacter._internal.soundEffects.push( buffHerbalShieldSound ) - 1;
		
		soundManager.play( 'buffHerbalShield' + spellEffects.soundIncrementor, 
										{
											onfinish: function () 
											{
												delete args.targetCharacter._internal.soundEffects[ self.spellEffectSoundID ];	
											}
										});
		
		//draw the buffHerbalShield
		this.draw = function()
		{
			Map.ctx.globalAlpha = self.alpha;
			
			Map.ctx.save();
			
			Map.ctx.translate( args.targetCharacter.characterData.character_zone_x + Map.viewPortX, args.targetCharacter.characterData.character_zone_y + Map.viewPortY );
			
			Map.ctx.rotate( self.rotation );
			
			Map.ctx.drawImage(
							buffHerbalShieldImageObject,
							- self.offsetX,
							- self.offsetX
						);
						
			self.previousX = args.targetCharacter.characterData.character_zone_x - self.offsetX;
			self.previousY = args.targetCharacter.characterData.character_zone_y - self.offsetY;
						
			Map.ctx.restore();
						
			Map.ctx.globalAlpha = 1;
		}
		
		
		//remove the buffHerbalShield
		this.remove = function()
		{
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[1][ this.ID ] = null;
			delete args.targetCharacter._internal.spellEffects[ this.characterSpellEffectID ];
		}
		
		var i = 0; 
		
		var _nextImage =  function()
							{
								buffHerbalShieldImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/buffs/shieldHerbal/herbal_shield' + i++ + '.png';

								if( i > 10 )
								{
									var _t = setInterval( function()
													{
														self.alpha -= 0.1;
														
														if( self.alpha > 0 )
														{
															return;
														}
														
														self.remove();
														
														clearInterval( _t );
														
													}, 60 );
								
									return;
								}
								
								setTimeout ( _nextImage, 70 );
						
							}
		
		_nextImage();
							
		var _rotateShield = function()
													{
														if ( i > 10 )
														{
															return;
														}
														
														self.rotation -= Math.PI / 64;

														setTimeout( _rotateShield, 30 );
													}			
		_rotateShield();
							
	} //end buffHerbalShield

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.buffHerbalShieldYellow.js
*/


	spellEffects.buffHerbalShieldYellow = function( args )
	{
		this.ID = spellEffects.layer[1].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		this.alpha = 1;
		this.offsetX = 30;
		this.offsetY = 30;
		this.rotation = Math.random() * (Math.PI * 2);
		this.deleteRange = 60;
		this.previousX = args.targetCharacter.characterData.character_zone_x - this.offsetX;
		this.previousY = args.targetCharacter.characterData.character_zone_y - this.offsetY;
		
		var self = this;
		
		var buffHerbalShieldYellowImageObject = new Image();
		buffHerbalShieldYellowImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/buffs/shieldHerbalYellow/herbal_shield0y.png';
		
		var buffHerbalShieldYellowSound = soundManager.createSound({
				id: 'buffHerbalShieldYellow' + ( ++spellEffects.soundIncrementor ),
				url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/buffs/whoosh_magical.mp3', 
				volume: spellEffects.volumeByRange ( Component.bugcraft.currentCharacterObject.characterData.character_zone_x, Component.bugcraft.currentCharacterObject.characterData.character_zone_y, args.targetCharacter.characterData.character_zone_x, args.targetCharacter.characterData.character_zone_y, spellEffects.volumeRangeLong )
		});
		
		this.spellEffectSoundID = args.targetCharacter._internal.soundEffects.push( buffHerbalShieldYellowSound ) - 1;
		
		soundManager.play( 'buffHerbalShieldYellow' + spellEffects.soundIncrementor, 
										{
											onfinish: function () 
											{
												delete args.targetCharacter._internal.soundEffects[ self.spellEffectSoundID ];	
											}
										});
		
		//draw the buffHerbalShieldYellow
		this.draw = function()
		{
			Map.ctx.globalAlpha = self.alpha;
			
			Map.ctx.save();
			
			Map.ctx.translate( args.targetCharacter.characterData.character_zone_x + Map.viewPortX, args.targetCharacter.characterData.character_zone_y + Map.viewPortY );
			
			Map.ctx.rotate( self.rotation );
			
			Map.ctx.drawImage(
							buffHerbalShieldYellowImageObject,
							- self.offsetX,
							- self.offsetX
						);
						
			self.previousX = args.targetCharacter.characterData.character_zone_x - self.offsetX;
			self.previousY = args.targetCharacter.characterData.character_zone_y - self.offsetY;
						
			Map.ctx.restore();
						
			Map.ctx.globalAlpha = 1;
		}
		
		
		//remove the buffHerbalShieldYellow
		this.remove = function()
		{
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[1][ this.ID ] = null;
			delete args.targetCharacter._internal.spellEffects[ this.characterSpellEffectID ];
		}
		
		var i = 0; 
		
		var _nextImage =  function()
							{
								buffHerbalShieldYellowImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/buffs/shieldHerbalYellow/herbal_shield' + i++ + 'y.png';

								if( i > 10 )
								{
									var _t = setInterval( function()
													{
														self.alpha -= 0.1;
														
														if( self.alpha > 0 )
														{
															return;
														}
														
														self.remove();
														
														clearInterval( _t );
														
													}, 60 );
								
									return;
								}
								
								setTimeout ( _nextImage, 70 );
						
							}
		
		_nextImage();
							
		var _rotateShield = function()
													{
														if ( i > 10 )
														{
															return;
														}
														
														self.rotation -= Math.PI / 64;

														setTimeout( _rotateShield, 30 );
													}			
		_rotateShield();
							
	} //end buffHerbalShieldYellow

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.buffInspiringVigor.js
*/


	spellEffects.buffInspiringVigor = function( args )
	{
		this.ID = spellEffects.layer[1].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		this.alpha = 1;
		this.duration = 2000;
		this.offsetX = 30;
		this.offsetY = 30;
		this.rotation = 0;
		this.stepDistance = 2;
		this.maximumDistance = -40;
		this.deleteRange = 60;
		this.previousX = args.targetCharacter.characterData.character_zone_x - this.offsetX;
		this.previousY = args.targetCharacter.characterData.character_zone_y - this.offsetY;
		
		var self = this;
		
		var yMovement = 0;
		
		var buffInspiringVigorImageObject = new Image();
		buffInspiringVigorImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/buffs/inspiringVigor/inspiring_vigor' + args.component + '.png';
		
		
		
		//draw the the buffInspiringVigor
		this.draw = function()
		{
			Map.ctx.globalAlpha = self.alpha;
			
			Map.ctx.save();
			
			Map.ctx.translate( args.targetCharacter.characterData.character_zone_x + Map.viewPortX, args.targetCharacter.characterData.character_zone_y + Map.viewPortY );
			
			Map.ctx.rotate( self.rotation );
			
			Map.ctx.drawImage(
							buffInspiringVigorImageObject,
							- self.offsetX,
							- self.offsetY + yMovement
						);
										
			self.previousX = args.targetCharacter.characterData.character_zone_x - self.offsetX;
			self.previousY = args.targetCharacter.characterData.character_zone_y - self.offsetY + yMovement;
										
			Map.ctx.restore();
			
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the buffInspiringVigor
		this.remove = function()
		{
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[1][ this.ID ] = null;
			delete args.targetCharacter._internal.spellEffects[ this.characterSpellEffectID ];
			
			clearTimeout( _animateFunctionPointer );
			clearTimeout( _opacityVariatorPointer );
		}
			
		switch( args.component )
		{
			case 0:
				var buffInspiringVigorSound = soundManager.createSound({
						id: 'buffInspiringVigor' + ( ++spellEffects.soundIncrementor ),
						url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/buffs/orchestral-scary-impact+ting-sha-bell.mp3',
						volume: spellEffects.volumeByRange ( Component.bugcraft.currentCharacterObject.characterData.character_zone_x, Component.bugcraft.currentCharacterObject.characterData.character_zone_y, args.targetCharacter.characterData.character_zone_x, args.targetCharacter.characterData.character_zone_y, spellEffects.volumeRangeLong )
				});
				
				this.spellEffectSoundID = args.targetCharacter._internal.soundEffects.push( buffInspiringVigorSound ) - 1;
			
				soundManager.play( 'buffInspiringVigor' + spellEffects.soundIncrementor, 
												{
													onfinish: function () 
													{
														delete args.targetCharacter._internal.soundEffects[ self.spellEffectSoundID ];	
													}
												});

				self.alpha = 0;
				var _animateFunction =	function()
																	{
																		if( self.alpha < 1 )
																		{
																			self.alpha += 0.2;
																		}
																		
																		self.rotation += Math.PI / 32;

																		_animateFunctionPointer = setTimeout( _animateFunction, 40 );
																	}	
				
				var _opacityVariatorPointer = setTimeout(  function()
													{
													
													}, 500 );
				
			break;
			case 1:
				
				var _animateFunction =	function()
														{
															
															yMovement -= self.stepDistance;
															
															if( yMovement < self.maximumDistance )
															{
																yMovement = self.maximumDistance;
																
																clearTimeout( _opacityVariatorPointer );
																
																self.alpha -= 0.1;
																
																if( self.alpha < 0 )
																{
																	self.alpha = 0;
																
																	clearTimeout( _animateFunctionPointer );
																}
																
															}
															
															_animateFunctionPointer = setTimeout( _animateFunction, 40 );
														}
													
				var opacityVariation = 0;
				
				var _opacityVariator = function()
													{
														self.alpha = Math.abs( Math.sin( opacityVariation ) );

														opacityVariation += Math.PI / 16;
														
														if (self.alpha < 0.5 )
														{
															self.alpha = 0.5;
														}
														
														_opacityVariatorPointer = setTimeout( _opacityVariator, 40 );
													}
													
				var _opacityVariatorPointer = setTimeout( _opacityVariator, 10 );
											
			break;
		}
		
		var _animateFunctionPointer = setTimeout( _animateFunction, 10 );
		
		setTimeout( function() 
								{ 
									clearTimeout( _animateFunctionPointer );
									clearTimeout( _opacityVariatorPointer );
									
									var _timeout = setInterval( function()
																		{
																			self.alpha -= 0.1;
																			
																			if( self.alpha > 0 )
																			{
																				return;
																			}
																			
																			self.remove();
																			
																			clearInterval( _timeout );
																			
																		}, 60 );
								}, self.duration );
		
	} //end the buffInspiringVigor

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.buffInspiringVigorComplete.js
*/


	spellEffects.buffInspiringVigorComplete = function( args )
	{
		var _iSpellEffects = args.targetCharacter._internal.spellEffects;
			
		for( var i in _iSpellEffects )
		{
			var spellEffectObject = _iSpellEffects[i].constructor;
			
			if( spellEffectObject != spellEffects.buffInspiringVigorComplete )
			{
				continue;
			}
			
			// effect needs to be removed
			
			_iSpellEffects[i].remove();
		}
	
		this.ID = spellEffects.layer[1].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		
		this.draw = function()
		{
			
		}
		
		var effect0 = new spellEffects.buffInspiringVigor({ 			
				sourceCharacter: args.sourceCharacter,														
				targetCharacter: args.targetCharacter,
				component: 0
		});
		
		var effect1 = new spellEffects.buffInspiringVigor({ 																						
				sourceCharacter: args.sourceCharacter,
				targetCharacter: args.targetCharacter,
				component: 1
		});
		
		this.remove = function()
		{
			effect0.remove();
			effect1.remove();
			
			spellEffects.layer[1][ self.ID ] = null;
				
			delete args.targetCharacter._internal.spellEffects[ self.characterSpellEffectID ];
		}
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.buffMovingSkull.js
*/


	spellEffects.buffMovingSkull = function( args )
	{
		this.ID = spellEffects.layer[1].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		this.alpha = 1;
		this.duration = 3500;
		this.offsetX = 30;
		this.offsetY = 30;
		this.rotation = 0;
		this.stepDistance = 1;
		this.deleteRange = 60;
		this.previousX = args.targetCharacter.characterData.character_zone_x - this.offsetX;
		this.previousY = args.targetCharacter.characterData.character_zone_y - this.offsetY;
		
		var self = this;
		
		var buffMovingSkullImageObject = new Image();
		buffMovingSkullImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/buffs/movingSkull/movingSkullpart' + args.component + '.png';
		
		var yMovement = 0;
		
		//draw the the buffMovingSkull
		this.draw = function()
		{
			Map.ctx.globalAlpha = self.alpha;
			
			Map.ctx.save();
			
			Map.ctx.drawImage(
							buffMovingSkullImageObject,
							args.targetCharacter.characterData.character_zone_x - self.offsetX,
							args.targetCharacter.characterData.character_zone_y - self.offsetY + yMovement
						);
										
			self.previousX = args.targetCharacter.characterData.character_zone_x - self.offsetX;
			self.previousY = args.targetCharacter.characterData.character_zone_y - self.offsetY + yMovement;
										
			Map.ctx.restore();
			
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the buffMovingSkull
		this.remove = function()
		{
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[1][ this.ID ] = null;
			clearTimeout( _animateFunctionPointer );
			delete args.targetCharacter._internal.spellEffects[ this.characterSpellEffectID ];
		}
		
		
		switch( args.component )
		{
			case 0:	
				self.alpha = 0;
				
				var buffMovingSkullSound = soundManager.createSound({
						id: 'buffMovingSkull' + ( ++spellEffects.soundIncrementor ),
						url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/buffs/tavern door creaking.mp3',
						volume: spellEffects.volumeByRange ( Component.bugcraft.currentCharacterObject.characterData.character_zone_x, Component.bugcraft.currentCharacterObject.characterData.character_zone_y, args.targetCharacter.characterData.character_zone_x, args.targetCharacter.characterData.character_zone_y, spellEffects.volumeRangeLong )
				});
				
				this.spellEffectSoundID = args.targetCharacter._internal.soundEffects.push( buffMovingSkullSound ) - 1;
				
				soundManager.play( 'buffMovingSkull' + spellEffects.soundIncrementor, 
												{
													onfinish: function () 
													{
														delete args.targetCharacter._internal.soundEffects[ self.spellEffectSoundID ];	
													}
												});

				var opacityVariation = 0;
				
				var _fadeInOutFunction =  function()
														{
															self.alpha = Math.abs( Math.sin( opacityVariation ) );

															opacityVariation += Math.PI / 32;
															
															if (self.alpha < 0.5 )
															{
																self.alpha = 0.5;
															}
															
															_fadeInOutFunctionPointer = setTimeout( _fadeInOutFunction, 50 );
														}							

			break;
			case 1:
				self.alpha = 0;

				var opacityVariation = 0;
				
				var _fadeInOutFunction =  function()
														{
															self.alpha = Math.abs( Math.sin( opacityVariation ) );

															opacityVariation += Math.PI / 32;
															
															if (self.alpha < 0.5 )
															{
																self.alpha = 0.5;
															}
															
															_fadeInOutFunctionPointer = setTimeout( _fadeInOutFunction, 50 );
														}							
				
				var movementVariation = 0
				
				var _animateFunction =	function()
													{
														yMovement = 3 * Math.abs( Math.sin( movementVariation ) );
														
														movementVariation += Math.PI /16;
														
														_animateFunctionPointer = setTimeout( _animateFunction, 50 );
													}			
						
				var _animateFunctionPointer = setTimeout( _animateFunction, 1 );		
				
			break;
		}
		
		var _fadeInOutFunctionPointer = setTimeout( _fadeInOutFunction, 50 );
			
		var _animateFunctionPointer = setTimeout( _animateFunction, 50 );
		
		setTimeout( function() 
								{ 
									
									clearTimeout( _fadeInOutFunctionPointer );
								
									var _timeout = setInterval( function()
																		{
																			self.alpha -= 0.1;
																			
																			if( self.alpha > 0 )
																			{
																				return;
																			}
																			
																			self.remove();
																			
																			clearInterval( _timeout );
																			
																		}, 100 );
								}, self.duration );
		
	} //end the buffMovingSkull

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.buffMovingSkullComplete.js
*/


	spellEffects.buffMovingSkullComplete = function( args )
	{
		this.ID = spellEffects.layer[1].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		
		this.draw = function()
		{
			
		}
		
		var effect0 = new spellEffects.buffMovingSkull({ 			
				sourceCharacter: args.sourceCharacter,														
				targetCharacter: args.targetCharacter,
				component: 0
		});
		
		var effect1 = new spellEffects.buffMovingSkull({ 																						
				sourceCharacter: args.sourceCharacter,
				targetCharacter: args.targetCharacter,
				component: 1
		});
		
		this.remove = function()
		{
			effect0.remove();
			effect1.remove();
			
			spellEffects.layer[1][ self.ID ] = null;
				
			delete args.targetCharacter._internal.spellEffects[ self.characterSpellEffectID ];
		}
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.buffPolishShell.js
*/


	spellEffects.buffPolishShell = function( args )
	{
		this.ID = spellEffects.layer[1].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		this.alpha = 1;
		this.offsetX = 25;
		this.offsetY = 30;
		this.rotation = Math.random() * (Math.PI * 2);
		this.deleteRange = 60;
		this.previousX = args.targetCharacter.characterData.character_zone_x - this.offsetX;
		this.previousY = args.targetCharacter.characterData.character_zone_y - this.offsetY;
		
		var self = this;
		
		var buffPolishShellImageObject = new Image();
		buffPolishShellImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/buffs/polishShell/polished_shell0.png';
		
		var buffPolishShellSound = soundManager.createSound({
				id: 'buffPolishShell' + ( ++spellEffects.soundIncrementor ),
				url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/buffs/woosh fast.mp3', 
				volume: spellEffects.volumeByRange ( Component.bugcraft.currentCharacterObject.characterData.character_zone_x, Component.bugcraft.currentCharacterObject.characterData.character_zone_y, args.targetCharacter.characterData.character_zone_x, args.targetCharacter.characterData.character_zone_y, spellEffects.volumeRangeLong )
		});
		
		this.spellEffectSoundID = args.targetCharacter._internal.soundEffects.push( buffPolishShellSound ) - 1;
		
		soundManager.play( 'buffPolishShell' + spellEffects.soundIncrementor, 
										{
											onfinish: function () 
											{
												delete args.targetCharacter._internal.soundEffects[ self.spellEffectSoundID ];	
											}
										});
		
		//draw the buffPolishShell
		this.draw = function()
		{
			Map.ctx.globalAlpha = self.alpha;
			
			Map.ctx.drawImage(
											buffPolishShellImageObject,
											args.targetCharacter.characterData.character_zone_x + Map.viewPortX - self.offsetX,
											args.targetCharacter.characterData.character_zone_y + Map.viewPortY - self.offsetY
										);
							
			self.previousX = args.targetCharacter.characterData.character_zone_x - self.offsetX;
			self.previousY = args.targetCharacter.characterData.character_zone_y - self.offsetY;
		
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the buffPolishShell
		this.remove = function()
		{
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[1][ this.ID ] = null;
			clearTimeout( _animateFunctionPointer );
			delete args.targetCharacter._internal.spellEffects[ this.characterSpellEffectID ];
		}
		
		var i = 0;
		
		var _animateFunction = function()
												{
													buffPolishShellImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/buffs/polishShell/polished_shell' + i++ + '.png';
													
													if( i < 4 )
													{
														_animateFunctionPointer = setTimeout( _animateFunction, 50 );
														return;
													}
												
													var _t = setInterval( function()
																					{
																						self.alpha -= 0.1;
																						
																						if( self.alpha > 0 )
																						{
																							return;
																						}
																						
																						self.remove();
																						
																						clearInterval( _t );
																						
																					}, 60 );
																					
												}
												
		var _animateFunctionPointer = setTimeout( _animateFunction, 50 );
							
	} //end waxShell

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.buffRally.js
*/


	spellEffects.buffRally = function( args )
	{
		this.ID = spellEffects.layer[1].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		this.alpha = 1;
		this.duration = 2000;
		this.offsetX = 30;
		this.offsetY = 30;
		this.rotation = 0;
		this.stepDistance = 2;
		this.maximumDistance = -40;
		this.deleteRange = 60;
		this.previousX = args.targetCharacter.characterData.character_zone_x - this.offsetX;
		this.previousY = args.targetCharacter.characterData.character_zone_y - this.offsetY;
		
		var self = this;
		
		var yMovement = 0;
		
		var buffRallyImageObject = new Image();
		buffRallyImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/buffs/rally/rally' + args.component + '.png';
		
		//draw the the buffRally
		this.draw = function()
		{
			Map.ctx.globalAlpha = self.alpha;
			
			Map.ctx.save();
			
			Map.ctx.translate( args.targetCharacter.characterData.character_zone_x + Map.viewPortX, args.targetCharacter.characterData.character_zone_y + Map.viewPortY );
			
			Map.ctx.rotate( self.rotation );
			
			Map.ctx.drawImage(
							buffRallyImageObject,
							- self.offsetX,
							- self.offsetY + yMovement
						);
										
			self.previousX = args.targetCharacter.characterData.character_zone_x - self.offsetX;
			self.previousY = args.targetCharacter.characterData.character_zone_y - self.offsetY + yMovement;
										
			Map.ctx.restore();
			
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the buffRally
		this.remove = function()
		{
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[1][ this.ID ] = null;
			delete args.targetCharacter._internal.spellEffects[ this.characterSpellEffectID ];
		}
			
		switch( args.component )
		{
			case 0:
				var buffRallySound = soundManager.createSound({
						id: 'buffRally' + ( ++spellEffects.soundIncrementor ),
						url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/buffs/orchestral-scary-impact.mp3',
						volume: spellEffects.volumeByRange ( Component.bugcraft.currentCharacterObject.characterData.character_zone_x, Component.bugcraft.currentCharacterObject.characterData.character_zone_y, args.targetCharacter.characterData.character_zone_x, args.targetCharacter.characterData.character_zone_y, spellEffects.volumeRangeLong )
				});
				
				this.spellEffectSoundID = args.targetCharacter._internal.soundEffects.push( buffRallySound ) - 1;
			
				soundManager.play( 'buffRally' + spellEffects.soundIncrementor, 
												{
													onfinish: function () 
													{
														delete args.targetCharacter._internal.soundEffects[ self.spellEffectSoundID ];	
													}
												});

				self.alpha = 0;
				var _animateFunction =	function()
																	{
																		if( self.alpha < 1 )
																		{
																			self.alpha += 0.2;
																		}
																		
																		self.rotation += Math.PI / 32;

																		_animateFunctionPointer = setTimeout( _animateFunction, 40 );
																	}						
			break;
			default:
				
				var _animateFunction =	function()
														{
															
															yMovement -= self.stepDistance;
															
															if( yMovement < self.maximumDistance )
															{
																yMovement = self.maximumDistance;
																
																self.alpha -= 0.1;
																
																if( self.alpha < 0 )
																{
																	self.alpha = 0;
																
																	clearTimeout( _animateFunctionPointer );
																}
																
															}
															
															_animateFunctionPointer = setTimeout( _animateFunction, 40 );
														}
													
			break;
		}
		
		var _animateFunctionPointer = setTimeout( _animateFunction, 10 );
		
		setTimeout( function() 
								{ 
									clearTimeout( _animateFunctionPointer );
									
									var _timeout = setInterval( function()
																		{
																			self.alpha -= 0.1;
																			
																			if( self.alpha > 0 )
																			{
																				return;
																			}
																			
																			self.remove();
																			
																			clearInterval( _timeout );
																			
																		}, 60 );
								}, self.duration );
		
	} //end the buffRally

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.buffRallyComplete.js
*/


	spellEffects.buffRallyComplete = function( args )
	{
		this.ID = spellEffects.layer[1].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		
		this.draw = function()
		{
			
		}
		
		var effect0 = new spellEffects.buffRally({ 			
				sourceCharacter: args.sourceCharacter,														
				targetCharacter: args.targetCharacter,
				component: 0
		});
		
		var effect1 = new spellEffects.buffRally({ 																						
				sourceCharacter: args.sourceCharacter,
				targetCharacter: args.targetCharacter,
				component: 1
		});
		
		var effect2 = new spellEffects.buffRally({ 			
				sourceCharacter: args.sourceCharacter,														
				targetCharacter: args.targetCharacter,
				component: 2
		});
		
		this.remove = function()
		{
			effect0.remove();
			effect1.remove();
			effect2.remove();
			
			spellEffects.layer[1][ self.ID ] = null;
				
			delete args.targetCharacter._internal.spellEffects[ self.characterSpellEffectID ];
		}
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.buffShield.js
*/


	spellEffects.buffShield = function( args )
	{
		this.ID = spellEffects.layer[1].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		this.alpha = 1;
		this.offsetX = 30;
		this.offsetY = 30;
		this.rotation = Math.random() * (Math.PI * 2);
		this.deleteRange = 60;
		this.previousX = args.targetCharacter.characterData.character_zone_x - this.offsetX;
		this.previousY = args.targetCharacter.characterData.character_zone_y - this.offsetY;
		
		var self = this;
		
		var buffShieldImageObject = new Image();
		buffShieldImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/buffs/buffShield/buff_shield1.png';
		
		var buffShieldSound = soundManager.createSound({
				id: 'buffShield' + ( ++spellEffects.soundIncrementor ),
				url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/buffs/Sound Design,Whoosh,Flash Impact,Ringy Camera.mp3', 
				volume: spellEffects.volumeByRange ( Component.bugcraft.currentCharacterObject.characterData.character_zone_x, Component.bugcraft.currentCharacterObject.characterData.character_zone_y, args.targetCharacter.characterData.character_zone_x, args.targetCharacter.characterData.character_zone_y, spellEffects.volumeRangeLong )
		});
		
		this.spellEffectSoundID = args.targetCharacter._internal.soundEffects.push( buffShieldSound ) - 1;
		
		soundManager.play( 'buffShield' + spellEffects.soundIncrementor, 
										{
											onfinish: function () 
											{
												delete args.targetCharacter._internal.soundEffects[ self.spellEffectSoundID ];	
											}
										});
		
		//draw the buffShield
		this.draw = function()
		{
			Map.ctx.globalAlpha = self.alpha;
			
			Map.ctx.drawImage(
							buffShieldImageObject,
							args.targetCharacter.characterData.character_zone_x + Map.viewPortX - self.offsetX,
							args.targetCharacter.characterData.character_zone_y + Map.viewPortY - self.offsetY
						);
				
			self.previousX = args.targetCharacter.characterData.character_zone_x - self.offsetX;
			self.previousY = args.targetCharacter.characterData.character_zone_y - self.offsetY;
				
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the buffShield
		var self = this;
		
		this.remove = function()
		{
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[1][ this.ID ] = null;
			clearTimeout( _animateFunctionPointer );
			delete args.targetCharacter._internal.spellEffects[ this.characterSpellEffectID ];
		}
		
		var i = 1;
		
		var _animateFunction =  function()
											{
												buffShieldImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/buffs/buffShield/buff_shield' + ( i++ % 6 ) + '.png';
												
												if( i < 5 )
												{
													_animateFunctionPointer = setTimeout( _animateFunction, 50 );
													
													return;
												}
												
												i = 5;
																					
												var _t = setInterval( function()
																	{
																		self.alpha -= 0.1;
																		
																		if( self.alpha > 0 )
																		{
																			return;
																		}
																		
																		self.remove();
																		
																		clearInterval( _t );
																		
																	}, 60 );
											}
		var _animateFunctionPointer = setTimeout( _animateFunction, 50 );
																									
	} //end buffShield

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.buffShield31.js
*/


	spellEffects.buffShield31 = function( args )
	{
		this.ID = spellEffects.layer[1].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		this.alpha = 1;
		this.offsetX = 30;
		this.offsetY = 30;
		this.rotation = Math.random() * (Math.PI * 2);
		this.deleteRange = 60;
		this.previousX = args.targetCharacter.characterData.character_zone_x - this.offsetX;
		this.previousY = args.targetCharacter.characterData.character_zone_y - this.offsetY;
		
		var self = this;
		
		var buffShieldImageObject = new Image();
		buffShieldImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/buffs/buffShield/buff_shield1.png';
		
		var buffShieldSound = soundManager.createSound({
				id: 'buffShield' + ( ++spellEffects.soundIncrementor ),
				url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/punch/punch' + Math.floor( Math.random() * 3 ) + '.mp3',
				volume: spellEffects.volumeByRange ( Component.bugcraft.currentCharacterObject.characterData.character_zone_x, Component.bugcraft.currentCharacterObject.characterData.character_zone_y, args.targetCharacter.characterData.character_zone_x, args.targetCharacter.characterData.character_zone_y, spellEffects.volumeRangeLong )
		});
		
		this.spellEffectSoundID = args.targetCharacter._internal.soundEffects.push( buffShieldSound ) - 1;
		
		soundManager.play( 'buffShield' + spellEffects.soundIncrementor, 
										{
											onfinish: function () 
											{
												delete args.targetCharacter._internal.soundEffects[ self.spellEffectSoundID ];	
											}
										});
		
		//draw the buffShield
		this.draw = function()
		{
			Map.ctx.globalAlpha = self.alpha;
			
			Map.ctx.drawImage(
							buffShieldImageObject,
							args.targetCharacter.characterData.character_zone_x + Map.viewPortX - self.offsetX,
							args.targetCharacter.characterData.character_zone_y + Map.viewPortY - self.offsetY
						);
				
			self.previousX = args.targetCharacter.characterData.character_zone_x - self.offsetX;
			self.previousY = args.targetCharacter.characterData.character_zone_y - self.offsetY;
				
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the buffShield
		var self = this;
		
		this.remove = function()
		{
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[1][ this.ID ] = null;
			clearTimeout( _animateFunctionPointer );
			delete args.targetCharacter._internal.spellEffects[ this.characterSpellEffectID ];
		}
		
		var i = 1;
		
		var _animateFunction =  function()
											{
												buffShieldImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/buffs/buffShield/buff_shield' + ( i++ % 6 ) + '.png';
												
												if( i < 5 )
												{
													_animateFunctionPointer = setTimeout( _animateFunction, 50 );
													
													return;
												}
												
												i = 5;
																					
												var _t = setInterval( function()
																	{
																		self.alpha -= 0.1;
																		
																		if( self.alpha > 0 )
																		{
																			return;
																		}
																		
																		self.remove();
																		
																		clearInterval( _t );
																		
																	}, 60 );
											}
		var _animateFunctionPointer = setTimeout( _animateFunction, 50 );
																									
	} //end buffShield

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.buffSkull.js
*/


	spellEffects.buffSkull = function( args )
	{
		this.ID = spellEffects.layer[1].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		this.alpha = 1;
		this.duration = 2500;
		this.offsetX = 30;
		this.offsetY = 30;
		this.rotation = 0;
		this.stepDistance = 3;
		this.maxiumDistance = 30;
		this.deleteRange = 60;
		this.previousX = args.targetCharacter.characterData.character_zone_x - this.offsetX;
		this.previousY = args.targetCharacter.characterData.character_zone_y - this.offsetY;
		
		var self = this;
		
		var yMovement = 0;
		
		var buffSkullImageObject = new Image();
		buffSkullImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/buffs/skull/skullbuff' + args.component + '.png';
		
		//draw the the buffSkull
		this.draw = function()
		{
			Map.ctx.globalAlpha = self.alpha;
			
			Map.ctx.save();
			
			Map.ctx.drawImage(
							buffSkullImageObject,
							args.targetCharacter.characterData.character_zone_x + Map.viewPortX - self.offsetX,
							args.targetCharacter.characterData.character_zone_y + Map.viewPortY - self.offsetY + yMovement
						);
										
			self.previousX = args.targetCharacter.characterData.character_zone_x - self.offsetX;
			self.previousY = args.targetCharacter.characterData.character_zone_y - self.offsetY + yMovement;
										
			Map.ctx.restore();
			
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the buffSkull
		this.remove = function()
		{
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[1][ this.ID ] = null;
			clearTimeout( _animateFunctionPointer );
			delete args.targetCharacter._internal.spellEffects[ this.characterSpellEffectID ];
		}
			
		switch( args.component )
		{
			case 0:		
				self.alpha = 0;	
				
				var buffSkullSound = soundManager.createSound({
						id: 'buffSkull' + ( ++spellEffects.soundIncrementor ),
						url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/enrage/enrage1.mp3',
						volume: spellEffects.volumeByRange ( Component.bugcraft.currentCharacterObject.characterData.character_zone_x, Component.bugcraft.currentCharacterObject.characterData.character_zone_y, args.targetCharacter.characterData.character_zone_x, args.targetCharacter.characterData.character_zone_y, spellEffects.volumeRangeLong )
				});
				
				this.spellEffectSoundID = args.targetCharacter._internal.soundEffects.push( buffSkullSound ) - 1;
				
				soundManager.play( 'buffSkull' + spellEffects.soundIncrementor, 
												{
													onfinish: function () 
													{
														delete args.targetCharacter._internal.soundEffects[ self.spellEffectSoundID ];	
													}
												});

				var opacityVariation = 0;
				
				var _fadeInOutFunction =  function()
														{
															self.alpha = Math.abs( Math.sin( opacityVariation ) );

															opacityVariation += Math.PI / 32;
															
															if (self.alpha < 0.5 )
															{
																self.alpha = 0.5;
															}
															
															_fadeInOutFunctionPointer = setTimeout( _fadeInOutFunction, 30 );
														}	
														
				var _fadeInOutFunctionPointer = setTimeout( _fadeInOutFunction, 1 );
													
			break;
			case 1:
				
				self.offsetX = 25;
				self.offsetY = 85;
			
				var _animateFunction =	function()
													{
														
														yMovement += self.stepDistance;
														
														if( yMovement > 43 )
														{
															self.alpha -= 0.1;
															yMovement = 43;
														}
														
														if( self.alpha < 0 )
														{
															self.alpha = 0;
														
															return;
														}
														
														_animateFunctionPointer = setTimeout( _animateFunction, 40 );
													}
													
				var _animateFunctionPointer = setTimeout( _animateFunction, 1 );
				
			break;
		}
		
		setTimeout( function() 
								{ 
									
									clearTimeout( _fadeInOutFunctionPointer );
								
									var _timeout = setInterval( function()
																		{
																			self.alpha -= 0.1;
																			
																			if( self.alpha > 0 )
																			{
																				return;
																			}
																			
																			self.remove();
																			
																			clearInterval( _timeout );
																			
																		}, 100 );
								}, self.duration );
		
	} //end the buffSkull

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.buffSkullComplete.js
*/


	spellEffects.buffSkullComplete = function( args )
	{
		this.ID = spellEffects.layer[1].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		
		this.draw = function()
		{
			
		}
		
		var effect0 = new spellEffects.buffSkull({ 			
				sourceCharacter: args.sourceCharacter,														
				targetCharacter: args.targetCharacter,
				component: 0
		});
		
		var effect1 = new spellEffects.buffSkull({ 																						
				sourceCharacter: args.sourceCharacter,
				targetCharacter: args.targetCharacter,
				component: 1
		});
		
		this.remove = function()
		{
			effect0.remove();
			effect1.remove();
			
			spellEffects.layer[1][ self.ID ] = null;
				
			delete args.targetCharacter._internal.spellEffects[ self.characterSpellEffectID ];
		}
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.buffSkullPart1.js
*/


	spellEffects.buffSkullPart1 = function( args )
	{
		this.ID = spellEffects.layer[1].push( this ) - 1;
		this.alpha = 1;
		this.duration = 3500;
		this.offsetX = 30;
		this.offsetY = 60;
		this.rotation = 0;
		this.stepDistance = 2;
		this.maxiumDistance = 30;
		this.deleteRange = 60;
		this.previousX = args.targetCharacter.characterData.character_zone_x - this.offsetX;
		this.previousY = args.targetCharacter.characterData.character_zone_y - this.offsetY;
		
		var self = this;
		
		var buffSkullImageObject = new Image();
		buffSkullImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/buffs/skull/skullbuff1.png';
		
		var buffEnrageSound = soundManager.createSound({
				id: 'buffEnrage' + ( ++soundIncrementor ),
				url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/enrage/enrage' + Math.floor( Math.random() * 2 ) + '.mp3',
				volume: spellEffects.volumeByRange ( Component.bugcraft.currentCharacterObject.characterData.character_zone_x, Component.bugcraft.currentCharacterObject.characterData.character_zone_y, args.targetCharacter.characterData.character_zone_x, args.targetCharacter.characterData.character_zone_y, spellEffects.volumeRangeLong )
		});
		
		var yMovement = 0;
		
		//draw the the buffSkull
		this.draw = function()
		{
			Map.ctx.globalAlpha = self.alpha;
			
			Map.ctx.save();
			
			Map.ctx.drawImage(
							buffSkullImageObject,
							args.targetCharacter.characterData.character_zone_x - self.offsetX,
							args.targetCharacter.characterData.character_zone_y - self.offsetY + yMovement
						);
										
			self.previousX = args.targetCharacter.characterData.character_zone_x - self.offsetX;
			self.previousY = args.targetCharacter.characterData.character_zone_y - self.offsetY + yMovement;
										
			Map.ctx.restore();
			
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the buffSkull
		this.remove = function()
		{
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[1][ this.ID ] = null;
			clearTimeout( _animateFunctionPointer );
		}
		
		var _animateFunction =	function()
											{
												
												yMovement += self.stepDistance;
												
												if( yMovement > 15 )
												{
													self.alpha -= 0.05;
												}
												
												if( self.alpha < 0 )
												{
													self.alpha = 0;
												
													self.remove();
													
													return;
												}
												
												_animateFunctionPointer = setTimeout( _animateFunction, 50 );
											}			
				
		var _animateFunctionPointer = setTimeout( _animateFunction, 50 );
		
		setTimeout( function() 
								{ 
									
									var _timeout = setInterval( function()
																		{
																			self.alpha -= 0.1;
																			
																			if( self.alpha > 0 )
																			{
																				return;
																			}
																			
																			self.remove();
																			
																			clearInterval( _timeout );
																			
																		}, 100 );
								}, self.duration );
		
	} //end the buffSkull

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.buffSwarmWings.js
*/


	spellEffects.buffSwarmWings = function( args )
	{
		this.ID = spellEffects.layer[1].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		this.alpha = 1;
		this.duration = 2500;
		this.offsetX = 30;
		this.offsetY = 30;
		this.rotation = 0;
		this.stepDistance = 3;
		this.maxiumDistance = 30;
		this.deleteRange = 60;
		this.previousX = args.targetCharacter.characterData.character_zone_x - this.offsetX;
		this.previousY = args.targetCharacter.characterData.character_zone_y - this.offsetY;
		
		var self = this;
		
		var yMovement = 0;
		
		var buffSwarmWingsImageObject = new Image();
		buffSwarmWingsImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/buffs/swarm/swarm' + args.component + '.png';
		
		//draw the the buffSwarmWings
		this.draw = function()
		{
			Map.ctx.globalAlpha = self.alpha;
			
			Map.ctx.save();
			
			Map.ctx.translate( args.targetCharacter.characterData.character_zone_x + Map.viewPortX, args.targetCharacter.characterData.character_zone_y + Map.viewPortY );
			
			Map.ctx.rotate( self.rotation );
			
			Map.ctx.drawImage(
							buffSwarmWingsImageObject,
							- self.offsetX,
							- self.offsetY + yMovement
						);
										
			self.previousX = args.targetCharacter.characterData.character_zone_x - self.offsetX;
			self.previousY = args.targetCharacter.characterData.character_zone_y - self.offsetY + yMovement;
										
			Map.ctx.restore();
			
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the buffSwarmWings
		this.remove = function()
		{
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[1][ this.ID ] = null;
			delete args.targetCharacter._internal.spellEffects[ this.characterSpellEffectID ];
		}
			
		switch( args.component )
		{
			case 0:
				var buffSwarmWingsSound = soundManager.createSound({
						id: 'buffSwarmWings' + ( ++spellEffects.soundIncrementor ),
						url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/buffs/disappearing swoosh.mp3',
						volume: spellEffects.volumeByRange ( Component.bugcraft.currentCharacterObject.characterData.character_zone_x, Component.bugcraft.currentCharacterObject.characterData.character_zone_y, args.targetCharacter.characterData.character_zone_x, args.targetCharacter.characterData.character_zone_y, spellEffects.volumeRangeLong )
				});
				
				this.spellEffectSoundID = args.targetCharacter._internal.soundEffects.push( buffSwarmWingsSound ) - 1;
			
				soundManager.play( 'buffSwarmWings' + spellEffects.soundIncrementor, 
												{
													onfinish: function () 
													{
														delete args.targetCharacter._internal.soundEffects[ self.spellEffectSoundID ];	
													}
												});

				self.alpha = 0;
				var _animateFunction =	function()
																	{
																		if( self.alpha < 1 )
																		{
																			self.alpha += 0.2;
																		}
																		
																		self.rotation += Math.PI / 32;

																		_animateFunctionPointer = setTimeout( _animateFunction, 50 );
																	}						
			break;
			case 1:
				
				var _animateFunction =	function()
													{
														
														yMovement -= self.stepDistance;
														
														if( yMovement < -43 )
														{
															self.alpha -= 0.1;
														}
														
														if( self.alpha < 0 )
														{
															self.alpha = 0;
														
															return;
														}
														
														_animateFunctionPointer = setTimeout( _animateFunction, 40 );
													}
											
			break;
		}
		
		var _animateFunctionPointer = setTimeout( _animateFunction, 1 );
		
		setTimeout( function() 
								{ 
									clearTimeout( _animateFunctionPointer );
									
									var _timeout = setInterval( function()
																		{
																			self.alpha -= 0.1;
																			
																			if( self.alpha > 0 )
																			{
																				return;
																			}
																			
																			self.remove();
																			
																			clearInterval( _timeout );
																			
																		}, 100 );
								}, self.duration );
		
	} //end the buffSwarmWings

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.buffSwarmWingsComplete.js
*/


	spellEffects.buffSwarmWingsComplete = function( args )
	{
		this.ID = spellEffects.layer[1].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		
		this.draw = function()
		{
			
		}
		
		var effect0 = new spellEffects.buffSwarmWings({ 			
				sourceCharacter: args.sourceCharacter,														
				targetCharacter: args.targetCharacter,
				component: 0
		});
		
		var effect1 = new spellEffects.buffSwarmWings({ 																						
				sourceCharacter: args.sourceCharacter,
				targetCharacter: args.targetCharacter,
				component: 1
		});
		
		this.remove = function()
		{
			effect0.remove();
			effect1.remove();
			
			spellEffects.layer[1][ self.ID ] = null;
				
			delete args.targetCharacter._internal.spellEffects[ self.characterSpellEffectID ];
		}
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.buffTactics.js
*/


	spellEffects.buffTactics = function( args )
	{
		this.ID = spellEffects.layer[1].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		this.alpha = 1;
		this.duration = 2000;
		this.offsetX = 30;
		this.offsetY = 30;
		this.rotation = 0;
		this.stepDistance = 2;
		this.maximumDistance = -40;
		this.deleteRange = 60;
		this.previousX = args.targetCharacter.characterData.character_zone_x - this.offsetX;
		this.previousY = args.targetCharacter.characterData.character_zone_y - this.offsetY;
		
		var self = this;
		
		var yMovement = 0;
		
		var buffTacticsImageObject = new Image();
		buffTacticsImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/buffs/tactics/tactics' + args.component + '.png';
		
		//draw the the buffTactics
		this.draw = function()
		{
			Map.ctx.globalAlpha = self.alpha;
			
			Map.ctx.save();
			
			Map.ctx.translate( args.targetCharacter.characterData.character_zone_x + Map.viewPortX, args.targetCharacter.characterData.character_zone_y + Map.viewPortY );
			
			Map.ctx.rotate( self.rotation );
			
			Map.ctx.drawImage(
							buffTacticsImageObject,
							- self.offsetX,
							- self.offsetY + yMovement
						);
										
			self.previousX = args.targetCharacter.characterData.character_zone_x - self.offsetX;
			self.previousY = args.targetCharacter.characterData.character_zone_y - self.offsetY + yMovement;
										
			Map.ctx.restore();
			
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the buffTactics
		this.remove = function()
		{
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[1][ this.ID ] = null;
			delete args.targetCharacter._internal.spellEffects[ this.characterSpellEffectID ];
		}
			
		switch( args.component )
		{
			case 0:
				var buffTacticsSound = soundManager.createSound({
						id: 'buffTactics' + ( ++spellEffects.soundIncrementor ),
						url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/buffs/orchestral-scary-impact.mp3',
						volume: spellEffects.volumeByRange ( Component.bugcraft.currentCharacterObject.characterData.character_zone_x, Component.bugcraft.currentCharacterObject.characterData.character_zone_y, args.targetCharacter.characterData.character_zone_x, args.targetCharacter.characterData.character_zone_y, spellEffects.volumeRangeLong )
				});
				
				this.spellEffectSoundID = args.targetCharacter._internal.soundEffects.push( buffTacticsSound ) - 1;
			
				soundManager.play( 'buffTactics' + spellEffects.soundIncrementor, 
												{
													onfinish: function () 
													{
														delete args.targetCharacter._internal.soundEffects[ self.spellEffectSoundID ];	
													}
												});

				self.alpha = 0;
				var _animateFunction =	function()
																	{
																		if( self.alpha < 1 )
																		{
																			self.alpha += 0.2;
																		}
																		
																		self.rotation += Math.PI / 32;

																		_animateFunctionPointer = setTimeout( _animateFunction, 40 );
																	}						
			break;
			case 1:
				
				var _animateFunction =	function()
														{
															
															yMovement -= self.stepDistance;
															
															if( yMovement < self.maximumDistance )
															{
																yMovement = self.maximumDistance;
																
																self.alpha -= 0.1;
																
																if( self.alpha < 0 )
																{
																	self.alpha = 0;
																
																	clearTimeout( _animateFunctionPointer );
																}
																
															}
															
															_animateFunctionPointer = setTimeout( _animateFunction, 40 );
														}
								
			break;
		}
		
		var _animateFunctionPointer = setTimeout( _animateFunction, 10 );
		
		setTimeout( function() 
								{ 
									clearTimeout( _animateFunctionPointer );
									
									var _timeout = setInterval( function()
																		{
																			self.alpha -= 0.1;
																			
																			if( self.alpha > 0 )
																			{
																				return;
																			}
																			
																			self.remove();
																			
																			clearInterval( _timeout );
																			
																		}, 60 );
								}, self.duration );
		
	} //end the buffTactics

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.buffTacticsComplete.js
*/


	spellEffects.buffTacticsComplete = function( args )
	{
		this.ID = spellEffects.layer[1].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		
		this.draw = function()
		{
			
		}
		
		var effect0 = new spellEffects.buffTactics({ 			
				sourceCharacter: args.sourceCharacter,														
				targetCharacter: args.targetCharacter,
				component: 0
		});
		
		var effect1 = new spellEffects.buffTactics({ 																						
				sourceCharacter: args.sourceCharacter,
				targetCharacter: args.targetCharacter,
				component: 1
		});
		
		this.remove = function()
		{
			effect0.remove();
			effect1.remove();
			
			spellEffects.layer[1][ self.ID ] = null;
				
			delete args.targetCharacter._internal.spellEffects[ self.characterSpellEffectID ];
		}
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.buffWaxShell.js
*/


	spellEffects.buffWaxShell = function( args )
	{
		this.ID = spellEffects.layer[1].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		this.alpha = 1;
		this.offsetX = 25;
		this.offsetY = 30;
		this.rotation = Math.random() * (Math.PI * 2);
		this.deleteRange = 60;
		this.previousX = args.targetCharacter.characterData.character_zone_x - this.offsetX;
		this.previousY = args.targetCharacter.characterData.character_zone_y - this.offsetY;
		
		var self = this;
		
		var buffWaxShellImageObject = new Image();
		buffWaxShellImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/buffs/waxShell/wax_shell0.png';
		
		var buffWaxShellSound = soundManager.createSound({
				id: 'buffWaxShell' + ( ++spellEffects.soundIncrementor ),
				url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/buffs/woosh fast.mp3', 
				volume: spellEffects.volumeByRange ( Component.bugcraft.currentCharacterObject.characterData.character_zone_x, Component.bugcraft.currentCharacterObject.characterData.character_zone_y, args.targetCharacter.characterData.character_zone_x, args.targetCharacter.characterData.character_zone_y, spellEffects.volumeRangeLong )
		});
		
		this.spellEffectSoundID = args.targetCharacter._internal.soundEffects.push( buffWaxShellSound ) - 1;
		
		soundManager.play( 'buffWaxShell' + spellEffects.soundIncrementor, 
										{
											onfinish: function () 
											{
												delete args.targetCharacter._internal.soundEffects[ self.spellEffectSoundID ];	
											}
										});
		
		//draw the buffWaxShell
		this.draw = function()
		{
			Map.ctx.globalAlpha = self.alpha;
			
			Map.ctx.drawImage(
											buffWaxShellImageObject,
											args.targetCharacter.characterData.character_zone_x + Map.viewPortX - self.offsetX,
											args.targetCharacter.characterData.character_zone_y + Map.viewPortY - self.offsetY
										);
							
			self.previousX = args.targetCharacter.characterData.character_zone_x - self.offsetX;
			self.previousY = args.targetCharacter.characterData.character_zone_y - self.offsetY;
		
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the buffWaxShell
		this.remove = function()
		{
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[1][ this.ID ] = null;
			clearTimeout( _animateFunctionPointer );
			delete args.targetCharacter._internal.spellEffects[ this.characterSpellEffectID ];
		}
		
		var i = 0;
		
		var _animateFunction = function()
												{
													buffWaxShellImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/buffs/waxShell/wax_shell' + i++ + '.png';
													
													if( i < 7 )
													{
														_animateFunctionPointer = setTimeout( _animateFunction, 50 );
														return;
													}
												
													var _t = setInterval( function()
																					{
																						self.alpha -= 0.1;
																						
																						if( self.alpha > 0 )
																						{
																							return;
																						}
																						
																						self.remove();
																						
																						clearInterval( _t );
																						
																					}, 60 );
																					
												}
												
		var _animateFunctionPointer = setTimeout( _animateFunction, 50 );
							
	} //end waxShell

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.buffWings.js
*/


	spellEffects.buffWings = function( args )
	{
		this.ID = spellEffects.layer[1].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		this.alpha = 1;
		this.duration = 2000;
		this.offsetX = 30;
		this.offsetY = 30;
		this.rotation = 0;
		this.stepDistance = 2;
		this.maximumDistance = -40;
		this.deleteRange = 60;
		this.previousX = args.targetCharacter.characterData.character_zone_x - this.offsetX;
		this.previousY = args.targetCharacter.characterData.character_zone_y - this.offsetY;
		
		var self = this;
		
		var yMovement = 0;
		
		var buffWingsImageObject = new Image();
		buffWingsImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/buffs/wings/wings' + args.component + '.png';
		
		//draw the the buffWings
		this.draw = function()
		{
			Map.ctx.globalAlpha = self.alpha;
			
			Map.ctx.save();
			
			Map.ctx.translate( args.targetCharacter.characterData.character_zone_x + Map.viewPortX, args.targetCharacter.characterData.character_zone_y + Map.viewPortY );
			
			Map.ctx.rotate( self.rotation );
			
			Map.ctx.drawImage(
							buffWingsImageObject,
							- self.offsetX,
							- self.offsetY + yMovement
						);
										
			self.previousX = args.targetCharacter.characterData.character_zone_x - self.offsetX;
			self.previousY = args.targetCharacter.characterData.character_zone_y - self.offsetY + yMovement;
										
			Map.ctx.restore();
			
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the buffWings
		this.remove = function()
		{
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[1][ this.ID ] = null;
			delete args.targetCharacter._internal.spellEffects[ this.characterSpellEffectID ];
		}
			
		switch( args.component )
		{
			case 0:
				var buffWingsSound = soundManager.createSound({
						id: 'buffWings' + ( ++spellEffects.soundIncrementor ),
						url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/buffs/WHOOSH.mp3',
						volume: spellEffects.volumeByRange ( Component.bugcraft.currentCharacterObject.characterData.character_zone_x, Component.bugcraft.currentCharacterObject.characterData.character_zone_y, args.targetCharacter.characterData.character_zone_x, args.targetCharacter.characterData.character_zone_y, spellEffects.volumeRangeLong )
				});
				
				this.spellEffectSoundID = args.targetCharacter._internal.soundEffects.push( buffWingsSound ) - 1;
			
				soundManager.play( 'buffWings' + spellEffects.soundIncrementor, 
												{
													onfinish: function () 
													{
														delete args.targetCharacter._internal.soundEffects[ self.spellEffectSoundID ];	
													}
												});

				self.alpha = 0;
				var _animateFunction =	function()
																	{
																		if( self.alpha < 1 )
																		{
																			self.alpha += 0.2;
																		}
																		
																		self.rotation += Math.PI / 32;

																		_animateFunctionPointer = setTimeout( _animateFunction, 40 );
																	}						
			break;
			case 1:
				
				var _animateFunction =	function()
														{
															
															yMovement -= self.stepDistance;
															
															if( yMovement < self.maximumDistance )
															{
																yMovement = self.maximumDistance;
																
																self.alpha -= 0.1;
																
																if( self.alpha < 0 )
																{
																	self.alpha = 0;
																
																	clearTimeout( _animateFunctionPointer );
																}
																
															}
															
															_animateFunctionPointer = setTimeout( _animateFunction, 40 );
														}
													
			break;
		}
		
		var _animateFunctionPointer = setTimeout( _animateFunction, 10 );
		
		setTimeout( function() 
								{ 
									clearTimeout( _animateFunctionPointer );
									
									var _timeout = setInterval( function()
																		{
																			self.alpha -= 0.1;
																			
																			if( self.alpha > 0 )
																			{
																				return;
																			}
																			
																			self.remove();
																			
																			clearInterval( _timeout );
																			
																		}, 60 );
								}, self.duration );
		
	} //end the buffWings

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.buffWingsComplete.js
*/


	spellEffects.buffWingsComplete = function( args )
	{
		this.ID = spellEffects.layer[1].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		
		this.draw = function()
		{
			
		}
		
		var effect0 = new spellEffects.buffWings({ 			
				sourceCharacter: args.sourceCharacter,														
				targetCharacter: args.targetCharacter,
				component: 0
		});
		
		var effect1 = new spellEffects.buffWings({ 																						
				sourceCharacter: args.sourceCharacter,
				targetCharacter: args.targetCharacter,
				component: 1
		});
		
		this.remove = function()
		{
			effect0.remove();
			effect1.remove();
			
			spellEffects.layer[1][ self.ID ] = null;
				
			delete args.targetCharacter._internal.spellEffects[ self.characterSpellEffectID ];
		}
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.castAnimation.js
*/


	spellEffects.castAnimation = function( args )
	{
		this.ID = spellEffects.layer[1].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		this.alpha = 1;
		this.offsetX = 30;
		this.offsetY = 30;
		this.rotation = Math.random() * (Math.PI * 2);
		this.deleteRange = 60;
		this.previousX = args.targetCharacter.characterData.character_zone_x - this.offsetX;
		this.previousY = args.targetCharacter.characterData.character_zone_y - this.offsetY;
		this.duration = 1000 - Component.bugcraft.latency;
		
		var self = this;
		
		var castAnimationImageObject = new Image();
		castAnimationImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/heal/noble/healing_noble' + args.component + '.png';
		
		//draw the castAnimation
		this.draw = function()
		{
			Map.ctx.globalAlpha = self.alpha;
			
			Map.ctx.save();
			
			Map.ctx.translate( args.targetCharacter.characterData.character_zone_x + Map.viewPortX, args.targetCharacter.characterData.character_zone_y + Map.viewPortY );
			
			Map.ctx.rotate( self.rotation );
			
			Map.ctx.drawImage(
									castAnimationImageObject,
									- self.offsetX,
									- self.offsetY
								);
										
			self.previousX = args.targetCharacter.characterData.character_zone_x - self.offsetX;
			self.previousY = args.targetCharacter.characterData.character_zone_y - self.offsetY;
	
			Map.ctx.restore();
			
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the castAnimation
		
		this.remove = function()
		{
			clearTimeout( _animateFunctionPointer );
			
			var _t = setInterval( function()
			{
				self.alpha -= 0.1;
				
				if( self.alpha > 0 )
				{
					return;
				}
				
				clearInterval( _t );
				
				spellEffects.layerCleaner.push( self );
				spellEffects.layer[1][ self.ID ] = null;
				
				delete args.targetCharacter._internal.spellEffects[ self.characterSpellEffectID ];
				
			}, 20 );
		}
		
		
		
		switch( args.component )
		{
			case 0:
				
				var i = 0;
				/*
				var castAnimationSound = soundManager.createSound({
						id: 'castAnimation' + ( ++spellEffects.soundIncrementor ),
						url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/heal/ELECTRONIC.mp3',
						volume: spellEffects.volumeByRange ( Component.bugcraft.currentCharacterObject.characterData.character_zone_x, Component.bugcraft.currentCharacterObject.characterData.character_zone_y, args.targetCharacter.characterData.character_zone_x, args.targetCharacter.characterData.character_zone_y, spellEffects.volumeRangeLong )
				});
				
				this.spellEffectSoundID = args.targetCharacter._internal.soundEffects.push( castAnimationSound ) - 1;
				
				soundManager.play( 'castAnimation' + spellEffects.soundIncrementor, 
												{
													onfinish: function () 
													{
														delete args.targetCharacter._internal.soundEffects[ self.spellEffectSoundID ];	
													}
												});
				*/
				
				var _animateFunction = function()
				{
					castAnimationImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/heal/noble/healing_noble' + i++ + '.png';
					
					if( i < 2 )
					{
						_animateFunctionPointer = setTimeout( _animateFunction, 70 );
						
						return;
					}
					
					i = 0;
				}
				
				var _animateFunctionPointer = setTimeout( _animateFunction, 50 );
				
			break;
			case 2:
				
				self.alpha = 0;
				var _animateFunction = function()
				{
					if( self.alpha < 1 )
					{
						self.alpha += 0.2;
					}

					self.rotation -= Math.PI / 16;

					_animateFunctionPointer = setTimeout( _animateFunction, 30 );
				}
																	
				var _animateFunctionPointer = setTimeout( _animateFunction, 10 );
				
			break;
		}
		
		
	} //end spinning aura

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.castAnimationComplete.js
*/


	spellEffects.castAnimationComplete = function( args )
	{
		this.ID = spellEffects.layer[1].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		
		this.draw = function()
		{
			
		}
		
		var effect0 = new spellEffects.castAnimation({ 			
				sourceCharacter: args.sourceCharacter,														
				targetCharacter: args.targetCharacter,
				component: 0
		});
		
		var effect2 = new spellEffects.castAnimation({ 																						
				sourceCharacter: args.sourceCharacter,
				targetCharacter: args.targetCharacter,
				component: 2
		});

		this.remove = function()
		{
			effect0.remove();
			effect2.remove();
			
			spellEffects.layer[1][ self.ID ] = null;
				
			delete args.targetCharacter._internal.spellEffects[ self.characterSpellEffectID ];
		}
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.characterDeathAnimation.js
*/


	spellEffects.characterDeathAnimation = function( args )
	{
		this.ID = spellEffects.layer[1].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		
		this.draw = function()
		{
			
		}
		
		var deathExplosion = new spellEffects.deathExplosion({ 																							
				sourceCharacter: args.sourceCharacter,
				targetCharacter: args.targetCharacter
		});
	
		var fade = new spellEffects.characterFadeOutFast({ 			
				sourceCharacter: args.sourceCharacter,														
				targetCharacter: args.targetCharacter
		});
		
		setTimeout( function()
							{
								var death = new spellEffects.deathDecayComplete({ 			
										sourceCharacter: args.sourceCharacter,														
										targetCharacter: args.targetCharacter,
								});
							}, 100 );
		
		this.remove = function()
		{
			deathExplosion.remove();
			fade.remove();
			death.remove();
			
			spellEffects.layer[1][ self.ID ] = null;
				
			delete args.targetCharacter._internal.spellEffects[ self.characterSpellEffectID ];
		}
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.characterFadeIn.js
*/


	spellEffects.characterFadeIn = function( args )
	{
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		
		var self = this, _animateFunctionPointer = null;
	
		this.remove = function()
		{
			clearTimeout( _animateFunctionPointer );
			
			delete args.targetCharacter._internal.spellEffects[ this.characterSpellEffectID ];
		}
		
		var _iSpellEffects = args.targetCharacter._internal.spellEffects;
		
		for( var i in _iSpellEffects )
		{
			var spellEffectObject = _iSpellEffects[i].constructor;
			
			if(
				spellEffectObject != spellEffects.characterFadeInLong
				&& spellEffectObject != spellEffects.characterFadeOut
				&& spellEffectObject != spellEffects.characterFadeOutFast
				&& spellEffectObject != spellEffects.characterInvisibility
			)
			{
				continue;
			}
			
			// effect needs to be removed
			
			_iSpellEffects[i].remove();
		}
		
		var _animateFunction =	function()
		{
			if( args.targetCharacter.characterData.characterImageAlpha > 1 )
			{
				args.targetCharacter.characterData.characterImageAlpha = 1;
				
				self.remove();
				
				return;
			}

			args.targetCharacter.characterData.characterImageAlpha += 0.1;

			_animateFunctionPointer = setTimeout( _animateFunction, 100 );
		}
		
		_animateFunction();
		
		
	} //end spinning aura

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.characterFadeInLong.js
*/


	spellEffects.characterFadeInLong = function( args )
	{
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		
		var self = this;
	
		this.remove = function()
		{
		
			clearTimeout( _animateFunctionPointer );
			delete args.targetCharacter._internal.spellEffects[ this.characterSpellEffectID ];
		
		}
		
		var _iSpellEffects = args.targetCharacter._internal.spellEffects;
		
		for( var i in _iSpellEffects )
		{
			var spellEffectObject = _iSpellEffects[i].constructor;
			
			if(
				spellEffectObject != spellEffects.characterFadeIn
				&& spellEffectObject != spellEffects.characterFadeOut
				&& spellEffectObject != spellEffects.characterFadeOutFast
				&& spellEffectObject != spellEffects.characterInvisibility
			)
			{
				continue;
			}
			
			// effect needs to be removed
			
			_iSpellEffects[i].remove();
		}
		
		var _animateFunction =	function()
															{
																if( args.targetCharacter.characterData.characterImageAlpha > 1 )
																{
																	args.targetCharacter.characterData.characterImageAlpha = 1;
																	
																	self.remove();
																	
																	return;
																}
	
																args.targetCharacter.characterData.characterImageAlpha += 0.05;
	
																_animateFunctionPointer = setTimeout( _animateFunction, 250 );
															}			
			
		
		var _animateFunctionPointer = setTimeout( _animateFunction, 50 );
		
		
	} //end spinning aura

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.characterFadeOut.js
*/


	spellEffects.characterFadeOut = function( args )
	{
		var self = this,
				_characterFadeOutFunctionPointer = null,
				_tc = args.targetCharacter,
				_tcd = _tc.characterData,
				_iSpellEffects = _tc._internal.spellEffects;
		
		this.characterSpellEffectID = _iSpellEffects.push( this ) - 1;
			
		this.remove = function()
		{
			clearTimeout( _characterFadeOutFunctionPointer );
			
			delete _iSpellEffects[ self.characterSpellEffectID ];
			
			args.after();
		}
		
		for( var i in _iSpellEffects )
		{
			var spellEffectObject = _iSpellEffects[i].constructor;
			
			if(
				spellEffectObject != spellEffects.characterFadeIn
				&& spellEffectObject != spellEffects.characterFadeInLong
				&& spellEffectObject != spellEffects.characterFadeOutFast
				&& spellEffectObject != spellEffects.characterInvisibility
			)
			{
				continue;
			}
			
			// effect needs to be removed
			
			_iSpellEffects[i].remove();
		}
		
		var _animateFunction = function()
		{
			if( _tcd.characterImageAlpha < 0.1 )
			{
				_tcd.characterImageAlpha = 0;
				
				self.remove();
				
				return;
			}
			
			_tcd.characterImageAlpha -= 0.1;

			_characterFadeOutFunctionPointer = setTimeout( _animateFunction, 100 );
		}
			
		_animateFunction();
	} //end spinning aura

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.characterFadeOutFast.js
*/


	spellEffects.characterFadeOutFast = function( args )
	{
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		
		var self = this;
	
		this.remove = function()
		{
		
			clearTimeout( _animateFunctionPointer );
			delete args.targetCharacter._internal.spellEffects[ this.characterSpellEffectID ];
		
		}
		
		var _iSpellEffects = args.targetCharacter._internal.spellEffects;
		
		for( var i in _iSpellEffects )
		{
			var spellEffectObject = _iSpellEffects[i].constructor;
			
			if(
				spellEffectObject != spellEffects.characterFadeIn
				&& spellEffectObject != spellEffects.characterFadeInLong
				&& spellEffectObject != spellEffects.characterFadeOut
				&& spellEffectObject != spellEffects.characterInvisibility
			)
			{
				continue;
			}
			
			// effect needs to be removed
			
			_iSpellEffects[i].remove();
		}
		
		var _animateFunction =	function()
															{
																if( args.targetCharacter.characterData.characterImageAlpha < 0.1 )
																{
																	args.targetCharacter.characterData.characterImageAlpha = 0;
																	
																	self.remove();
																	
																	return;
																}
	
																args.targetCharacter.characterData.characterImageAlpha -= 0.1;
	
																_animateFunctionPointer = setTimeout( _animateFunction, 20 );
															}			
			
		
		var _animateFunctionPointer = setTimeout( _animateFunction, 50 );
		
		
	} //end spinning aura

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.characterInvisibility.js
*/


	spellEffects.characterInvisibility = function( args )
	{
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		
		var invisibilitySoundObject = soundManager.createSound({
				id: 'auraElectric' + ( ++spellEffects.soundIncrementor ),
				url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/invisibility/fadeOut.mp3',
				volume: spellEffects.volumeByRange ( Component.bugcraft.currentCharacterObject.characterData.character_zone_x, Component.bugcraft.currentCharacterObject.characterData.character_zone_y, args.targetCharacter.characterData.character_zone_x, args.targetCharacter.characterData.character_zone_y, spellEffects.volumeRangeLong )
		});
		
		this.spellEffectSoundID = args.targetCharacter._internal.soundEffects.push( invisibilitySoundObject ) - 1;
		
		var self = this, _animateFunctionPointer = null;
	
		this.remove = function()
		{
			clearTimeout( _animateFunctionPointer );
			
			delete args.targetCharacter._internal.spellEffects[ this.characterSpellEffectID ];
		}
		
		var _iSpellEffects = args.targetCharacter._internal.spellEffects;
		
		for( var i in _iSpellEffects )
		{
			var spellEffectObject = _iSpellEffects[i].constructor;
			
			if(
				spellEffectObject != spellEffects.characterFadeIn
				&& spellEffectObject != spellEffects.characterFadeInLong
				&& spellEffectObject != spellEffects.characterFadeOut
				&& spellEffectObject != spellEffects.characterFadeOutFast
			)
			{
				continue;
			}
			
			// effect needs to be removed
			
			_iSpellEffects[i].remove();
		}
		
		args.targetCharacter.characterData.characterImageAlpha = 1;
		
		var _animateFunction = function()
		{
			if( args.targetCharacter.characterData.characterImageAlpha  < 0.5)
			{
				args.targetCharacter.characterData.characterImageAlpha = 0.5;
				
				self.remove();
				
				return;
			}

			args.targetCharacter.characterData.characterImageAlpha -= 0.1;

			_animateFunctionPointer = setTimeout( _animateFunction, 100 );
		}
		
		_animateFunction();
		
		
	} //end spinning aura

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.characters.js
*/

	
	spellEffects.characters = function( args )
	{
		this.ID = spellEffects.layer[1].push( this ) - 1;
		this.alpha = 1;
	
		var bee = new Image();
		bee.src =  'images/_characters/character' + Math.floor( Math.random() * 6 )  + '.png';
	
	
		this.draw = function()
		{
			spellEffects.ctx.globalAlpha = self.alpha;
			
			spellEffects.ctx.save();
			
			spellEffects.ctx.translate( args.x, args.y );
			
			spellEffects.ctx.rotate( args.rotation );
		
			spellEffects.ctx.drawImage(
											bee, 
											- 30, 
											- 35
										);
										
			spellEffects.ctx.restore();
										
			spellEffects.ctx.globalAlpha = 1;
		}
		
		//remove the starAura
		var self = this;
		
		this.remove = function()
		{
			spellEffects.layer[1][ this.ID ] = null;
		}
		
		setTimeout( function() 
								{ 
									var _t = setInterval( function()
																		{
																			self.alpha -= 0.1;
																			
																			if( self.alpha > 0 )
																			{
																				return;
																			}
																			
																			self.remove();
																			
																			clearInterval( _t );
																			
																		}, 100 );
								}, args.duration );

	} //end characters

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.chestOpennoLoop.js
*/

	
	spellEffects[ 'chestOpennoLoop' ] = function( args )
	{
		var self = this,
				_ccd = Component.bugcraft.currentCharacterObject.characterData,
				_moveFrames = {},
				_tc = args.targetCharacter,
				_tcd = _tc.characterData,
				_changeFrameFunctionPointer = null,
				_currentIndex = 1,
				_maxFrames = 4;
		
		this.ID = spellEffects.layer[0].push( this ) - 1;
		this.characterSpellEffectID = _tc._internal.spellEffects.push( this ) - 1;
		this.offsetX = 20;
		this.offsetY = 20;
		this.rotation = _tcd.character_rotation;
		this.deleteRange = 40;
		this.previousX = _tcd.character_zone_x - this.offsetX;
		this.previousY = _tcd.character_zone_y - this.offsetY;
		
		// initialize
		
		for(var i=1;i<=_maxFrames;i++)
		{
			_moveFrames[ i ] = { image: new Image(), alpha: 0 };
			_moveFrames[ i ].image.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/chestOpennoLoop/chestOpennoLoop' + i + '.png';
		}
		
		//draw the bombardierBeetleDeath spatter
		this.draw = function()
		{
			Map.ctx.save();
			
			Map.ctx.translate( self.previousX + self.offsetX + Map.viewPortX, self.previousY + self.offsetY + Map.viewPortY );
			
			Map.ctx.rotate( ( self.rotation - 90 ) * Math.PI / 180 );
			
			Map.ctx.shadowColor = 'rgba(0, 0, 0, 0.7)';
			Map.ctx.shadowOffsetX = 3;
			Map.ctx.shadowOffsetY = 3;
			
			Map.ctx.drawImage(
							_moveFrames[ _currentIndex ].image,
							- self.offsetX,
							- self.offsetY
						);
			
			Map.ctx.restore();
			
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the deathDecay
		this.remove = function()
		{
			clearTimeout( _changeFrameFunctionPointer );
			
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[0][ this.ID ] = null;
			
			delete _tc._internal.spellEffects[ this.characterSpellEffectID ];
		}
		
		var _changeFrameFunction = function()
		{
			_currentIndex++;
			
			if( _currentIndex > _maxFrames )
			{
				self.remove();
				
				return;
			}
			
			_changeFrameFunctionPointer = setTimeout( _changeFrameFunction, 100 );
		}
		
		_changeFrameFunction();
		
	} //end bombardierBeetleDeath

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.chestOpennoLoopSoundL.js
*/

	
	spellEffects[ 'chestOpennoLoopSoundL' ] = function( args )
	{
		var self = this,
				_ccd = Component.bugcraft.currentCharacterObject.characterData,
				_moveFrames = {},
				_tc = args.targetCharacter,
				_tcd = _tc.characterData,
				_changeFrameFunctionPointer = null,
				_currentIndex = 1,
				_maxFrames = 4;
		
		this.ID = spellEffects.layer[0].push( this ) - 1;
		this.characterSpellEffectID = _tc._internal.spellEffects.push( this ) - 1;
		this.offsetX = 20;
		this.offsetY = 20;
		this.rotation = _tcd.character_rotation;
		this.deleteRange = 40;
		this.previousX = _tcd.character_zone_x - this.offsetX;
		this.previousY = _tcd.character_zone_y - this.offsetY;
		
		// initialize
		
		Application.sound.playExclusive({
											url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/chestOpennoLoopSoundL/chestOpennoLoopSoundL.mp3',
											volume: spellEffects.volumeByRangeVoice(
																		_ccd.character_zone_x,
																		_ccd.character_zone_y,
																		_tcd.character_zone_x,
																		_tcd.character_zone_y,
																		spellEffects.volumeRangeLong
																	),
											onFinish: function()
											{
												
											}
										});
		
		for(var i=1;i<=_maxFrames;i++)
		{
			_moveFrames[ i ] = { image: new Image(), alpha: 0 };
			_moveFrames[ i ].image.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/chestOpennoLoopSoundL/chestOpennoLoopSoundL' + i + '.png';
		}
		
		//draw the bombardierBeetleDeath spatter
		this.draw = function()
		{
			Map.ctx.save();
			
			Map.ctx.translate( self.previousX + self.offsetX + Map.viewPortX, self.previousY + self.offsetY + Map.viewPortY );
			
			Map.ctx.rotate( ( self.rotation - 90 ) * Math.PI / 180 );
			
			Map.ctx.shadowColor = 'rgba(0, 0, 0, 0.7)';
			Map.ctx.shadowOffsetX = 3;
			Map.ctx.shadowOffsetY = 3;
			
			Map.ctx.drawImage(
							_moveFrames[ _currentIndex ].image,
							- self.offsetX,
							- self.offsetY
						);
			
			Map.ctx.restore();
			
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the deathDecay
		this.remove = function()
		{
			clearTimeout( _changeFrameFunctionPointer );
			
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[0][ this.ID ] = null;
			
			delete _tc._internal.spellEffects[ this.characterSpellEffectID ];
		}
		
		var _changeFrameFunction = function()
		{
			_currentIndex++;
			
			if( _currentIndex > _maxFrames )
			{
				self.remove();
				
				return;
			}
			
			_changeFrameFunctionPointer = setTimeout( _changeFrameFunction, 100 );
		}
		
		_changeFrameFunction();
		
	} //end bombardierBeetleDeath

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.cracks.js
*/


	spellEffects.cracks = function( args )
	{
		this.ID = spellEffects.layer[0].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		this.alpha = 1;
		this.offsetX = 30;
		this.offsetY = 30;
		this.rotation = Math.random() * (Math.PI * 2);
		this.deleteRange = 60;
		this.previousX = args.targetCharacter.characterData.character_zone_x - this.offsetX;
		this.previousY = args.targetCharacter.characterData.character_zone_y - this.offsetY;
		
		var self = this;
		
		var cracksImageObject = new Image();
		cracksImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/cracks/cracksgrow1.png';
		
		var cracksSound = soundManager.createSound({
				id: 'cracks' + ( ++spellEffects.soundIncrementor ),
				url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/dirt2.mp3', 
				volume: spellEffects.volumeByRange ( Component.bugcraft.currentCharacterObject.characterData.character_zone_x, Component.bugcraft.currentCharacterObject.characterData.character_zone_y, args.targetCharacter.characterData.character_zone_x, args.targetCharacter.characterData.character_zone_y, spellEffects.volumeRangeLong )
		});
		
		this.spellEffectSoundID = args.targetCharacter._internal.soundEffects.push( cracksSound ) - 1;
		
		soundManager.play( 'cracks' + spellEffects.soundIncrementor, 
										{
											onfinish: function () 
											{
												delete args.targetCharacter._internal.soundEffects[ self.spellEffectSoundID ];	
											}
										});
		
		fixedX = args.targetCharacter.characterData.character_zone_x;
		fixedY = args.targetCharacter.characterData.character_zone_y;
		
		//draw the cracks
		this.draw = function()
		{
			
			Map.ctx.globalAlpha = self.alpha;
			
			Map.ctx.save();
			
			Map.ctx.translate( fixedX + Map.viewPortX, fixedY + Map.viewPortY);
			
			Map.ctx.rotate( self.rotation );
			
			Map.ctx.drawImage(
							cracksImageObject,
							- self.offsetX,
							- self.offsetY
						);
			
			self.previousX = fixedX - self.offsetX;
			self.previousY = fixedY - self.offsetY;
			
			Map.ctx.restore();
			
			Map.ctx.globalAlpha = 1;

		}
		
		//remove the cracks
		this.remove = function()
		{
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[0][ this.ID ] = null;
			delete args.targetCharacter._internal.spellEffects[ this.characterSpellEffectID ];
		}

		setTimeout( function()
							{
								cracksImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/cracks/cracksgrow2.png';
								
								setTimeout( function()
													{
														cracksImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/cracks/cracksgrow3.png';
														
														var _t = setInterval( function()
																			{
																				self.alpha -= 0.06;
																				
																				if( self.alpha > 0 )
																				{
																					return;
																				}
																				
																				self.remove();
																				
																				clearInterval( _t );
																				
																			}, 300 );
													}, 60);
							}, 60);
							
							
	} //end cracks

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.cracksGroundFire.js
*/


	spellEffects.cracksGroundFire = function( args )
	{
		this.ID = spellEffects.layer[0].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		this.alpha = 1;
		this.offsetX = 30;
		this.offsetY = 30;
		this.rotation = Math.random() * (Math.PI * 2);
		this.deleteRange = 60;
		this.previousX = args.targetCharacter.characterData.character_zone_x - this.offsetX;
		this.previousY = args.targetCharacter.characterData.character_zone_y - this.offsetY;
		
		var self = this;
		
		var groundFireImageObject = new Image();
		groundFireImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/cracks/groundFire/ground_fire_grow0.png';
		
		var groundFireSound = soundManager.createSound({
				id: 'groundFire' + ( ++spellEffects.soundIncrementor ),
				url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/cracks/groundFire1.mp3', 
				volume: spellEffects.volumeByRange ( Component.bugcraft.currentCharacterObject.characterData.character_zone_x, Component.bugcraft.currentCharacterObject.characterData.character_zone_y, args.targetCharacter.characterData.character_zone_x, args.targetCharacter.characterData.character_zone_y, spellEffects.volumeRangeLong )
		});
		
		this.spellEffectSoundID = args.targetCharacter._internal.soundEffects.push( groundFireSound ) - 1;
		
		soundManager.play( 'groundFire' + spellEffects.soundIncrementor, 
										{
											onfinish: function () 
											{
												delete args.targetCharacter._internal.soundEffects[ self.spellEffectSoundID ];	
											}
										});
		
		fixedX = args.targetCharacter.characterData.character_zone_x;
		fixedY = args.targetCharacter.characterData.character_zone_y;
		
		//draw the groundFire
		this.draw = function()
		{
			
			Map.ctx.globalAlpha = self.alpha;
			
			Map.ctx.save()
			
			Map.ctx.translate( fixedX + Map.viewPortX, fixedY + Map.viewPortY);
			
			Map.ctx.rotate( self.rotation );
			
			Map.ctx.drawImage(
							groundFireImageObject,
							- self.offsetX,
							- self.offsetY
						);
						
			self.previousX = fixedX - self.offsetX;
			self.previousY = fixedY - self.offsetY;
						
			Map.ctx.restore();
			
			Map.ctx.globalAlpha = 1;

		}
		
		//remove the groundFire
		this.remove = function()
		{
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[0][ this.ID ] = null;
			delete args.targetCharacter._internal.spellEffects[ this.characterSpellEffectID ];
		}

		var i = 0;
		
		var _animate =  function()
							{
								groundFireImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/cracks/groundFire/ground_fire_grow' + ( i++ % 7 ) + '.png';

								if( i < 6 )
								{
									setTimeout( _animate, 120 );
									
									return;
								}
								
								i = 6;
								
								var _t = setInterval( function()
														{
															self.alpha -= 0.1;
															
															if( self.alpha > 0 )
															{
																return;
															}
															
															self.remove();
															
															clearInterval( _t );
															
														}, 60 );
							}
							
		_animate();
							
							
	} //end groundFire

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.criticalDamage.js
*/


	spellEffects.criticalDamage = function( args )
	{
		this.ID = spellEffects.layer[1].push( this ) - 1;
		this.alpha = 1;
		this.offsetX = 20;
		this.offsetY = - 10;
		this.maximumDistance = - 60;
		this.deleteRange = 50;
		this.previousX = args.targetCharacter.characterData.character_zone_x - this.offsetX;
		this.previousY = args.targetCharacter.characterData.character_zone_y - this.offsetY;
		
		var self = this;

		var fontFamily = "bold 20px sans-serif";
		
		//draw the floating damge effect
		this.draw = function()
		{
			Map.ctx.globalAlpha = self.alpha;
			
			Map.ctx.fillStyle = "yellow";
			Map.ctx.font = fontFamily;
			
			Map.ctx.fillText( 
								args.text, 
								args.targetCharacter.characterData.character_zone_x + Map.viewPortX - self.offsetX,
								args.targetCharacter.characterData.character_zone_y + Map.viewPortY - self.offsetY
								);
								
			self.previousX = args.targetCharacter.characterData.character_zone_x - self.offsetX;
			self.previousY = args.targetCharacter.characterData.character_zone_y + self.offsetY;
			
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the slash effect
		this.remove = function()
		{
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[1][ this.ID ] = null;
		}

		var i = 10;
		var _popup = function()
								{
									fontFamily = "bold " + i + "px sans-serif";
									i+=2;
									self.offsetX +=1
									
									if( i > 26 )
									{
										return;
									}
									
									setTimeout( _popup, 30);
								}
		_popup();
		
		var _animFunction =	function()
											{
												self.offsetY -= 5;
												
												if( self.offsetY < self.maximumDistance )
												{
													self.alpha-=0.05;
												}
												
												if( self.alpha < 0 )
												{
													self.remove();
													
													return;
												}
												
												setTimeout( _animFunction, 30 );
											}
		
		_animFunction();
		
	} //end floating damage

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.damageChemicalCorrosive.js
*/


	spellEffects.damageChemicalCorrosive = function( args )
	{
		this.ID = spellEffects.layer[1].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		this.alpha = 1;
		this.offsetX = 25;
		this.offsetY = 25;
		this.rotation = Math.random() * (Math.PI * 2);
		this.deleteRange = 50;
		this.previousX = args.targetCharacter.characterData.character_zone_x - this.offsetX;
		this.previousY = args.targetCharacter.characterData.character_zone_y - this.offsetY;
		
		var self = this;
		
		var damageChemicalCorrosiveImageObject = new Image();
		damageChemicalCorrosiveImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/damage/chemical/corrosive_spary_effect0.png';
		
		//draw the damageChemicalCorrosive
		this.draw = function()
		{
			Map.ctx.globalAlpha = self.alpha;
			
			Map.ctx.save();
			
			Map.ctx.translate( args.targetCharacter.characterData.character_zone_x + Map.viewPortX, args.targetCharacter.characterData.character_zone_y + Map.viewPortY );
			
			Map.ctx.rotate( self.rotation );
			
			Map.ctx.drawImage(
											damageChemicalCorrosiveImageObject,
											- self.offsetX,
											- self.offsetY
										);
			
			self.previousX = args.targetCharacter.characterData.character_zone_x - self.offsetX;
			self.previousY = args.targetCharacter.characterData.character_zone_y - self.offsetY;
										
			Map.ctx.restore();
			
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the damageChemicalCorrosive
		this.remove = function()
		{
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[1][ this.ID ] = null;
			clearTimeout( _animateFunctionPointer );
			delete args.targetCharacter._internal.spellEffects[ this.characterSpellEffectID ];
		}
		
		var i = 0;
		
		var _animateFunction = function()
												{
													damageChemicalCorrosiveImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/damage/chemical/corrosive_spary_effect' + i++ + '.png';
													
													if( i < 6 )
													{
														_animateFunctionPointer = setTimeout( _animateFunction, 50 );
														return;
													}
												
													var _t = setInterval( function()
																					{
																						self.alpha -= 0.1;
																						
																						if( self.alpha > 0 )
																						{
																							return;
																						}
																						
																						self.remove();
																						
																						clearInterval( _t );
																						
																					}, 60 );
																					
												}
												
		var _animateFunctionPointer = setTimeout( _animateFunction, 50 );
							
	} //end waxShell

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.damageChemicalPoison.js
*/


	spellEffects.damageChemicalPoison = function( args )
	{
		this.ID = spellEffects.layer[1].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		this.alpha = 1;
		this.offsetX = 30;
		this.offsetY = 30;
		this.rotation = Math.random() * (Math.PI * 2);
		this.deleteRange = 60;
		this.previousX = args.targetCharacter.characterData.character_zone_x - this.offsetX;
		this.previousY = args.targetCharacter.characterData.character_zone_y - this.offsetY;
		
		var self = this;
		
		var damageChemicalPoisonImageObject = new Image();
		damageChemicalPoisonImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/damage/chemical/poison_splatter0.png';
		
		//draw the damageChemicalPoison
		this.draw = function()
		{
			Map.ctx.globalAlpha = self.alpha;
			
			Map.ctx.save();
			
			Map.ctx.translate( args.targetCharacter.characterData.character_zone_x + Map.viewPortX, args.targetCharacter.characterData.character_zone_y + Map.viewPortY );
			
			Map.ctx.rotate( self.rotation );
			
			Map.ctx.drawImage(
											damageChemicalPoisonImageObject,
											- self.offsetX,
											- self.offsetY
										);
			
			self.previousX = args.targetCharacter.characterData.character_zone_x - self.offsetX;
			self.previousY = args.targetCharacter.characterData.character_zone_y - self.offsetY;
										
			Map.ctx.restore();
			
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the damageChemicalPoison
		this.remove = function()
		{
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[1][ this.ID ] = null;
			clearTimeout( _animateFunctionPointer );
			delete args.targetCharacter._internal.spellEffects[ this.characterSpellEffectID ];
		}
		
		var i = 0;
		
		var _animateFunction = function()
												{
													damageChemicalPoisonImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/damage/chemical/poison_splatter' + i++ + '.png';
													
													if( i < 2 )
													{
														_animateFunctionPointer = setTimeout( _animateFunction, 75 );
														return;
													}
												
													var _t = setInterval( function()
																					{
																						self.alpha -= 0.1;
																						
																						if( self.alpha > 0 )
																						{
																							return;
																						}
																						
																						self.remove();
																						
																						clearInterval( _t );
																						
																					}, 20 );
																					
												}
												
		var _animateFunctionPointer = setTimeout( _animateFunction, 10 );
							
	} //end waxShell

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.damageMeatExplode.js
*/


	spellEffects.damageMeatExplode = function( args )
	{
		this.ID = spellEffects.layer[1].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		this.alpha = 1;
		this.offsetX = 40;
		this.offsetY = 20;
		this.rotation = Math.random() * (Math.PI * 2);
		this.deleteRange = 60;
		this.previousX = args.targetCharacter.characterData.character_zone_x - this.offsetX;
		this.previousY = args.targetCharacter.characterData.character_zone_y - this.offsetY;
		
		var self = this;
		
		var damageMeatExplodeImageObject = new Image();
		damageMeatExplodeImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/damage/chemical/meat_explode0.png';
		
		//draw the damageMeatExplode
		this.draw = function()
		{
			Map.ctx.globalAlpha = self.alpha;
			
			Map.ctx.save();
			
			Map.ctx.translate( args.targetCharacter.characterData.character_zone_x + Map.viewPortX, args.targetCharacter.characterData.character_zone_y + Map.viewPortY );
			
			Map.ctx.rotate( self.rotation );
			
			Map.ctx.drawImage(
											damageMeatExplodeImageObject,
											- self.offsetX,
											- self.offsetY
										);
			
			self.previousX = args.targetCharacter.characterData.character_zone_x - self.offsetX;
			self.previousY = args.targetCharacter.characterData.character_zone_y - self.offsetY;
										
			Map.ctx.restore();
			
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the damageMeatExplode
		this.remove = function()
		{
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[1][ this.ID ] = null;
			clearTimeout( _animateFunctionPointer );
			delete args.targetCharacter._internal.spellEffects[ this.characterSpellEffectID ];
		}
		
		var i = 0;
		
		var _animateFunction = function()
												{
													damageMeatExplodeImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/damage/chemical/meat_explode' + i++ + '.png';
													
													if( i < 2 )
													{
														_animateFunctionPointer = setTimeout( _animateFunction, 75 );
														return;
													}
												
													var _t = setInterval( function()
																					{
																						self.alpha -= 0.1;
																						
																						if( self.alpha > 0 )
																						{
																							return;
																						}
																						
																						self.remove();
																						
																						clearInterval( _t );
																						
																					}, 70 );
																					
												}
												
		var _animateFunctionPointer = setTimeout( _animateFunction, 10 );
							
	} //end waxShell

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.damagePhysicalBloodSplatter.js
*/


	spellEffects.damagePhysicalBloodSplatter = function( args )
	{
		this.ID = spellEffects.layer[1].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		this.alpha = 1;
		this.offsetX = 30;
		this.offsetY = 30;
		this.rotation = Math.random() * (Math.PI * 2);
		this.deleteRange = 60;
		this.previousX = args.targetCharacter.characterData.character_zone_x - this.offsetX;
		this.previousY = args.targetCharacter.characterData.character_zone_y - this.offsetY;
		
		var self = this;
		
		var damagePhysicalBloodSplatterImageObject = new Image();
		damagePhysicalBloodSplatterImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/damage/physical/blood_spatter20.png';
		
		//draw the damagePhysicalBloodSplatter
		this.draw = function()
		{
			Map.ctx.globalAlpha = self.alpha;
			
			Map.ctx.save();
			
			Map.ctx.translate( args.targetCharacter.characterData.character_zone_x + Map.viewPortX, args.targetCharacter.characterData.character_zone_y + Map.viewPortY );
			
			Map.ctx.rotate( self.rotation );
			
			Map.ctx.drawImage(
											damagePhysicalBloodSplatterImageObject,
											- self.offsetX,
											- self.offsetY
										);
			
			self.previousX = args.targetCharacter.characterData.character_zone_x - self.offsetX;
			self.previousY = args.targetCharacter.characterData.character_zone_y - self.offsetY;
										
			Map.ctx.restore();
			
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the damagePhysicalBloodSplatter
		this.remove = function()
		{
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[1][ this.ID ] = null;
			clearTimeout( _animateFunctionPointer );
			delete args.targetCharacter._internal.spellEffects[ this.characterSpellEffectID ];
		}
		
		var i = 0;
		
		var _animateFunction = function()
												{
													damagePhysicalBloodSplatterImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/damage/physical/blood_spatter2' + i++ + '.png';
													
													if( i < 2 )
													{
														_animateFunctionPointer = setTimeout( _animateFunction, 85 );
														return;
													}
												
													var _t = setInterval( function()
																					{
																						self.alpha -= 0.1;
																						
																						if( self.alpha > 0 )
																						{
																							return;
																						}
																						
																						self.remove();
																						
																						clearInterval( _t );
																						
																					}, 70	 );
																					
												}
												
		var _animateFunctionPointer = setTimeout( _animateFunction, 10 );
							
	} //end waxShell

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.damagePhysicalDebris.js
*/


	spellEffects.damagePhysicalDebris = function( args )
	{
		this.ID = spellEffects.layer[1].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		this.alpha = 1;
		this.offsetX = 50;
		this.offsetY = 50;
		this.rotation = Math.random() * (Math.PI * 2);
		this.deleteRange = 100;
		this.previousX = args.targetCharacter.characterData.character_zone_x - this.offsetX;
		this.previousY = args.targetCharacter.characterData.character_zone_y - this.offsetY;
		
		var self = this;
		
		var damagePhysicalDebrisImageObject = new Image();
		damagePhysicalDebrisImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/damage/physical/debirs0.png';
		
		//draw the damagePhysicalDebris
		this.draw = function()
		{
			Map.ctx.globalAlpha = self.alpha;
			
			Map.ctx.save();
			
			Map.ctx.translate( args.targetCharacter.characterData.character_zone_x + Map.viewPortX, args.targetCharacter.characterData.character_zone_y + Map.viewPortY );
			
			Map.ctx.rotate( self.rotation );
			
			Map.ctx.drawImage(
											damagePhysicalDebrisImageObject,
											- self.offsetX,
											- self.offsetY
										);
			
			self.previousX = args.targetCharacter.characterData.character_zone_x - self.offsetX;
			self.previousY = args.targetCharacter.characterData.character_zone_y - self.offsetY;
										
			Map.ctx.restore();
			
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the damagePhysicalDebris
		this.remove = function()
		{
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[1][ this.ID ] = null;
			clearTimeout( _animateFunctionPointer );
			delete args.targetCharacter._internal.spellEffects[ this.characterSpellEffectID ];
		}
		
		var i = 0;
		
		var _animateFunction = function()
												{
													damagePhysicalDebrisImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/damage/physical/debirs' + i++ + '.png';
													
													if( i < 10 )
													{
														_animateFunctionPointer = setTimeout( _animateFunction, 75 );
														return;
													}
												
													var _t = setInterval( function()
																					{
																						self.alpha -= 0.1;
																						
																						if( self.alpha > 0 )
																						{
																							return;
																						}
																						
																						self.remove();
																						
																						clearInterval( _t );
																						
																					}, 30 );
																					
												}
												
		var _animateFunctionPointer = setTimeout( _animateFunction, 10 );
							
	} //end waxShell

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.damagePhysicalExplodeBits.js
*/


	spellEffects.damagePhysicalExplodeBits = function( args )
	{
		this.ID = spellEffects.layer[1].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		this.alpha = 1;
		this.offsetX = 20;
		this.offsetY = 50;
		this.rotation = Math.random() * (Math.PI * 2);
		this.deleteRange = 70;
		this.previousX = args.targetCharacter.characterData.character_zone_x - this.offsetX;
		this.previousY = args.targetCharacter.characterData.character_zone_y - this.offsetY;
		
		var self = this;
		
		var damagePhysicalExplodeBitsImageObject = new Image();
		damagePhysicalExplodeBitsImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/damage/physical/explode_bits0.png';
		
		//draw the damagePhysicalExplodeBits
		this.draw = function()
		{
			Map.ctx.globalAlpha = self.alpha;
			
			Map.ctx.save();
			
			Map.ctx.translate( args.targetCharacter.characterData.character_zone_x + Map.viewPortX, args.targetCharacter.characterData.character_zone_y + Map.viewPortY );
			
			Map.ctx.rotate( self.rotation );
			
			Map.ctx.drawImage(
											damagePhysicalExplodeBitsImageObject,
											- self.offsetX,
											- self.offsetY
										);
			
			self.previousX = args.targetCharacter.characterData.character_zone_x - self.offsetX;
			self.previousY = args.targetCharacter.characterData.character_zone_y - self.offsetY;
										
			Map.ctx.restore();
			
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the damagePhysicalExplodeBits
		this.remove = function()
		{
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[1][ this.ID ] = null;
			clearTimeout( _animateFunctionPointer );
			delete args.targetCharacter._internal.spellEffects[ this.characterSpellEffectID ];
		}
		
		var i = 0;
		
		var _animateFunction = function()
												{
													damagePhysicalExplodeBitsImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/damage/physical/explode_bits' + i++ + '.png';
													
													if( i < 2 )
													{
														_animateFunctionPointer = setTimeout( _animateFunction, 120 );
														return;
													}
												
													var _t = setInterval( function()
																					{
																						self.alpha -= 0.1;
																						
																						if( self.alpha > 0 )
																						{
																							return;
																						}
																						
																						self.remove();
																						
																						clearInterval( _t );
																						
																					}, 60 );
																					
												}
												
		var _animateFunctionPointer = setTimeout( _animateFunction, 10 );
							
	} //end waxShell

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.damagePhysicalExplodeGore.js
*/


	spellEffects.damagePhysicalExplodeGore = function( args )
	{
		this.ID = spellEffects.layer[1].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		this.alpha = 1;
		this.offsetX = 20;
		this.offsetY = 50;
		this.rotation = Math.random() * (Math.PI * 2);
		this.deleteRange = 70;
		this.previousX = args.targetCharacter.characterData.character_zone_x - this.offsetX;
		this.previousY = args.targetCharacter.characterData.character_zone_y - this.offsetY;
		
		var self = this;
		
		var damagePhysicalExplodeGoreImageObject = new Image();
		damagePhysicalExplodeGoreImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/damage/physical/explode_gore0.png';
		
		//draw the damagePhysicalExplodeGore
		this.draw = function()
		{
			Map.ctx.globalAlpha = self.alpha;
			
			Map.ctx.save();
			
			Map.ctx.translate( args.targetCharacter.characterData.character_zone_x + Map.viewPortX, args.targetCharacter.characterData.character_zone_y + Map.viewPortY );
			
			Map.ctx.rotate( self.rotation );
			
			Map.ctx.drawImage(
											damagePhysicalExplodeGoreImageObject,
											- self.offsetX,
											- self.offsetY
										);
			
			self.previousX = args.targetCharacter.characterData.character_zone_x - self.offsetX;
			self.previousY = args.targetCharacter.characterData.character_zone_y - self.offsetY;
										
			Map.ctx.restore();
			
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the damagePhysicalExplodeGore
		this.remove = function()
		{
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[1][ this.ID ] = null;
			clearTimeout( _animateFunctionPointer );
			delete args.targetCharacter._internal.spellEffects[ this.characterSpellEffectID ];
		}
		
		var i = 0;
		
		var _animateFunction = function()
												{
													damagePhysicalExplodeGoreImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/damage/physical/explode_gore' + i++ + '.png';
													
													if( i < 2 )
													{
														_animateFunctionPointer = setTimeout( _animateFunction, 90 );
														return;
													}
												
													var _t = setInterval( function()
																					{
																						self.alpha -= 0.1;
																						
																						if( self.alpha > 0 )
																						{
																							return;
																						}
																						
																						self.remove();
																						
																						clearInterval( _t );
																						
																					}, 70 );
																					
												}
												
		var _animateFunctionPointer = setTimeout( _animateFunction, 10 );
							
	} //end waxShell

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.damagePhysicalHitExplode.js
*/


	spellEffects.damagePhysicalHitExplode = function( args )
	{
		this.ID = spellEffects.layer[1].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		this.alpha = 1;
		this.offsetX = 20;
		this.offsetY = 50;
		this.rotation = Math.random() * (Math.PI * 2);
		this.deleteRange = 70;
		this.previousX = args.targetCharacter.characterData.character_zone_x - this.offsetX;
		this.previousY = args.targetCharacter.characterData.character_zone_y - this.offsetY;
		
		var self = this;
		
		var damagePhysicalHitExplodeImageObject = new Image();
		damagePhysicalHitExplodeImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/damage/physical/hit_explode0.png';
		
		//draw the damagePhysicalHitExplode
		this.draw = function()
		{
			Map.ctx.globalAlpha = self.alpha;
			
			Map.ctx.save();
			
			Map.ctx.translate( args.targetCharacter.characterData.character_zone_x + Map.viewPortX, args.targetCharacter.characterData.character_zone_y + Map.viewPortY );
			
			Map.ctx.rotate( self.rotation );
			
			Map.ctx.drawImage(
											damagePhysicalHitExplodeImageObject,
											- self.offsetX,
											- self.offsetY
										);
			
			self.previousX = args.targetCharacter.characterData.character_zone_x - self.offsetX;
			self.previousY = args.targetCharacter.characterData.character_zone_y - self.offsetY;
										
			Map.ctx.restore();
			
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the damagePhysicalHitExplode
		this.remove = function()
		{
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[1][ this.ID ] = null;
			clearTimeout( _animateFunctionPointer );
			delete args.targetCharacter._internal.spellEffects[ this.characterSpellEffectID ];
		}
		
		var i = 0;
		
		var _animateFunction = function()
												{
													damagePhysicalHitExplodeImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/damage/physical/hit_explode' + i++ + '.png';
													
													if( i < 2 )
													{
														_animateFunctionPointer = setTimeout( _animateFunction, 90 );
														return;
													}
												
													var _t = setInterval( function()
																					{
																						self.alpha -= 0.1;
																						
																						if( self.alpha > 0 )
																						{
																							return;
																						}
																						
																						self.remove();
																						
																						clearInterval( _t );
																						
																					}, 70 );
																					
												}
												
		var _animateFunctionPointer = setTimeout( _animateFunction, 10 );
							
	} //end waxShell

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.damagePhysicalShards.js
*/


	spellEffects.damagePhysicalShards = function( args )
	{
		this.ID = spellEffects.layer[1].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		this.alpha = 1;
		this.offsetX = 25;
		this.offsetY = 75;
		this.rotation = Math.random() * (Math.PI * 2);
		this.deleteRange = 100;
		this.previousX = args.targetCharacter.characterData.character_zone_x - this.offsetX;
		this.previousY = args.targetCharacter.characterData.character_zone_y - this.offsetY;
		
		var self = this;
		
		var damagePhysicalShardsImageObject = new Image();
		damagePhysicalShardsImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/damage/physical/shards0.png';
		
		//draw the damagePhysicalShards
		this.draw = function()
		{
			Map.ctx.globalAlpha = self.alpha;
			
			Map.ctx.save();
			
			Map.ctx.translate( args.targetCharacter.characterData.character_zone_x + Map.viewPortX, args.targetCharacter.characterData.character_zone_y + Map.viewPortY );
			
			Map.ctx.rotate( self.rotation );
			
			Map.ctx.drawImage(
											damagePhysicalShardsImageObject,
											- self.offsetX,
											- self.offsetY
										);
			
			self.previousX = args.targetCharacter.characterData.character_zone_x - self.offsetX;
			self.previousY = args.targetCharacter.characterData.character_zone_y - self.offsetY;
										
			Map.ctx.restore();
			
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the damagePhysicalShards
		this.remove = function()
		{
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[1][ this.ID ] = null;
			clearTimeout( _animateFunctionPointer );
			delete args.targetCharacter._internal.spellEffects[ this.characterSpellEffectID ];
		}
		
		var i = 0;
		
		var _animateFunction = function()
												{
													damagePhysicalShardsImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/damage/physical/shards' + i++ + '.png';
													
													if( i < 2 )
													{
														_animateFunctionPointer = setTimeout( _animateFunction, 100 );
														return;
													}
												
													var _t = setInterval( function()
																					{
																						self.alpha -= 0.1;
																						
																						if( self.alpha > 0 )
																						{
																							return;
																						}
																						
																						self.remove();
																						
																						clearInterval( _t );
																						
																					}, 60 );
																					
												}
												
		var _animateFunctionPointer = setTimeout( _animateFunction, 10 );
							
	} //end waxShell

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.deathDecay.js
*/

	
	spellEffects.deathDecay = function( args )
	{
		this.ID = spellEffects.layer[0].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		this.alpha = 1;
		this.offsetX = 25;
		this.offsetY = 25;
		this.rotation = args.rotation;
		this.deleteRange = 70;
		this.previousX = args.sourceCharacter.characterData.character_zone_x - this.offsetX - 10;
		this.previousY = args.sourceCharacter.characterData.character_zone_y - this.offsetY - 10;
		
		var self = this, deathDecayImageObject = new Image();
		deathDecayImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/deathAnimation/decomposing_bugbody' + args.component + '.png';
		
		//draw the deathDecay spatter
		this.draw = function()
		{
			Map.ctx.globalAlpha = self.alpha;
			
			Map.ctx.save();
			
			Map.ctx.translate( self.previousX + self.offsetX + Map.viewPortX, self.previousY + self.offsetY + Map.viewPortY );
			
			Map.ctx.rotate( self.rotation );
			
			Map.ctx.drawImage(
							deathDecayImageObject,
							- self.offsetX,
							- self.offsetY
						);
			
			Map.ctx.restore();
			
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the deathDecay
		this.remove = function()
		{
			clearTimeout( _fadeOutPointer );
			
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[0][ this.ID ] = null;
			
			delete args.targetCharacter._internal.spellEffects[ this.characterSpellEffectID ];
		}
		
		var _fadeOut = function()
		{
			if( self.alpha < 0.01 )
			{
				self.alpha = 0;
				
				self.remove();
				
				return;
			}
			
			self.alpha -= 0.005;
			
			_fadeOutPointer = setTimeout( _fadeOut, 60 );
		}
		
		var _fadeOutPointer = setTimeout( _fadeOut, args.component * 20000 );
					
	} //end deathDecay

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.deathDecayComplete.js
*/


	spellEffects.deathDecayComplete = function( args )
	{
		this.ID = spellEffects.layer[1].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		
		this.draw = function()
		{
			
		}
		
		var animRotation = Math.random() * (Math.PI * 2);
	
		var effect4 = new spellEffects.deathDecay({ 			
				sourceCharacter: args.sourceCharacter,														
				targetCharacter: args.targetCharacter,
				rotation:animRotation,
				component: 4
		});
		var effect3 = new spellEffects.deathDecay({ 																							
				sourceCharacter: args.sourceCharacter,
				targetCharacter: args.targetCharacter,
				rotation:animRotation,
				component: 3
		});
		var effect2 = new spellEffects.deathDecay({ 			
				sourceCharacter: args.sourceCharacter,														
				targetCharacter: args.targetCharacter,
				rotation:animRotation,
				component: 2
		});
		var effect1 = new spellEffects.deathDecay({ 																							
				sourceCharacter: args.sourceCharacter,
				targetCharacter: args.targetCharacter,
				rotation:animRotation,
				component: 1
		});
		
		this.remove = function()
		{
			effect4.remove();
			effect3.remove();
			effect2.remove();
			effect1.remove();
			
			spellEffects.layer[1][ self.ID ] = null;
				
			delete args.targetCharacter._internal.spellEffects[ self.characterSpellEffectID ];
		}
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.deathExplosion.js
*/

	
	spellEffects.deathExplosion = function( args )
	{
		this.ID = spellEffects.layer[1].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		this.alpha = 1;
		this.offsetX = 35;
		this.offsetY = 35;
		this.rotation = Math.random() * (Math.PI * 2);
		this.deleteRange = 70;
		this.previousX = args.sourceCharacter.characterData.character_zone_x - this.offsetX;
		this.previousY = args.sourceCharacter.characterData.character_zone_y - this.offsetY;
		
		var self = this;
		
		var deathExplosionImageObject = new Image();
		deathExplosionImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/deathAnimation/death_explode0.png';
		
		var deathExplosionSound = soundManager.createSound({
				id: 'deathExplosion' + ( ++spellEffects.soundIncrementor ),
				url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/slash/slash_splat.mp3',
				volume: spellEffects.volumeByRange ( Component.bugcraft.currentCharacterObject.characterData.character_zone_x, Component.bugcraft.currentCharacterObject.characterData.character_zone_y, args.targetCharacter.characterData.character_zone_x, args.targetCharacter.characterData.character_zone_y, spellEffects.volumeRangeLong )
		});
		
		this.spellEffectSoundID = args.targetCharacter._internal.soundEffects.push( deathExplosionSound ) - 1;
		
		soundManager.play( 'deathExplosion' + spellEffects.soundIncrementor, 
										{
											onfinish: function () 
											{
												delete args.targetCharacter._internal.soundEffects[ self.spellEffectSoundID ];	
											}
										});
		
		//draw the deathExplosion spatter
		this.draw = function()
		{
			Map.ctx.globalAlpha = self.alpha;
			
			Map.ctx.drawImage(
							deathExplosionImageObject,
							args.targetCharacter.characterData.character_zone_x + Map.viewPortX - self.offsetX,
							args.targetCharacter.characterData.character_zone_y + Map.viewPortY - self.offsetY
						);
						
			self.previousX = args.targetCharacter.characterData.character_zone_x - self.offsetX;
			self.previousY = args.targetCharacter.characterData.character_zone_y - self.offsetY;	
					
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the deathExplosion
		this.remove = function()
		{
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[1][ this.ID ] = null;
			delete args.targetCharacter._internal.spellEffects[ this.characterSpellEffectID ];
		}
		
		setTimeout( function()
							{
								deathExplosionImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/deathAnimation/death_explode1.png';
								
								setTimeout( function()
													{
														deathExplosionImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/deathAnimation/death_explode2.png';
														
														var _t = setInterval( function()
																			{
																				self.alpha -= 0.1;
																				
																				if( self.alpha > 0 )
																				{
																					return;
																				}
																				
																				self.remove();
																				
																				clearInterval( _t );
																				
																			}, 30 );
														
													}, 75 );
							}, 75 );
							
	} //end deathExplosion

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.debrisBlood.js
*/

	
	spellEffects.debrisBlood = function( args )
	{
		this.ID = spellEffects.layer[0].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		this.alpha = Math.random() + 0.2;
		this.offsetX = 75;
		this.offsetY = 75;
		this.rotation = Math.random() * (Math.PI * 2);
		this.deleteRange = 150;
		this.previousX = args.targetCharacter.characterData.character_zone_x - this.offsetX;
		this.previousY = args.targetCharacter.characterData.character_zone_y - this.offsetY;
		this.duration = 5000;
		
		var self = this;
		
		var debrisBloodImageObject = new Image();
		debrisBloodImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/debris/debris_blood.png';
		
		//draw the debrisBlood spatter
		this.draw = function()
		{
			Map.ctx.globalAlpha = self.alpha;
			
			Map.ctx.save();
			
			Map.ctx.translate( self.previousX + self.offsetX + Map.viewPortX, self.previousY + self.offsetY + Map.viewPortY );
			
			Map.ctx.rotate( self.rotation );
			
			Map.ctx.drawImage(
							debrisBloodImageObject,
							- self.offsetX,
							- self.offsetY
						);
			
			Map.ctx.restore();
			
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the debrisBlood
		this.remove = function()
		{
			spellEffects.layerCleaner.push( self );
			spellEffects.layer[0][ self.ID ] = null;
			delete args.targetCharacter._internal.spellEffects[ self.characterSpellEffectID ];
			//Application.debug.addError( "-----------" + args.targetCharacter.characterData.character_zone_x + "[" + self.characterSpellEffectID + "] REMOVED "  );
		}
		var _fadeOut =	function()
									{
										if( self.alpha < 0.1 )
										{
											self.alpha = 0;
											
											clearTimeout( _fadeOutPointer );
											
											self.remove();
											
											return;
										}
										
										self.alpha -= 0.05;

										_fadeOutPointer = setTimeout( _fadeOut, 220 );
									}	
		
		var _fadeOutPointer = setTimeout( _fadeOut, self.duration );
					
	} //end debrisBlood

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.debrisBloodStain1.js
*/

	
	spellEffects.debrisBloodStain1 = function( args )
	{
		this.ID = spellEffects.layer[0].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		//Application.debug.addError( "spellEffects:" + args.targetCharacter._internal.spellEffects );
		this.alpha = Math.random() + 0.2;
		this.offsetX = 50;
		this.offsetY = 50;
		this.rotation = Math.random() * (Math.PI * 2);
		this.deleteRange = 100;
		this.previousX = args.targetCharacter.characterData.character_zone_x - this.offsetX;
		this.previousY = args.targetCharacter.characterData.character_zone_y - this.offsetY;
		this.duration = 5000;
		
		var self = this;
		
		var debrisBloodStain1ImageObject = new Image();
		debrisBloodStain1ImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/debris/blood_stain1.png';
		
		//draw the debrisBloodStain1 spatter
		this.draw = function()
		{
			Map.ctx.globalAlpha = self.alpha;
			
			Map.ctx.save();
			
			Map.ctx.translate( self.previousX + self.offsetX + Map.viewPortX, self.previousY + self.offsetY + Map.viewPortY );
			
			Map.ctx.rotate( self.rotation );
			
			Map.ctx.drawImage(
							debrisBloodStain1ImageObject,
							- self.offsetX,
							- self.offsetY
						);
			
			Map.ctx.restore();
			
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the debrisBloodStain1
		this.remove = function()
		{
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[0][ this.ID ] = null;
			delete args.targetCharacter._internal.spellEffects[ this.characterSpellEffectID ];
			
		}
		
		var _fadeOut =	function()
									{
										if( self.alpha < 0.1 )
										{
											self.alpha = 0;
											
											clearTimeout( _fadeOutPointer );
											
											self.remove();
											
											return;
										}
										
										self.alpha -= 0.05;

										_fadeOutPointer = setTimeout( _fadeOut, 220 );
									}	
		
		var _fadeOutPointer = setTimeout( _fadeOut, self.duration );
					
	} //end debrisBloodStain1

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.debrisBloodStain2.js
*/

	
	spellEffects.debrisBloodStain2 = function( args )
	{
		this.ID = spellEffects.layer[0].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		this.alpha = Math.random() + 0.2;
		this.offsetX = 50;
		this.offsetY = 50;
		this.rotation = Math.random() * (Math.PI * 2);
		this.deleteRange = 100;
		this.previousX = args.targetCharacter.characterData.character_zone_x - this.offsetX;
		this.previousY = args.targetCharacter.characterData.character_zone_y - this.offsetY;
		this.duration = 5000;
		
		var self = this;
		
		var debrisBloodStain2ImageObject = new Image();
		debrisBloodStain2ImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/debris/blood_stain2.png';
		
		//draw the debrisBloodStain2 spatter
		this.draw = function()
		{
			Map.ctx.globalAlpha = self.alpha;
			
			Map.ctx.save();
			
			Map.ctx.translate( self.previousX + self.offsetX + Map.viewPortX, self.previousY + self.offsetY + Map.viewPortY );
			
			Map.ctx.rotate( self.rotation );
			
			Map.ctx.drawImage(
							debrisBloodStain2ImageObject,
							- self.offsetX,
							- self.offsetY
						);
			
			Map.ctx.restore();
			
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the debrisBloodStain2
		this.remove = function()
		{
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[0][ this.ID ] = null;
			delete args.targetCharacter._internal.spellEffects[ this.characterSpellEffectID ];
			
		}
		
		var _fadeOut =	function()
									{
										if( self.alpha < 0.1 )
										{
											self.alpha = 0;
											
											clearTimeout( _fadeOutPointer );
											
											self.remove();
											
											return;
										}
										
										self.alpha -= 0.05;

										_fadeOutPointer = setTimeout( _fadeOut, 220 );
									}	
		
		var _fadeOutPointer = setTimeout( _fadeOut, self.duration );
					
	} //end debrisBloodStain2

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.debrisBloodStain3.js
*/

	
	spellEffects.debrisBloodStain3 = function( args )
	{
		this.ID = spellEffects.layer[0].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		this.alpha = Math.random() + 0.2;
		this.offsetX = 50;
		this.offsetY = 50;
		this.rotation = Math.random() * (Math.PI * 2);
		this.deleteRange = 100;
		this.previousX = args.targetCharacter.characterData.character_zone_x - this.offsetX;
		this.previousY = args.targetCharacter.characterData.character_zone_y - this.offsetY;
		this.duration = 5000;
		
		var self = this;
		
		var debrisBloodStain3ImageObject = new Image();
		debrisBloodStain3ImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/debris/blood_stain3.png';
		
		//draw the debrisBloodStain3 spatter
		this.draw = function()
		{
			Map.ctx.globalAlpha = self.alpha;
			
			Map.ctx.save();
			
			Map.ctx.translate( self.previousX + self.offsetX + Map.viewPortX, self.previousY + self.offsetY + Map.viewPortY );
			
			Map.ctx.rotate( self.rotation );
			
			Map.ctx.drawImage(
							debrisBloodStain3ImageObject,
							- self.offsetX,
							- self.offsetY
						);
			
			Map.ctx.restore();
			
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the debrisBloodStain3
		this.remove = function()
		{
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[0][ this.ID ] = null;
			delete args.targetCharacter._internal.spellEffects[ this.characterSpellEffectID ];
			
		}
		
		var _fadeOut =	function()
									{
										if( self.alpha < 0.1 )
										{
											self.alpha = 0;
											
											clearTimeout( _fadeOutPointer );
											
											self.remove();
											
											return;
										}
										
										self.alpha -= 0.05;

										_fadeOutPointer = setTimeout( _fadeOut, 220 );
									}	
		
		var _fadeOutPointer = setTimeout( _fadeOut, self.duration );
					
	} //end debrisBloodStain3

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.debrisBloodStain4.js
*/

	
	spellEffects.debrisBloodStain4 = function( args )
	{
		this.ID = spellEffects.layer[0].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		this.alpha = Math.random() + 0.2;
		this.offsetX = 50;
		this.offsetY = 50;
		this.rotation = Math.random() * (Math.PI * 2);
		this.deleteRange = 100;
		this.previousX = args.targetCharacter.characterData.character_zone_x - this.offsetX;
		this.previousY = args.targetCharacter.characterData.character_zone_y - this.offsetY;
		this.duration = 5000;
		
		var self = this;
		
		var debrisBloodStain4ImageObject = new Image();
		debrisBloodStain4ImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/debris/blood_stain4.png';
		
		//draw the debrisBloodStain4 spatter
		this.draw = function()
		{
			Map.ctx.globalAlpha = self.alpha;
			
			Map.ctx.save();
			
			Map.ctx.translate( self.previousX + self.offsetX + Map.viewPortX, self.previousY + self.offsetY + Map.viewPortY );
			
			Map.ctx.rotate( self.rotation );
			
			Map.ctx.drawImage(
							debrisBloodStain4ImageObject,
							- self.offsetX,
							- self.offsetY
						);
			
			Map.ctx.restore();
			
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the debrisBloodStain4
		this.remove = function()
		{
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[0][ this.ID ] = null;
			delete args.targetCharacter._internal.spellEffects[ this.characterSpellEffectID ];
			
		}
		
		var _fadeOut =	function()
									{
										if( self.alpha < 0.1 )
										{
											self.alpha = 0;
											
											clearTimeout( _fadeOutPointer );
											
											self.remove();
											
											return;
										}
										
										self.alpha -= 0.05;

										_fadeOutPointer = setTimeout( _fadeOut, 220 );
									}	
		
		var _fadeOutPointer = setTimeout( _fadeOut, self.duration );
					
	} //end debrisBloodStain4

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.debrisGrey.js
*/

	
	spellEffects.debrisGrey = function( args )
	{
		this.ID = spellEffects.layer[0].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		this.alpha = Math.random() + 0.2;
		this.offsetX = 75;
		this.offsetY = 75;
		this.rotation = Math.random() * (Math.PI * 2);
		this.deleteRange = 150;
		this.previousX = args.targetCharacter.characterData.character_zone_x - this.offsetX;
		this.previousY = args.targetCharacter.characterData.character_zone_y - this.offsetY;
		this.duration = 5000;
		
		var self = this;
		
		var debrisGreyImageObject = new Image();
		debrisGreyImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/debris/debris_grey.png';
		
		//draw the debrisGrey spatter
		this.draw = function()
		{
			Map.ctx.globalAlpha = self.alpha;
			
			Map.ctx.save();
			
			Map.ctx.translate( self.previousX + self.offsetX + Map.viewPortX, self.previousY + self.offsetY + Map.viewPortY );
			
			Map.ctx.rotate( self.rotation );
			
			Map.ctx.drawImage(
							debrisGreyImageObject,
							- self.offsetX,
							- self.offsetY
						);
			
			Map.ctx.restore();
			
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the debrisGrey
		this.remove = function()
		{
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[0][ this.ID ] = null;
			delete args.targetCharacter._internal.spellEffects[ this.characterSpellEffectID ];
			
		}
		
		var _fadeOut =	function()
									{
										if( self.alpha < 0.1 )
										{
											self.alpha = 0;
											
											clearTimeout( _fadeOutPointer );
											
											self.remove();
											
											return;
										}
										
										self.alpha -= 0.05;

										_fadeOutPointer = setTimeout( _fadeOut, 220 );
									}	
		
		var _fadeOutPointer = setTimeout( _fadeOut, self.duration );
					
	} //end debrisGrey

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.debrisMeat.js
*/

	
	spellEffects.debrisMeat = function( args )
	{
		this.ID = spellEffects.layer[0].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		this.alpha = Math.random() + 0.2;
		this.offsetX = 75;
		this.offsetY = 75;
		this.rotation = Math.random() * (Math.PI * 2);
		this.deleteRange = 150;
		this.previousX = args.targetCharacter.characterData.character_zone_x - this.offsetX;
		this.previousY = args.targetCharacter.characterData.character_zone_y - this.offsetY;
		this.duration = 5000;
		
		var self = this;
		
		var debrisMeatImageObject = new Image();
		debrisMeatImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/debris/debris_meat.png';
		
		//draw the debrisMeat spatter
		this.draw = function()
		{
			Map.ctx.globalAlpha = self.alpha;
			
			Map.ctx.save();
			
			Map.ctx.translate( self.previousX + self.offsetX + Map.viewPortX, self.previousY + self.offsetY + Map.viewPortY );
			
			Map.ctx.rotate( self.rotation );
			
			Map.ctx.drawImage(
							debrisMeatImageObject,
							- self.offsetX,
							- self.offsetY
						);
			
			Map.ctx.restore();
			
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the debrisMeat
		this.remove = function()
		{
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[0][ this.ID ] = null;
			delete args.targetCharacter._internal.spellEffects[ this.characterSpellEffectID ];
			
		}
		
		var _fadeOut =	function()
									{
										if( self.alpha < 0.1 )
										{
											self.alpha = 0;
											
											clearTimeout( _fadeOutPointer );
											
											self.remove();
											
											return;
										}
										
										self.alpha -= 0.05;

										_fadeOutPointer = setTimeout( _fadeOut, 220 );
									}	
		
		var _fadeOutPointer = setTimeout( _fadeOut, self.duration );
					
	} //end debrisMeat

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.debrisMeat2.js
*/

	
	spellEffects.debrisMeat2 = function( args )
	{
		this.ID = spellEffects.layer[0].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		this.alpha = Math.random() + 0.2;
		this.offsetX = 200;
		this.offsetY = 200;
		this.rotation = Math.random() * (Math.PI * 2);
		this.deleteRange = 400;
		this.previousX = args.targetCharacter.characterData.character_zone_x - this.offsetX;
		this.previousY = args.targetCharacter.characterData.character_zone_y - this.offsetY;
		this.duration = 5000;
		
		var self = this;
		
		var debrisMeat2ImageObject = new Image();
		debrisMeat2ImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/debris/debris_meat2.png';
		
		//draw the debrisMeat2 spatter
		this.draw = function()
		{
			Map.ctx.globalAlpha = self.alpha;
			
			Map.ctx.save();
			
			Map.ctx.translate( self.previousX + self.offsetX + Map.viewPortX, self.previousY + self.offsetY + Map.viewPortY );
			
			Map.ctx.rotate( self.rotation );
			
			Map.ctx.drawImage(
							debrisMeat2ImageObject,
							- self.offsetX,
							- self.offsetY
						);
			
			Map.ctx.restore();
			
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the debrisMeat2
		this.remove = function()
		{
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[0][ this.ID ] = null;
			delete args.targetCharacter._internal.spellEffects[ this.characterSpellEffectID ];
			
		}
		
		var _fadeOut =	function()
									{
										if( self.alpha < 0.1 )
										{
											self.alpha = 0;
											
											clearTimeout( _fadeOutPointer );
											
											self.remove();
											
											return;
										}
										
										self.alpha -= 0.05;

										_fadeOutPointer = setTimeout( _fadeOut, 220 );
									}	
		
		var _fadeOutPointer = setTimeout( _fadeOut, self.duration );
					
	} //end debrisMeat2

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.debrisSplatter1.js
*/

	
	spellEffects.debrisSplatter1 = function( args )
	{
		this.ID = spellEffects.layer[0].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		this.alpha = Math.random() + 0.2;
		this.offsetX = 30;
		this.offsetY = 30;
		this.rotation = Math.random() * (Math.PI * 2);
		this.deleteRange = 60;
		this.previousX = args.targetCharacter.characterData.character_zone_x - this.offsetX;
		this.previousY = args.targetCharacter.characterData.character_zone_y - this.offsetY;
		this.duration = 5000;
		
		var self = this;
		
		var debrisSplatter1ImageObject = new Image();
		debrisSplatter1ImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/debris/splatter1.png';
		
		//draw the debrisSplatter1 spatter
		this.draw = function()
		{
			Map.ctx.globalAlpha = self.alpha;
			
			Map.ctx.save();
			
			Map.ctx.translate( self.previousX + self.offsetX + Map.viewPortX, self.previousY + self.offsetY + Map.viewPortY );
			
			Map.ctx.rotate( self.rotation );
			
			Map.ctx.drawImage(
							debrisSplatter1ImageObject,
							- self.offsetX,
							- self.offsetY
						);
			
			Map.ctx.restore();
			
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the debrisSplatter1
		this.remove = function()
		{
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[0][ this.ID ] = null;
			delete args.targetCharacter._internal.spellEffects[ this.characterSpellEffectID ];
			
		}
		
		var _fadeOut =	function()
									{
										if( self.alpha < 0.1 )
										{
											self.alpha = 0;
											
											clearTimeout( _fadeOutPointer );
											
											self.remove();
											
											return;
										}
										
										self.alpha -= 0.05;

										_fadeOutPointer = setTimeout( _fadeOut, 220 );
									}	
		
		var _fadeOutPointer = setTimeout( _fadeOut, self.duration );
					
	} //end debrisSplatter1

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.debrisSplatter2.js
*/

	
	spellEffects.debrisSplatter2 = function( args )
	{
		this.ID = spellEffects.layer[0].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		this.alpha = Math.random() + 0.2;
		this.offsetX = 45;
		this.offsetY = 45;
		this.rotation = Math.random() * (Math.PI * 2);
		this.deleteRange = 90;
		this.previousX = args.targetCharacter.characterData.character_zone_x - this.offsetX;
		this.previousY = args.targetCharacter.characterData.character_zone_y - this.offsetY;
		this.duration = 5000;
		
		var self = this;
		
		var debrisSplatter2ImageObject = new Image();
		debrisSplatter2ImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/debris/splatter2.png';
		
		//draw the debrisSplatter2 spatter
		this.draw = function()
		{
			Map.ctx.globalAlpha = self.alpha;
			
			Map.ctx.save();
			
			Map.ctx.translate( self.previousX + self.offsetX + Map.viewPortX, self.previousY + self.offsetY + Map.viewPortY );
			
			Map.ctx.rotate( self.rotation );
			
			Map.ctx.drawImage(
							debrisSplatter2ImageObject,
							- self.offsetX,
							- self.offsetY
						);
			
			Map.ctx.restore();
			
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the debrisSplatter2
		this.remove = function()
		{
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[0][ this.ID ] = null;
			delete args.targetCharacter._internal.spellEffects[ this.characterSpellEffectID ];
			
		}
		
		var _fadeOut =	function()
									{
										if( self.alpha < 0.1 )
										{
											self.alpha = 0;
											
											clearTimeout( _fadeOutPointer );
											
											self.remove();
											
											return;
										}
										
										self.alpha -= 0.05;

										_fadeOutPointer = setTimeout( _fadeOut, 220 );
									}	
		
		var _fadeOutPointer = setTimeout( _fadeOut, self.duration );
					
	} //end debrisSplatter2

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.debrisSplatter3.js
*/

	
	spellEffects.debrisSplatter3 = function( args )
	{
		this.ID = spellEffects.layer[0].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		this.alpha = Math.random() + 0.2;
		this.offsetX = 50;
		this.offsetY = 50;
		this.rotation = Math.random() * (Math.PI * 2);
		this.deleteRange = 100;
		this.previousX = args.targetCharacter.characterData.character_zone_x - this.offsetX;
		this.previousY = args.targetCharacter.characterData.character_zone_y - this.offsetY;
		this.duration = 5000;
		
		var self = this;
		
		var debrisSplatter3ImageObject = new Image();
		debrisSplatter3ImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/debris/splatter3.png';
		
		//draw the debrisSplatter3 spatter
		this.draw = function()
		{
			Map.ctx.globalAlpha = self.alpha;
			
			Map.ctx.save();
			
			Map.ctx.translate( self.previousX + self.offsetX + Map.viewPortX, self.previousY + self.offsetY + Map.viewPortY );
			
			Map.ctx.rotate( self.rotation );
			
			Map.ctx.drawImage(
							debrisSplatter3ImageObject,
							- self.offsetX,
							- self.offsetY
						);
			
			Map.ctx.restore();
			
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the debrisSplatter3
		this.remove = function()
		{
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[0][ this.ID ] = null;
			delete args.targetCharacter._internal.spellEffects[ this.characterSpellEffectID ];
			
		}
		
		var _fadeOut =	function()
									{
										if( self.alpha < 0.1 )
										{
											self.alpha = 0;
											
											clearTimeout( _fadeOutPointer );
											
											self.remove();
											
											return;
										}
										
										self.alpha -= 0.05;

										_fadeOutPointer = setTimeout( _fadeOut, 220 );
									}	
		
		var _fadeOutPointer = setTimeout( _fadeOut, self.duration );
					
	} //end debrisSplatter3

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.debrisYellow.js
*/

	
	spellEffects.debrisYellow = function( args )
	{
		this.ID = spellEffects.layer[0].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		this.alpha = Math.random() + 0.2;
		this.offsetX = 75;
		this.offsetY = 75;
		this.rotation = Math.random() * (Math.PI * 2);
		this.deleteRange = 150;
		this.previousX = args.targetCharacter.characterData.character_zone_x - this.offsetX;
		this.previousY = args.targetCharacter.characterData.character_zone_y - this.offsetY;
		this.duration = 5000;
		
		var self = this;
		
		var debrisYellowImageObject = new Image();
		debrisYellowImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/debris/debris_yellow.png';
		
		//draw the debrisYellow spatter
		this.draw = function()
		{
			Map.ctx.globalAlpha = self.alpha;
			
			Map.ctx.save();
			
			Map.ctx.translate( self.previousX + self.offsetX + Map.viewPortX, self.previousY + self.offsetY + Map.viewPortY );
			
			Map.ctx.rotate( self.rotation );
			
			Map.ctx.drawImage(
							debrisYellowImageObject,
							- self.offsetX,
							- self.offsetY
						);
			
			Map.ctx.restore();
			
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the debrisYellow
		this.remove = function()
		{
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[0][ this.ID ] = null;
			delete args.targetCharacter._internal.spellEffects[ this.characterSpellEffectID ];
			
		}
		
		var _fadeOut =	function()
									{
										if( self.alpha < 0.1 )
										{
											self.alpha = 0;
											
											clearTimeout( _fadeOutPointer );
											
											self.remove();
											
											return;
										}
										
										self.alpha -= 0.05;

										_fadeOutPointer = setTimeout( _fadeOut, 220 );
									}	
		
		var _fadeOutPointer = setTimeout( _fadeOut, self.duration );
					
	} //end debrisYellow

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.debuffBloodSpatter.js
*/

	
	spellEffects.debuffBloodSpatter = function( args )
	{
		this.ID = spellEffects.layer[1].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		this.alpha = 1;
		this.offsetX = 20;
		this.offsetY = 30;
		this.rotation = Math.random() * (Math.PI * 2);
		this.deleteRange = 60;
		this.previousX = args.sourceCharacter.characterData.character_zone_x - this.offsetX;
		this.previousY = args.sourceCharacter.characterData.character_zone_y - this.offsetY;
		this.duration = 15000 - Component.bugcraft.latency;
		
		var self = this;
		
		var debuffBloodSpatterImageObject = new Image();
		debuffBloodSpatterImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/splash/blood_spatter11.png';
		
		var debuffBloodSpatterSound = soundManager.createSound({
				id: 'debuffBloodSpatter' + ( ++spellEffects.soundIncrementor ),
				url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/splash/blood_splatter.mp3',
				volume: spellEffects.volumeByRange ( Component.bugcraft.currentCharacterObject.characterData.character_zone_x, Component.bugcraft.currentCharacterObject.characterData.character_zone_y, args.targetCharacter.characterData.character_zone_x, args.targetCharacter.characterData.character_zone_y, spellEffects.volumeRangeLong )
		});
		
		this.spellEffectSoundID = args.targetCharacter._internal.soundEffects.push( debuffBloodSpatterSound ) - 1;
		
		soundManager.play( 'debuffBloodSpatter' + spellEffects.soundIncrementor, 
										{
											onfinish: function () 
											{
												delete args.targetCharacter._internal.soundEffects[ self.spellEffectSoundID ];	
											}
										});
		
		//draw the debuffBloodSpatter spatter
		this.draw = function()
		{
			Map.ctx.globalAlpha = self.alpha;
			
			Map.ctx.drawImage(
							debuffBloodSpatterImageObject,
							args.targetCharacter.characterData.character_zone_x + Map.viewPortX - self.offsetX,
							args.targetCharacter.characterData.character_zone_y + Map.viewPortY - self.offsetY
						);
						
			self.previousX = args.targetCharacter.characterData.character_zone_x - self.offsetX;
			self.previousY = args.targetCharacter.characterData.character_zone_y - self.offsetY;	
					
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the debuffBloodSpatter
		this.remove = function()
		{
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[1][ this.ID ] = null;
			delete args.targetCharacter._internal.spellEffects[ this.characterSpellEffectID ];
		}
		
		var i = 2;
		
		var _animateFunction = function()
							{
								if ( i > 3)
								{
									i = 1;
									
									debuffBloodSpatterImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/splash/blood_spatter1' + i++ +'.png';
								
									_animateFunctionPointer = setTimeout( _animateFunction, 250 );
								}
								else
								{
									debuffBloodSpatterImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/splash/blood_spatter1' + i++ +'.png';
									
									_animateFunctionPointer = setTimeout( _animateFunction, 120 );
								}
							}
		
		var _animateFunctionPointer = setTimeout( _animateFunction, 10 );
		
		setTimeout( function() 
								{ 
									clearTimeout( _animateFunctionPointer );
									
									var _t = setInterval( function()
																		{
																			self.alpha -= 0.1;
																			
																			if( self.alpha > 0 )
																			{
																				return;
																			}
																			
																			self.remove();
																			
																			clearInterval( _t );
																			
																		}, 40 );
								}, self.duration );
		
	} //end debuffBloodSpatter

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.debuffCloudedMind.js
*/


	spellEffects.debuffCloudedMind = function( args )
	{
		this.ID = spellEffects.layer[1].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		this.alpha = 1;
		this.duration = 4000;
		this.offsetX = 30;
		this.offsetY = 30;
		this.rotation = 0;
		this.deleteRange = 60;
		this.previousX = args.targetCharacter.characterData.character_zone_x - this.offsetX;
		this.previousY = args.targetCharacter.characterData.character_zone_y - this.offsetY;
		
		var self = this;
		
		var effectPositionOffset = 0;
		
		var debuffCloudedMindImageObject = new Image();
		debuffCloudedMindImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/debuffs/cloudedMind/cloudmind' + args.component + '.png';
		
		//draw the the debuffCloudedMind
		this.draw = function()
		{
			Map.ctx.globalAlpha = self.alpha;
			
			Map.ctx.save();
			
			Map.ctx.translate( args.targetCharacter.characterData.character_zone_x + Map.viewPortX, args.targetCharacter.characterData.character_zone_y + Map.viewPortY + effectPositionOffset );
			
			Map.ctx.rotate( self.rotation );
			
			Map.ctx.drawImage(
							debuffCloudedMindImageObject,
							- self.offsetX,
							- self.offsetY
						);
										
			self.previousX = args.targetCharacter.characterData.character_zone_x - self.offsetX;
			self.previousY = args.targetCharacter.characterData.character_zone_y - self.offsetY + effectPositionOffset;
										
			Map.ctx.restore();
			
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the debuffCloudedMind
		this.remove = function()
		{
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[1][ this.ID ] = null;
			delete args.targetCharacter._internal.spellEffects[ this.characterSpellEffectID ];
		}
			
		switch( args.component )
		{
			case 0:
				effectPositionOffset = -50;
				
				var debuffCloudedMindSound = soundManager.createSound({
						id: 'debuffCloudedMind' + ( ++spellEffects.soundIncrementor ),
						url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/debuffs/wobble.mp3',
						volume: spellEffects.volumeByRange ( Component.bugcraft.currentCharacterObject.characterData.character_zone_x, Component.bugcraft.currentCharacterObject.characterData.character_zone_y, args.targetCharacter.characterData.character_zone_x, args.targetCharacter.characterData.character_zone_y, spellEffects.volumeRangeLong )
				});
				
				this.spellEffectSoundID = args.targetCharacter._internal.soundEffects.push( debuffCloudedMindSound ) - 1;
				
				soundManager.play( 'debuffCloudedMind' + spellEffects.soundIncrementor, 
												{
													onfinish: function () 
													{
														delete args.targetCharacter._internal.soundEffects[ self.spellEffectSoundID ];	
													}
												});

				self.alpha = 0;
				
				var _animateFunction =	function()
																	{
																		if( self.alpha < 0.9 )
																		{
																			self.alpha += 0.1;
																		}
																		
																		self.rotation -= Math.PI / 16;

																		_animateFunctionPointer = setTimeout( _animateFunction, 30 );
																	}						
			break;
			case 1:
				effectPositionOffset = -20;
			
				self.alpha = 0;

				var opacityVariation = 0;
				
				var _animateFunction =  function()
														{
															self.alpha = Math.abs( Math.sin( opacityVariation ) );

															opacityVariation += Math.PI / 32;
															
															if (self.alpha < 0.5 )
															{
																self.alpha = 0.5;
															}
															
															_animateFunctionPointer = setTimeout( _animateFunction, 50 );
														}							

			break;
		}
		
		var _animateFunctionPointer = setTimeout( _animateFunction, 1 );
		
		setTimeout( function() 
								{ 
									clearTimeout( _animateFunctionPointer );
									
									var _timeout = setInterval( function()
																		{
																			self.alpha -= 0.1;
																			
																			if( self.alpha > 0 )
																			{
																				return;
																			}
																			
																			self.remove();
																			
																			clearInterval( _timeout );
																			
																		}, 100 );
								}, self.duration );
		
	} //end the debuffCloudedMind

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.debuffCloudedMind97.js
*/


	spellEffects.debuffCloudedMind97 = function( args )
	{
		this.ID = spellEffects.layer[1].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		this.alpha = 1;
		this.duration = 4000;
		this.offsetX = 30;
		this.offsetY = 30;
		this.rotation = 0;
		this.deleteRange = 60;
		this.previousX = args.targetCharacter.characterData.character_zone_x - this.offsetX;
		this.previousY = args.targetCharacter.characterData.character_zone_y - this.offsetY;
		
		var self = this;
		
		var effectPositionOffset = 0;
		
		var debuffCloudedMindImageObject = new Image();
		debuffCloudedMindImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/debuffs/cloudedMind/cloudmind' + args.component + '.png';
		
		//draw the the debuffCloudedMind
		this.draw = function()
		{
			Map.ctx.globalAlpha = self.alpha;
			
			Map.ctx.save();
			
			Map.ctx.translate( args.targetCharacter.characterData.character_zone_x + Map.viewPortX, args.targetCharacter.characterData.character_zone_y + Map.viewPortY + effectPositionOffset );
			
			Map.ctx.rotate( self.rotation );
			
			Map.ctx.drawImage(
							debuffCloudedMindImageObject,
							- self.offsetX,
							- self.offsetY
						);
										
			self.previousX = args.targetCharacter.characterData.character_zone_x - self.offsetX;
			self.previousY = args.targetCharacter.characterData.character_zone_y - self.offsetY + effectPositionOffset;
										
			Map.ctx.restore();
			
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the debuffCloudedMind
		this.remove = function()
		{
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[1][ this.ID ] = null;
			delete args.targetCharacter._internal.spellEffects[ this.characterSpellEffectID ];
		}
			
		switch( args.component )
		{
			case 0:
				effectPositionOffset = -50;
				
				var debuffCloudedMindSound = soundManager.createSound({
						id: 'debuffCloudedMind' + ( ++spellEffects.soundIncrementor ),
						url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/elements/fire_swoosh.mp3', 
						volume: spellEffects.volumeByRange ( Component.bugcraft.currentCharacterObject.characterData.character_zone_x, Component.bugcraft.currentCharacterObject.characterData.character_zone_y, args.targetCharacter.characterData.character_zone_x, args.targetCharacter.characterData.character_zone_y, spellEffects.volumeRangeLong )
				});
				
				this.spellEffectSoundID = args.targetCharacter._internal.soundEffects.push( debuffCloudedMindSound ) - 1;
				
				soundManager.play( 'debuffCloudedMind' + spellEffects.soundIncrementor, 
												{
													onfinish: function () 
													{
														delete args.targetCharacter._internal.soundEffects[ self.spellEffectSoundID ];	
													}
												});

				self.alpha = 0;
				
				var _animateFunction =	function()
																	{
																		if( self.alpha < 0.9 )
																		{
																			self.alpha += 0.1;
																		}
																		
																		self.rotation -= Math.PI / 16;

																		_animateFunctionPointer = setTimeout( _animateFunction, 30 );
																	}						
			break;
			case 1:
				effectPositionOffset = -20;
			
				self.alpha = 0;

				var opacityVariation = 0;
				
				var _animateFunction =  function()
														{
															self.alpha = Math.abs( Math.sin( opacityVariation ) );

															opacityVariation += Math.PI / 32;
															
															if (self.alpha < 0.5 )
															{
																self.alpha = 0.5;
															}
															
															_animateFunctionPointer = setTimeout( _animateFunction, 50 );
														}							

			break;
		}
		
		var _animateFunctionPointer = setTimeout( _animateFunction, 1 );
		
		setTimeout( function() 
								{ 
									clearTimeout( _animateFunctionPointer );
									
									var _timeout = setInterval( function()
																		{
																			self.alpha -= 0.1;
																			
																			if( self.alpha > 0 )
																			{
																				return;
																			}
																			
																			self.remove();
																			
																			clearInterval( _timeout );
																			
																		}, 100 );
								}, self.duration );
		
	} //end the debuffCloudedMind

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.debuffCloudedMind97Complete.js
*/


	spellEffects.debuffCloudedMind97Complete = function( args )
	{
		this.ID = spellEffects.layer[1].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		
		this.draw = function()
		{
			
		}
		
		var effect0 = new spellEffects.debuffCloudedMind97({ 			
				sourceCharacter: args.sourceCharacter,														
				targetCharacter: args.targetCharacter,
				component: 0
		});
		
		var effect1 = new spellEffects.debuffCloudedMind97({ 																						
				sourceCharacter: args.sourceCharacter,
				targetCharacter: args.targetCharacter,
				component: 1
		});
		
		this.remove = function()
		{
			effect0.remove();
			effect1.remove();
			
			spellEffects.layer[1][ self.ID ] = null;
				
			delete args.targetCharacter._internal.spellEffects[ self.characterSpellEffectID ];
		}
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.debuffCloudedMindComplete.js
*/


	spellEffects.debuffCloudedMindComplete = function( args )
	{
		this.ID = spellEffects.layer[1].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		
		this.draw = function()
		{
			
		}
		
		var effect0 = new spellEffects.debuffCloudedMind({ 			
				sourceCharacter: args.sourceCharacter,														
				targetCharacter: args.targetCharacter,
				component: 0
		});
		
		var effect1 = new spellEffects.debuffCloudedMind({ 																						
				sourceCharacter: args.sourceCharacter,
				targetCharacter: args.targetCharacter,
				component: 1
		});
		
		this.remove = function()
		{
			effect0.remove();
			effect1.remove();
			
			spellEffects.layer[1][ self.ID ] = null;
				
			delete args.targetCharacter._internal.spellEffects[ self.characterSpellEffectID ];
		}
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.debuffConfuseInsect.js
*/


	spellEffects.debuffConfuseInsect = function( args )
	{
		this.ID = spellEffects.layer[1].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		this.alpha = 1;
		this.offsetX = 30;
		this.offsetY = 30;
		this.rotation = Math.random() * (Math.PI * 2);
		this.deleteRange = 60;
		this.previousX = args.targetCharacter.characterData.character_zone_x - this.offsetX;
		this.previousY = args.targetCharacter.characterData.character_zone_y - this.offsetY;
		this.duration = 3000 - Component.bugcraft.latency;
		
		var self = this;
		
		var debuffConfuseInsectImageObject = [];
		for ( var i = 0; i < 4; i++ )
		{
			debuffConfuseInsectImageObject[i] = new Image();
			debuffConfuseInsectImageObject[i].src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/debuffs/confuseInsect/confuseinsect' + i + '.png';
		}
		var debuffConfuseInsectSound = soundManager.createSound({
				id: 'debuffConfuseInsect' + ( ++spellEffects.soundIncrementor ),
				url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/debuffs/confuse1.mp3',
				volume: spellEffects.volumeByRange ( Component.bugcraft.currentCharacterObject.characterData.character_zone_x, Component.bugcraft.currentCharacterObject.characterData.character_zone_y, args.targetCharacter.characterData.character_zone_x, args.targetCharacter.characterData.character_zone_y, spellEffects.volumeRangeLong )
		});
		
		this.spellEffectSoundID = args.targetCharacter._internal.soundEffects.push( debuffConfuseInsectSound ) - 1;
		
		soundManager.play( 'debuffConfuseInsect' + spellEffects.soundIncrementor, 
										{
											onfinish: function () 
											{
												delete args.targetCharacter._internal.soundEffects[ self.spellEffectSoundID ];	
											}
										});
		
		//
		//draw the debuffConfuseInsect effect
		//
		this.draw = function()
		{
			Map.ctx.globalAlpha = self.alpha;
			
			Map.ctx.drawImage(
											debuffConfuseInsectImageObject[0],
											args.targetCharacter.characterData.character_zone_x + Map.viewPortX - self.offsetX,
											args.targetCharacter.characterData.character_zone_y + Map.viewPortY - self.offsetY
										);
			Map.ctx.drawImage(
											debuffConfuseInsectImageObject[1],
											args.targetCharacter.characterData.character_zone_x + Map.viewPortX - self.offsetX,
											args.targetCharacter.characterData.character_zone_y + Map.viewPortY - self.offsetY
										);
			Map.ctx.drawImage(
											debuffConfuseInsectImageObject[2],
											args.targetCharacter.characterData.character_zone_x + Map.viewPortX - self.offsetX,
											args.targetCharacter.characterData.character_zone_y + Map.viewPortY - self.offsetY
										);
			Map.ctx.drawImage(
											debuffConfuseInsectImageObject[3],
											args.targetCharacter.characterData.character_zone_x + Map.viewPortX - self.offsetX,
											args.targetCharacter.characterData.character_zone_y + Map.viewPortY - self.offsetY
										);
										
			self.previousX = args.targetCharacter.characterData.character_zone_x - self.offsetX;
			self.previousY = args.targetCharacter.characterData.character_zone_y - self.offsetY;
		
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the debuffConfuseInsect effect
		this.remove = function()
		{
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[1][ this.ID ] = null;
			delete args.targetCharacter._internal.spellEffects[ this.characterSpellEffectID ];
		}
		
		var opacityVariation = 0;
		
		var _animateFunction =  function()
												{
													self.alpha = Math.abs( Math.sin( opacityVariation ) );

													opacityVariation += Math.PI / 32;
													
													if (self.alpha < 0.5 )
													{
														self.alpha = 0.5;
													}
													
													_animateFunctionPointer = setTimeout( _animateFunction, 50 );
												}							
		
		var _animateFunctionPointer = setTimeout( _animateFunction, 50 );
		
		setTimeout( function() 
								{ 
									
									clearTimeout( _animateFunctionPointer );
								
									var _timeout = setInterval( function()
																		{
																			self.alpha -= 0.1;
																			
																			if( self.alpha > 0 )
																			{
																				return;
																			}
																			
																			self.remove();
																			
																			clearInterval( _timeout );
																			
																		}, 100 );
								}, self.duration );
		
	} //end debuffConfuseInsect

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.debuffConfusionTrance.js
*/


	spellEffects.debuffConfusionTrance = function( args )
	{
		this.ID = spellEffects.layer[1].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		this.alpha = 1;
		this.duration = 4000;
		this.offsetX = 30;
		this.offsetY = 30;
		this.rotation = 0;
		this.stepDistance = 3;
		this.maxiumDistance = 30;
		this.deleteRange = 60;
		this.previousX = args.targetCharacter.characterData.character_zone_x - this.offsetX;
		this.previousY = args.targetCharacter.characterData.character_zone_y - this.offsetY;
		
		var self = this;
		
		var effectPositionOffset = 0;
		
		var debuffConfusionTranceImageObject = new Image();
		debuffConfusionTranceImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/debuffs/confusionTrance/confusion_trance' + args.component + '.png';
		
		//draw the the debuffConfusionTrance
		this.draw = function()
		{
			Map.ctx.globalAlpha = self.alpha;
			
			Map.ctx.save();
			
			Map.ctx.translate( args.targetCharacter.characterData.character_zone_x + Map.viewPortX, args.targetCharacter.characterData.character_zone_y + Map.viewPortY + effectPositionOffset );
			
			Map.ctx.rotate( self.rotation );
			
			Map.ctx.drawImage(
							debuffConfusionTranceImageObject,
							- self.offsetX,
							- self.offsetY
						);
										
			self.previousX = args.targetCharacter.characterData.character_zone_x - self.offsetX;
			self.previousY = args.targetCharacter.characterData.character_zone_y - self.offsetY + effectPositionOffset;
										
			Map.ctx.restore();
			
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the debuffConfusionTrance
		this.remove = function()
		{
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[1][ this.ID ] = null;
			delete args.targetCharacter._internal.spellEffects[ this.characterSpellEffectID ];
		}
			
		switch( args.component )
		{
			case 0:
				effectPositionOffset = -50;
				
				var debuffConfusionTranceSound = soundManager.createSound({
						id: 'debuffConfusionTrance' + ( ++spellEffects.soundIncrementor ),
						url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/debuffs/wobble.mp3',
						volume: spellEffects.volumeByRange ( Component.bugcraft.currentCharacterObject.characterData.character_zone_x, Component.bugcraft.currentCharacterObject.characterData.character_zone_y, args.targetCharacter.characterData.character_zone_x, args.targetCharacter.characterData.character_zone_y, spellEffects.volumeRangeLong )
				});
				
				this.spellEffectSoundID = args.targetCharacter._internal.soundEffects.push( debuffConfusionTranceSound ) - 1;
				
				soundManager.play( 'debuffConfusionTrance' + spellEffects.soundIncrementor, 
												{
													onfinish: function () 
													{
														delete args.targetCharacter._internal.soundEffects[ self.spellEffectSoundID ];	
													}
												});

				self.alpha = 0;
				var _animateFunction =	function()
																	{
																		if( self.alpha < 0.9 )
																		{
																			self.alpha += 0.1;
																		}
																		
																		self.rotation -= Math.PI / 16;

																		_animateFunctionPointer = setTimeout( _animateFunction, 30 );
																	}						
			break;
			case 1:
				effectPositionOffset = -20;
			
				self.alpha = 0;

				var opacityVariation = 0;
				
				var _animateFunction =  function()
														{
															self.alpha = Math.abs( Math.sin( opacityVariation ) );

															opacityVariation += Math.PI / 32;
															
															if (self.alpha < 0.5 )
															{
																self.alpha = 0.5;
															}
															
															_animateFunctionPointer = setTimeout( _animateFunction, 50 );
														}							

			break;
		}
		
		var _animateFunctionPointer = setTimeout( _animateFunction, 1 );
		
		setTimeout( function() 
								{ 
									clearTimeout( _animateFunctionPointer );
									
									var _timeout = setInterval( function()
																		{
																			self.alpha -= 0.1;
																			
																			if( self.alpha > 0 )
																			{
																				return;
																			}
																			
																			self.remove();
																			
																			clearInterval( _timeout );
																			
																		}, 100 );
								}, self.duration );
		
	} //end the debuffConfusionTrance

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.debuffConfusionTranceComplete.js
*/


	spellEffects.debuffConfusionTranceComplete = function( args )
	{
		this.ID = spellEffects.layer[1].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		
		this.draw = function()
		{
			
		}
		
		var effect0 = new spellEffects.debuffConfusionTrance({ 			
				sourceCharacter: args.sourceCharacter,														
				targetCharacter: args.targetCharacter,
				component: 0
		});
		
		var effect1 = new spellEffects.debuffConfusionTrance({ 																						
				sourceCharacter: args.sourceCharacter,
				targetCharacter: args.targetCharacter,
				component: 1
		});
		
		this.remove = function()
		{
			effect0.remove();
			effect1.remove();
			
			spellEffects.layer[1][ self.ID ] = null;
				
			delete args.targetCharacter._internal.spellEffects[ self.characterSpellEffectID ];
		}
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.debuffDisorient.js
*/


	spellEffects.debuffDisorient = function( args )
	{
		this.ID = spellEffects.layer[1].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		this.alpha = 1;
		this.duration = 4000;
		this.offsetX = 30;
		this.offsetY = 30;
		this.rotation = 0;
		this.deleteRange = 60;
		this.previousX = args.targetCharacter.characterData.character_zone_x - this.offsetX;
		this.previousY = args.targetCharacter.characterData.character_zone_y - this.offsetY;
		
		var self = this;
		
		var effectPositionOffset = -20;
		
		var debuffDisorientImageObject = new Image();
		debuffDisorientImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/debuffs/disorient/disorient.png';
		
		var debuffDisorientSound = soundManager.createSound({
				id: 'debuffDisorient' + ( ++spellEffects.soundIncrementor ),
				url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/debuffs/disappearing swoosh.mp3',
				volume: spellEffects.volumeByRange ( Component.bugcraft.currentCharacterObject.characterData.character_zone_x, Component.bugcraft.currentCharacterObject.characterData.character_zone_y, args.targetCharacter.characterData.character_zone_x, args.targetCharacter.characterData.character_zone_y, spellEffects.volumeRangeLong )
		});
		
		this.spellEffectSoundID = args.targetCharacter._internal.soundEffects.push( debuffDisorientSound ) - 1;
		
		soundManager.play( 'debuffDisorient' + spellEffects.soundIncrementor, 
										{
											onfinish: function () 
											{
												delete args.targetCharacter._internal.soundEffects[ self.spellEffectSoundID ];	
											}
										});
		
		//draw the the debuffDisorient
		this.draw = function()
		{
			Map.ctx.globalAlpha = self.alpha;
			
			Map.ctx.save();
			
			Map.ctx.translate( args.targetCharacter.characterData.character_zone_x + Map.viewPortX, args.targetCharacter.characterData.character_zone_y + Map.viewPortY + effectPositionOffset );
			
			Map.ctx.rotate( self.rotation );
			
			Map.ctx.drawImage(
							debuffDisorientImageObject,
							- self.offsetX,
							- self.offsetY
						);
										
			self.previousX = args.targetCharacter.characterData.character_zone_x - self.offsetX;
			self.previousY = args.targetCharacter.characterData.character_zone_y - self.offsetY + effectPositionOffset;
										
			Map.ctx.restore();
			
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the debuffDisorient
		this.remove = function()
		{
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[1][ this.ID ] = null;
			delete args.targetCharacter._internal.spellEffects[ this.characterSpellEffectID ];
		}

		self.alpha = 0;
		
		var _animateFunction =	function()
															{
																if( self.alpha < 1 )
																{
																	self.alpha += 0.2;
																}
																
																self.rotation -= Math.PI / 16;

																_animateFunctionPointer = setTimeout( _animateFunction, 30 );
															}						
			
		
		var _animateFunctionPointer = setTimeout( _animateFunction, 1 );
		
		setTimeout( function() 
								{ 
									clearTimeout( _animateFunctionPointer );
									
									var _timeout = setInterval( function()
																		{
																			self.alpha -= 0.1;
																			
																			if( self.alpha > 0 )
																			{
																				return;
																			}
																			
																			self.remove();
																			
																			clearInterval( _timeout );
																			
																		}, 100 );
								}, self.duration );
		
	} //end the debuffDisorient

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.debuffDominate.js
*/


	spellEffects.debuffDominate = function( args )
	{
		this.ID = spellEffects.layer[1].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		this.alpha = 1;
		this.offsetX = 30;
		this.offsetY = 30;
		this.rotation = Math.random() * (Math.PI * 2);
		this.deleteRange = 60;
		this.previousX = args.targetCharacter.characterData.character_zone_x - this.offsetX;
		this.previousY = args.targetCharacter.characterData.character_zone_y - this.offsetY;
		this.duration = 4000 - Component.bugcraft.latency;
		
		var self = this;
		
		var debuffDominateImageObject = [];
		for ( var i = 0; i < 3; i++ )
		{
			debuffDominateImageObject[i] = new Image();
			debuffDominateImageObject[i].src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/debuffs/dominate/dominate' + i + '.png';
		}
		var debuffDominateSound = soundManager.createSound({
				id: 'debuffDominate' + ( ++spellEffects.soundIncrementor ),
				url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/debuffss/confuse1.mp3',
				volume: spellEffects.volumeByRange ( Component.bugcraft.currentCharacterObject.characterData.character_zone_x, Component.bugcraft.currentCharacterObject.characterData.character_zone_y, args.targetCharacter.characterData.character_zone_x, args.targetCharacter.characterData.character_zone_y, spellEffects.volumeRangeLong )
		});
		/*
		this.spellEffectSoundID = args.targetCharacter._internal.soundEffects.push( debuffDominateSound ) - 1;
		
		soundManager.play( 'debuffDominate' + spellEffects.soundIncrementor, 
										{
											onfinish: function () 
											{
												delete args.targetCharacter._internal.soundEffects[ self.spellEffectSoundID ];	
											}
										});
		*/
		//
		//draw the debuffDominate effect
		//
		this.draw = function()
		{
			Map.ctx.globalAlpha = self.alpha;
			
			Map.ctx.drawImage(
											debuffDominateImageObject[0],
											args.targetCharacter.characterData.character_zone_x + Map.viewPortX - self.offsetX,
											args.targetCharacter.characterData.character_zone_y + Map.viewPortY - self.offsetY
										);
			Map.ctx.drawImage(
											debuffDominateImageObject[1],
											args.targetCharacter.characterData.character_zone_x + Map.viewPortX - self.offsetX,
											args.targetCharacter.characterData.character_zone_y + Map.viewPortY - self.offsetY
										);
			Map.ctx.drawImage(
											debuffDominateImageObject[2],
											args.targetCharacter.characterData.character_zone_x + Map.viewPortX - self.offsetX,
											args.targetCharacter.characterData.character_zone_y + Map.viewPortY - self.offsetY
										);
										
			self.previousX = args.targetCharacter.characterData.character_zone_x - self.offsetX;
			self.previousY = args.targetCharacter.characterData.character_zone_y - self.offsetY;
		
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the debuffDominate effect
		this.remove = function()
		{
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[1][ this.ID ] = null;
			delete args.targetCharacter._internal.spellEffects[ this.characterSpellEffectID ];
		}
		
		var opacityVariation = 0;
		
		var _animateFunction =  function()
												{
													self.alpha = Math.abs( Math.sin( opacityVariation ) );

													opacityVariation += Math.PI / 32;
													
													if (self.alpha < 0.5 )
													{
														self.alpha = 0.5;
													}
													
													_animateFunctionPointer = setTimeout( _animateFunction, 50 );
												}							
		
		var _animateFunctionPointer = setTimeout( _animateFunction, 50 );
		
		setTimeout( function() 
								{ 
									
									clearTimeout( _animateFunctionPointer );
								
									var _timeout = setInterval( function()
																		{
																			self.alpha -= 0.1;
																			
																			if( self.alpha > 0 )
																			{
																				return;
																			}
																			
																			self.remove();
																			
																			clearInterval( _timeout );
																			
																		}, 100 );
								}, self.duration );
		
	} //end debuffDominate

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.debuffPoisonSplatter.js
*/

	
	spellEffects.debuffPoisonSplatter = function( args )
	{
		this.ID = spellEffects.layer[1].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		this.alpha = 1;
		this.offsetX = 20;
		this.offsetY = 30;
		this.rotation = Math.random() * (Math.PI * 2);
		this.deleteRange = 60;
		this.previousX = args.sourceCharacter.characterData.character_zone_x - this.offsetX;
		this.previousY = args.sourceCharacter.characterData.character_zone_y - this.offsetY;
		
		var self = this;
		
		var debuffPoisonSplatterImageObject = new Image();
		debuffPoisonSplatterImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/splash/poisonsplatter0.png';
		
		var debuffPoisonSplatterSound = soundManager.createSound({
				id: 'debuffPoisonSplatter' + ( ++spellEffects.soundIncrementor ),
				url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/splash/mud_splat.mp3',
				volume: spellEffects.volumeByRange ( Component.bugcraft.currentCharacterObject.characterData.character_zone_x, Component.bugcraft.currentCharacterObject.characterData.character_zone_y, args.targetCharacter.characterData.character_zone_x, args.targetCharacter.characterData.character_zone_y, spellEffects.volumeRangeLong )
		});
		
		this.spellEffectSoundID = args.targetCharacter._internal.soundEffects.push( debuffPoisonSplatterSound ) - 1;
		
		soundManager.play( 'debuffPoisonSplatter' + spellEffects.soundIncrementor, 
										{
											onfinish: function () 
											{
												delete args.targetCharacter._internal.soundEffects[ self.spellEffectSoundID ];	
											}
										});
		
		//draw the debuffPoisonSplatter spatter
		this.draw = function()
		{
			Map.ctx.globalAlpha = self.alpha;
			
			Map.ctx.drawImage(
							debuffPoisonSplatterImageObject,
							args.targetCharacter.characterData.character_zone_x + Map.viewPortX - self.offsetX,
							args.targetCharacter.characterData.character_zone_y + Map.viewPortY - self.offsetY
						);
						
			self.previousX = args.targetCharacter.characterData.character_zone_x - self.offsetX;
			self.previousY = args.targetCharacter.characterData.character_zone_y - self.offsetY;	
					
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the debuffPoisonSplatter
		this.remove = function()
		{
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[1][ this.ID ] = null;
			delete args.targetCharacter._internal.spellEffects[ this.characterSpellEffectID ];
		}
		
		setTimeout( function()
							{
								debuffPoisonSplatterImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/splash/poisonsplatter1.png';
								
								setTimeout( function()
													{
														debuffPoisonSplatterImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/splash/poisonsplatter2.png';
														
														var _t = setInterval( function()
																			{
																				self.alpha -= 0.1;
																				
																				if( self.alpha > 0 )
																				{
																					return;
																				}
																				
																				self.remove();
																				
																				clearInterval( _t );
																				
																			}, 20 );
														
													}, 75 );
							}, 75 );
							
	} //end debuffPoisonSplatter

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.debuffSlow.js
*/


	spellEffects.debuffSlow = function( args )
	{
		this.ID = spellEffects.layer[0].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		this.alpha = 1;
		this.offsetX = 30;
		this.offsetY = 30;
		this.rotation = Math.random() * (Math.PI * 2);
		this.deleteRange = 60;
		this.previousX = args.sourceCharacter.characterData.character_zone_x - this.offsetX;
		this.previousY = args.sourceCharacter.characterData.character_zone_y - this.offsetY;
		this.duration = 5000 - Component.bugcraft.latency;
		
		var self = this;
		
		var debuffSlowImageObject = new Image();
		debuffSlowImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/slow/snail.png';
		
		var debuffSlowSound = soundManager.createSound({
				id: 'debuffSlow' + ( ++spellEffects.soundIncrementor ),
				url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/bolt/woosh.mp3', 
				volume: spellEffects.volumeByRange ( Component.bugcraft.currentCharacterObject.characterData.character_zone_x, Component.bugcraft.currentCharacterObject.characterData.character_zone_y, args.targetCharacter.characterData.character_zone_x, args.targetCharacter.characterData.character_zone_y, spellEffects.volumeRangeLong )
		});
		
		this.spellEffectSoundID = args.targetCharacter._internal.soundEffects.push( debuffSlowSound ) - 1;
		
		soundManager.play( 'debuffSlow' + spellEffects.soundIncrementor, 
										{
											onfinish: function () 
											{
												delete args.targetCharacter._internal.soundEffects[ self.spellEffectSoundID ];	
											}
										});
		
		//draw the debuffSlow effect
		this.draw = function()
		{
			Map.ctx.globalAlpha = self.alpha;
			
			Map.ctx.save();
			
			Map.ctx.translate( args.targetCharacter.characterData.character_zone_x + Map.viewPortX, args.targetCharacter.characterData.character_zone_y + Map.viewPortY );
			
			Map.ctx.rotate( self.rotation );
			
			Map.ctx.drawImage(
							debuffSlowImageObject,
							- self.offsetX,
							- self.offsetX
						);
						
			self.previousX = args.targetCharacter.characterData.character_zone_x - self.offsetX;
			self.previousY = args.targetCharacter.characterData.character_zone_y - self.offsetY;
						
			Map.ctx.restore();
						
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the debuffSlow effect
		this.remove = function()
		{
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[0][ this.ID ] = null;
			clearTimeout( _animateFunctionPointer );
			delete args.targetCharacter._internal.spellEffects[ this.characterSpellEffectID ];
		}
		
		var _animateFunction = function()
												{
													self.rotation += Math.PI / 32;

													_animateFunctionPointer = setTimeout( _animateFunction, 30 );
												}			
												
		var _animateFunctionPointer = setTimeout( _animateFunction, 30 );
		
		setTimeout( function() 
								{ 
									var _t = setInterval( function()
																		{
																			self.alpha -= 0.1;
																			
																			if( self.alpha > 0 )
																			{
																				return;
																			}
																			
																			self.remove();
																			
																			clearInterval( _t );
																			
																		}, 100 );
								}, self.duration );
	} //end debuffSlow effect

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.debuffSlowMulti.js
*/


	spellEffects.debuffSlowMulti = function( args )
	{
		this.ID = spellEffects.layer[0].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		this.alpha = 1;
		this.offsetX = 30;
		this.offsetY = 30;
		this.rotation = Math.random() * (Math.PI * 2);
		this.deleteRange = 60;
		this.previousX = args.sourceCharacter.characterData.character_zone_x - this.offsetX;
		this.previousY = args.sourceCharacter.characterData.character_zone_y - this.offsetY;
		this.duration = 5000 - Component.bugcraft.latency;
		
		var self = this;
		
		var debuffSlowMultiImageObject = new Image();
		debuffSlowMultiImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/slow/snails.png';
		
		var debuffSlowMultiSound = soundManager.createSound({
				id: 'debuffSlowMulti' + ( ++spellEffects.soundIncrementor ),
				url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/aura/slow.mp3',
				volume: spellEffects.volumeByRange ( Component.bugcraft.currentCharacterObject.characterData.character_zone_x, Component.bugcraft.currentCharacterObject.characterData.character_zone_y, args.targetCharacter.characterData.character_zone_x, args.targetCharacter.characterData.character_zone_y, spellEffects.volumeRangeLong )
		});
		/*
		this.spellEffectSoundID = args.targetCharacter._internal.soundEffects.push( debuffSlowMultiSound ) - 1;
		
		soundManager.play( 'debuffSlowMulti' + spellEffects.soundIncrementor, 
										{
											onfinish: function () 
											{
												delete args.targetCharacter._internal.soundEffects[ self.spellEffectSoundID ];	
											}
										});
		*/
		//draw the debuffSlowMulti effect
		this.draw = function()
		{
			Map.ctx.globalAlpha = self.alpha;
			
			Map.ctx.save();
			
			Map.ctx.translate( args.targetCharacter.characterData.character_zone_x + Map.viewPortX, args.targetCharacter.characterData.character_zone_y + Map.viewPortY );
			
			Map.ctx.rotate( self.rotation );
			
			Map.ctx.drawImage(
							debuffSlowMultiImageObject,
							- self.offsetX,
							- self.offsetY
						);
						
			self.previousX = args.targetCharacter.characterData.character_zone_x - self.offsetX;
			self.previousY = args.targetCharacter.characterData.character_zone_y - self.offsetY;
						
			Map.ctx.restore();
						
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the debuffSlowMulti effect
		this.remove = function()
		{
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[0][ this.ID ] = null;
			clearTimeout( _animateFunctionPointer );
			delete args.targetCharacter._internal.spellEffects[ this.characterSpellEffectID ];
		}
		
		var _animateFunction = function()
												{
													self.rotation += Math.PI / 32;

													_animateFunctionPointer = setTimeout( _animateFunction, 30 );
												}			
												
		var _animateFunctionPointer = setTimeout( _animateFunction, 30 );
		
		setTimeout( function() 
								{ 
									var _t = setInterval( function()
																		{
																			self.alpha -= 0.1;
																			
																			if( self.alpha > 0 )
																			{
																				return;
																			}
																			
																			self.remove();
																			
																			clearInterval( _t );
																			
																		}, 100 );
								}, self.duration );
	} //end debuffSlowMulti effect

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.debuffSunderArmor.js
*/


	spellEffects.debuffSunderArmor = function( args )
	{
		this.ID = spellEffects.layer[1].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		this.alpha = 1;
		this.offsetX = 30;
		this.offsetY = 30;
		this.deleteRange = 60;
		this.previousX = args.targetCharacter.characterData.character_zone_x - this.offsetX;
		this.previousY = args.targetCharacter.characterData.character_zone_y - this.offsetY;
		this.duration = 1000 - Component.bugcraft.latency;
		
		var self = this;
		
		var debuffSunderArmorImageObject = new Image();
		debuffSunderArmorImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/debuffs/sunderArmor/sunder_armor0.png';
		
		var debuffSunderArmorSound = soundManager.createSound({
				id: 'debuffSunderArmor' + ( ++spellEffects.soundIncrementor ),
				url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/bolt/darkBolt1.mp3',
				volume: spellEffects.volumeByRange ( Component.bugcraft.currentCharacterObject.characterData.character_zone_x, Component.bugcraft.currentCharacterObject.characterData.character_zone_y, args.targetCharacter.characterData.character_zone_x, args.targetCharacter.characterData.character_zone_y, spellEffects.volumeRangeLong )
		});
		
		this.spellEffectSoundID = args.targetCharacter._internal.soundEffects.push( debuffSunderArmorSound ) - 1;
		
		soundManager.play( 'debuffSunderArmor' + spellEffects.soundIncrementor, 
										{
											onfinish: function () 
											{
												delete args.targetCharacter._internal.soundEffects[ self.spellEffectSoundID ];	
											}
										});
		
		//draw the debuffSunderArmor
		this.draw = function()
		{
			Map.ctx.globalAlpha = self.alpha;
				
			Map.ctx.drawImage(
											debuffSunderArmorImageObject,
											args.targetCharacter.characterData.character_zone_x - self.offsetX + Map.viewPortX,
											args.targetCharacter.characterData.character_zone_y - self.offsetY + Map.viewPortY
										);
										
			self.previousX = args.targetCharacter.characterData.character_zone_x - self.offsetX;
			self.previousY = args.targetCharacter.characterData.character_zone_y - self.offsetY;
			
			Map.ctx.globalAlpha = 1;
			
			
		}
		
		//remove the debuffSunderArmor
		
		
		this.remove = function()
		{
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[1][ this.ID ] = null;
			clearTimeout( _animateFunctionPointer );
			delete args.targetCharacter._internal.spellEffects[ this.characterSpellEffectID ];
		}
		
		var i = 0;

		var _animateFunction = function()
												{
													debuffSunderArmorImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/debuffs/sunderArmor/sunder_armor' + i++ + '.png';
													
													if( i < 5 )
													{
														_animateFunctionPointer = setTimeout( _animateFunction, 75 );
														return;
													}
													
													var _t = setInterval( function()
																		{
																			self.alpha -= 0.1;
																			
																			if( self.alpha > 0 )
																			{
																				return;
																			}
																			
																			self.remove();
																			
																			clearInterval( _t );
																			
																		}, 75 );
											
												}	
		
		var _animateFunctionPointer = setTimeout( _animateFunction, 50 );
				
	} //end spinning aura

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.dust.js
*/


	spellEffects.dust = function( args )
	{
		this.ID = spellEffects.layer[0].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		this.alpha = 1;
		this.offsetX = 30;
		this.offsetY = 30;
		this.rotation = Math.random() * (Math.PI * 2);
		this.deleteRange = 60;
		this.previousX = args.targetCharacter.characterData.character_zone_x - this.offsetX;
		this.previousY = args.targetCharacter.characterData.character_zone_y - this.offsetY;
		
		var self = this;
		
		var dustImageObject = new Image();
		dustImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/dust/dust11.png';
		
		var dustSound = soundManager.createSound({
				id: 'dust' + ( ++spellEffects.soundIncrementor ),
				url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/slash/soft whoosh 08.mp3',
				volume: spellEffects.volumeByRange ( Component.bugcraft.currentCharacterObject.characterData.character_zone_x, Component.bugcraft.currentCharacterObject.characterData.character_zone_y, args.targetCharacter.characterData.character_zone_x, args.targetCharacter.characterData.character_zone_y, spellEffects.volumeRangeLong )
		});
		
		this.spellEffectSoundID = args.targetCharacter._internal.soundEffects.push( dustSound ) - 1;
		
		soundManager.play( 'dust' + spellEffects.soundIncrementor, 
										{
											onfinish: function () 
											{
												delete args.targetCharacter._internal.soundEffects[ self.spellEffectSoundID ];	
											}
										});
		
		//
		//draw the dust effect
		//
		this.draw = function()
		{
			Map.ctx.globalAlpha = self.alpha;
			
			Map.ctx.save();
			
			Map.ctx.translate( args.targetCharacter.characterData.character_zone_x + Map.viewPortX, args.targetCharacter.characterData.character_zone_y + Map.viewPortY );
			
			Map.ctx.rotate( self.rotation );
			
			Map.ctx.drawImage(
							dustImageObject,
							- self.offsetX,
							- self.offsetY
						);
						
			self.previousX = args.targetCharacter.characterData.character_zone_x - self.offsetX;
			self.previousY = args.targetCharacter.characterData.character_zone_y - self.offsetY;
						
			Map.ctx.restore();
			
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the dust effect
		this.remove = function()
		{
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[0][ this.ID ] = null;
			delete args.targetCharacter._internal.spellEffects[ this.characterSpellEffectID ];
		}
		
		setTimeout( function()
							{
								dustImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/dust/dust21.png';
								
								setTimeout( function()
													{
														dustImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/dust/dust31.png';
														
														var _t = setInterval( function()
																			{
																				self.alpha -= 0.1;
																				
																				if( self.alpha > 0 )
																				{
																					return;
																				}
																				
																				self.remove();
																				
																				clearInterval( _t );
																				
																			}, 20 );
														
													}, 100 );
							}, 100 );
	} //end dust shockwave

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.exclam1.js
*/

	
	spellEffects[ 'exclam1' ] = function( args )
	{
		var self = this,
				_moveFrames = {},
				_tc = args.targetCharacter,
				_tcd = _tc.characterData,
				_changeFrameFunctionPointer = null,
				_currentIndex = 1,
				_maxFrames = 1;
		
		this.ID = spellEffects.layer[0].push( this ) - 1;
		this.characterSpellEffectID = _tc._internal.spellEffects.push( this ) - 1;
		this.offsetX = 20;
		this.offsetY = 20;
		this.rotation = _tcd.character_rotation;
		this.deleteRange = 40;
		this.previousX = _tcd.character_zone_x - this.offsetX;
		this.previousY = _tcd.character_zone_y - this.offsetY;
		
		// initialize
		
		for(var i=1;i<=_maxFrames;i++)
		{
			_moveFrames[ i ] = { image: new Image(), alpha: 0 };
			_moveFrames[ i ].image.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/exclam1/exclam1' + i + '.png';
		}
		
		//draw the bombardierBeetleDeath spatter
		this.draw = function()
		{
			Map.ctx.save();
			
			Map.ctx.translate( self.previousX + self.offsetX + Map.viewPortX, self.previousY + self.offsetY + Map.viewPortY );
			
			Map.ctx.rotate( ( self.rotation - 90 ) * Math.PI / 180 );
			
			Map.ctx.shadowColor = 'rgba(0, 0, 0, 0.7)';
			Map.ctx.shadowOffsetX = 3;
			Map.ctx.shadowOffsetY = 3;
			
			Map.ctx.drawImage(
							_moveFrames[ _currentIndex ].image,
							- self.offsetX,
							- self.offsetY
						);
			
			Map.ctx.restore();
			
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the deathDecay
		this.remove = function()
		{
			clearTimeout( _changeFrameFunctionPointer );
			
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[0][ this.ID ] = null;
			
			delete _tc._internal.spellEffects[ this.characterSpellEffectID ];
		}
		
		var _changeFrameFunction = function()
		{
			_currentIndex++;
			
			if( _currentIndex > _maxFrames )
			{
				_currentIndex = 1;
				
				setTimeout( _changeFrameFunction, 2000 + Math.random() * 5000 );
				
				return;
			}
			
			_changeFrameFunctionPointer = setTimeout( _changeFrameFunction, 100 );
		}
		
		_changeFrameFunction();
		
	} //end bombardierBeetleDeath

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.explosion.js
*/

	
	spellEffects.explosion = function( args )
	{
		this.ID = spellEffects.layer[1].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		this.alpha = 1;
		this.rotation = Math.random() * (Math.PI * 2);
		this.offsetX = 30;
		this.offsetY = 30;
		this.deleteRange = 60;
		this.previousX = args.targetCharacter.characterData.character_zone_x - this.offsetX;
		this.previousY = args.targetCharacter.characterData.character_zone_y - this.offsetY;
		
		var self = this;
		
		var explosionImageObject = new Image();
		explosionImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/blast/blast1.png';
		
		var explosionSound = soundManager.createSound({
				id: 'explosion' + ( ++spellEffects.soundIncrementor ),
				url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/Adele - Rolling in the deep.mp3', //bolt/bolt_impact.mp3',
				volume: spellEffects.volumeByRange ( Component.bugcraft.currentCharacterObject.characterData.character_zone_x, Component.bugcraft.currentCharacterObject.characterData.character_zone_y, args.targetCharacter.characterData.character_zone_x, args.targetCharacter.characterData.character_zone_y, spellEffects.volumeRangeLong )
		});
		
		this.spellEffectSoundID = args.targetCharacter._internal.soundEffects.push( explosionSound ) - 1;
		
		soundManager.play( 'explosion' + spellEffects.soundIncrementor, 
										{
											onfinish: function () 
											{
												delete args.targetCharacter._internal.soundEffects[ self.spellEffectSoundID ];	
											}
										});
		
		//draw the explosion
		this.draw = function()
		{
			
			Map.ctx.globalAlpha = self.alpha;
			
			Map.ctx.save();
			
			Map.ctx.translate( args.targetCharacter.characterData.character_zone_x + Map.viewPortX, args.targetCharacter.characterData.character_zone_y + Map.viewPortY );
			
			Map.ctx.rotate( self.rotation );
			
			Map.ctx.drawImage(
											explosionImageObject,
											- self.offsetX,
											- self.offsetY
										);
										
			self.previousX = args.targetCharacter.characterData.character_zone_x - self.offsetX;
			self.previousY = args.targetCharacter.characterData.character_zone_y - self.offsetY;
										
			Map.ctx.restore();
			
			Map.ctx.globalAlpha = 1;
		}

		//remove the explosion
		this.remove = function()
		{
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[1][ this.ID ] = null;
			delete args.targetCharacter._internal.spellEffects[ self.characterSpellEffectID ];
			
		}
		
		setTimeout( function()
							{
								explosionImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/blast/blast2.png';
								
								setTimeout( function()
													{
														explosionImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/blast/blast3.png';
														
														var _t = setInterval( function()
																			{
																				self.alpha -= 0.1;
																				
																				if( self.alpha > 0 )
																				{
																					return;
																				}
																				
																				self.remove();
																				
																				clearInterval( _t );
																				
																			}, 20 );
														
													}, 100 );
							}, 100 );
							
	} //end explosion

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.flagCaptureAoe.js
*/

//181 flag capture aoe
//182 anterium flag
//183 hegemony flag
//184 flag captured


	spellEffects.flagCaptureAoe = function( args )
	{
		this.ID = spellEffects.layer[0].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		this.alpha = 1;
		this.offsetX = 42;
		this.offsetY = 42;
		this.rotation = Math.random() * (Math.PI * 2);
		this.deleteRange = 84;
		this.previousX = args.targetCharacter.characterData.character_zone_x - this.offsetX;
		this.previousY = args.targetCharacter.characterData.character_zone_y - this.offsetY;
		this.duration = 2000;
		
		var self = this;
		
		var flagCaptureAoeImageObject = new Image();
		flagCaptureAoeImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/flagCapture/181_flagCaptureAoe' + args.component + '.png';
		
		//draw the flagCaptureAoe
		this.draw = function()
		{
			Map.ctx.globalAlpha = self.alpha;
			
			Map.ctx.save();
			
			Map.ctx.translate( args.targetCharacter.characterData.character_zone_x + Map.viewPortX, args.targetCharacter.characterData.character_zone_y + Map.viewPortY );
			
			Map.ctx.rotate( self.rotation );
			
			Map.ctx.drawImage(
											flagCaptureAoeImageObject,
											- self.offsetX,
											- self.offsetY
										);
	
			self.previousX = args.targetCharacter.characterData.character_zone_x - self.offsetX;
			self.previousY = args.targetCharacter.characterData.character_zone_y - self.offsetY;
	
			Map.ctx.restore();
			
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the flagCaptureAoe
		this.remove = function()
		{
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[0][ this.ID ] = null;
			delete args.targetCharacter._internal.spellEffects[ this.characterSpellEffectID ];
		}
		
		
		
		switch( args.component )
		{
			case 0:	
				
				//sound creation
				/*
				var flagCaptureAoeSound = soundManager.createSound({
						id: 'flagCaptureAoe' + ( ++spellEffects.soundIncrementor ),
						url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/aura/slowing time - magic.mp3',
						volume: spellEffects.volumeByRange ( Component.bugcraft.currentCharacterObject.characterData.character_zone_x, Component.bugcraft.currentCharacterObject.characterData.character_zone_y, args.targetCharacter.characterData.character_zone_x, args.targetCharacter.characterData.character_zone_y, spellEffects.volumeRangeLong )
				});
				
				this.spellEffectSoundID = args.targetCharacter._internal.soundEffects.push( flagCaptureAoeSound ) - 1;
				
				//sound play				
				soundManager.play( 'flagCaptureAoe' + spellEffects.soundIncrementor, 
												{
													onfinish: function () 
													{
														delete args.targetCharacter._internal.soundEffects[ self.spellEffectSoundID ];	
													}
												});
				*/
				self.alpha = 0;
				var _animateFunction =	function()
																	{
																		if( self.alpha < 1 )
																		{
																			self.alpha += 0.2;
																		}
																	
																		self.rotation -= Math.PI / 64;

																		_animateFunctionPointer = setTimeout( _animateFunction, 50 );
																	}			
			break;
			case 1:
				self.alpha = 0;
				var _animateFunction =	function()
																	{
																		if( self.alpha < 1 )
																		{
																			self.alpha += 0.2;
																		}
																		
																		self.rotation += Math.PI / 32;

																		_animateFunctionPointer = setTimeout( _animateFunction, 50 );
																	}						
			break;
		}
		
		var _animateFunctionPointer = setTimeout( _animateFunction, 50 );
		
		setTimeout( function() 
								{ 
									clearTimeout( _animateFunctionPointer );
									
									var _t = setInterval( function()
																		{
																			self.alpha -= 0.1;
																			
																			if( self.alpha > 0 )
																			{
																				return;
																			}
																			
																			self.remove();
																			
																			clearInterval( _t );
																			
																		}, 40 );
								}, self.duration );
	} //end flagCaptureAoe

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.flagCaptureAoeComplete.js
*/


	spellEffects.flagCaptureAoeComplete = function( args )
	{
		this.ID = spellEffects.layer[1].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		
		this.draw = function()
		{
			
		}
		
		var effect0 = new spellEffects.flagCaptureAoe({ 			
				sourceCharacter: args.sourceCharacter,														
				targetCharacter: args.targetCharacter,
				component: 0
		});
		
		var effect1 = new spellEffects.flagCaptureAoe({ 																						
				sourceCharacter: args.sourceCharacter,
				targetCharacter: args.targetCharacter,
				component: 1
		});
		
		this.remove = function()
		{
			effect0.remove();
			effect1.remove();
			
			spellEffects.layer[1][ self.ID ] = null;
				
			delete args.targetCharacter._internal.spellEffects[ self.characterSpellEffectID ];
		}
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.flagCapturedAnterium.js
*/


	spellEffects.flagCapturedAnterium = function( args )
	{
		this.ID = spellEffects.layer[args.layer].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		this.alpha = 1;
		this.offsetX = 60; //half the width of the image used to center the image on the position
		this.offsetY = 60; //half the height of the image
		this.rotation = Math.random() * (Math.PI * 2);
		this.deleteRange = 120; // greatest of the height or widht of the image
		this.previousX = args.targetCharacter.characterData.character_zone_x - this.offsetX; // both previousX/Y used to erase the image form the canvas
		this.previousY = args.targetCharacter.characterData.character_zone_y - this.offsetY; // substract more if you want to increase delete range on either x or y
		this.duration = 5000 - Component.bugcraft.latency;
		
		var self = this;
		
		var flagCapturedAnteriumImageObject = new Image();
		flagCapturedAnteriumImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/flagCapture/182_anteriumFlag' + args.component + '.png';
		
		//draw the flagCapturedAnterium
		this.draw = function()
		{
			Map.ctx.globalAlpha = self.alpha;
			
			Map.ctx.save();
			
			Map.ctx.translate( args.targetCharacter.characterData.character_zone_x + Map.viewPortX, args.targetCharacter.characterData.character_zone_y + Map.viewPortY );
			
			Map.ctx.rotate( self.rotation );
			
			Map.ctx.drawImage(
											flagCapturedAnteriumImageObject,
											- self.offsetX,
											- self.offsetY
										);
	
			self.previousX = args.targetCharacter.characterData.character_zone_x - self.offsetX;
			self.previousY = args.targetCharacter.characterData.character_zone_y - self.offsetY;
	
			Map.ctx.restore();
			
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the flagCapturedAnterium
		this.remove = function()
		{
			clearTimeout( _animateFunctionPointer );
									
			var _t = setInterval( function()
												{
													self.alpha -= 0.1;
													
													if( self.alpha > 0 )
													{
														return;
													}
													
													spellEffects.layerCleaner.push( this );
													spellEffects.layer[args.layer][ this.ID ] = null;
													delete args.targetCharacter._internal.spellEffects[ this.characterSpellEffectID ];
													
													clearInterval( _t );
													
												}, 40 );
		}
		
		
		
		switch( args.component )
		{
			case 0:	
				//sound creation
				/*
				var flagCapturedAnteriumSound = soundManager.createSound({
						id: 'flagCapturedAnterium' + ( ++spellEffects.soundIncrementor ),
						url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/aura/slowing time - magic.mp3',
						volume: spellEffects.volumeByRange ( Component.bugcraft.currentCharacterObject.characterData.character_zone_x, Component.bugcraft.currentCharacterObject.characterData.character_zone_y, args.targetCharacter.characterData.character_zone_x, args.targetCharacter.characterData.character_zone_y, spellEffects.volumeRangeLong )
				});
				
				this.spellEffectSoundID = args.targetCharacter._internal.soundEffects.push( flagCapturedAnteriumSound ) - 1;
						
				//sound play				
				soundManager.play( 'flagCapturedAnterium' + spellEffects.soundIncrementor, 
												{
													onfinish: function () 
													{
														delete args.targetCharacter._internal.soundEffects[ self.spellEffectSoundID ];	
													}
												});
				*/
				self.alpha = 0;
				var _animateFunction =	function()
																	{
																		if( self.alpha < 1 )
																		{
																			self.alpha += 0.2;
																		}
																	
																		self.rotation -= Math.PI / 64;

																		_animateFunctionPointer = setTimeout( _animateFunction, 50 );
																	}			
			break;
			case 1:
				self.alpha = 0;
				var _animateFunction =	function()
																	{
																		if( self.alpha < 1 )
																		{
																			self.alpha += 0.2;
																		}
																		
																		self.rotation += Math.PI / 32;

																		_animateFunctionPointer = setTimeout( _animateFunction, 50 );
																	}						
			break;
			case 2:
				var opacityVariation = 0;
		
				var _animateFunction =  function()
														{
															self.alpha = Math.abs( Math.sin( opacityVariation ) );

															opacityVariation += Math.PI / 32;
															
															if (self.alpha < 0.5 )
															{
																self.alpha = 0.5;
															}
															
															_animateFunctionPointer = setTimeout( _animateFunction, 50 );
														}					
			break;
		}
		
		var _animateFunctionPointer = setTimeout( _animateFunction, 50 );
		
	} //end spinning aura

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.flagCapturedAnteriumComplete.js
*/


	spellEffects.flagCapturedAnteriumComplete = function( args )
	{
		this.ID = spellEffects.layer[1].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		
		this.draw = function()
		{
			
		}
		
		var effect0 = new spellEffects.flagCapturedAnterium({ 			
				sourceCharacter: args.sourceCharacter,														
				targetCharacter: args.targetCharacter,
				layer: 0,
				component: 0
		});
		
		var effect1 = new spellEffects.flagCapturedAnterium({ 																						
				sourceCharacter: args.sourceCharacter,
				targetCharacter: args.targetCharacter,
				layer: 1,
				component: 1
		});
		var effect2 = new spellEffects.flagCapturedAnterium({ 																						
				sourceCharacter: args.sourceCharacter,
				targetCharacter: args.targetCharacter,
				layer: 1,
				component: 2
		});
		
		this.remove = function()
		{
			effect0.remove();
			effect1.remove();
			effect2.remove();
			
			spellEffects.layer[1][ self.ID ] = null;
				
			delete args.targetCharacter._internal.spellEffects[ self.characterSpellEffectID ];
		}
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.flagCapturedHegemony.js
*/


	spellEffects.flagCapturedHegemony = function( args )
	{
		this.ID = spellEffects.layer[args.layer].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		this.alpha = 1;
		this.offsetX = 60; //half the width of the image used to center the image on the position
		this.offsetY = 60; //half the height of the image
		this.rotation = Math.random() * (Math.PI * 2);
		this.deleteRange = 120; // greatest of the height or widht of the image
		this.previousX = args.targetCharacter.characterData.character_zone_x - this.offsetX; // both previousX/Y used to erase the image form the canvas
		this.previousY = args.targetCharacter.characterData.character_zone_y - this.offsetY; // substract more if you want to increase delete range on either x or y
		this.duration = 15000 - Component.bugcraft.latency;
		
		var self = this;
		
		var flagCapturedHegemonyImageObject = new Image();
		flagCapturedHegemonyImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/flagCapture/183_hegemonyFlag' + args.component + '.png';
		
		//draw the flagCapturedHegemony
		this.draw = function()
		{
			Map.ctx.globalAlpha = self.alpha;
			
			Map.ctx.save();
			
			Map.ctx.translate( args.targetCharacter.characterData.character_zone_x + Map.viewPortX, args.targetCharacter.characterData.character_zone_y + Map.viewPortY );
			
			Map.ctx.rotate( self.rotation );
			
			Map.ctx.drawImage(
											flagCapturedHegemonyImageObject,
											- self.offsetX,
											- self.offsetY
										);
	
			self.previousX = args.targetCharacter.characterData.character_zone_x - self.offsetX;
			self.previousY = args.targetCharacter.characterData.character_zone_y - self.offsetY;
	
			Map.ctx.restore();
			
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the flagCapturedHegemony
		this.remove = function()
		{
			clearTimeout( _animateFunctionPointer );
									
			var _t = setInterval( function()
												{
													self.alpha -= 0.1;
													
													if( self.alpha > 0 )
													{
														return;
													}
													
													spellEffects.layerCleaner.push( this );
													spellEffects.layer[args.layer][ this.ID ] = null;
													delete args.targetCharacter._internal.spellEffects[ this.characterSpellEffectID ];
													
													clearInterval( _t );
													
												}, 40 );
		}
		
		
		
		switch( args.component )
		{
			case 0:	
				//sound creation
				/*
				var flagCapturedHegemonySound = soundManager.createSound({
						id: 'flagCapturedHegemony' + ( ++spellEffects.soundIncrementor ),
						url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/aura/slowing time - magic.mp3',
						volume: spellEffects.volumeByRange ( Component.bugcraft.currentCharacterObject.characterData.character_zone_x, Component.bugcraft.currentCharacterObject.characterData.character_zone_y, args.targetCharacter.characterData.character_zone_x, args.targetCharacter.characterData.character_zone_y, spellEffects.volumeRangeLong )
				});
				
				this.spellEffectSoundID = args.targetCharacter._internal.soundEffects.push( flagCapturedHegemonySound ) - 1;
						
				//sound play				
				soundManager.play( 'flagCapturedHegemony' + spellEffects.soundIncrementor, 
												{
													onfinish: function () 
													{
														delete args.targetCharacter._internal.soundEffects[ self.spellEffectSoundID ];	
													}
												});
				*/
				self.alpha = 0;
				var _animateFunction =	function()
																	{
																		if( self.alpha < 1 )
																		{
																			self.alpha += 0.2;
																		}
																	
																		self.rotation -= Math.PI / 64;

																		_animateFunctionPointer = setTimeout( _animateFunction, 50 );
																	}			
			break;
			case 1:
				self.alpha = 0;
				var _animateFunction =	function()
																	{
																		if( self.alpha < 1 )
																		{
																			self.alpha += 0.2;
																		}
																		
																		self.rotation += Math.PI / 32;

																		_animateFunctionPointer = setTimeout( _animateFunction, 50 );
																	}						
			break;
			case 2:
				var opacityVariation = Math.PI/2;
		
				var _animateFunction =  function()
														{
															self.alpha = Math.abs( Math.sin( opacityVariation ) );

															opacityVariation += Math.PI / 32;
															
															if (self.alpha < 0.5 )
															{
																self.alpha = 0.5;
															}
															
															_animateFunctionPointer = setTimeout( _animateFunction, 50 );
														}					
			break;
		}
		
		var _animateFunctionPointer = setTimeout( _animateFunction, 50 );
		
	} //end spinning aura

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.flagCapturedHegemonyComplete.js
*/


	spellEffects.flagCapturedHegemonyComplete = function( args )
	{
		this.ID = spellEffects.layer[1].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		
		this.draw = function()
		{
			
		}
		
		var effect0 = new spellEffects.flagCapturedHegemony({ 			
				sourceCharacter: args.sourceCharacter,														
				targetCharacter: args.targetCharacter,
				layer: 0,
				component: 0
		});
		
		var effect1 = new spellEffects.flagCapturedHegemony({ 																						
				sourceCharacter: args.sourceCharacter,
				targetCharacter: args.targetCharacter,
				layer: 1,
				component: 1
		});
		var effect2 = new spellEffects.flagCapturedHegemony({ 																						
				sourceCharacter: args.sourceCharacter,
				targetCharacter: args.targetCharacter,
				layer: 1,
				component: 2
		});
		
		this.remove = function()
		{
			effect0.remove();
			effect1.remove();
			effect2.remove();
			
			spellEffects.layer[1][ self.ID ] = null;
				
			delete args.targetCharacter._internal.spellEffects[ self.characterSpellEffectID ];
		}
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.flamewave.js
*/

	
	spellEffects[ 'flamewave' ] = function( args )
	{
		var self = this,
				_ccd = Component.bugcraft.currentCharacterObject.characterData,
				_moveFrames = {},
				_tc = args.targetCharacter,
				_tcd = _tc.characterData,
				_changeFrameFunctionPointer = null,
				_currentIndex = 1,
				_maxFrames = 8;
		
		this.ID = spellEffects.layer[0].push( this ) - 1;
		this.characterSpellEffectID = _tc._internal.spellEffects.push( this ) - 1;
		this.offsetX = 20;
		this.offsetY = 20;
		this.rotation = _tcd.character_rotation;
		this.deleteRange = 40;
		this.previousX = _tcd.character_zone_x - this.offsetX;
		this.previousY = _tcd.character_zone_y - this.offsetY;
		
		// initialize
		
		Application.sound.playExclusive({
											url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/flamewave/flamewave.mp3',
											volume: spellEffects.volumeByRangeVoice(
																		_ccd.character_zone_x,
																		_ccd.character_zone_y,
																		_tcd.character_zone_x,
																		_tcd.character_zone_y,
																		spellEffects.volumeRangeLong
																	),
											onFinish: function()
											{
												
											}
										});
		
		for(var i=1;i<=_maxFrames;i++)
		{
			_moveFrames[ i ] = { image: new Image(), alpha: 0 };
			_moveFrames[ i ].image.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/flamewave/flamewave' + i + '.png';
		}
		
		//draw the bombardierBeetleDeath spatter
		this.draw = function()
		{
			Map.ctx.save();
			
			Map.ctx.translate( self.previousX + self.offsetX + Map.viewPortX, self.previousY + self.offsetY + Map.viewPortY );
			
			Map.ctx.rotate( ( self.rotation - 90 ) * Math.PI / 180 );
			
			Map.ctx.shadowColor = 'rgba(0, 0, 0, 0.7)';
			Map.ctx.shadowOffsetX = 3;
			Map.ctx.shadowOffsetY = 3;
			
			Map.ctx.drawImage(
							_moveFrames[ _currentIndex ].image,
							- self.offsetX,
							- self.offsetY
						);
			
			Map.ctx.restore();
			
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the deathDecay
		this.remove = function()
		{
			clearTimeout( _changeFrameFunctionPointer );
			
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[0][ this.ID ] = null;
			
			delete _tc._internal.spellEffects[ this.characterSpellEffectID ];
		}
		
		var _changeFrameFunction = function()
		{
			_currentIndex++;
			
			if( _currentIndex > _maxFrames )
			{
				self.remove();
				
				return;
			}
			
			_changeFrameFunctionPointer = setTimeout( _changeFrameFunction, 100 );
		}
		
		_changeFrameFunction();
		
	} //end bombardierBeetleDeath

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.floatingChatImageBubble.js
*/


	spellEffects.floatingChatImageBubble = function( args )
	{
		var self = this, _tc = args.targetCharacter;
		
		this.ID = spellEffects.layer[1].push( this ) - 1;
		this.characterSpelEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		this.alpha = 0;
		this.offsetX = 0;
		this.offsetY = 10;
		this.fontSize = args.fontSize ? args.fontSize : 12;
		this.maximumDistance = 60;
		this.deleteRange = 0;
		this.previousX = _tc.characterData.character_zone_x - this.offsetX - 30;
		this.previousY = _tc.characterData.character_zone_y - this.offsetY;
		
		// init images
		var _bubbleCenterImageObject = new Image();
		_bubbleCenterImageObject.src = args.image;
		
		// calculate delete range
		this.deleteRange = 100;
		
		//draw the floating damge effect
		this.draw = function()
		{
			//
			// Draw effect
			//
			
			Map.ctx.save();
			
			Map.ctx.globalAlpha = self.alpha;
			
			Map.ctx.textAlign = "left";
			Map.ctx.fillStyle = args.color ? args.color : "#ffffff";
			Map.ctx.strokeStyle = "#000000";
			Map.ctx.lineWidth = 2;
			
			Map.ctx.drawImage(
								_bubbleCenterImageObject,
								_tc.characterData.character_zone_x + Map.viewPortX - 20,
								_tc.characterData.character_zone_y + Map.viewPortY - 80
							);
			
			Map.ctx.globalAlpha = 1;
			
			Map.ctx.restore();
			
			// delete coordinates
			self.previousX = _tc.characterData.character_zone_x - 85;
			self.previousY = _tc.characterData.character_zone_y - 80;
		}
		
		//remove the effect
		this.remove = function()
		{
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[1][ this.ID ] = null;
			
			delete _tc._internal.spellEffects[ this.characterSpelEffectID ];
		}
		
		//
		// Chat bubble animation
		//
		
		var _animFunctionFadeOut = function()
		{
			self.alpha -= 0.05;
			
			if( self.alpha <= 0 )
			{
				self.remove();
				
				return;
			}
			
			setTimeout( _animFunctionFadeOut, 150 );
		}
		
		var _animFunctionFadeIn = function()
		{
			self.alpha += 0.07;
			
			if( self.alpha >= 0.7 )
			{
				// start the fadeout in x seconds
				setTimeout( _animFunctionFadeOut, 2000 );
				
				return;
			}
			
			setTimeout( _animFunctionFadeIn, 50 );
		}
		
		_animFunctionFadeIn();
		
	} //end floatingChatBubble
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.floatingChatTextBubble.js
*/


	spellEffects.floatingChatTextBubble = function( args )
	{
		var self = this, _tc = args.targetCharacter;
		
		this.ID = spellEffects.layer[1].push( this ) - 1;
		this.characterSpelEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		this.alpha = 0;
		this.offsetX = 0;
		this.offsetY = 10;
		this.fontSize = args.fontSize ? args.fontSize : 16;
		this.maximumDistance = 60;
		this.deleteRange = 0;
		this.previousX = _tc.characterData.character_zone_x - this.offsetX - 70;
		this.previousY = _tc.characterData.character_zone_y - this.offsetY;
		
		var _words = args.text.split( " " ), _lines = [ "" ], _bubbleLineWidth = 150, _bubbleLineHeight = 20, _currentLineWidth = 0, _wordWidth = null,
			_bubbleTopImageObject = new Image(), _bubbleMiddleImageObject = new Image(), _bubbleBottomImageObject = new Image();
		
		// init images
		_bubbleTopImageObject.src = '/appSpecific/img/chat/bubbleTop.png';
		_bubbleMiddleImageObject.src = '/appSpecific/img/chat/bubbleMiddle.png';
		_bubbleBottomImageObject.src = '/appSpecific/img/chat/bubbleBottom.png';
		
		// calculate words' occupied space
		for(var i=0;i<_words.length;i++)
		{
			_wordWidth = Map.ctx.measureText( _words[ i ] + " " ).width;
			
			var _currentWord = _words[ i ];
			while( _wordWidth > _bubbleLineWidth )
			{
				// really long word
				
				_currentWord = _currentWord.substring( 0, _currentWord.length - 1 );
				
				_wordWidth = Map.ctx.measureText( _currentWord ).width;
				
				if( _wordWidth > _bubbleLineWidth )
				{
					continue;
				}
				
				// now it is shorter. add the remaining word to the existing words. it will be evaluated next
				_words.splice( i + 1, 0, _words[ i ].substring( _currentWord.length ) );
				
				// the current word is changed to the new, now shorter, word
				_words[ i ] = _currentWord;
				
				break;
			}
			
			if( _currentLineWidth + _wordWidth <= _bubbleLineWidth )
			{
				_currentLineWidth += _wordWidth;
				
				if( _lines[ _lines.length - 1 ].length > 0 )
				{
					// append space to previous word
					
					_lines[ _lines.length - 1 ] += " ";
				}
				
				_lines[ _lines.length - 1 ] += _words[ i ];
				
				continue;
			}
			
			// new line
			_currentLineWidth = _wordWidth;
			_lines[ _lines.length ] = _words[ i ];
			
			_bubbleLineHeight += 15;
		}
		
		// calculate delete range
		this.deleteRange = _bubbleLineHeight + 130;
		
		var _drawBubble = function( _x, _y )
		{
			Map.ctx.drawImage(
								_bubbleTopImageObject,
								_x,
								_y
							);
			
			for(var i=1;i< ( _bubbleLineHeight / 5 ) + 2;i++)
			{
				Map.ctx.drawImage(
									_bubbleMiddleImageObject,
									_x,
									_y + ( i * 5 )
								);
			}
			
			Map.ctx.drawImage(
								_bubbleBottomImageObject,
								_x,
								_y + Math.floor( ( _bubbleLineHeight / 5 ) + 2 ) * 5
							);
		}
		
		var _drawTextAt = function( text, x, y )
		{
			//Map.ctx.strokeText( text, x, y );
			Map.ctx.fillText( text, x, y );
		}
		
		//draw the floating damge effect
		this.draw = function()
		{
			//
			// Draw effect
			//
			
			Map.ctx.save();
			
			Map.ctx.globalAlpha = self.alpha;
			
			Map.ctx.textAlign = "left";
			Map.ctx.lineWidth = 2;
			Map.ctx.font = self.fontSize + "px helveticaworldBold sans-serif";
			
			_drawBubble(
						_tc.characterData.character_zone_x + Map.viewPortX - 82.5,
						_tc.characterData.character_zone_y + Map.viewPortY - _bubbleLineHeight - 50
					);
			
			for(var i=0;i<_lines.length;i++)
			{
				Map.ctx.fillStyle =  "#1f1f1f";
				
				_drawTextAt(
							_lines[ i ],
							_tc.characterData.character_zone_x + Map.viewPortX - ( Map.ctx.measureText( _lines[ i ] ).width / 2 ),
							_tc.characterData.character_zone_y + Map.viewPortY - ( -15 * i ) - _bubbleLineHeight - 40
						);
				
				Map.ctx.fillStyle = args.color ? args.color : "#efefef";
				
				_drawTextAt(
							_lines[ i ],
							_tc.characterData.character_zone_x + Map.viewPortX - ( Map.ctx.measureText( _lines[ i ] ).width / 2 ) - 1,
							_tc.characterData.character_zone_y + Map.viewPortY - ( -15 * i ) - _bubbleLineHeight - 40 - 1
						);
			}
			
			Map.ctx.globalAlpha = 1;
			
			Map.ctx.restore();
			
			// delete coordinates
			self.previousX = _tc.characterData.character_zone_x - 85;
			self.previousY = _tc.characterData.character_zone_y - _bubbleLineHeight - 50;
		}
		
		//remove the effect
		this.remove = function()
		{
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[1][ this.ID ] = null;
			
			delete _tc._internal.spellEffects[ this.characterSpelEffectID ];
		}
		
		//
		// Chat bubble animation
		//
		
		var _animFunctionFadeOut = function()
		{
			self.alpha -= 0.05;
			
			if( self.alpha <= 0 )
			{
				self.remove();
				
				return;
			}
			
			setTimeout( _animFunctionFadeOut, 150 );
		}
		
		var _animFunctionFadeIn = function()
		{
			self.alpha += 0.07;
			
			if( self.alpha >= 0.7 )
			{
				// start the fadeout in x seconds
				setTimeout( _animFunctionFadeOut, 6000 );
				
				return;
			}
			
			setTimeout( _animFunctionFadeIn, 50 );
		}
		
		_animFunctionFadeIn();
		
	} //end floatingChatBubble
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.floatingDamage.js
*/


	spellEffects.floatingDamage = function( args )
	{
		this.ID = spellEffects.layer[1].push( this ) - 1;
		this.characterSpelEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		this.alpha = 1;
		this.offsetX = 0;
		this.offsetY = 10;
		this.maximumDistance = 60;
		this.deleteRange = 60;
		this.previousX = args.targetCharacter.characterData.character_zone_x - this.offsetX - 30;
		this.previousY = args.targetCharacter.characterData.character_zone_y - this.offsetY;
		
		var self = this;
		
		//draw the floating damge effect
		this.draw = function()
		{
			Map.ctx.globalAlpha = self.alpha;
			
			Map.ctx.fillStyle = "black";
			Map.ctx.font = "bold 13px sans-serif";
			
			Map.ctx.fillText( 
								args.damage, 
								args.targetCharacter.characterData.character_zone_x - self.offsetX, 
								args.targetCharacter.characterData.character_zone_y + self.offsetY
								);
			
			self.previousX = args.targetCharacter.characterData.character_zone_x - self.offsetX;
			self.previousY = args.targetCharacter.characterData.character_zone_y + self.offsetY;
			
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the slash effect
		
		this.remove = function()
		{
			spellEffects.layer[1][ this.ID ] = null;
		}

		var _animFunction =	function()
											{
												self.offsetY -= 5;
												
												if( self.offsetY < - maximumDistance )
												{
													self.alpha-=0.05;
												}
												
												if( self.alpha < 0 )
												{
													self.remove();
													
													return;
												}
												
												setTimeout( _animFunction, 30 );
											}
		
		_animFunction();
		
	} //end floating damage

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.floatingText.js
*/


	spellEffects.floatingText = function( args )
	{
		this.ID = spellEffects.layer[1].push( this ) - 1;
		this.characterSpelEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		this.alpha = 1;
		this.offsetX = 0;
		this.offsetY = 10;
		this.color = args.color ? args.color: "#ffffff";
		this.fontSize = args.fontSize ? args.fontSize : 16;
		this.maximumDistance = 60;
		this.deleteRange = 60;
		this.previousX = args.targetCharacter.characterData.character_zone_x - this.offsetX - 30;
		this.previousY = args.targetCharacter.characterData.character_zone_y - this.offsetY;
		
		var self = this;
		
		//draw the floating damge effect
		this.draw = function()
		{
			Map.ctx.save();
			
			Map.ctx.globalAlpha = self.alpha;
			
			Map.ctx.textAlign = "center";
			Map.ctx.fillStyle = self.color;
			Map.ctx.strokeStyle = "#000000";
			Map.ctx.lineWidth = 2;
			Map.ctx.font = self.fontSize + "px sans-serif";
			
			Map.ctx.strokeText(
								args.text, 
								args.targetCharacter.characterData.character_zone_x - self.offsetX + Map.viewPortX,
								args.targetCharacter.characterData.character_zone_y - self.offsetY + Map.viewPortY
							);
			
			Map.ctx.fillText( 
								args.text, 
								args.targetCharacter.characterData.character_zone_x - self.offsetX + Map.viewPortX,
								args.targetCharacter.characterData.character_zone_y - self.offsetY + Map.viewPortY
							);
			
			self.previousX = args.targetCharacter.characterData.character_zone_x - self.offsetX - 30;
			self.previousY = args.targetCharacter.characterData.character_zone_y - self.offsetY;
			
			Map.ctx.globalAlpha = 1;
			
			Map.ctx.restore();
		}
		
		//remove the effect
		this.remove = function()
		{
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[1][ this.ID ] = null;
			delete args.targetCharacter._internal.spellEffects[ this.characterSpelEffectID ];
		}
		
		var _animFunction =	function()
											{
												self.offsetY += 5;
												
												if( self.offsetY >  self.maximumDistance )
												{
													self.alpha -= 0.1;
												}
												
												if( self.alpha < 0.05 )
												{
													self.remove();
													
													return;
												}
												
												setTimeout( _animFunction, 80 );
											}
		
		_animFunction();
		
	} //end floating damage

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.floatingTextCriticalDamage.js
*/


	spellEffects.floatingTextCriticalDamage = function( args )
	{
		this.ID = spellEffects.layer[1].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		this.alpha = 1;
		this.offsetX = 0;
		this.offsetY = 10;
		this.maximumDistance = 60;
		this.deleteRange = 60;
		this.previousX = args.targetCharacter.characterData.character_zone_x - this.offsetX - 30;
		this.previousY = args.targetCharacter.characterData.character_zone_y - this.offsetY;
		
		var self = this;

		var fontFamily = "bold 10px sans-serif";
		
		//draw the effect
		this.draw = function()
		{
			Map.ctx.globalAlpha = self.alpha;
			
			Map.ctx.textAlign = "center";
			Map.ctx.fillStyle = "red";
			Map.ctx.strokeStyle = "black";
			Map.ctx.lineWidth = 2;
			Map.ctx.font = fontFamily;
			
			Map.ctx.strokeText( 
								args.text, 
								args.targetCharacter.characterData.character_zone_x - self.offsetX + Map.viewPortX,
								args.targetCharacter.characterData.character_zone_y - self.offsetY + Map.viewPortY
								);
			
			Map.ctx.fillText( 
								args.text, 
								args.targetCharacter.characterData.character_zone_x + Map.viewPortX - self.offsetX,
								args.targetCharacter.characterData.character_zone_y + Map.viewPortY - self.offsetY
								);
								
			self.previousX = args.targetCharacter.characterData.character_zone_x - self.offsetX - 30;
			self.previousY = args.targetCharacter.characterData.character_zone_y - self.offsetY;
			
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the effect
		this.remove = function()
		{
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[1][ this.ID ] = null;
			delete args.targetCharacter._internal.spellEffects[ this.characterSpellEffectID ];
		}

		var i = 10;
		var _popup = function()
								{
									fontFamily = "bold " + i + "px sans-serif";
									i+=2;
									
									if( i > 26 )
									{
										return;
									}
									
									setTimeout( _popup, 30);
								}
		_popup();
		
		var _animFunction =	function()
											{
												self.offsetY += 5;
												
												if( self.offsetY > self.maximumDistance )
												{
													self.alpha-=0.05;
												}
												
												if( self.alpha < 0 )
												{
													self.remove();
													
													return;
												}
												
												setTimeout( _animFunction, 40 );
											}
		
		_animFunction();
		
	} //end criticalText

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.floatingTextCriticalHeal.js
*/


	spellEffects.floatingTextCriticalHeal = function( args )
	{
		this.ID = spellEffects.layer[1].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		this.alpha = 1;
		this.offsetX = 0;
		this.offsetY = 10;
		this.maximumDistance = 60;
		this.deleteRange = 60;
		this.previousX = args.targetCharacter.characterData.character_zone_x - this.offsetX - 30;
		this.previousY = args.targetCharacter.characterData.character_zone_y - this.offsetY;
		
		var self = this;

		var fontFamily = "bold 10px sans-serif";
		
		//draw the effect
		this.draw = function()
		{
			Map.ctx.globalAlpha = self.alpha;
			
			Map.ctx.textAlign = "center";
			Map.ctx.fillStyle = "green";
			Map.ctx.strokeStyle = "black";
			Map.ctx.lineWidth = 2;
			Map.ctx.font = fontFamily;
			
			Map.ctx.strokeText( 
								args.text, 
								args.targetCharacter.characterData.character_zone_x - self.offsetX + Map.viewPortX,
								args.targetCharacter.characterData.character_zone_y - self.offsetY + Map.viewPortY
								);
			
			Map.ctx.fillText( 
								args.text, 
								args.targetCharacter.characterData.character_zone_x + Map.viewPortX - self.offsetX,
								args.targetCharacter.characterData.character_zone_y + Map.viewPortY - self.offsetY
								);
								
			self.previousX = args.targetCharacter.characterData.character_zone_x - self.offsetX - 30;
			self.previousY = args.targetCharacter.characterData.character_zone_y - self.offsetY;
			
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the effect
		this.remove = function()
		{
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[1][ this.ID ] = null;
			delete args.targetCharacter._internal.spellEffects[ this.characterSpellEffectID ];
		}

		var i = 10;
		var _popup = function()
								{
									fontFamily = "bold " + i + "px sans-serif";
									i+=2;
									
									if( i > 26 )
									{
										return;
									}
									
									setTimeout( _popup, 30);
								}
		_popup();
		
		var _animFunction =	function()
											{
												self.offsetY += 5;
												
												if( self.offsetY > self.maximumDistance )
												{
													self.alpha-=0.05;
												}
												
												if( self.alpha < 0 )
												{
													self.remove();
													
													return;
												}
												
												setTimeout( _animFunction, 40 );
											}
		
		_animFunction();
		
	} //end criticalText

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.floatingTextDamage.js
*/


	spellEffects.floatingTextDamage = function( args )
	{
		this.ID = spellEffects.layer[1].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		this.alpha = 1;
		this.offsetX = 0;
		this.offsetY = 10;
		this.maximumDistance = 60;
		this.deleteRange = 60;
		this.previousX = args.targetCharacter.characterData.character_zone_x - this.offsetX - 30;
		this.previousY = args.targetCharacter.characterData.character_zone_y - this.offsetY;
		
		var self = this;
		
		//draw the floating damge effect
		this.draw = function()
		{
			Map.ctx.save();
			
			Map.ctx.globalAlpha = self.alpha;
			
			Map.ctx.textAlign = "center";
			Map.ctx.fillStyle = "orange";
			Map.ctx.strokeStyle = "black";
			Map.ctx.lineWidth = 2;
			Map.ctx.font = "bold 16px sans-serif";
			
			Map.ctx.strokeText( 
								args.text, 
								args.targetCharacter.characterData.character_zone_x - self.offsetX + Map.viewPortX,
								args.targetCharacter.characterData.character_zone_y - self.offsetY + Map.viewPortY
								);
			
			Map.ctx.fillText( 
								args.text, 
								args.targetCharacter.characterData.character_zone_x - self.offsetX + Map.viewPortX,
								args.targetCharacter.characterData.character_zone_y - self.offsetY + Map.viewPortY
								);
			
			self.previousX = args.targetCharacter.characterData.character_zone_x - self.offsetX - 30;
			self.previousY = args.targetCharacter.characterData.character_zone_y - self.offsetY;
			
			Map.ctx.globalAlpha = 1;
			
			Map.ctx.restore();
		}
		
		//remove the effect
		this.remove = function()
		{
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[1][ this.ID ] = null;
		delete args.targetCharacter._internal.spellEffects[ this.characterSpellEffectID ];
		}

		var _animFunction =	function()
											{
												self.offsetY += 5;
												
												if( self.offsetY >  self.maximumDistance )
												{
													self.alpha-=0.1;
												}
												
												if( self.alpha < 0.05 )
												{
													self.remove();
													
													return;
												}
												
												setTimeout( _animFunction, 40 );
											}
		
		_animFunction();
		
	} //end floating text

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.floatingTextHeal.js
*/


	spellEffects.floatingTextHeal = function( args )
	{
		this.ID = spellEffects.layer[1].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		this.alpha = 1;
		this.offsetX = 0;
		this.offsetY = 10;
		this.maximumDistance = 60;
		this.deleteRange = 60;
		this.previousX = args.targetCharacter.characterData.character_zone_x - this.offsetX - 30;
		this.previousY = args.targetCharacter.characterData.character_zone_y - this.offsetY;
		
		var self = this;
		
		//draw the floating damge effect
		this.draw = function()
		{
			Map.ctx.save();
			
			Map.ctx.globalAlpha = self.alpha;
			
			Map.ctx.textAlign = "center";
			Map.ctx.fillStyle = "green";
			Map.ctx.strokeStyle = "black";
			Map.ctx.lineWidth = 2;
			Map.ctx.font = "bold 16px sans-serif";
			
			Map.ctx.strokeText( 
								args.text, 
								args.targetCharacter.characterData.character_zone_x - self.offsetX + Map.viewPortX,
								args.targetCharacter.characterData.character_zone_y - self.offsetY + Map.viewPortY
								);
			
			Map.ctx.fillText( 
								args.text, 
								args.targetCharacter.characterData.character_zone_x - self.offsetX + Map.viewPortX,
								args.targetCharacter.characterData.character_zone_y - self.offsetY + Map.viewPortY
								);
			
			self.previousX = args.targetCharacter.characterData.character_zone_x - self.offsetX - 30;
			self.previousY = args.targetCharacter.characterData.character_zone_y - self.offsetY;
			
			Map.ctx.globalAlpha = 1;
			
			Map.ctx.restore();
		}
		
		//remove the effect
		this.remove = function()
		{
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[1][ this.ID ] = null;
			delete args.targetCharacter._internal.spellEffects[ this.characterSpellEffectID ];
		}

		var _animFunction =	function()
											{
												self.offsetY += 5;
												
												if( self.offsetY >  self.maximumDistance )
												{
													self.alpha-=0.1;
												}
												
												if( self.alpha < 0.05 )
												{
													self.remove();
													
													return;
												}
												
												setTimeout( _animFunction, 40 );
											}
		
		_animFunction();
		
	} //end floating text

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.footsteps.js
*/


	spellEffects.footsteps = function( args )
	{
		this.ID = spellEffects.layer[1].push( this ) - 1;
		this.alpha = 1;
		
		var footstepsImageObject = new Image();
		footstepsImageObject.src ='images/_characters/character1.png';
		
		var footstepsSound = soundManager.createSound({
				id: 'footsteps' + ( ++soundIncrementor ),
				url: 'sounds/_footsteps/steps_on_grass' + Math.floor( Math.random() * 5 )  + '.mp3',
				volume: spellEffects.volumeByRange ( Component.bugcraft.currentCharacterObject.characterData.character_zone_x, Component.bugcraft.currentCharacterObject.characterData.character_zone_y, args.targetCharacter.characterData.character_zone_x, args.targetCharacter.characterData.character_zone_y, spellEffects.volumeRangeLong )
		});
		//footstepsSound.load();

		footstepsSound.play();
		
		
		//
		//draw the bolt effect
		//
		this.draw = function()
		{
		
			spellEffects.ctx.globalAlpha = self.alpha;

			spellEffects.ctx.drawImage(
											footstepsImageObject,
											args.x,
											args.y
										)
			
			spellEffects.ctx.globalAlpha = 1;

		}
		
		//remove the dust effect
		var self = this;
		
		this.remove = function()
		{
			spellEffects.layer[1][ this.ID ] = null;
		}

		var _t = setInterval( function()
										{
											self.alpha -= 0.1;
											
											if( self.alpha > 0 )
											{
												return;
											}
											
											self.remove();

											clearInterval( _t );
											
										}, 100 );
													

												
												

		
	} //end footsteps

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.heal.js
*/

	
	spellEffects.heal = function( args )
	{
		this.ID = spellEffects.layer[1].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		this.alpha = 1;
		this.offsetX = 30;
		this.offsetY = 40;
		this.deleteRange = 60;
		this.previousX = args.sourceCharacter.characterData.character_zone_x - this.offsetX;
		this.previousY = args.sourceCharacter.characterData.character_zone_y - this.offsetY;
		
		var self = this;
		
		var healImageObject = new Image();
		healImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/heal/heal_effect1.png';
		
		
		var healSound = soundManager.createSound({
				id: 'heal' + ( ++spellEffects.soundIncrementor ),
				url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/heal/chimes' + Math.floor( Math.random() * 2 ) + '.mp3',
				volume: spellEffects.volumeByRange ( Component.bugcraft.currentCharacterObject.characterData.character_zone_x, Component.bugcraft.currentCharacterObject.characterData.character_zone_y, args.targetCharacter.characterData.character_zone_x, args.targetCharacter.characterData.character_zone_y, spellEffects.volumeRangeLong )
		});
		
		this.spellEffectSoundID = args.targetCharacter._internal.soundEffects.push( healSound ) - 1;
		
		soundManager.play( 'heal' + spellEffects.soundIncrementor, 
										{
											onfinish: function () 
											{
												delete args.targetCharacter._internal.soundEffects[ self.spellEffectSoundID ];	
											}
										});
		
		//draw the heal effect
		this.draw = function()
		{
			Map.ctx.globalAlpha = self.alpha;
			
			Map.ctx.drawImage(
							healImageObject,
							args.targetCharacter.characterData.character_zone_x - self.offsetX + Map.viewPortX,
							args.targetCharacter.characterData.character_zone_y - self.offsetY + Map.viewPortY
						);
						
			self.previousX = args.sourceCharacter.characterData.character_zone_x - this.offsetX;
			self.previousY = args.sourceCharacter.characterData.character_zone_y - this.offsetY;
			
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the heal effect
		this.remove = function()
		{
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[1][ this.ID ] = null;
			delete args.targetCharacter._internal.spellEffects[ this.characterSpellEffectID ];
		}

		setTimeout( function()
							{
								healImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/heal/heal_effect2.png';
								self.offsetX+=Math.floor( Math.random() * 10 ) - Math.floor( Math.random() * 10);
								self.offsetY-=Math.floor( Math.random() * 10 ) - Math.floor( Math.random() * 10);
								
								setTimeout( function()
													{
														healImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/heal/heal_effect3.png';
														self.offsetX-=Math.floor( Math.random() * 10 ) - Math.floor( Math.random() * 10);
														self.offsetY+=Math.floor( Math.random() * 10 ) - Math.floor( Math.random() * 10);
														
														var _t = setInterval( function()
																			{
																				self.alpha -= 0.1;
																				
																				if( self.alpha > 0 )
																				{
																					return;
																				}
																				
																				self.remove();
																				
																				clearInterval( _t );
																																										
																			}, 20 );
													}, 100 );
							}, 100 );
							
	} //end heal

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.healCast.js
*/


	spellEffects.healCast = function( args )
	{
		this.ID = spellEffects.layer[1].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		this.alpha = 1;
		this.offsetX = 30;
		this.offsetY = 30;
		this.rotation = Math.random() * (Math.PI * 2);
		this.deleteRange = 60;
		this.previousX = args.targetCharacter.characterData.character_zone_x - this.offsetX;
		this.previousY = args.targetCharacter.characterData.character_zone_y - this.offsetY;
		this.duration = 1000 - Component.bugcraft.latency;
		
		var self = this;
		
		var healCastImageObject = new Image();
		healCastImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/heal/cast/healing_cast' + args.component + '.png';
		
		var healCastSound = soundManager.createSound({
				id: 'healCast' + ( ++spellEffects.soundIncrementor ),
				url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/hit/magic_explosion.mp3',
				volume: spellEffects.volumeByRange( Component.bugcraft.currentCharacterObject.characterData.character_zone_x, Component.bugcraft.currentCharacterObject.characterData.character_zone_y, args.targetCharacter.characterData.character_zone_x, args.targetCharacter.characterData.character_zone_y, spellEffects.volumeRangeLong )
		});

		this.spellEffectSoundID = args.targetCharacter._internal.soundEffects.push( healCastSound ) - 1;
		
		//draw the healCast
		this.draw = function()
		{
			Map.ctx.globalAlpha = self.alpha;
			
			Map.ctx.save();
			
			Map.ctx.translate( args.targetCharacter.characterData.character_zone_x + Map.viewPortX, args.targetCharacter.characterData.character_zone_y + Map.viewPortY );
			
			Map.ctx.rotate( self.rotation );
			
			Map.ctx.drawImage(
											healCastImageObject,
											- self.offsetX,
											- self.offsetY
										);
										
			self.previousX = args.targetCharacter.characterData.character_zone_x - self.offsetX;
			self.previousY = args.targetCharacter.characterData.character_zone_y - self.offsetY;
	
			Map.ctx.restore();
			
			Map.ctx.globalAlpha = 1;
			
			
		}
		
		//remove the healCast
		
		this.remove = function()
		{
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[1][ this.ID ] = null;
			clearTimeout( _animateFunctionPointer );
			delete args.targetCharacter._internal.spellEffects[ this.characterSpellEffectID ];
		}
		
		
		
		switch( args.component )
		{
			case 0:	
				var i = 0;
				
				soundManager.play( 'healCast' + spellEffects.soundIncrementor, 
												{
													onfinish: function () 
													{
														delete args.targetCharacter._internal.soundEffects[ self.spellEffectSoundID ];	
													}
												});
				
				var _animateFunction = function()
														{
															healCastImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/heal/cast/healing_cast' + i++ + '.png';
															
															if( i < 5 )
															{
																_animateFunctionPointer = setTimeout( _animateFunction, 70 );
																return;
															}
															
															var _t = setInterval( function()
																				{
																					self.alpha -= 0.1;
																					
																					if( self.alpha > 0 )
																					{
																						return;
																					}
																					
																					self.remove();
																					
																					clearInterval( _t );
																					
																				}, 60 );
													
														}	
				
				var _animateFunctionPointer = setTimeout( _animateFunction, 50 );
				
			break;
			case 5:
				self.alpha = 0;
				var _animateFunction =	function()
																	{
																		if( self.alpha < 1 )
																		{
																			self.alpha += 0.2;
																		}

																		self.rotation -= Math.PI / 16;

																		_animateFunctionPointer = setTimeout( _animateFunction, 30 );
																	}
																	
				var _animateFunctionPointer = setTimeout( _animateFunction, 10 );
		
				setTimeout( function() 
										{ 
											clearTimeout( _animateFunctionPointer );
											
											var _t = setInterval( function()
																				{
																					self.alpha -= 0.1;
																					
																					if( self.alpha > 0 )
																					{
																						return;
																					}
																					
																					self.remove();
																					
																					clearInterval( _t );
																					
																				}, 40 );
										}, self.duration );
			break;
		}
		
		
	} //end spinning aura

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.healCastComplete.js
*/


	spellEffects.healCastComplete = function( args )
	{
		this.ID = spellEffects.layer[1].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		
		this.draw = function()
		{
			
		}
		
		var effect0 = new spellEffects.healCast({ 			
				sourceCharacter: args.sourceCharacter,														
				targetCharacter: args.targetCharacter,
				component: 0
		});
		
		var effect5 = new spellEffects.healCast({ 																						
				sourceCharacter: args.sourceCharacter,
				targetCharacter: args.targetCharacter,
				component: 5
		});
		
		this.remove = function()
		{
			effect0.remove();
			effect5.remove();
			
			spellEffects.layer[1][ self.ID ] = null;
				
			delete args.targetCharacter._internal.spellEffects[ self.characterSpellEffectID ];
		}
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.healGenerousRenewal.js
*/


	spellEffects.healGenerousRenewal = function( args )
	{
		this.ID = spellEffects.layer[0].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		this.alpha = 1;
		this.offsetX = 30;
		this.offsetY = 30;
		this.rotation = Math.random() * (Math.PI * 2);
		this.deleteRange = 60;
		this.previousX = args.targetCharacter.characterData.character_zone_x - this.offsetX;
		this.previousY = args.targetCharacter.characterData.character_zone_y - this.offsetY;
		this.duration = 5000 - Component.bugcraft.latency;
		
		var self = this;
		
		var healGenerousRenewalImageObject = new Image();
		healGenerousRenewalImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/heal/generousRenewal/generous_renewal' + args.component + '.png';
		
		//draw the healGenerousRenewal
		this.draw = function()
		{
			Map.ctx.globalAlpha = self.alpha;
			
			Map.ctx.save();
			
			Map.ctx.translate( args.targetCharacter.characterData.character_zone_x + Map.viewPortX, args.targetCharacter.characterData.character_zone_y + Map.viewPortY );
			
			Map.ctx.rotate( self.rotation );
			
			Map.ctx.drawImage(
											healGenerousRenewalImageObject,
											- self.offsetX,
											- self.offsetY
										);
										
			self.previousX = args.targetCharacter.characterData.character_zone_x - self.offsetX;
			self.previousY = args.targetCharacter.characterData.character_zone_y - self.offsetY;
	
			Map.ctx.restore();
			
			Map.ctx.globalAlpha = 1;
			
			
		}
		
		//remove the healGenerousRenewal
		
		
		this.remove = function()
		{
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[0][ this.ID ] = null;
			delete args.targetCharacter._internal.spellEffects[ this.characterSpellEffectID ];
		}
		
		
		
		switch( args.component )
		{
			case 0:	
				var healGenerousRenewalSound = soundManager.createSound({
						id: 'healGenerousRenewal' + ( ++spellEffects.soundIncrementor ),
						url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/bolt/darkBolt1.mp3',
						volume: spellEffects.volumeByRange ( Component.bugcraft.currentCharacterObject.characterData.character_zone_x, Component.bugcraft.currentCharacterObject.characterData.character_zone_y, args.targetCharacter.characterData.character_zone_x, args.targetCharacter.characterData.character_zone_y, spellEffects.volumeRangeLong )
				});
				
				this.spellEffectSoundID = args.targetCharacter._internal.soundEffects.push( healGenerousRenewalSound ) - 1;
			
				soundManager.play( 'healGenerousRenewal' + spellEffects.soundIncrementor, 
												{
													onfinish: function () 
													{
														delete args.targetCharacter._internal.soundEffects[ self.spellEffectSoundID ];	
													}
												});
												
				self.alpha = 0;
				var _animateFunction =	function()
																	{
																		if( self.alpha < 1 )
																		{
																			self.alpha += 0.2;
																		}
																		
																		self.rotation -= Math.PI / 32;

																		_animateFunctionPointer = setTimeout( _animateFunction, 50 );
																	}			
			break;
			case 1:
				self.alpha = 0;
				var _animateFunction =	function()
																	{
																		if( self.alpha < 1 )
																		{
																			self.alpha += 0.2;
																		}
																		
																		self.rotation += Math.PI / 32;

																		_animateFunctionPointer = setTimeout( _animateFunction, 50 );
																	}						
			break;
			case 2:
				self.alpha = 0;
				var _animateFunction =	function()
																	{
																		if( self.alpha < 1 )
																		{
																			self.alpha += 0.2;
																		}

																		self.rotation += Math.PI / 32;

																		_animateFunctionPointer = setTimeout( _animateFunction, 50 );
																	}						
			break;
		}
		
		var _animateFunctionPointer = setTimeout( _animateFunction, 50 );
		
		setTimeout( function() 
								{ 
									clearTimeout( _animateFunctionPointer );
									
									var _t = setInterval( function()
																		{
																			self.alpha -= 0.1;
																			
																			if( self.alpha > 0 )
																			{
																				return;
																			}
																			
																			self.remove();
																			
																			clearInterval( _t );
																			
																		}, 40 );
								}, self.duration );
	} //end spinning aura

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.healGenerousRenewalComplete.js
*/


	spellEffects.healGenerousRenewalComplete = function( args )
	{
		this.ID = spellEffects.layer[1].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		
		this.draw = function()
		{
			
		}
		
		var effect0 = new spellEffects.healGenerousRenewal({ 			
				sourceCharacter: args.sourceCharacter,														
				targetCharacter: args.targetCharacter,
				component: 0
		});
		
		var effect1 = new spellEffects.healGenerousRenewal({ 																						
				sourceCharacter: args.sourceCharacter,
				targetCharacter: args.targetCharacter,
				component: 1
		});
		
		var effect2 = new spellEffects.healGenerousRenewal({ 			
				sourceCharacter: args.sourceCharacter,														
				targetCharacter: args.targetCharacter,
				component: 2
		});
		
		this.remove = function()
		{
			effect0.remove();
			effect1.remove();
			effect2.remove();
			
			spellEffects.layer[1][ self.ID ] = null;
				
			delete args.targetCharacter._internal.spellEffects[ self.characterSpellEffectID ];
		}
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.healNoble.js
*/


	spellEffects.healNoble = function( args )
	{
		this.ID = spellEffects.layer[1].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		this.alpha = 1;
		this.offsetX = 30;
		this.offsetY = 30;
		this.rotation = Math.random() * (Math.PI * 2);
		this.deleteRange = 60;
		this.previousX = args.targetCharacter.characterData.character_zone_x - this.offsetX;
		this.previousY = args.targetCharacter.characterData.character_zone_y - this.offsetY;
		this.duration = 1000 - Component.bugcraft.latency;
		
		var self = this;
		
		var healNobleImageObject = new Image();
		healNobleImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/heal/noble/healing_noble' + args.component + '.png';
		
		//draw the healNoble
		this.draw = function()
		{
			Map.ctx.globalAlpha = self.alpha;
			
			Map.ctx.save();
			
			Map.ctx.translate( args.targetCharacter.characterData.character_zone_x + Map.viewPortX, args.targetCharacter.characterData.character_zone_y + Map.viewPortY );
			
			Map.ctx.rotate( self.rotation );
			
			Map.ctx.drawImage(
											healNobleImageObject,
											- self.offsetX,
											- self.offsetY
										);
										
			self.previousX = args.targetCharacter.characterData.character_zone_x - self.offsetX;
			self.previousY = args.targetCharacter.characterData.character_zone_y - self.offsetY;
	
			Map.ctx.restore();
			
			Map.ctx.globalAlpha = 1;
			
			
		}
		
		//remove the healNoble
		
		
		this.remove = function()
		{
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[1][ this.ID ] = null;
			clearTimeout( _animateFunctionPointer );
			delete args.targetCharacter._internal.spellEffects[ this.characterSpellEffectID ];
		}
		
		
		
		switch( args.component )
		{
			case 0:	
				var i = 0;
		
				var healNobleSound = soundManager.createSound({
						id: 'healNoble' + ( ++spellEffects.soundIncrementor ),
						url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/heal/ELECTRONIC.mp3',
						volume: spellEffects.volumeByRange ( Component.bugcraft.currentCharacterObject.characterData.character_zone_x, Component.bugcraft.currentCharacterObject.characterData.character_zone_y, args.targetCharacter.characterData.character_zone_x, args.targetCharacter.characterData.character_zone_y, spellEffects.volumeRangeLong )
				});
				
				this.spellEffectSoundID = args.targetCharacter._internal.soundEffects.push( healNobleSound ) - 1;
				
				soundManager.play( 'healNoble' + spellEffects.soundIncrementor, 
												{
													onfinish: function () 
													{
														delete args.targetCharacter._internal.soundEffects[ self.spellEffectSoundID ];	
													}
												});
		
				var _animateFunction = function()
														{
															healNobleImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/heal/noble/healing_noble' + i++ + '.png';
															
															if( i < 2 )
															{
																_animateFunctionPointer = setTimeout( _animateFunction, 70 );
																return;
															}
															
															var _t = setInterval( function()
																				{
																					self.alpha -= 0.1;
																					
																					if( self.alpha > 0 )
																					{
																						return;
																					}
																					
																					self.remove();
																					
																					clearInterval( _t );
																					
																				}, 60 );
													
														}	
				
				var _animateFunctionPointer = setTimeout( _animateFunction, 50 );
				
			break;
			case 2:
				self.alpha = 0;
				var _animateFunction =	function()
																	{
																		if( self.alpha < 1 )
																		{
																			self.alpha += 0.2;
																		}

																		self.rotation -= Math.PI / 16;

																		_animateFunctionPointer = setTimeout( _animateFunction, 30 );
																	}
																	
				var _animateFunctionPointer = setTimeout( _animateFunction, 10 );
		
				setTimeout( function() 
										{ 
											clearTimeout( _animateFunctionPointer );
											
											var _t = setInterval( function()
																				{
																					self.alpha -= 0.1;
																					
																					if( self.alpha > 0 )
																					{
																						return;
																					}
																					
																					self.remove();
																					
																					clearInterval( _t );
																					
																				}, 40 );
										}, self.duration );
			break;
		}
		
		
	} //end spinning aura

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.healNobleComplete.js
*/


	spellEffects.healNobleComplete = function( args )
	{
		this.ID = spellEffects.layer[1].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		
		this.draw = function()
		{
			
		}
		
		var effect0 = new spellEffects.healNoble({ 			
				sourceCharacter: args.sourceCharacter,														
				targetCharacter: args.targetCharacter,
				component: 0
		});
		var effect2 = new spellEffects.healNoble({ 																						
				sourceCharacter: args.sourceCharacter,
				targetCharacter: args.targetCharacter,
				component: 2
		});

		this.remove = function()
		{
			effect0.remove();
			effect2.remove();
		}
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.healYellow.js
*/


	spellEffects.healYellow = function( args )
	{
		this.ID = spellEffects.layer[1].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		this.alpha = 1;
		this.duration = 2000;
		this.offsetX = 60;
		this.offsetY = 60;
		this.rotation = 0;
		this.stepDistance = 2;
		this.maximumDistance = -40;
		this.deleteRange = 120;
		this.previousX = args.targetCharacter.characterData.character_zone_x - this.offsetX;
		this.previousY = args.targetCharacter.characterData.character_zone_y - this.offsetY;
		
		var self = this;
		
		var yMovement = 0;
		
		var healYellowImageObject = [];
		for ( var i = 0; i < 3; i++ )
		{
			healYellowImageObject[i] = new Image();
		}
		
		healYellowImageObject[0].src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/heal/yellow/healYellow0.png';
		
		var healYellowSound = soundManager.createSound({
				id: 'healYellow' + ( ++spellEffects.soundIncrementor ),
				url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/hit/metalClang.mp3',
				volume: spellEffects.volumeByRange ( Component.bugcraft.currentCharacterObject.characterData.character_zone_x, Component.bugcraft.currentCharacterObject.characterData.character_zone_y, args.targetCharacter.characterData.character_zone_x, args.targetCharacter.characterData.character_zone_y, spellEffects.volumeRangeLong )
		});
		
		this.spellEffectSoundID = args.targetCharacter._internal.soundEffects.push( healYellowSound ) - 1;
		
		soundManager.play( 'healYellow' + spellEffects.soundIncrementor, 
										{
											onfinish: function () 
											{
												delete args.targetCharacter._internal.soundEffects[ self.spellEffectSoundID ];	
											}
										});
		
		//draw the the healYellow
		this.draw = function()
		{
			Map.ctx.globalAlpha = self.alpha;
			
			Map.ctx.save();
			
			Map.ctx.translate( args.targetCharacter.characterData.character_zone_x + Map.viewPortX, args.targetCharacter.characterData.character_zone_y + Map.viewPortY );
			
			Map.ctx.rotate( self.rotation );
			
			Map.ctx.drawImage(
											healYellowImageObject[0],
											- self.offsetX,
											- self.offsetY + yMovement
										);
			Map.ctx.drawImage(
											healYellowImageObject[1],
											- self.offsetX,
											- self.offsetY + yMovement
										);
			Map.ctx.drawImage(
											healYellowImageObject[2],
											- self.offsetX,
											- self.offsetY + yMovement
										);
	
			self.previousX = args.targetCharacter.characterData.character_zone_x - self.offsetX;
			self.previousY = args.targetCharacter.characterData.character_zone_y - self.offsetY + yMovement;
										
			Map.ctx.restore();
			
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the healYellow
		this.remove = function()
		{
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[1][ this.ID ] = null;
			delete args.targetCharacter._internal.spellEffects[ this.characterSpellEffectID ];
		}
			
		setTimeout( function ()
							{
								healYellowImageObject[1].src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/heal/yellow/healYellow1.png';
							}, 125 );
		
		setTimeout( function ()
							{
								healYellowImageObject[2].src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/heal/yellow/healYellow2.png';
							}, 250 );
		
		var _animateFunction =	function()
												{
													
													yMovement -= self.stepDistance;
													
													if( yMovement < self.maximumDistance )
													{
														yMovement = self.maximumDistance;
														
														self.alpha -= 0.1;
														
														if( self.alpha < 0 )
														{
															self.alpha = 0;
														
															clearTimeout( _animateFunctionPointer );
														}
														
													}
													
													_animateFunctionPointer = setTimeout( _animateFunction, 40 );
												}
				
		var _animateFunctionPointer = setTimeout( _animateFunction, 10 );
		
		setTimeout( function() 
								{ 
									clearTimeout( _animateFunctionPointer );
									
									var _timeout = setInterval( function()
																		{
																			self.alpha -= 0.1;
																			
																			if( self.alpha > 0 )
																			{
																				return;
																			}
																			
																			self.remove();
																			
																			clearInterval( _timeout );
																			
																		}, 60 );
								}, self.duration );
		
	} //end the healYellow

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.hiatwasa.js
*/

	
	spellEffects[ 'hiatwasa' ] = function( args )
	{
		var self = this,
				_ccd = Component.bugcraft.currentCharacterObject.characterData,
				_moveFrames = {},
				_tc = args.targetCharacter,
				_tcd = _tc.characterData,
				_changeFrameFunctionPointer = null,
				_currentIndex = 1,
				_maxFrames = 8,
				_backgroundSound = null,
				_soundTimeoutPointer = null;
		
		this.ID = spellEffects.layer[0].push( this ) - 1;
		this.characterSpellEffectID = _tc._internal.spellEffects.push( this ) - 1;
		this.offsetX = 20;
		this.offsetY = 20;
		this.rotation = _tcd.character_rotation;
		this.deleteRange = 40;
		this.previousX = _tcd.character_zone_x - this.offsetX;
		this.previousY = _tcd.character_zone_y - this.offsetY;
		
		// initialize
		
		var _soundLoop = function()
		{
			_backgroundSound = Application.sound.playExclusive({
												url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/hiatwasa/hiatwasa.mp3',
												volume: spellEffects.volumeByRangeVoice(
																			_ccd.character_zone_x,
																			_ccd.character_zone_y,
																			_tcd.character_zone_x,
																			_tcd.character_zone_y,
																			spellEffects.volumeRangeLong
																		),
												onFinish: function()
												{
													_soundTimeoutPointer = setTimeout( function()
													{
														_soundLoop();
													}, 3 + Math.random() * ( 5 - [minDelay] ) );
												}
											});
		}
		
		for(var i=1;i<=_maxFrames;i++)
		{
			_moveFrames[ i ] = { image: new Image(), alpha: 0 };
			_moveFrames[ i ].image.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/hiatwasa/hiatwasa' + i + '.png';
		}
		
		//draw the bombardierBeetleDeath spatter
		this.draw = function()
		{
			Map.ctx.save();
			
			Map.ctx.translate( self.previousX + self.offsetX + Map.viewPortX, self.previousY + self.offsetY + Map.viewPortY );
			
			Map.ctx.rotate( ( self.rotation - 90 ) * Math.PI / 180 );
			
			Map.ctx.shadowColor = 'rgba(0, 0, 0, 0.7)';
			Map.ctx.shadowOffsetX = 3;
			Map.ctx.shadowOffsetY = 3;
			
			Map.ctx.drawImage(
							_moveFrames[ _currentIndex ].image,
							- self.offsetX,
							- self.offsetY
						);
			
			Map.ctx.restore();
			
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the deathDecay
		this.remove = function()
		{
			clearTimeout( _changeFrameFunctionPointer );
			clearTimeout( _soundTimeoutPointer );
			
			if( _backgroundSound )
			{
				_backgroundSound.stop();
			}
			
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[0][ this.ID ] = null;
			
			delete _tc._internal.spellEffects[ this.characterSpellEffectID ];
		}
		
		var _changeFrameFunction = function()
		{
			_currentIndex++;
			
			if( _currentIndex > _maxFrames )
			{
				_currentIndex = 1;
				
				setTimeout( _changeFrameFunction, 2000 + Math.random() * 5000 );
				
				return;
			}
			
			_changeFrameFunctionPointer = setTimeout( _changeFrameFunction, 100 );
		}
		
		_soundLoop();
		_changeFrameFunction();
		
	} //end bombardierBeetleDeath

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.hitFlame.js
*/


	spellEffects.hitFlame = function( args )
	{
		this.ID = spellEffects.layer[1].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		this.alpha = 1;
		this.rotation = Math.random() * (Math.PI * 2);
		this.offsetX = 30;
		this.offsetY = 30;
		this.deleteRange = 60;
		this.previousX = args.sourceCharacter.characterData.character_zone_x - this.offsetX;
		this.previousY = args.sourceCharacter.characterData.character_zone_y - this.offsetY;
		
		var self = this;
		
		var flameHitImageObject = new Image();
		flameHitImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/blast/hit_flame0.png';
		
		var flameHitSound = soundManager.createSound({
				id: 'flameHit' + ( ++spellEffects.soundIncrementor ),
				url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/elements/fire_swoosh.mp3', 
				volume: spellEffects.volumeByRange ( Component.bugcraft.currentCharacterObject.characterData.character_zone_x, Component.bugcraft.currentCharacterObject.characterData.character_zone_y, args.targetCharacter.characterData.character_zone_x, args.targetCharacter.characterData.character_zone_y, spellEffects.volumeRangeLong )
		});
		
		this.spellEffectSoundID = args.targetCharacter._internal.soundEffects.push( flameHitSound ) - 1;
		
		soundManager.play( 'flameHit' + spellEffects.soundIncrementor, 
										{
											onfinish: function () 
											{
												delete args.targetCharacter._internal.soundEffects[ self.spellEffectSoundID ];	
											}
										});
		
		//draw the flameHit
		this.draw = function()
		{
			Map.ctx.globalAlpha = self.alpha;
			
			Map.ctx.save();
			
			Map.ctx.translate( args.targetCharacter.characterData.character_zone_x + Map.viewPortX, args.targetCharacter.characterData.character_zone_y + Map.viewPortY );
			
			Map.ctx.rotate( self.rotation );
			
			Map.ctx.drawImage(
							flameHitImageObject,
							- self.offsetX,
							- self.offsetY
						);
						
			self.previousX = args.targetCharacter.characterData.character_zone_x - self.offsetX;
			self.previousY = args.targetCharacter.characterData.character_zone_y - self.offsetY;
						
			Map.ctx.restore();
			
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the flameHit
		this.remove = function()
		{
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[1][ this.ID ] = null;
			clearTimeout( _animateFunctionPointer );
			delete args.targetCharacter._internal.spellEffects[ this.characterSpellEffectID ];
		}
		
		var i = 1; 
		var _animateFunction = function()
							{
								flameHitImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/blast/hit_flame' + i++ + '.png';
								
								if( i < 4 )
								{
									_animateFunctionPointer = setTimeout( _animateFunction, 90 );
									return;
								}
								
								i = 4
								
								var _t = setInterval( function()
													{
														self.alpha -= 0.075;
														
														if( self.alpha > 0 )
														{
															return;
														}
														
														self.remove();
														
														clearInterval( _t );
														
													}, 60 );
						
							}
		
	var _animateFunctionPointer = setTimeout( _animateFunction, 90 );		
	
	} //end flameHit

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.hitFlame150.js
*/


	spellEffects.hitFlame150 = function( args )
	{
		this.ID = spellEffects.layer[1].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		this.alpha = 1;
		this.rotation = Math.random() * (Math.PI * 2);
		this.offsetX = 30;
		this.offsetY = 30;
		this.deleteRange = 60;
		this.previousX = args.sourceCharacter.characterData.character_zone_x - this.offsetX;
		this.previousY = args.sourceCharacter.characterData.character_zone_y - this.offsetY;
		
		var self = this;
		
		var flameHitImageObject = new Image();
		flameHitImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/blast/hit_flame0.png';
		
		var flameHitSound = soundManager.createSound({
				id: 'flameHit' + ( ++spellEffects.soundIncrementor ),
				url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/magic/magic_impact.mp3', 
				volume: spellEffects.volumeByRange ( Component.bugcraft.currentCharacterObject.characterData.character_zone_x, Component.bugcraft.currentCharacterObject.characterData.character_zone_y, args.targetCharacter.characterData.character_zone_x, args.targetCharacter.characterData.character_zone_y, spellEffects.volumeRangeLong )
		});
		
		this.spellEffectSoundID = args.targetCharacter._internal.soundEffects.push( flameHitSound ) - 1;
		
		soundManager.play( 'flameHit' + spellEffects.soundIncrementor, 
										{
											onfinish: function () 
											{
												delete args.targetCharacter._internal.soundEffects[ self.spellEffectSoundID ];	
											}
										});
		
		//draw the flameHit
		this.draw = function()
		{
			Map.ctx.globalAlpha = self.alpha;
			
			Map.ctx.save();
			
			Map.ctx.translate( args.targetCharacter.characterData.character_zone_x + Map.viewPortX, args.targetCharacter.characterData.character_zone_y + Map.viewPortY );
			
			Map.ctx.rotate( self.rotation );
			
			Map.ctx.drawImage(
							flameHitImageObject,
							- self.offsetX,
							- self.offsetY
						);
						
			self.previousX = args.targetCharacter.characterData.character_zone_x - self.offsetX;
			self.previousY = args.targetCharacter.characterData.character_zone_y - self.offsetY;
						
			Map.ctx.restore();
			
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the flameHit
		this.remove = function()
		{
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[1][ this.ID ] = null;
			clearTimeout( _animateFunctionPointer );
			delete args.targetCharacter._internal.spellEffects[ this.characterSpellEffectID ];
		}
		
		var i = 1; 
		var _animateFunction = function()
							{
								flameHitImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/blast/hit_flame' + i++ + '.png';
								
								if( i < 4 )
								{
									_animateFunctionPointer = setTimeout( _animateFunction, 90 );
									return;
								}
								
								i = 4
								
								var _t = setInterval( function()
													{
														self.alpha -= 0.075;
														
														if( self.alpha > 0 )
														{
															return;
														}
														
														self.remove();
														
														clearInterval( _t );
														
													}, 60 );
						
							}
		
	var _animateFunctionPointer = setTimeout( _animateFunction, 90 );		
	
	} //end flameHit

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.hitLiquify.js
*/


	spellEffects.hitLiquify = function( args )
	{
		this.ID = spellEffects.layer[1].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		this.alpha = 1;
		this.offsetX = 20;
		this.offsetY = 20;
		this.deleteRange = 40;
		this.previousX = args.sourceCharacter.characterData.character_zone_x - this.offsetX;
		this.previousY = args.sourceCharacter.characterData.character_zone_y - this.offsetY;
		
		var self = this;
		
		var hitLiquifyImageObject = new Image();
		hitLiquifyImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/hit/liquify/liquify_hit0.png';
		
		var hitLiquifySound = soundManager.createSound({
				id: 'hitLiquify' + ( ++spellEffects.soundIncrementor ),
				url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/magic/magic_impact.mp3', 
				volume: spellEffects.volumeByRange ( Component.bugcraft.currentCharacterObject.characterData.character_zone_x, Component.bugcraft.currentCharacterObject.characterData.character_zone_y, args.targetCharacter.characterData.character_zone_x, args.targetCharacter.characterData.character_zone_y, spellEffects.volumeRangeLong )
		});
		
		this.spellEffectSoundID = args.targetCharacter._internal.soundEffects.push( hitLiquifySound ) - 1;
		
		soundManager.play( 'hitLiquify' + spellEffects.soundIncrementor, 
										{
											onfinish: function () 
											{
												delete args.targetCharacter._internal.soundEffects[ self.spellEffectSoundID ];	
											}
										});
		
		//draw the hitLiquify
		this.draw = function()
		{
			Map.ctx.globalAlpha = self.alpha;
			
			Map.ctx.save();
			
			Map.ctx.translate( args.targetCharacter.characterData.character_zone_x + Map.viewPortX, args.targetCharacter.characterData.character_zone_y + Map.viewPortY );
			
			Map.ctx.rotate( self.rotation );
			
			Map.ctx.drawImage(
							hitLiquifyImageObject,
							- self.offsetX,
							- self.offsetY
						);
						
			self.previousX = args.targetCharacter.characterData.character_zone_x - self.offsetX;
			self.previousY = args.targetCharacter.characterData.character_zone_y - self.offsetY;
						
			Map.ctx.restore();
			
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the hitLiquify
		this.remove = function()
		{
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[1][ this.ID ] = null;
			delete args.targetCharacter._internal.spellEffects[ this.characterSpellEffectID ];
		}
		
		setTimeout( function()
							{
								hitLiquifyImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/hit/liquify/liquify_hit1.png';
								
								setTimeout( function()
													{
														hitLiquifyImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/hit/liquify/liquify_hit2.png';
														
														setTimeout( function()
																			{
																				hitLiquifyImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/hit/liquify/liquify_hit3.png';
																	
																				var _t = setInterval( function()
																									{
																										self.alpha -= 0.1;
																										
																										if( self.alpha > 0 )
																										{
																											return;
																										}
																										
																										self.remove();
																										
																										clearInterval( _t );
																										
																									}, 40 );
																			}, 75 );						
													}, 75 );
							}, 75 );
	} //end hitLiquify

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.hitLiquify99.js
*/


	spellEffects.hitLiquify99 = function( args )
	{
		this.ID = spellEffects.layer[1].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		this.alpha = 1;
		this.offsetX = 20;
		this.offsetY = 20;
		this.deleteRange = 40;
		this.previousX = args.sourceCharacter.characterData.character_zone_x - this.offsetX;
		this.previousY = args.sourceCharacter.characterData.character_zone_y - this.offsetY;
		
		var self = this;
		
		var hitLiquifyImageObject = new Image();
		hitLiquifyImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/hit/liquify/liquify_hit0.png';
		
		var hitLiquifySound = soundManager.createSound({
				id: 'hitLiquify' + ( ++spellEffects.soundIncrementor ),
				url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/bolt/woosh.mp3', 
				volume: spellEffects.volumeByRange ( Component.bugcraft.currentCharacterObject.characterData.character_zone_x, Component.bugcraft.currentCharacterObject.characterData.character_zone_y, args.targetCharacter.characterData.character_zone_x, args.targetCharacter.characterData.character_zone_y, spellEffects.volumeRangeLong )
		});
		
		this.spellEffectSoundID = args.targetCharacter._internal.soundEffects.push( hitLiquifySound ) - 1;
		
		soundManager.play( 'hitLiquify' + spellEffects.soundIncrementor, 
										{
											onfinish: function () 
											{
												delete args.targetCharacter._internal.soundEffects[ self.spellEffectSoundID ];	
											}
										});
		
		//draw the hitLiquify
		this.draw = function()
		{
			Map.ctx.globalAlpha = self.alpha;
			
			Map.ctx.save();
			
			Map.ctx.translate( args.targetCharacter.characterData.character_zone_x + Map.viewPortX, args.targetCharacter.characterData.character_zone_y + Map.viewPortY );
			
			Map.ctx.rotate( self.rotation );
			
			Map.ctx.drawImage(
							hitLiquifyImageObject,
							- self.offsetX,
							- self.offsetY
						);
						
			self.previousX = args.targetCharacter.characterData.character_zone_x - self.offsetX;
			self.previousY = args.targetCharacter.characterData.character_zone_y - self.offsetY;
						
			Map.ctx.restore();
			
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the hitLiquify
		this.remove = function()
		{
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[1][ this.ID ] = null;
			delete args.targetCharacter._internal.spellEffects[ this.characterSpellEffectID ];
		}
		
		setTimeout( function()
							{
								hitLiquifyImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/hit/liquify/liquify_hit1.png';
								
								setTimeout( function()
													{
														hitLiquifyImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/hit/liquify/liquify_hit2.png';
														
														setTimeout( function()
																			{
																				hitLiquifyImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/hit/liquify/liquify_hit3.png';
																	
																				var _t = setInterval( function()
																									{
																										self.alpha -= 0.1;
																										
																										if( self.alpha > 0 )
																										{
																											return;
																										}
																										
																										self.remove();
																										
																										clearInterval( _t );
																										
																									}, 40 );
																			}, 75 );						
													}, 75 );
							}, 75 );
	} //end hitLiquify

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.hitShine.js
*/


	spellEffects.hitShine = function( args )
	{
		this.ID = spellEffects.layer[1].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		this.alpha = 1;
		this.offsetX = 30;
		this.offsetY = 30;
		this.rotation = Math.random() * (Math.PI * 2);
		this.deleteRange = 60;
		this.previousX = args.sourceCharacter.characterData.character_zone_x - this.offsetX;
		this.previousY = args.sourceCharacter.characterData.character_zone_y - this.offsetY;
		
		var self = this;
		
		var hitShineImageObject = new Image();
		hitShineImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/hit/shine/hit_shine0.png';
		
		var hitShineSound = soundManager.createSound({
				id: 'hitShine' + ( ++spellEffects.soundIncrementor ),
				url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/bolt/woosh.mp3', 
				volume: spellEffects.volumeByRange ( Component.bugcraft.currentCharacterObject.characterData.character_zone_x, Component.bugcraft.currentCharacterObject.characterData.character_zone_y, args.targetCharacter.characterData.character_zone_x, args.targetCharacter.characterData.character_zone_y, spellEffects.volumeRangeLong )
		});
		
		this.spellEffectSoundID = args.targetCharacter._internal.soundEffects.push( hitShineSound ) - 1;
		
		soundManager.play( 'hitShine' + spellEffects.soundIncrementor, 
										{
											onfinish: function () 
											{
												delete args.targetCharacter._internal.soundEffects[ self.spellEffectSoundID ];	
											}
										});
		
		//draw the hitShine
		this.draw = function()
		{
			Map.ctx.globalAlpha = self.alpha;
			
			Map.ctx.save();
			
			Map.ctx.translate( args.targetCharacter.characterData.character_zone_x + Map.viewPortX, args.targetCharacter.characterData.character_zone_y + Map.viewPortY );
			
			Map.ctx.rotate( self.rotation );
			
			Map.ctx.drawImage(
							hitShineImageObject,
							- self.offsetX,
							- self.offsetY
						);
						
			self.previousX = args.targetCharacter.characterData.character_zone_x - self.offsetX;
			self.previousY = args.targetCharacter.characterData.character_zone_y - self.offsetY;
						
			Map.ctx.restore();
			
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the hitShine
		this.remove = function()
		{
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[1][ this.ID ] = null;
			delete args.targetCharacter._internal.spellEffects[ this.characterSpellEffectID ];
		}
		
		setTimeout( function()
							{
								hitShineImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/hit/shine/hit_shine1.png';
								
								setTimeout( function()
													{
														hitShineImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/hit/shine/hit_shine2.png';
																	
														var _t = setInterval( function()
																			{
																				self.alpha -= 0.1;
																				
																				if( self.alpha > 0 )
																				{
																					return;
																				}
																				
																				self.remove();
																				
																				clearInterval( _t );
																				
																			}, 60 );
													}, 90 );
							}, 90 );
	} //end hitShine

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.hitSpark.js
*/


	spellEffects.hitSpark = function( args )
	{
		this.ID = spellEffects.layer[1].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		this.alpha = 1;
		this.offsetX = 30;
		this.offsetY = 30;
		this.rotation = Math.random() * (Math.PI * 2);
		this.deleteRange = 60;
		this.previousX = args.sourceCharacter.characterData.character_zone_x - this.offsetX;
		this.previousY = args.sourceCharacter.characterData.character_zone_y - this.offsetY;
		
		var self = this;
		
		var hitSparkImageObject = new Image();
		hitSparkImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/hit/spark/hit_effect1.png';
		
		var hitSparkSound = soundManager.createSound({
				id: 'hitSpark' + ( ++spellEffects.soundIncrementor ),
				url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/dirt2.mp3', 
				volume: spellEffects.volumeByRange ( Component.bugcraft.currentCharacterObject.characterData.character_zone_x, Component.bugcraft.currentCharacterObject.characterData.character_zone_y, args.targetCharacter.characterData.character_zone_x, args.targetCharacter.characterData.character_zone_y, spellEffects.volumeRangeLong )
		});
		/*
		this.spellEffectSoundID = args.targetCharacter._internal.soundEffects.push( hitSparkSound ) - 1;
		
		soundManager.play( 'hitSpark' + spellEffects.soundIncrementor, 
										{
											onfinish: function () 
											{
												delete args.targetCharacter._internal.soundEffects[ self.spellEffectSoundID ];	
											}
										});
		*/
		//draw the hitSpark
		this.draw = function()
		{
			Map.ctx.globalAlpha = self.alpha;
			
			Map.ctx.save();
			
			Map.ctx.translate( args.targetCharacter.characterData.character_zone_x + Map.viewPortX, args.targetCharacter.characterData.character_zone_y + Map.viewPortY );
			
			Map.ctx.rotate( self.rotation );
			
			Map.ctx.drawImage(
							hitSparkImageObject,
							- self.offsetX,
							- self.offsetY
						);
						
			self.previousX = args.targetCharacter.characterData.character_zone_x - self.offsetX;
			self.previousY = args.targetCharacter.characterData.character_zone_y - self.offsetY;
						
			Map.ctx.restore();
			
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the hitSpark
		this.remove = function()
		{
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[1][ this.ID ] = null;
			delete args.targetCharacter._internal.spellEffects[ this.characterSpellEffectID ];
		}
		
		setTimeout( function()
							{
								hitSparkImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/hit/spark/hit_effect2.png';
								
								setTimeout( function()
													{
														hitSparkImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/hit/spark/hit_effect3.png';
																	
														var _t = setInterval( function()
																			{
																				self.alpha -= 0.1;
																				
																				if( self.alpha > 0 )
																				{
																					return;
																				}
																				
																				self.remove();
																				
																				clearInterval( _t );
																				
																			}, 60 );
													}, 90 );
							}, 90 );
	} //end hitSpark

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.hitSpark114.js
*/


	spellEffects.hitSpark114 = function( args )
	{
		this.ID = spellEffects.layer[1].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		this.alpha = 1;
		this.offsetX = 30;
		this.offsetY = 30;
		this.rotation = Math.random() * (Math.PI * 2);
		this.deleteRange = 60;
		this.previousX = args.sourceCharacter.characterData.character_zone_x - this.offsetX;
		this.previousY = args.sourceCharacter.characterData.character_zone_y - this.offsetY;
		
		var self = this;
		
		var hitSparkImageObject = new Image();
		hitSparkImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/hit/spark/hit_effect1.png';
		
		var hitSparkSound = soundManager.createSound({
				id: 'hitSpark' + ( ++spellEffects.soundIncrementor ),
				url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/magic/magic_impact.mp3', 
				volume: spellEffects.volumeByRange ( Component.bugcraft.currentCharacterObject.characterData.character_zone_x, Component.bugcraft.currentCharacterObject.characterData.character_zone_y, args.targetCharacter.characterData.character_zone_x, args.targetCharacter.characterData.character_zone_y, spellEffects.volumeRangeLong )
		});
		/*
		this.spellEffectSoundID = args.targetCharacter._internal.soundEffects.push( hitSparkSound ) - 1;
		
		soundManager.play( 'hitSpark' + spellEffects.soundIncrementor, 
										{
											onfinish: function () 
											{
												delete args.targetCharacter._internal.soundEffects[ self.spellEffectSoundID ];	
											}
										});
		*/
		//draw the hitSpark
		this.draw = function()
		{
			Map.ctx.globalAlpha = self.alpha;
			
			Map.ctx.save();
			
			Map.ctx.translate( args.targetCharacter.characterData.character_zone_x + Map.viewPortX, args.targetCharacter.characterData.character_zone_y + Map.viewPortY );
			
			Map.ctx.rotate( self.rotation );
			
			Map.ctx.drawImage(
							hitSparkImageObject,
							- self.offsetX,
							- self.offsetY
						);
						
			self.previousX = args.targetCharacter.characterData.character_zone_x - self.offsetX;
			self.previousY = args.targetCharacter.characterData.character_zone_y - self.offsetY;
						
			Map.ctx.restore();
			
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the hitSpark
		this.remove = function()
		{
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[1][ this.ID ] = null;
			delete args.targetCharacter._internal.spellEffects[ this.characterSpellEffectID ];
		}
		
		setTimeout( function()
							{
								hitSparkImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/hit/spark/hit_effect2.png';
								
								setTimeout( function()
													{
														hitSparkImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/hit/spark/hit_effect3.png';
																	
														var _t = setInterval( function()
																			{
																				self.alpha -= 0.1;
																				
																				if( self.alpha > 0 )
																				{
																					return;
																				}
																				
																				self.remove();
																				
																				clearInterval( _t );
																				
																			}, 60 );
													}, 90 );
							}, 90 );
	} //end hitSpark

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.hitSplash.js
*/


	spellEffects.hitSplash = function( args )
	{
		this.ID = spellEffects.layer[1].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		this.alpha = 1;
		this.offsetX = 30;
		this.offsetY = 30;
		this.deleteRange = 60;
		this.previousX = args.sourceCharacter.characterData.character_zone_x - this.offsetX;
		this.previousY = args.sourceCharacter.characterData.character_zone_y - this.offsetY;
		
		var self = this;
		
		var hitSplashImageObject = new Image();
		hitSplashImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/splash/hit_splash1.png';
		
		var hitSplashSound = soundManager.createSound({
				id: 'hitSplash' + ( ++spellEffects.soundIncrementor ),
				url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/splash/mud_splat.mp3', 
				volume: spellEffects.volumeByRange ( Component.bugcraft.currentCharacterObject.characterData.character_zone_x, Component.bugcraft.currentCharacterObject.characterData.character_zone_y, args.targetCharacter.characterData.character_zone_x, args.targetCharacter.characterData.character_zone_y, spellEffects.volumeRangeLong )
		});
		/*
		this.spellEffectSoundID = args.targetCharacter._internal.soundEffects.push( hitSplashSound ) - 1;
		
		soundManager.play( 'hitSplash' + spellEffects.soundIncrementor, 
										{
											onfinish: function () 
											{
												delete args.targetCharacter._internal.soundEffects[ self.spellEffectSoundID ];	
											}
										});
		*/
		//draw the hitSplash
		this.draw = function()
		{
			Map.ctx.globalAlpha = self.alpha;
			
			Map.ctx.save();
			
			Map.ctx.translate( args.targetCharacter.characterData.character_zone_x + Map.viewPortX, args.targetCharacter.characterData.character_zone_y + Map.viewPortY );
			
			Map.ctx.rotate( self.rotation );
			
			Map.ctx.drawImage(
							hitSplashImageObject,
							- self.offsetX,
							- self.offsetY
						);
						
			self.previousX = args.targetCharacter.characterData.character_zone_x - self.offsetX;
			self.previousY = args.targetCharacter.characterData.character_zone_y - self.offsetY;
						
			Map.ctx.restore();
			
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the hitSplash
		this.remove = function()
		{
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[1][ this.ID ] = null;
			delete args.targetCharacter._internal.spellEffects[ this.characterSpellEffectID ];
		}
		
		setTimeout( function()
							{
								hitSplashImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/splash/hit_splash1.png';
								
								setTimeout( function()
													{
														hitSplashImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/splash/hit_splash3.png';
														
														setTimeout( function()
																			{
																				hitSplashImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/splash/hit_splash4.png';
																				
																				setTimeout( function()
																									{
																										hitSplashImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/splash/hit_splash5.png';

																										var _t = setInterval( function()
																															{
																																self.alpha -= 0.1;
																																
																																if( self.alpha > 0 )
																																{
																																	return;
																																}
																																
																																self.remove();
																																
																																clearInterval( _t );
																																
																															}, 20 );
																									}, 50 );
																			}, 50 );						
													}, 50 );
							}, 50 );
	} //end hitSplash

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.hitStar.js
*/


	spellEffects.hitStar = function( args )
	{
		this.ID = spellEffects.layer[1].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		this.alpha = 1;
		this.offsetX = 30;
		this.offsetY = 30;
		this.deleteRange = 60;
		this.previousX = args.sourceCharacter.characterData.character_zone_x - this.offsetX;
		this.previousY = args.sourceCharacter.characterData.character_zone_y - this.offsetY;
		
		var self = this;
		
		var hitStarImageObject = new Image();
		hitStarImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/hit/hit_star1.png';
		
		var hitStarSound = soundManager.createSound({
				id: 'hitStar' + ( ++spellEffects.soundIncrementor ),
				url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/hit/starHit4.mp3', 
				volume: spellEffects.volumeByRange ( Component.bugcraft.currentCharacterObject.characterData.character_zone_x, Component.bugcraft.currentCharacterObject.characterData.character_zone_y, args.targetCharacter.characterData.character_zone_x, args.targetCharacter.characterData.character_zone_y, spellEffects.volumeRangeLong )
		});
		
		this.spellEffectSoundID = args.targetCharacter._internal.soundEffects.push( hitStarSound ) - 1;
		
		soundManager.play( 'hitStar' + spellEffects.soundIncrementor, 
										{
											onfinish: function () 
											{
												delete args.targetCharacter._internal.soundEffects[ self.spellEffectSoundID ];	
											}
										});
		
		//draw the hitStar
		this.draw = function()
		{
			Map.ctx.globalAlpha = self.alpha;
			
			Map.ctx.drawImage(
							hitStarImageObject,
							args.targetCharacter.characterData.character_zone_x - self.offsetX + Map.viewPortX,
							args.targetCharacter.characterData.character_zone_y - self.offsetY + Map.viewPortY
						);
										
			self.previousX = args.targetCharacter.characterData.character_zone_x - self.offsetX;
			self.previousY = args.targetCharacter.characterData.character_zone_y - self.offsetY;
		
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the hitStar
		this.remove = function()
		{
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[1][ this.ID ] = null;
			delete args.targetCharacter._internal.spellEffects[ this.characterSpellEffectID ];
		}
		
		setTimeout( function()
							{
								hitStarImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/hit/hit_star2.png';
								
								setTimeout( function()
													{
														hitStarImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/hit/hit_star3.png';
														
														setTimeout( function()
																			{
																				hitStarImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/hit/hit_star4.png';
																				
																				setTimeout( function()
																									{
																										hitStarImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/hit/hit_star5.png';
																										
																										var _t = setInterval( function()
																															{
																																self.alpha -= 0.1;
																																
																																if( self.alpha > 0 )
																																{
																																	return;
																																}
																																
																																self.remove();
																																
																																clearInterval( _t );
																																
																															}, 60 );
																									}, 70 );
																			}, 50 );						
													}, 50 );
							}, 50 );
	} //end hitStar

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.hitStar28.js
*/


	spellEffects.hitStar28 = function( args )
	{
		this.ID = spellEffects.layer[1].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		this.alpha = 1;
		this.offsetX = 30;
		this.offsetY = 30;
		this.deleteRange = 60;
		this.previousX = args.sourceCharacter.characterData.character_zone_x - this.offsetX;
		this.previousY = args.sourceCharacter.characterData.character_zone_y - this.offsetY;
		
		var self = this;
		
		var hitStarImageObject = new Image();
		hitStarImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/hit/hit_star1.png';
		
		var hitStarSound = soundManager.createSound({
				id: 'hitStar' + ( ++spellEffects.soundIncrementor ),
				url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/bolt/woosh.mp3', 
				volume: spellEffects.volumeByRange ( Component.bugcraft.currentCharacterObject.characterData.character_zone_x, Component.bugcraft.currentCharacterObject.characterData.character_zone_y, args.targetCharacter.characterData.character_zone_x, args.targetCharacter.characterData.character_zone_y, spellEffects.volumeRangeLong )
		});
		
		this.spellEffectSoundID = args.targetCharacter._internal.soundEffects.push( hitStarSound ) - 1;
		
		soundManager.play( 'hitStar' + spellEffects.soundIncrementor, 
										{
											onfinish: function () 
											{
												delete args.targetCharacter._internal.soundEffects[ self.spellEffectSoundID ];	
											}
										});
		
		//draw the hitStar
		this.draw = function()
		{
			Map.ctx.globalAlpha = self.alpha;
			
			Map.ctx.drawImage(
							hitStarImageObject,
							args.targetCharacter.characterData.character_zone_x - self.offsetX + Map.viewPortX,
							args.targetCharacter.characterData.character_zone_y - self.offsetY + Map.viewPortY
						);
										
			self.previousX = args.targetCharacter.characterData.character_zone_x - self.offsetX;
			self.previousY = args.targetCharacter.characterData.character_zone_y - self.offsetY;
		
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the hitStar
		this.remove = function()
		{
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[1][ this.ID ] = null;
			delete args.targetCharacter._internal.spellEffects[ this.characterSpellEffectID ];
		}
		
		setTimeout( function()
							{
								hitStarImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/hit/hit_star2.png';
								
								setTimeout( function()
													{
														hitStarImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/hit/hit_star3.png';
														
														setTimeout( function()
																			{
																				hitStarImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/hit/hit_star4.png';
																				
																				setTimeout( function()
																									{
																										hitStarImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/hit/hit_star5.png';
																										
																										var _t = setInterval( function()
																															{
																																self.alpha -= 0.1;
																																
																																if( self.alpha > 0 )
																																{
																																	return;
																																}
																																
																																self.remove();
																																
																																clearInterval( _t );
																																
																															}, 60 );
																									}, 70 );
																			}, 50 );						
													}, 50 );
							}, 50 );
	} //end hitStar

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.hitStar31.js
*/


	spellEffects.hitStar31 = function( args )
	{
		this.ID = spellEffects.layer[1].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		this.alpha = 1;
		this.offsetX = 30;
		this.offsetY = 30;
		this.deleteRange = 60;
		this.previousX = args.sourceCharacter.characterData.character_zone_x - this.offsetX;
		this.previousY = args.sourceCharacter.characterData.character_zone_y - this.offsetY;
		
		var self = this;
		
		var hitStarImageObject = new Image();
		hitStarImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/hit/hit_star1.png';
		
		var hitStarSound = soundManager.createSound({
				id: 'hitStar' + ( ++spellEffects.soundIncrementor ),
				url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/debuffs/disappearing swoosh.mp3',
				volume: spellEffects.volumeByRange ( Component.bugcraft.currentCharacterObject.characterData.character_zone_x, Component.bugcraft.currentCharacterObject.characterData.character_zone_y, args.targetCharacter.characterData.character_zone_x, args.targetCharacter.characterData.character_zone_y, spellEffects.volumeRangeLong )
		});
		
		this.spellEffectSoundID = args.targetCharacter._internal.soundEffects.push( hitStarSound ) - 1;
		
		soundManager.play( 'hitStar' + spellEffects.soundIncrementor, 
										{
											onfinish: function () 
											{
												delete args.targetCharacter._internal.soundEffects[ self.spellEffectSoundID ];	
											}
										});
		
		//draw the hitStar
		this.draw = function()
		{
			Map.ctx.globalAlpha = self.alpha;
			
			Map.ctx.drawImage(
							hitStarImageObject,
							args.targetCharacter.characterData.character_zone_x - self.offsetX + Map.viewPortX,
							args.targetCharacter.characterData.character_zone_y - self.offsetY + Map.viewPortY
						);
										
			self.previousX = args.targetCharacter.characterData.character_zone_x - self.offsetX;
			self.previousY = args.targetCharacter.characterData.character_zone_y - self.offsetY;
		
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the hitStar
		this.remove = function()
		{
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[1][ this.ID ] = null;
			delete args.targetCharacter._internal.spellEffects[ this.characterSpellEffectID ];
		}
		
		setTimeout( function()
							{
								hitStarImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/hit/hit_star2.png';
								
								setTimeout( function()
													{
														hitStarImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/hit/hit_star3.png';
														
														setTimeout( function()
																			{
																				hitStarImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/hit/hit_star4.png';
																				
																				setTimeout( function()
																									{
																										hitStarImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/hit/hit_star5.png';
																										
																										var _t = setInterval( function()
																															{
																																self.alpha -= 0.1;
																																
																																if( self.alpha > 0 )
																																{
																																	return;
																																}
																																
																																self.remove();
																																
																																clearInterval( _t );
																																
																															}, 60 );
																									}, 70 );
																			}, 50 );						
													}, 50 );
							}, 50 );
	} //end hitStar

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.hitStar41.js
*/


	spellEffects.hitStar41 = function( args )
	{
		this.ID = spellEffects.layer[1].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		this.alpha = 1;
		this.offsetX = 30;
		this.offsetY = 30;
		this.deleteRange = 60;
		this.previousX = args.sourceCharacter.characterData.character_zone_x - this.offsetX;
		this.previousY = args.sourceCharacter.characterData.character_zone_y - this.offsetY;
		
		var self = this;
		
		var hitStarImageObject = new Image();
		hitStarImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/hit/hit_star1.png';
		
		var hitStarSound = soundManager.createSound({
				id: 'hitStar' + ( ++spellEffects.soundIncrementor ),
				url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/magic/magic_impact.mp3', 
				volume: spellEffects.volumeByRange ( Component.bugcraft.currentCharacterObject.characterData.character_zone_x, Component.bugcraft.currentCharacterObject.characterData.character_zone_y, args.targetCharacter.characterData.character_zone_x, args.targetCharacter.characterData.character_zone_y, spellEffects.volumeRangeLong )
		});
		
		this.spellEffectSoundID = args.targetCharacter._internal.soundEffects.push( hitStarSound ) - 1;
		
		soundManager.play( 'hitStar' + spellEffects.soundIncrementor, 
										{
											onfinish: function () 
											{
												delete args.targetCharacter._internal.soundEffects[ self.spellEffectSoundID ];	
											}
										});
		
		//draw the hitStar
		this.draw = function()
		{
			Map.ctx.globalAlpha = self.alpha;
			
			Map.ctx.drawImage(
							hitStarImageObject,
							args.targetCharacter.characterData.character_zone_x - self.offsetX + Map.viewPortX,
							args.targetCharacter.characterData.character_zone_y - self.offsetY + Map.viewPortY
						);
										
			self.previousX = args.targetCharacter.characterData.character_zone_x - self.offsetX;
			self.previousY = args.targetCharacter.characterData.character_zone_y - self.offsetY;
		
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the hitStar
		this.remove = function()
		{
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[1][ this.ID ] = null;
			delete args.targetCharacter._internal.spellEffects[ this.characterSpellEffectID ];
		}
		
		setTimeout( function()
							{
								hitStarImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/hit/hit_star2.png';
								
								setTimeout( function()
													{
														hitStarImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/hit/hit_star3.png';
														
														setTimeout( function()
																			{
																				hitStarImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/hit/hit_star4.png';
																				
																				setTimeout( function()
																									{
																										hitStarImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/hit/hit_star5.png';
																										
																										var _t = setInterval( function()
																															{
																																self.alpha -= 0.1;
																																
																																if( self.alpha > 0 )
																																{
																																	return;
																																}
																																
																																self.remove();
																																
																																clearInterval( _t );
																																
																															}, 60 );
																									}, 70 );
																			}, 50 );						
													}, 50 );
							}, 50 );
	} //end hitStar

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.hitStar94.js
*/


	spellEffects.hitStar94 = function( args )
	{
		this.ID = spellEffects.layer[1].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		this.alpha = 1;
		this.offsetX = 30;
		this.offsetY = 30;
		this.deleteRange = 60;
		this.previousX = args.sourceCharacter.characterData.character_zone_x - this.offsetX;
		this.previousY = args.sourceCharacter.characterData.character_zone_y - this.offsetY;
		
		var self = this;
		
		var hitStarImageObject = new Image();
		hitStarImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/hit/hit_star1.png';
		
		var hitStarSound = soundManager.createSound({
				id: 'hitStar' + ( ++spellEffects.soundIncrementor ),
				url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/debuffs/disappearing swoosh.mp3',
				volume: spellEffects.volumeByRange ( Component.bugcraft.currentCharacterObject.characterData.character_zone_x, Component.bugcraft.currentCharacterObject.characterData.character_zone_y, args.targetCharacter.characterData.character_zone_x, args.targetCharacter.characterData.character_zone_y, spellEffects.volumeRangeLong )
		});
		
		this.spellEffectSoundID = args.targetCharacter._internal.soundEffects.push( hitStarSound ) - 1;
		
		soundManager.play( 'hitStar' + spellEffects.soundIncrementor, 
										{
											onfinish: function () 
											{
												delete args.targetCharacter._internal.soundEffects[ self.spellEffectSoundID ];	
											}
										});
		
		//draw the hitStar
		this.draw = function()
		{
			Map.ctx.globalAlpha = self.alpha;
			
			Map.ctx.drawImage(
							hitStarImageObject,
							args.targetCharacter.characterData.character_zone_x - self.offsetX + Map.viewPortX,
							args.targetCharacter.characterData.character_zone_y - self.offsetY + Map.viewPortY
						);
										
			self.previousX = args.targetCharacter.characterData.character_zone_x - self.offsetX;
			self.previousY = args.targetCharacter.characterData.character_zone_y - self.offsetY;
		
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the hitStar
		this.remove = function()
		{
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[1][ this.ID ] = null;
			delete args.targetCharacter._internal.spellEffects[ this.characterSpellEffectID ];
		}
		
		setTimeout( function()
							{
								hitStarImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/hit/hit_star2.png';
								
								setTimeout( function()
													{
														hitStarImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/hit/hit_star3.png';
														
														setTimeout( function()
																			{
																				hitStarImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/hit/hit_star4.png';
																				
																				setTimeout( function()
																									{
																										hitStarImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/hit/hit_star5.png';
																										
																										var _t = setInterval( function()
																															{
																																self.alpha -= 0.1;
																																
																																if( self.alpha > 0 )
																																{
																																	return;
																																}
																																
																																self.remove();
																																
																																clearInterval( _t );
																																
																															}, 60 );
																									}, 70 );
																			}, 50 );						
													}, 50 );
							}, 50 );
	} //end hitStar

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.hitVenomSting.js
*/


	spellEffects.hitVenomSting = function( args )
	{
		this.ID = spellEffects.layer[1].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		this.alpha = 1;
		this.offsetX = 30;
		this.offsetY = 30;
		this.rotation = Math.PI / 4;
		this.deleteRange = 60;
		this.previousX = args.targetCharacter.characterData.character_zone_x - this.offsetX;
		this.previousY = args.targetCharacter.characterData.character_zone_y - this.offsetY;
		
		var self = this;
		
		var yMovement = 0;
		
		var hitVenomStingImageObject = new Image();
		hitVenomStingImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/hit/venom/venomsting.png';
		
		var hitVenomStingSound = soundManager.createSound({
				id: 'hitVenomSting' + ( ++spellEffects.soundIncrementor ),
				url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/hit/vacuum_suction_whoosh.mp3',
				volume: spellEffects.volumeByRange ( Component.bugcraft.currentCharacterObject.characterData.character_zone_x, Component.bugcraft.currentCharacterObject.characterData.character_zone_y, args.targetCharacter.characterData.character_zone_x, args.targetCharacter.characterData.character_zone_y, spellEffects.volumeRangeLong )
		});
		
		this.spellEffectSoundID = args.targetCharacter._internal.soundEffects.push( hitVenomStingSound ) - 1;
		
		soundManager.play( 'hitVenomSting' + spellEffects.soundIncrementor, 
										{
											onfinish: function () 
											{
												delete args.targetCharacter._internal.soundEffects[ self.spellEffectSoundID ];	
											}
										});
		
		//draw the the hitVenomSting
		this.draw = function()
		{
			Map.ctx.globalAlpha = self.alpha;
			
			Map.ctx.save();
			
			Map.ctx.translate( args.targetCharacter.characterData.character_zone_x + Map.viewPortX, args.targetCharacter.characterData.character_zone_y + Map.viewPortY );
			
			Map.ctx.rotate( self.rotation );
			
			Map.ctx.drawImage(
							hitVenomStingImageObject,
							- self.offsetX,
							- self.offsetY + yMovement
						);
										
			self.previousX = args.targetCharacter.characterData.character_zone_x - self.offsetX;
			self.previousY = args.targetCharacter.characterData.character_zone_y - self.offsetY + yMovement;
										
			Map.ctx.restore();
			
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the hitVenomSting
		this.remove = function()
		{
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[1][ this.ID ] = null;
			clearTimeout( _animateFunctionPointer );
			clearTimeout( _fadeInFunctionPointer );
			delete args.targetCharacter._internal.spellEffects[ this.characterSpellEffectID ];
		}
			
		self.alpha = 0;
		var _fadeInFunction = function()
											{
												if( self.alpha < 1 )
												{
													self.alpha += 0.2;
													
													_fadeInFunctionPointer = setTimeout( _fadeInFunction, 30 );
													
													return;
												}
												
												var _animateFunctionPointer = setTimeout( _animateFunction, 10 );
												
											}

		var _animateFunction =	function()
												{
													if( self.rotation < 0 )
													{
														self.rotation = 0;
														
														self.remove();
														return;
													}
													
													self.rotation -= Math.PI / 32;

													_animateFunctionPointer = setTimeout( _animateFunction, 30 );
												}						
		
		var _fadeInFunctionPointer = setTimeout( _fadeInFunction, 200 );
		
	} //end the hitVenomSting

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.hitVenomSting112.js
*/


	spellEffects.hitVenomSting112 = function( args )
	{
		this.ID = spellEffects.layer[1].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		this.alpha = 1;
		this.offsetX = 30;
		this.offsetY = 30;
		this.rotation = Math.PI / 4;
		this.deleteRange = 60;
		this.previousX = args.targetCharacter.characterData.character_zone_x - this.offsetX;
		this.previousY = args.targetCharacter.characterData.character_zone_y - this.offsetY;
		
		var self = this;
		
		var yMovement = 0;
		
		var hitVenomStingImageObject = new Image();
		hitVenomStingImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/hit/venom/venomsting.png';
		
		var hitVenomStingSound = soundManager.createSound({
				id: 'hitVenomSting' + ( ++spellEffects.soundIncrementor ),
				url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/bolt/woosh.mp3', 
				volume: spellEffects.volumeByRange ( Component.bugcraft.currentCharacterObject.characterData.character_zone_x, Component.bugcraft.currentCharacterObject.characterData.character_zone_y, args.targetCharacter.characterData.character_zone_x, args.targetCharacter.characterData.character_zone_y, spellEffects.volumeRangeLong )
		});
		
		this.spellEffectSoundID = args.targetCharacter._internal.soundEffects.push( hitVenomStingSound ) - 1;
		
		soundManager.play( 'hitVenomSting' + spellEffects.soundIncrementor, 
										{
											onfinish: function () 
											{
												delete args.targetCharacter._internal.soundEffects[ self.spellEffectSoundID ];	
											}
										});
		
		//draw the the hitVenomSting
		this.draw = function()
		{
			Map.ctx.globalAlpha = self.alpha;
			
			Map.ctx.save();
			
			Map.ctx.translate( args.targetCharacter.characterData.character_zone_x + Map.viewPortX, args.targetCharacter.characterData.character_zone_y + Map.viewPortY );
			
			Map.ctx.rotate( self.rotation );
			
			Map.ctx.drawImage(
							hitVenomStingImageObject,
							- self.offsetX,
							- self.offsetY + yMovement
						);
										
			self.previousX = args.targetCharacter.characterData.character_zone_x - self.offsetX;
			self.previousY = args.targetCharacter.characterData.character_zone_y - self.offsetY + yMovement;
										
			Map.ctx.restore();
			
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the hitVenomSting
		this.remove = function()
		{
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[1][ this.ID ] = null;
			clearTimeout( _animateFunctionPointer );
			clearTimeout( _fadeInFunctionPointer );
			delete args.targetCharacter._internal.spellEffects[ this.characterSpellEffectID ];
		}
			
		self.alpha = 0;
		var _fadeInFunction = function()
											{
												if( self.alpha < 1 )
												{
													self.alpha += 0.2;
													
													_fadeInFunctionPointer = setTimeout( _fadeInFunction, 30 );
													
													return;
												}
												
												var _animateFunctionPointer = setTimeout( _animateFunction, 10 );
												
											}

		var _animateFunction =	function()
												{
													if( self.rotation < 0 )
													{
														self.rotation = 0;
														
														self.remove();
														return;
													}
													
													self.rotation -= Math.PI / 32;

													_animateFunctionPointer = setTimeout( _animateFunction, 30 );
												}						
		
		var _fadeInFunctionPointer = setTimeout( _fadeInFunction, 200 );
		
	} //end the hitVenomSting

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.hitVenomSting72.js
*/


	spellEffects.hitVenomSting72 = function( args )
	{
		this.ID = spellEffects.layer[1].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		this.alpha = 1;
		this.offsetX = 30;
		this.offsetY = 30;
		this.rotation = Math.PI / 4;
		this.deleteRange = 60;
		this.previousX = args.targetCharacter.characterData.character_zone_x - this.offsetX;
		this.previousY = args.targetCharacter.characterData.character_zone_y - this.offsetY;
		
		var self = this;
		
		var yMovement = 0;
		
		var hitVenomStingImageObject = new Image();
		hitVenomStingImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/hit/venom/venomsting.png';
		
		var hitVenomStingSound = soundManager.createSound({
				id: 'hitVenomSting' + ( ++spellEffects.soundIncrementor ),
				url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/debuffs/disappearing swoosh.mp3',
				volume: spellEffects.volumeByRange ( Component.bugcraft.currentCharacterObject.characterData.character_zone_x, Component.bugcraft.currentCharacterObject.characterData.character_zone_y, args.targetCharacter.characterData.character_zone_x, args.targetCharacter.characterData.character_zone_y, spellEffects.volumeRangeLong )
		});
		
		this.spellEffectSoundID = args.targetCharacter._internal.soundEffects.push( hitVenomStingSound ) - 1;
		
		soundManager.play( 'hitVenomSting' + spellEffects.soundIncrementor, 
										{
											onfinish: function () 
											{
												delete args.targetCharacter._internal.soundEffects[ self.spellEffectSoundID ];	
											}
										});
		
		//draw the the hitVenomSting
		this.draw = function()
		{
			Map.ctx.globalAlpha = self.alpha;
			
			Map.ctx.save();
			
			Map.ctx.translate( args.targetCharacter.characterData.character_zone_x + Map.viewPortX, args.targetCharacter.characterData.character_zone_y + Map.viewPortY );
			
			Map.ctx.rotate( self.rotation );
			
			Map.ctx.drawImage(
							hitVenomStingImageObject,
							- self.offsetX,
							- self.offsetY + yMovement
						);
										
			self.previousX = args.targetCharacter.characterData.character_zone_x - self.offsetX;
			self.previousY = args.targetCharacter.characterData.character_zone_y - self.offsetY + yMovement;
										
			Map.ctx.restore();
			
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the hitVenomSting
		this.remove = function()
		{
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[1][ this.ID ] = null;
			clearTimeout( _animateFunctionPointer );
			clearTimeout( _fadeInFunctionPointer );
			delete args.targetCharacter._internal.spellEffects[ this.characterSpellEffectID ];
		}
			
		self.alpha = 0;
		var _fadeInFunction = function()
											{
												if( self.alpha < 1 )
												{
													self.alpha += 0.2;
													
													_fadeInFunctionPointer = setTimeout( _fadeInFunction, 30 );
													
													return;
												}
												
												var _animateFunctionPointer = setTimeout( _animateFunction, 10 );
												
											}

		var _animateFunction =	function()
												{
													if( self.rotation < 0 )
													{
														self.rotation = 0;
														
														self.remove();
														return;
													}
													
													self.rotation -= Math.PI / 32;

													_animateFunctionPointer = setTimeout( _animateFunction, 30 );
												}						
		
		var _fadeInFunctionPointer = setTimeout( _fadeInFunction, 200 );
		
	} //end the hitVenomSting

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.honeyBuff.js
*/


	spellEffects.honeyBuff = function( args )
	{
		this.ID = spellEffects.layer[1].push( this ) - 1;
		this.alpha = 1;
		
		var honeyBuffImageObject = new Image();
		honeyBuffImageObject.src = 'images/buffs/honeyBuff/honey_buff0.png';
		
		var honeyBuffSound = soundManager.createSound({
				id: 'honeyBuff' + ( ++soundIncrementor ),
				url: 'sounds/dirt2.mp3', 
				volume: args.volume
		});
		//honeyBuffSound.play();
		
		//draw the honeyBuff
		this.draw = function()
		{
			spellEffects.ctx.globalAlpha = self.alpha;
			
			spellEffects.ctx.save();
			
			spellEffects.ctx.translate( args.x, args.y );
			
			spellEffects.ctx.rotate( args.rotation );
			
			spellEffects.ctx.drawImage(
							honeyBuffImageObject,
							- 30,
							- 30
						);
						
			spellEffects.ctx.restore();
						
			spellEffects.ctx.globalAlpha = 1;
		}
		
		//remove the honeyBuff
		var self = this;
		
		this.remove = function()
		{
			spellEffects.layer[1][ this.ID ] = null;
		}
							
		var _animateHoneyBuff =	setTimeout ( function()
															{
																args.rotation += Math.PI / 64;
																
																honeyBuffImageObject.src = 'images/buffs/honeyBuff/honey_buff' + Math.floor( Math.random() * 4 ) + '.png';
															}, 20 );			
		_animateHoneyBuff();
		
		setTimeout( function() 
								{ 
									clearTimeout( _animateHoneyBuff );
									var _t = setInterval( function()
																		{
																			self.alpha -= 0.1;
																			
																			if( self.alpha > 0 )
																			{
																				return;
																			}
																			
																			self.remove();
																			
																			clearInterval( _t );
																			
																		}, 100 );
								}, args.duration );
	} //end honeyBuff

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.junglecreatures.js
*/

	
	spellEffects[ 'junglecreatures' ] = function( args )
	{
		var self = this,
				_ccd = Component.bugcraft.currentCharacterObject.characterData,
				_moveFrames = {},
				_tc = args.targetCharacter,
				_tcd = _tc.characterData,
				_changeFrameFunctionPointer = null,
				_currentIndex = 1,
				_maxFrames = 1,
				_backgroundSound = null;
		
		this.ID = spellEffects.layer[0].push( this ) - 1;
		this.characterSpellEffectID = _tc._internal.spellEffects.push( this ) - 1;
		this.offsetX = 20;
		this.offsetY = 20;
		this.rotation = _tcd.character_rotation;
		this.deleteRange = 40;
		this.previousX = _tcd.character_zone_x - this.offsetX;
		this.previousY = _tcd.character_zone_y - this.offsetY;
		
		// initialize
		
		var _soundLoop = function()
		{
			_backgroundSound = Application.sound.playExclusive({
												url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/junglecreatures/junglecreatures.mp3',
												volume: spellEffects.volumeByRangeVoice(
																			_ccd.character_zone_x,
																			_ccd.character_zone_y,
																			_tcd.character_zone_x,
																			_tcd.character_zone_y,
																			spellEffects.volumeRangeLong
																		),
												onFinish: function()
												{
													_soundLoop();
												}
											});
		}
		
		// for(var i=1;i<=_maxFrames;i++)
		// {
		// 	_moveFrames[ i ] = { image: new Image(), alpha: 0 };
		// 	_moveFrames[ i ].image.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/junglecreatures/junglecreatures' + i + '.png';
		// }
		
		//draw the bombardierBeetleDeath spatter
		this.draw = function()
		{
			// Map.ctx.save();
			
			// Map.ctx.translate( self.previousX + self.offsetX + Map.viewPortX, self.previousY + self.offsetY + Map.viewPortY );
			
			// Map.ctx.rotate( ( self.rotation - 90 ) * Math.PI / 180 );
			
			// Map.ctx.shadowColor = 'rgba(0, 0, 0, 0.7)';
			// Map.ctx.shadowOffsetX = 3;
			// Map.ctx.shadowOffsetY = 3;
			
			// Map.ctx.drawImage(
			// 				_moveFrames[ _currentIndex ].image,
			// 				- self.offsetX,
			// 				- self.offsetY
			// 			);
			
			// Map.ctx.restore();
			
			// Map.ctx.globalAlpha = 1;
		}
		
		//remove the deathDecay
		this.remove = function()
		{
			clearTimeout( _changeFrameFunctionPointer );
			
			if( _backgroundSound )
			{
				_backgroundSound.stop();
			}
			
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[0][ this.ID ] = null;
			
			delete _tc._internal.spellEffects[ this.characterSpellEffectID ];
		}
		
		var _changeFrameFunction = function()
		{
			_currentIndex++;
			
			if( _currentIndex > _maxFrames )
			{
				_currentIndex = 1;
				
				setTimeout( _changeFrameFunction, 2000 + Math.random() * 5000 );
				
				return;
			}
			
			_changeFrameFunctionPointer = setTimeout( _changeFrameFunction, 100 );
		}
		
		_soundLoop();
		// _changeFrameFunction();
		
	} //end bombardierBeetleDeath

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.junglecreaturesambient2min.js
*/

	
	spellEffects[ 'junglecreaturesambient2min' ] = function( args )
	{
		var self = this,
				_ccd = Component.bugcraft.currentCharacterObject.characterData,
				_moveFrames = {},
				_tc = args.targetCharacter,
				_tcd = _tc.characterData,
				_changeFrameFunctionPointer = null,
				_currentIndex = 1,
				_maxFrames = 1,
				_backgroundSound = null;
		
		this.ID = spellEffects.layer[0].push( this ) - 1;
		this.characterSpellEffectID = _tc._internal.spellEffects.push( this ) - 1;
		this.offsetX = 20;
		this.offsetY = 20;
		this.rotation = _tcd.character_rotation;
		this.deleteRange = 40;
		this.previousX = _tcd.character_zone_x - this.offsetX;
		this.previousY = _tcd.character_zone_y - this.offsetY;
		
		// initialize
		
		var _soundLoop = function()
		{
			_backgroundSound = Application.sound.playExclusive({
												url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/junglecreaturesambient2min/junglecreaturesambient2min.mp3',
												volume: spellEffects.volumeByRangeVoice(
																			_ccd.character_zone_x,
																			_ccd.character_zone_y,
																			_tcd.character_zone_x,
																			_tcd.character_zone_y,
																			spellEffects.volumeRangeLong
																		),
												onFinish: function()
												{
													_soundLoop();
												}
											});
		}
		
		// for(var i=1;i<=_maxFrames;i++)
		// {
		// 	_moveFrames[ i ] = { image: new Image(), alpha: 0 };
		// 	_moveFrames[ i ].image.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/junglecreaturesambient2min/junglecreaturesambient2min' + i + '.png';
		// }
		
		//draw the bombardierBeetleDeath spatter
		this.draw = function()
		{
			// Map.ctx.save();
			
			// Map.ctx.translate( self.previousX + self.offsetX + Map.viewPortX, self.previousY + self.offsetY + Map.viewPortY );
			
			// Map.ctx.rotate( ( self.rotation - 90 ) * Math.PI / 180 );
			
			// Map.ctx.shadowColor = 'rgba(0, 0, 0, 0.7)';
			// Map.ctx.shadowOffsetX = 3;
			// Map.ctx.shadowOffsetY = 3;
			
			// Map.ctx.drawImage(
			// 				_moveFrames[ _currentIndex ].image,
			// 				- self.offsetX,
			// 				- self.offsetY
			// 			);
			
			// Map.ctx.restore();
			
			// Map.ctx.globalAlpha = 1;
		}
		
		//remove the deathDecay
		this.remove = function()
		{
			// clearTimeout( _changeFrameFunctionPointer );
			
			// if( _backgroundSound )
			// {
			// 	_backgroundSound.stop();
			// }
			
			// spellEffects.layerCleaner.push( this );
			// spellEffects.layer[0][ this.ID ] = null;
			
			// delete _tc._internal.spellEffects[ this.characterSpellEffectID ];
		}
		
		var _changeFrameFunction = function()
		{
			_currentIndex++;
			
			if( _currentIndex > _maxFrames )
			{
				_currentIndex = 1;
				
				setTimeout( _changeFrameFunction, 2000 + Math.random() * 5000 );
				
				return;
			}
			
			_changeFrameFunctionPointer = setTimeout( _changeFrameFunction, 100 );
		}
		
		_soundLoop();
		// _changeFrameFunction();
		
	} //end bombardierBeetleDeath

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.junglerainlong.js
*/

	
	spellEffects[ 'junglerainlong' ] = function( args )
	{
		var self = this,
				_ccd = Component.bugcraft.currentCharacterObject.characterData,
				_moveFrames = {},
				_tc = args.targetCharacter,
				_tcd = _tc.characterData,
				_changeFrameFunctionPointer = null,
				_currentIndex = 1,
				_maxFrames = 1,
				_backgroundSound = null;
		
		this.ID = spellEffects.layer[0].push( this ) - 1;
		this.characterSpellEffectID = _tc._internal.spellEffects.push( this ) - 1;
		this.offsetX = 20;
		this.offsetY = 20;
		this.rotation = _tcd.character_rotation;
		this.deleteRange = 40;
		this.previousX = _tcd.character_zone_x - this.offsetX;
		this.previousY = _tcd.character_zone_y - this.offsetY;
		
		// initialize
		
		var _soundLoop = function()
		{
			_backgroundSound = Application.sound.playExclusive({
												url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/junglerainlong/junglerainlong.mp3',
												volume: spellEffects.volumeByRangeVoice(
																			_ccd.character_zone_x,
																			_ccd.character_zone_y,
																			_tcd.character_zone_x,
																			_tcd.character_zone_y,
																			spellEffects.volumeRangeLong
																		),
												onFinish: function()
												{
													_soundLoop();
												}
											});
		}
		
		for(var i=1;i<=_maxFrames;i++)
		{
			_moveFrames[ i ] = { image: new Image(), alpha: 0 };
			_moveFrames[ i ].image.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/junglerainlong/junglerainlong' + i + '.png';
		}
		
		//draw the bombardierBeetleDeath spatter
		this.draw = function()
		{
			Map.ctx.save();
			
			Map.ctx.translate( self.previousX + self.offsetX + Map.viewPortX, self.previousY + self.offsetY + Map.viewPortY );
			
			Map.ctx.rotate( ( self.rotation - 90 ) * Math.PI / 180 );
			
			Map.ctx.shadowColor = 'rgba(0, 0, 0, 0.7)';
			Map.ctx.shadowOffsetX = 3;
			Map.ctx.shadowOffsetY = 3;
			
			Map.ctx.drawImage(
							_moveFrames[ _currentIndex ].image,
							- self.offsetX,
							- self.offsetY
						);
			
			Map.ctx.restore();
			
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the deathDecay
		this.remove = function()
		{
			clearTimeout( _changeFrameFunctionPointer );
			
			if( _backgroundSound )
			{
				_backgroundSound.stop();
			}
			
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[0][ this.ID ] = null;
			
			delete _tc._internal.spellEffects[ this.characterSpellEffectID ];
		}
		
		var _changeFrameFunction = function()
		{
			_currentIndex++;
			
			if( _currentIndex > _maxFrames )
			{
				_currentIndex = 1;
				
				setTimeout( _changeFrameFunction, 2000 + Math.random() * 5000 );
				
				return;
			}
			
			_changeFrameFunctionPointer = setTimeout( _changeFrameFunction, 100 );
		}
		
		_soundLoop();
		_changeFrameFunction();
		
	} //end bombardierBeetleDeath

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.lineShockwave.js
*/


	spellEffects.lineShockwave = function( args )
	{
		this.ID = spellEffects.layer[1].push( this ) - 1;
		this.alpha = 1;
		
		var i = 0;
		
		var cracksImageObject = new Array();
		cracksImageObject[0] = new Image();
		cracksImageObject[0].src = 'images/cracks/cracksgrow1.png';
		
		var shockwaveImageObject = new Array();
		shockwaveImageObject[0] = new Image();
		shockwaveImageObject[0].src = 'images/shockwaves/shockwavesconc1.png';
		
		var explosionImageObject = new Array();
		explosionImageObject[0] = new Image();
		explosionImageObject[0].src = 'images/blast/blast1.png';
		
		var lineShockwaveSound = soundManager.createSound({
				id: 'lineShockwave' + ( ++soundIncrementor ),
				url: 'sounds/lineShockwave.mp3'
		});
		//lineShockwaveSound.play();

		var xVariation = new Array();
		xVariation[0] = 0;
		
		var xRelative = args.xOrigin - args.x;
		var yRelative = args.yOrigin - args.y;
		
		var distance = Math.sqrt( (xRelative * xRelative) + (yRelative * yRelative) ) - 30;
	
	
		if ( args.x > args.xOrigin )
		{
			var _theta = Math.atan( (args.yOrigin - args.y) / (args.xOrigin - args.x) );
			//alert('quadran bottom-right + top-right');
		}

		if ( args.x < args.xOrigin && args.y >= args.yOrigin )
		{
			var _theta = Math.atan( (args.yOrigin - args.y) / (args.xOrigin - args.x) ) + Math.PI;
			//alert('quadran bottom-left');
		}
		
		if ( args.x < args.xOrigin && args.y < args.yOrigin )
		{
			var _theta = Math.atan( (args.yOrigin - args.y) / (args.xOrigin - args.x) ) - Math.PI ;
			//alert('quadran top-left');
		}
		
		
		//
		//draw the lineShockwave effect
		//
		this.draw = function()
		{
		
			spellEffects.ctx.globalAlpha = self.alpha;
			
			spellEffects.ctx.save();
			
			spellEffects.ctx.translate(args.xOrigin, args.yOrigin);
			
			spellEffects.ctx.rotate( _theta );
			
			for( var j = 0; j < cracksImageObject.length; j++ )
			{
				spellEffects.ctx.drawImage(
								cracksImageObject[j],
								xVariation[j] - 30,
								- 30
							);
							
				spellEffects.ctx.drawImage(
								shockwaveImageObject[j],
								xVariation[j] - 30,
								- 30
							);
							
				
			}
			spellEffects.ctx.restore();
			
			spellEffects.ctx.globalAlpha = 1;

		}
		
		//remove the lineShockwave effect
		var self = this;
		
		this.remove = function()
		{
			spellEffects.layer[1][ this.ID ] = null;
		}

		var _animateFunction = function()
											{
											
												
												//----------------------
												
												
												//++++++++++++++++++++++++=
												//cracks
												setTimeout( function()
																	{
																		cracksImageObject[i].src = 'images/cracks/cracksgrow2.png';
																		
																		setTimeout( function()
																							{
																								cracksImageObject[i].src = 'images/cracks/cracksgrow3.png';
																								
																								var _t = setInterval( function()
																													{
																														self.alpha -= 0.06;
																														
																														if( self.alpha > 0 )
																														{
																															return;
																														}

																														
																														clearInterval( _t );
																														
																													}, 300 );
																							}, 60);
																	}, 60);
												
												//shockwave
												setTimeout( function()
																	{
																		shockwaveImageObject[i].src = 'images/shockwaves/shockwavesconc2.png';
																		
																		setTimeout( function()
																							{
																								shockwaveImageObject[i].src = 'images/shockwaves/shockwavesconc3.png';
																								
																								setTimeout( function()
																													{
																														shockwaveImageObject[i].src = 'images/shockwaves/shockwavesconc4.png';
																														
																														setTimeout( function()
																																			{
																																				shockwaveImageObject[i].src = 'images/shockwaves/shockwavesconc5.png';
																																				
																																				var _t = setInterval( function()
																																									{
																																										self.alpha -= 0.1;
																																										
																																										if( self.alpha > 0 )
																																										{
																																											return;
																																										}

																																										
																																										clearInterval( _t );
																																										
																																									}, 20 );
																																			}, 20 );
																													}, 20 );						
																							}, 20 );
																	}, 20 );
												
												
												//explosion
												
												//+++++++++++++++++++++
												
												i++;
												xVariation[i] = xVariation[ i-1 ] + 50;

												cracksImageObject[i] = new Image();
												cracksImageObject[i].src = 'images/cracks/cracksgrow1.png';

												shockwaveImageObject[i] = new Image();
												shockwaveImageObject[i].src = 'images/shockwaves/shockwavesconc1.png';

												explosionImageObject[i] = new Image();
												explosionImageObject[i].src = 'images/blast/blast1.png';
												
												
												
												//----------------------
												if( xVariation >= distance - 20 ) 
												{
												
													var _t = setInterval( function()
																					{
																						self.alpha -= 0.2;
																						
																						if( self.alpha > 0 )
																						{
																							return;
																						}
																						
																						i = -1;
																						
																						self.remove();
	
																						clearInterval( _t );
																						
																					}, 20 );
													
													return;
												}
												
												
												
												setTimeout( _animateFunction, 100 );
											}			
		_animateFunction();	
		
	} //end lineShockwave

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.lootableAura.js
*/


	spellEffects.lootableAura = function( args )
	{
		var _tc = args.targetCharacter, _tcd = _tc.characterData, self = this, yMovement = 0, _animateFunctionPointer = null;
		
		this.ID = spellEffects.layer[ 0 ].push( this ) - 1;
		this.characterSpellEffectID = _tc._internal.spellEffects.push( this ) - 1;
		this.alpha = 1;	
		this.duration = 4000;
		this.offsetX = 30;
		this.offsetY = 30;
		this.rotation = 0;
		this.stepDistance = 2;
		this.maximumDistance = -40;
		this.deleteRange = 60;
		this.previousX = _tcd.character_zone_x - this.offsetX;
		this.previousY = _tcd.character_zone_y - this.offsetY;
		
		var lootableImageObject = new Image();
		lootableImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/lootable/lootable0.png';

		//draw the the lootable
		this.draw = function()
		{
			Map.ctx.globalAlpha = self.alpha;
			
			Map.ctx.save();
			
			Map.ctx.translate( _tcd.character_zone_x + Map.viewPortX, _tcd.character_zone_y + Map.viewPortY );
			
			Map.ctx.rotate( self.rotation );
			
			Map.ctx.drawImage(
							lootableImageObject,
							- self.offsetX,
							- self.offsetY + yMovement
						);
										
			self.previousX = _tcd.character_zone_x - self.offsetX;
			self.previousY = _tcd.character_zone_y - self.offsetY + yMovement;
										
			Map.ctx.restore();
			
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the lootable
		this.remove = function()
		{
			clearTimeout( _animateFunctionPointer );
			
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[ 0 ][ this.ID ] = null;
			delete _tc._internal.spellEffects[ this.characterSpellEffectID ];
		}
			
		self.alpha = 0;

		var opacityVariation = 0;
		
		var _animateFunction =  function()
		{
			self.alpha = Math.abs( Math.sin( opacityVariation ) );
			
			opacityVariation += Math.PI / 32;
			
			if (self.alpha < 0.5 )
			{
				self.alpha = 0.5;
			}
			
			_animateFunctionPointer = setTimeout( _animateFunction, 50 );
		}
				
		_animateFunction();
		
	} //end the lootable

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.lootableComplete.js
*/


	spellEffects.lootableComplete = function( args )
	{
		this.ID = spellEffects.layer[1].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		
		this.draw = function()
		{
			
		}
		
		var effect0 = new spellEffects.lootableAura({ 			
													sourceCharacter: args.sourceCharacter,
													targetCharacter: args.targetCharacter,
												});
		
		
		var effect1 = new spellEffects.lootableTransition({
													sourceCharacter: args.sourceCharacter,
													targetCharacter: args.targetCharacter,
												});
			
		this.remove = function()
		{
			effect0.remove();
			
			effect1.remove();
			
			spellEffects.layer[1][ self.ID ] = null;
				
			delete args.targetCharacter._internal.spellEffects[ self.characterSpellEffectID ];
		}
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.lootableTransition.js
*/


	spellEffects.lootableTransition = function( args )
	{
		var _tc = args.targetCharacter, _tcd = _tc.characterData;
		
		this.ID = spellEffects.layer[ 1 ].push( this ) - 1;
		this.characterSpellEffectID = _tc._internal.spellEffects.push( this ) - 1;
		this.offsetX = 30;
		this.offsetY = 30;
		this.rotation = 0;
		this.stepDistance = 2;
		this.maximumDistance = -40;
		this.deleteRange = 60;
		this.previousX = _tcd.character_zone_x - this.offsetX;
		this.previousY = _tcd.character_zone_y - this.offsetY;
		
		var self = this, _imageProperties = [], _animateFunctionPointer = null,
			_fadeInTimeoutPointer = null, _fadeOutTimeoutPointer = null;
		
		var lootableImageObject = new Image();
		lootableImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/lootable/lootable1.png';
		
		var _initImageObject = function()
		{
			setTimeout( function()
			{
				_imageProperties.push({
											fadeIn: true,
											alpha: 0,
											x: Math.round( Math.random() * ( _tcd.character_width - 20 ) ) + 10,
											y: 0
										});
				
				if( _imageProperties.length >= 5 )
				{
					return;
				}
				
				_initImageObject();
			}, Math.random() * 1000 );
		}
		
		// create all lines
		_initImageObject();
		
		//draw the the lootable
		this.draw = function()
		{	
			Map.ctx.save();
			
			Map.ctx.translate( _tcd.character_zone_x + Map.viewPortX, _tcd.character_zone_y + Map.viewPortY );
			
			Map.ctx.rotate( self.rotation );
			
			for(var i=0;i<_imageProperties.length;i++)
			{
				var _ip = _imageProperties[ i ];
				
				Map.ctx.globalAlpha = _ip.alpha;
				
				Map.ctx.drawImage(
								lootableImageObject,
								- _ip.x,
								- self.offsetY + _ip.y
							);
			}
			
			self.previousX = _tcd.character_zone_x - self.offsetX;
			self.previousY = _tcd.character_zone_y - self.offsetY;
			
			Map.ctx.restore();
			
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the lootable
		this.remove = function()
		{
			clearTimeout( _animateFunctionPointer );
			
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[ 1 ][ this.ID ] = null;
			delete _tc._internal.spellEffects[ this.characterSpellEffectID ];
		}
		
		var _animateFunction = function()
		{
			for(var i=0;i<_imageProperties.length;i++)
			{
				var _ip = _imageProperties[ i ];
				
				_ip.y -= self.stepDistance;
				
				if( _ip.fadeIn )
				{
					_ip.alpha += 0.1;
					
					if( _ip.alpha >= 1 )
					{
						_ip.alpha = 1;
						_ip.fadeIn = false;
					}
				}
				
				if( _ip.y >= self.maximumDistance )
				{
					continue;
				}
				
				// max point reached
				
				_ip.alpha -= 0.1;
				
				if( _ip.alpha <= 0 )
				{
					_ip.alpha = 0;
					_ip.y = 0;
					_ip.x = Math.round( Math.random() * ( _tcd.character_width - 20 ) ) + 10;
					_ip.fadeIn = true;
				}
			}
			
			_animateFunctionPointer = setTimeout( _animateFunction, 45 );
		}
		
		_animateFunction();
		
	} //end the lootable
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.lowHealth.js
*/


	spellEffects.lowHealth = function( args )
	{
		this.ID = spellEffects.layer[1].push( this ) - 1;
		this.alpha = 1;
		
		var lowHealthImageObject = new Image();
		lowHealthImageObject.src = 'images/red_flash2.png';
		
		
		//draw the low health effect
		this.draw = function()
		{
			spellEffects.ctx.globalAlpha = self.alpha;
			spellEffects.ctx.drawImage(
							lowHealthImageObject,
							args.x - 30,
							args.y - 30
						);
			spellEffects.ctx.globalAlpha = 1;
		}
		
		//remove the low health effect
		var self = this;
		
		this.remove = function()
		{
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[1][ this.ID ] = null;
		}
		
		var variation = 0;
		var _t =	setInterval( function()
												{
													self.alpha = Math.abs( Math.sin( variation ) );

													variation += Math.PI / 32;
													
													if (self.alpha < 0.5 )
													{
														self.alpha = 0.5;
													}
													
													
												}, 100 )									
		
		setTimeout( function() 
								{ 
									
									clearInterval( _t );
								
									var _timeout = setInterval( function()
																		{
																			self.alpha -= 0.1;
																			
																			if( self.alpha > 0 )
																			{
																				return;
																			}
																			
																			self.remove();
																			
																			clearInterval( _timeout );
																			
																		}, 200 );
								}, args.duration );
		
	} //end low health

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.lvlUp.js
*/


	spellEffects.lvlUp = function( args )
	{
		new spellEffects.lvlUpFirstPart({
			sourceCharacter: args.sourceCharacter,
			targetCharacter: args.targetCharacter,
			component: 0,
		});
		new spellEffects.lvlUpFirstPart({ 
			sourceCharacter: args.sourceCharacter,
			targetCharacter: args.targetCharacter,
			component: 1,
		});
		new spellEffects.lvlUpSecondPart({ 
			sourceCharacter: args.sourceCharacter,
			targetCharacter: args.targetCharacter,
			component: 0,
		});
		new spellEffects.lvlUpSecondPart({ 
			sourceCharacter: args.sourceCharacter,
			targetCharacter: args.targetCharacter,
			component: 1,
		});
		new spellEffects.lvlUpSecondPart({ 
			sourceCharacter: args.sourceCharacter,
			targetCharacter: args.targetCharacter,
			component: 2,
		});					
		new spellEffects.lvlUpThirdPart({ 
			sourceCharacter: args.sourceCharacter,
			targetCharacter: args.targetCharacter,
			component: 0,
		});
		new spellEffects.lvlUpThirdPart({ 
			sourceCharacter: args.sourceCharacter,
			targetCharacter: args.targetCharacter,
			component: 1,
		});
	} //end spinning aura

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.lvlUpFirstPart.js
*/


	spellEffects.lvlUpFirstPart = function( args )
	{
		this.ID = spellEffects.layer[1].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		this.alpha = 1;
		this.duration = 2000;
		this.offsetX = 60;
		this.offsetY = 60;
		this.rotation = Math.random() * (Math.PI * 2);
		this.deleteRange = 120;
		this.previousX = args.targetCharacter.characterData.character_zone_x - this.offsetX;
		this.previousY = args.targetCharacter.characterData.character_zone_y - this.offsetY;
		
		
		var self = this;
		
		var lvlUpFirstPartImageObject = new Image();
		lvlUpFirstPartImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/lvlUp/2/firstPartFade' + args.component + '.png';
		
		if( args.component == 0 )
		{
			var lvlUpFirstPartSound = soundManager.createSound({
					id: 'lvlUpFirstPart' + ( ++spellEffects.soundIncrementor ),
					url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/lvlUp/game_win_ident_1.mp3',
					volume: spellEffects.volumeByRange ( Component.bugcraft.currentCharacterObject.characterData.character_zone_x, Component.bugcraft.currentCharacterObject.characterData.character_zone_y, args.targetCharacter.characterData.character_zone_x, args.targetCharacter.characterData.character_zone_y, spellEffects.volumeRangeLong )
			});
			
			this.spellEffectSoundID = args.targetCharacter._internal.soundEffects.push( lvlUpFirstPartSound ) - 1;
		
			soundManager.play( 'lvlUpFirstPart' + spellEffects.soundIncrementor, 
											{
												onfinish: function () 
												{
													delete args.targetCharacter._internal.soundEffects[ self.spellEffectSoundID ];	
												}
											});
			
		}

		//draw the lvl up first part effect
		this.draw = function()
		{
			Map.ctx.globalAlpha = self.alpha;

			Map.ctx.drawImage(
											lvlUpFirstPartImageObject,
											args.targetCharacter.characterData.character_zone_x - self.offsetX + Map.viewPortX,
											args.targetCharacter.characterData.character_zone_y - self.offsetY + Map.viewPortY
										);
										
			self.previousX = args.targetCharacter.characterData.character_zone_x - self.offsetX;
			self.previousY = args.targetCharacter.characterData.character_zone_y - self.offsetY;
			
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the lvlUpFirstPart
		this.remove = function()
		{
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[1][ this.ID ] = null;
			delete args.targetCharacter._internal.spellEffects[ this.characterSpellEffectID ];
		}
		
		self.alpha = 0;

		var _animateFunction =	function()
															{
																if( self.alpha > 1 )
																{
																	return;
																}
																
																self.alpha += 0.2;
																
																setTimeout( _animateFunction, 50 );
															}			
				
		_animateFunction();
		
		setTimeout( function() 
								{ 
									var _t = setInterval( function()
																		{
																			self.alpha -= 0.2;
																			
																			if( self.alpha > 0 )
																			{
																				return;
																			}
																			
																			self.remove();
																			
																			clearInterval( _t );
																			
																		}, 40 );
								}, self.duration );
	} //end the lvl up first part effect

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.lvlUpSecondPart.js
*/


	spellEffects.lvlUpSecondPart = function( args )
	{
		this.ID = spellEffects.layer[1].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		this.alpha = 1;
		this.duration = 2000;
		this.offsetX = 60;
		this.offsetY = 60;
		this.rotation = 0;
		this.deleteRange = 120;
		this.previousX = args.targetCharacter.characterData.character_zone_x - this.offsetX;
		this.previousY = args.targetCharacter.characterData.character_zone_y - this.offsetY;
		
		var self = this;
		
		var lvlUpSecondPartImageObject = new Image();
		lvlUpSecondPartImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/lvlUp/2/secondPartSpin' + args.component + '.png';
		
		//draw the lvl up second part effect
		this.draw = function()
		{
			Map.ctx.globalAlpha = self.alpha;
			
			Map.ctx.save();
			
			Map.ctx.translate( args.targetCharacter.characterData.character_zone_x + Map.viewPortX, args.targetCharacter.characterData.character_zone_y + Map.viewPortY );
			
			Map.ctx.rotate( self.rotation );
			
			Map.ctx.drawImage(
							lvlUpSecondPartImageObject,
							- self.offsetX,
							- self.offsetY
						);
						
			self.previousX = args.targetCharacter.characterData.character_zone_x - self.offsetX;
			self.previousY = args.targetCharacter.characterData.character_zone_y - self.offsetY;
						
			Map.ctx.restore();
						
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the lvlUpSecondPart
		this.remove = function()
		{
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[1][ this.ID ] = null;
			delete args.targetCharacter._internal.spellEffects[ this.characterSpellEffectID ];
		}
		
		switch( args.component )
		{
			case 0:
				self.alpha = 0;
		
				var _animateFunction =	function()
																	{
																		if( self.alpha > 1 )
																		{
																			self.rotation += Math.PI / 32;
																			
																			_animateFunctionPointer = setTimeout( _animateFunction, 50 );
																			return;
																		}
																		
																		self.alpha += 0.2;
																		
																		self.rotation += Math.PI / 32;

																		_animateFunctionPointer = setTimeout( _animateFunction, 50 );
																	}			
			break;
			case 1:
				self.alpha = 0;
				
				var _animateFunction =	function()
																	{
																		if( self.alpha > 1 )
																		{
																			self.rotation -= Math.PI / 32;
																			
																			_animateFunctionPointer = setTimeout( _animateFunction, 50 );
																			return;
																		}
																		
																		self.alpha += 0.2;
																		
																		self.rotation -= Math.PI / 32;

																		_animateFunctionPointer = setTimeout( _animateFunction, 50 );
																	}						
			break;
			case 2:
				self.alpha = 0;
				
				var _animateFunction =	function()
																	{
																		if( self.alpha > 1 )
																		{
																			self.rotation += Math.PI / 16;
																			
																			_animateFunctionPointer = setTimeout( _animateFunction, 50 );
																			return;
																		}
																		
																		self.alpha += 0.2;
																		
																		self.rotation += Math.PI / 16;

																		_animateFunctionPointer = setTimeout( _animateFunction, 50 );
																	}						
			break;
		}
		
		var _animateFunctionPointer = setTimeout( _animateFunction, 1 );
		
		setTimeout( function() 
								{ 
									clearTimeout( _animateFunctionPointer );
									
									var _t = setInterval( function()
																		{
																			self.alpha -= 0.2;
																			
																			if( self.alpha > 0 )
																			{
																				return;
																			}
																			
																			self.remove();
																			
																			clearInterval( _t );
																			
																		}, 40 );
								}, self.duration );
	} //end the lvl up second part effect

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.lvlUpThirdPart.js
*/


	spellEffects.lvlUpThirdPart = function( args )
	{
		this.ID = spellEffects.layer[1].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		this.alpha = 1;
		this.duration = 1900;
		this.offsetX = 60;
		this.offsetY = 60;
		this.rotation = 0;
		this.stepDistance =  25 / (this.duration / 100);
		this.deleteRange = 120;
		this.previousX = args.targetCharacter.characterData.character_zone_x - this.offsetX;
		this.previousY = args.targetCharacter.characterData.character_zone_y - this.offsetY;
		
		var self = this;
		
		var lvlUpThirdPartImageObject = new Image();
		lvlUpThirdPartImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/lvlUp/2/thirdPartTranslate' + args.component + '.png';
		
		var yMovement = 0;
		var shadowOffset  = 0;
		
		//draw the the lvlUpThirdPart
		this.draw = function()
		{
			Map.ctx.globalAlpha = self.alpha;
			
			Map.ctx.save();
			
			Map.ctx.drawImage(
								lvlUpThirdPartImageObject,
								args.targetCharacter.characterData.character_zone_x - self.offsetX + Map.viewPortX,
								args.targetCharacter.characterData.character_zone_y - self.offsetY + Map.viewPortY + yMovement
							);
			
			self.previousX = args.targetCharacter.characterData.character_zone_x - self.offsetX;
			self.previousY = args.targetCharacter.characterData.character_zone_y - self.offsetY + yMovement;
										
			Map.ctx.restore();
			
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the lvlUpThirdPart
		this.remove = function()
		{
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[1][ this.ID ] = null;
			clearTimeout( _animateFunctionPointer );
			delete args.targetCharacter._internal.spellEffects[ this.characterSpellEffectID ];
		}
		
		setTimeout( function()
							{
								self.remove();
							
							}, self.duration );
		
		self.alpha = 0;

		var _fadeIn = function()
								{
									if( self.alpha < 1 )
									{
										self.alpha += 0.1;
										
										setTimeout( _fadeIn, 50 );
										
										return;
									}
									
									return;
								}
		
		_fadeIn();
		
		var _animateFunction =	function()
											{
												yMovement -= self.stepDistance;
												
												if( yMovement < -25 )
												{
													self.alpha-=0.05;
												}
												
												if( self.alpha < 0 )
												{
													self.alpha = 0;
												
													self.remove();
													
													return;
												}
												
												_animateFunctionPointer = setTimeout( _animateFunction, 50 );
											}			
				
		var _animateFunctionPointer = setTimeout( _animateFunction, 1 );
		
		setTimeout( function()
							{
								self.remove;
							
							}, self.duration );
		
	} //end the lvlUpThirdPart

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.moveAnimation.js
*/


	spellEffects.moveAnimation = function( args )
	{
		this.ID = spellEffects.layer[0].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		this.alpha = 1;
		this.offsetX = 30;
		this.offsetY = 30;
		this.deleteRange = 60;
		this.previousX = args.x - this.offsetX;
		this.previousY = args.y - this.offsetY;
		
		var self = this, _mouseImages = [], _currentMouseImage = 0;
		
		for(var i=0;i<8;i++)
		{
			_mouseImages[ i ] = new Image();
			_mouseImages[ i ].src = "/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/moveAnimation/" + ( i + 1 ) + ".png";
		}
		
		var moveAnimationImageObject = _mouseImages[ _currentMouseImage ];
		
		//draw the moveAnimation
		this.draw = function()
		{
			//Map.ctx.globalAlpha = self.alpha;
			
			Map.ctx.drawImage(
								moveAnimationImageObject,
								args.x - self.offsetX + Map.viewPortX,
								args.y - self.offsetY + Map.viewPortY 
							);
	
			self.previousX = args.x - self.offsetX;
			self.previousY = args.y - self.offsetY; 
	
			//Map.ctx.globalAlpha = 1;
		}
		
		//remove the moveAnimation
		this.remove = function()
		{
			clearTimeout( _cycleImagePointer );
			
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[0][ this.ID ] = null;
			delete args.targetCharacter._internal.spellEffects[ this.characterSpellEffectID ];
		}

		var i = 1;
		
		var _cycleImage = function()
		{
			if( _currentMouseImage >= 7 )
			{
				self.remove();
				
				return;
			}
		
			moveAnimationImageObject = _mouseImages[ ++_currentMouseImage ];
			
			_cycleImagePointer = setTimeout( _cycleImage, 75 );
		}
										
		var _cycleImagePointer = setTimeout( _cycleImage, 75 );
	} //end moveAnimation
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.moveCharacter.js
*/

	
	spellEffects.moveCharacter = function( args )
	{
		this.ID = spellEffects.layer[1].push( this ) - 1;
		this.alpha = 1;
	
		var character = new Image();
		character.src =  'images/_characters/character' + Math.floor( Math.random() * 6 )  + '.png';
		
		//calculate the angle to orient the character image towards destination
		var xRelative = args.x - args.xOrigin;
		var yRelative = args.y - args.yOrigin;
		
		var distance = Math.sqrt( (xRelative * xRelative) + (yRelative * yRelative) ) - 30;
		
		var _theta = Math.atan2( yRelative, xRelative );
																				
		//set step distances
		dx = Math.floor(5 * Math.cos( _theta ));
		dy = Math.floor(5 * Math.sin( _theta ));
	
		this.draw = function()
		{
			spellEffects.ctx.globalAlpha = self.alpha;
		
			spellEffects.ctx.drawImage(
											character, 
											args.xOrigin, 
											args.yOrigin
										);
										
			spellEffects.ctx.globalAlpha = 1;
		}
		
		//remove the starAura
		var self = this;
		
		this.remove = function()
		{
			spellEffects.layer[1][ this.ID ] = null;
		}
		
		
		
		move = function()
							{
								args.xOrigin += dx;
								args.yOrigin += dy;
								
								setTimeout( move, 20 );
								
								return { x: args.xOrigin, y: args.yOrigin };
							}
		
		move();
		
		if( args.xOrigin == args.x )
		{ 													
			self.remove();
		}

	} //end moveCharacter

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.movingCharacter.js
*/


	spellEffects.movingCharacter = function( args )
	{
		this.ID = spellEffects.layer[1].push( this ) - 1;
		this.alpha = 1;
		this.centerX = -30;
		this.centerY = -30;
		this.speed = 5;
		
		var self = this;
		
		var movingCharacterImageObject = new Image();
		movingCharacterImageObject.src =  'images/_characters/character' + Math.floor( Math.random() * 6 )  + '.png';
		
		//
		//draw the movingCharacter effect
		//
		this.draw = function()
		{
			spellEffects.ctx.globalAlpha = self.alpha;
			
			spellEffects.ctx.save();
			
			spellEffects.ctx.translate( args.targetCharacter.x, args.targetCharacter.y );
			
			//spellEffects.ctx.rotate( args.rotation );
			
			spellEffects.ctx.drawImage(
											movingCharacterImageObject,
											self.centerX,
											self.centerY
										)

			spellEffects.ctx.restore();
										
			spellEffects.ctx.globalAlpha = 1;
		}
		
		
		//remove the dust effect
		
		this.remove = function()
		{
			spellEffects.layer[1][ this.ID ] = null;
		}
		
	} //end movingCharacter

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.pincer.js
*/


	spellEffects.pincer = function( args )
	{
		this.ID = spellEffects.layer[1].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		this.alpha = 1;
		this.offsetX = 30;
		this.offsetY = 30;
		this.rotation = 0;
		this.deleteRange = 60;
		this.previousX = args.targetCharacter.characterData.character_zone_x - this.offsetX;
		this.previousY = args.targetCharacter.characterData.character_zone_y - this.offsetY;
		
		var self = this;
		
		var pincerImageObject = new Image();
		pincerImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/other/pincer/pincer' + args.component + '.png';
		
		//draw the the pincer
		this.draw = function()
		{
			Map.ctx.globalAlpha = self.alpha;
			
			Map.ctx.save();
			
			Map.ctx.translate( args.targetCharacter.characterData.character_zone_x + Map.viewPortX, args.targetCharacter.characterData.character_zone_y + Map.viewPortY );
			
			Map.ctx.rotate( self.rotation );
			
			Map.ctx.drawImage(
							pincerImageObject,
							- self.offsetX,
							- self.offsetY
						);
										
			self.previousX = args.targetCharacter.characterData.character_zone_x - self.offsetX;
			self.previousY = args.targetCharacter.characterData.character_zone_y - self.offsetY;
										
			Map.ctx.restore();
			
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the pincer
		this.remove = function()
		{
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[1][ this.ID ] = null;
			clearTimeout( _animateFunctionPointer );
			delete args.targetCharacter._internal.spellEffects[ this.characterSpellEffectID ];
		}
			
		switch( args.component )
		{
			case 0:			
				var pincerSound = soundManager.createSound({
						id: 'pincer' + ( ++spellEffects.soundIncrementor ),
						url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/trap/single click 2.mp3',
						volume: spellEffects.volumeByRange ( Component.bugcraft.currentCharacterObject.characterData.character_zone_x, Component.bugcraft.currentCharacterObject.characterData.character_zone_y, args.targetCharacter.characterData.character_zone_x, args.targetCharacter.characterData.character_zone_y, spellEffects.volumeRangeLong )
				});
				
				this.spellEffectSoundID = args.targetCharacter._internal.soundEffects.push( pincerSound ) - 1;
			
				soundManager.play( 'pincer' + spellEffects.soundIncrementor, 
										{
											onfinish: function () 
											{
												delete args.targetCharacter._internal.soundEffects[ self.spellEffectSoundID ];	
											}
										});

				var _animateFunction =	function()
																	{
																		if( self.rotation > Math.PI / 4 )
																		{
																			self.rotation = Math.PI / 4;
																			
																			self.remove();
																			return;
																		}
																		
																		self.rotation += Math.PI / 32;

																		_animateFunctionPointer = setTimeout( _animateFunction, 40 );
																	}						
			break;
			case 1:
				
				var _animateFunction =	function()
																	{
																		if( self.rotation < - Math.PI / 4 )
																		{
																			self.rotation = - Math.PI / 4;
																			
																			self.remove();
																			return;
																		}
																		
																		self.rotation -= Math.PI / 32;

																		_animateFunctionPointer = setTimeout( _animateFunction, 40 );
																	}	
													
			break;
		}
		
		var _animateFunctionPointer = setTimeout( _animateFunction, 10 );
		
	} //end the pincer

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.pincer94.js
*/


	spellEffects.pincer94 = function( args )
	{
		this.ID = spellEffects.layer[1].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		this.alpha = 1;
		this.offsetX = 30;
		this.offsetY = 30;
		this.rotation = 0;
		this.deleteRange = 60;
		this.previousX = args.targetCharacter.characterData.character_zone_x - this.offsetX;
		this.previousY = args.targetCharacter.characterData.character_zone_y - this.offsetY;
		
		var self = this;
		
		var pincerImageObject = new Image();
		pincerImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/other/pincer/pincer' + args.component + '.png';
		
		//draw the the pincer
		this.draw = function()
		{
			Map.ctx.globalAlpha = self.alpha;
			
			Map.ctx.save();
			
			Map.ctx.translate( args.targetCharacter.characterData.character_zone_x + Map.viewPortX, args.targetCharacter.characterData.character_zone_y + Map.viewPortY );
			
			Map.ctx.rotate( self.rotation );
			
			Map.ctx.drawImage(
							pincerImageObject,
							- self.offsetX,
							- self.offsetY
						);
										
			self.previousX = args.targetCharacter.characterData.character_zone_x - self.offsetX;
			self.previousY = args.targetCharacter.characterData.character_zone_y - self.offsetY;
										
			Map.ctx.restore();
			
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the pincer
		this.remove = function()
		{
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[1][ this.ID ] = null;
			clearTimeout( _animateFunctionPointer );
			delete args.targetCharacter._internal.spellEffects[ this.characterSpellEffectID ];
		}
			
		switch( args.component )
		{
			case 0:			
				var pincerSound = soundManager.createSound({
						id: 'pincer' + ( ++spellEffects.soundIncrementor ),
						url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/punch/punch' + Math.floor( Math.random() * 3 ) + '.mp3',
						volume: spellEffects.volumeByRange ( Component.bugcraft.currentCharacterObject.characterData.character_zone_x, Component.bugcraft.currentCharacterObject.characterData.character_zone_y, args.targetCharacter.characterData.character_zone_x, args.targetCharacter.characterData.character_zone_y, spellEffects.volumeRangeLong )
				});
				
				this.spellEffectSoundID = args.targetCharacter._internal.soundEffects.push( pincerSound ) - 1;
			
				soundManager.play( 'pincer' + spellEffects.soundIncrementor, 
										{
											onfinish: function () 
											{
												delete args.targetCharacter._internal.soundEffects[ self.spellEffectSoundID ];	
											}
										});

				var _animateFunction =	function()
																	{
																		if( self.rotation > Math.PI / 4 )
																		{
																			self.rotation = Math.PI / 4;
																			
																			self.remove();
																			return;
																		}
																		
																		self.rotation += Math.PI / 32;

																		_animateFunctionPointer = setTimeout( _animateFunction, 40 );
																	}						
			break;
			case 1:
				
				var _animateFunction =	function()
																	{
																		if( self.rotation < - Math.PI / 4 )
																		{
																			self.rotation = - Math.PI / 4;
																			
																			self.remove();
																			return;
																		}
																		
																		self.rotation -= Math.PI / 32;

																		_animateFunctionPointer = setTimeout( _animateFunction, 40 );
																	}	
													
			break;
		}
		
		var _animateFunctionPointer = setTimeout( _animateFunction, 10 );
		
	} //end the pincer

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.pincer94Complete.js
*/


	spellEffects.pincer94Complete = function( args )
	{
		this.ID = spellEffects.layer[1].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		
		this.draw = function()
		{
			
		}
		
		var effect0 = new spellEffects.pincer94({ 			
				sourceCharacter: args.sourceCharacter,														
				targetCharacter: args.targetCharacter,
				component: 0
		});
		
		var effect1 = new spellEffects.pincer94({ 																						
				sourceCharacter: args.sourceCharacter,
				targetCharacter: args.targetCharacter,
				component: 1
		});
		
		this.remove = function()
		{
			effect0.remove();
			effect1.remove();
			
			spellEffects.layer[1][ self.ID ] = null;
				
			delete args.targetCharacter._internal.spellEffects[ self.characterSpellEffectID ];
		}
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.pincerComplete.js
*/


	spellEffects.pincerComplete = function( args )
	{
		this.ID = spellEffects.layer[1].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		
		this.draw = function()
		{
			
		}
		
		var effect0 = new spellEffects.pincer({ 			
				sourceCharacter: args.sourceCharacter,														
				targetCharacter: args.targetCharacter,
				component: 0
		});
		
		var effect1 = new spellEffects.pincer({ 																						
				sourceCharacter: args.sourceCharacter,
				targetCharacter: args.targetCharacter,
				component: 1
		});
		
		this.remove = function()
		{
			effect0.remove();
			effect1.remove();
			
			spellEffects.layer[1][ self.ID ] = null;
				
			delete args.targetCharacter._internal.spellEffects[ self.characterSpellEffectID ];
		}
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.pulse.js
*/


	spellEffects.pulse = function( args )
	{
		this.ID = spellEffects.layer[0].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		this.alpha = 1;
		this.offsetX = 30;
		this.offsetY = 30;
		this.rotation = Math.random() * (Math.PI * 2);
		this.deleteRange = 60;
		this.previousX = args.targetCharacter.characterData.character_zone_x - this.offsetX;
		this.previousY = args.targetCharacter.characterData.character_zone_y - this.offsetY;
		this.duration = 3000;
		
		
		var self = this;
		
		var pulseImageObject = new Image();
		pulseImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/resurrect/ress5.png';
		
		var pulseSound = soundManager.createSound({
				id: 'pulse' + ( ++spellEffects.soundIncrementor ),
				url: 'sounds/bolt/darkBolt1.mp3',
				volume: spellEffects.volumeByRange ( Component.bugcraft.currentCharacterObject.characterData.character_zone_x, Component.bugcraft.currentCharacterObject.characterData.character_zone_y, args.targetCharacter.characterData.character_zone_x, args.targetCharacter.characterData.character_zone_y, spellEffects.volumeRangeLong )
		});
		
		this.spellEffectSoundID = args.targetCharacter._internal.soundEffects.push( pulseSound ) - 1;
		/*
		soundManager.play( 'pulse' + spellEffects.soundIncrementor, 
										{
											onfinish: function () 
											{
												delete args.targetCharacter._internal.soundEffects[ self.spellEffectSoundID ];	
											}
										});
		*/
		
		//draw the pulse effect
		this.draw = function()
		{
			Map.ctx.globalAlpha = self.alpha;
			
			Map.ctx.drawImage(
							pulseImageObject,
							args.targetCharacter.characterData.character_zone_x - self.offsetX + Map.viewPortX,
							args.targetCharacter.characterData.character_zone_y - self.offsetY + Map.viewPortY
						);
						
			self.previousX = args.targetCharacter.characterData.character_zone_x - self.offsetX;
			self.previousY = args.targetCharacter.characterData.character_zone_y - self.offsetY;
			
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the low health effect
		this.remove = function()
		{
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[0][ this.ID ] = null;
			delete args.targetCharacter._internal.spellEffects[ this.characterSpellEffectID ];
		}
		
		var opacityVariation = 0;
		
		var _animateFunction =  function()
												{
													self.alpha = Math.abs( Math.sin( opacityVariation ) );

													opacityVariation += Math.PI / 32;
													
													if (self.alpha < 0.5 )
													{
														self.alpha = 0.5;
													}
													
													_animateFunctionPointer = setTimeout( _animateFunction, 40 );
												}							
		
		var _animateFunctionPointer = setTimeout( _animateFunction, 40 );		
		
		setTimeout( function() 
								{ 
									
									clearTimeout( _animateFunctionPointer );
								
									var _timeout = setInterval( function()
																		{
																			self.alpha -= 0.1;
																			
																			if( self.alpha > 0 )
																			{
																				return;
																			}
																			
																			self.remove();
																			
																			clearInterval( _timeout );
																			
																		}, 200 );
								}, self.duration );
		
	} //end pulse health

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.pulseGlow.js
*/


	spellEffects.pulseGlow = function( args )
	{
		this.ID = spellEffects.layer[0].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		this.alpha = 1;
		this.offsetX = 60;
		this.offsetY = 60;
		this.deleteRange = 120;
		this.previousX = args.targetCharacter.characterData.character_zone_x - this.offsetX;
		this.previousY = args.targetCharacter.characterData.character_zone_y - this.offsetY;
		this.duration = 5000;
		
		var self = this;
		
		var pulseGlowImageObject = new Image();
		pulseGlowImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/pulse/shockwaves_gettinglarger0.png';
		
		var pulseGlowSound = soundManager.createSound({
				id: 'pulseGlow' + ( ++spellEffects.soundIncrementor ),
				url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/bolt/darkBolt1.mp3',
				volume: spellEffects.volumeByRange ( Component.bugcraft.currentCharacterObject.characterData.character_zone_x, Component.bugcraft.currentCharacterObject.characterData.character_zone_y, args.targetCharacter.characterData.character_zone_x, args.targetCharacter.characterData.character_zone_y, spellEffects.volumeRangeLong )
		});
		
		this.spellEffectSoundID = args.targetCharacter._internal.soundEffects.push( pulseGlowSound ) - 1;
		
		soundManager.play( 'pulseGlow' + spellEffects.soundIncrementor, 
										{
											onfinish: function () 
											{
												delete args.targetCharacter._internal.soundEffects[ self.spellEffectSoundID ];	
											}
										});
		
		//draw the pulseGlow
		this.draw = function()
		{
			Map.ctx.globalAlpha = self.alpha;
			
			Map.ctx.save();
			
			Map.ctx.translate( args.targetCharacter.characterData.character_zone_x + Map.viewPortX, args.targetCharacter.characterData.character_zone_y + Map.viewPortY );
			
			Map.ctx.drawImage(
											pulseGlowImageObject,
											- self.offsetX ,
											- self.offsetY
										);
										
			self.previousX = args.targetCharacter.characterData.character_zone_x - self.offsetX;
			self.previousY = args.targetCharacter.characterData.character_zone_y - self.offsetY;
			
			Map.ctx.restore();
			
			Map.ctx.globalAlpha = 1;
			
		}
		
		//remove the pulseGlow
		this.remove = function()
		{
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[0][ this.ID ] = null;
			clearTimeout( _animateFunctionPointer );
			delete args.targetCharacter._internal.spellEffects[ this.characterSpellEffectID ];
		}
		
		
		
		self.alpha = 0;
		var _fadeIn =	function()
											{
												if( self.alpha > 0.9 )
												{
	
													return;
												}
												
												self.alpha += 0.2;
													
												setTimeout( _fadeIn, 50 );
											}
		_fadeIn();													
					
		var nextFrame = 0;
		var i  = 0;
		var _animateFunction =	function()	
															{
																nextFrame = i++ % 3;
															
																pulseGlowImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/pulse/shockwaves_gettinglarger' + nextFrame + '.png';

																_animateFunctionPointer = setTimeout( _animateFunction, 300 );
															}			

		var _animateFunctionPointer = setTimeout( _animateFunction, 300 );
		
		setTimeout( function() 
								{ 
									var _t = setInterval( function()
																		{
																			self.alpha -= 0.2;
																			
																			if( self.alpha > 0 )
																			{
																				return;
																			}
																			
																			self.remove();
																			
																			clearInterval( _t );
																			
																		}, 40 );
								}, self.duration );
	} //end spinning aura

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.q1.js
*/

	
	spellEffects[ 'q1' ] = function( args )
	{
		var self = this,
				_ccd = Component.bugcraft.currentCharacterObject.characterData,
				_moveFrames = {},
				_tc = args.targetCharacter,
				_tcd = _tc.characterData,
				_changeFrameFunctionPointer = null,
				_currentIndex = 1,
				_maxFrames = 1;
		
		this.ID = spellEffects.layer[0].push( this ) - 1;
		this.characterSpellEffectID = _tc._internal.spellEffects.push( this ) - 1;
		this.offsetX = 20;
		this.offsetY = 20;
		this.rotation = _tcd.character_rotation;
		this.deleteRange = 40;
		this.previousX = _tcd.character_zone_x - this.offsetX;
		this.previousY = _tcd.character_zone_y - this.offsetY;
		
		// initialize
		
		for(var i=1;i<=_maxFrames;i++)
		{
			_moveFrames[ i ] = { image: new Image(), alpha: 0 };
			_moveFrames[ i ].image.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/q1/q1' + i + '.png';
		}
		
		//draw the bombardierBeetleDeath spatter
		this.draw = function()
		{
			Map.ctx.save();
			
			Map.ctx.translate( self.previousX + self.offsetX + Map.viewPortX, self.previousY + self.offsetY + Map.viewPortY );
			
			Map.ctx.rotate( ( self.rotation - 90 ) * Math.PI / 180 );
			
			Map.ctx.shadowColor = 'rgba(0, 0, 0, 0.7)';
			Map.ctx.shadowOffsetX = 3;
			Map.ctx.shadowOffsetY = 3;
			
			Map.ctx.drawImage(
							_moveFrames[ _currentIndex ].image,
							- self.offsetX,
							- self.offsetY
						);
			
			Map.ctx.restore();
			
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the deathDecay
		this.remove = function()
		{
			clearTimeout( _changeFrameFunctionPointer );
			
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[0][ this.ID ] = null;
			
			delete _tc._internal.spellEffects[ this.characterSpellEffectID ];
		}
		
		var _changeFrameFunction = function()
		{
			_currentIndex++;
			
			if( _currentIndex > _maxFrames )
			{
				self.remove();
				
				return;
			}
			
			_changeFrameFunctionPointer = setTimeout( _changeFrameFunction, 100 );
		}
		
		_changeFrameFunction();
		
	} //end bombardierBeetleDeath

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.q2.js
*/

	
	spellEffects[ 'q2' ] = function( args )
	{
		var self = this,
				_ccd = Component.bugcraft.currentCharacterObject.characterData,
				_moveFrames = {},
				_tc = args.targetCharacter,
				_tcd = _tc.characterData,
				_changeFrameFunctionPointer = null,
				_currentIndex = 1,
				_maxFrames = 1;
		
		this.ID = spellEffects.layer[0].push( this ) - 1;
		this.characterSpellEffectID = _tc._internal.spellEffects.push( this ) - 1;
		this.offsetX = 20;
		this.offsetY = 20;
		this.rotation = _tcd.character_rotation;
		this.deleteRange = 40;
		this.previousX = _tcd.character_zone_x - this.offsetX;
		this.previousY = _tcd.character_zone_y - this.offsetY;
		
		// initialize
		
		for(var i=1;i<=_maxFrames;i++)
		{
			_moveFrames[ i ] = { image: new Image(), alpha: 0 };
			_moveFrames[ i ].image.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/q2/q2' + i + '.png';
		}
		
		//draw the bombardierBeetleDeath spatter
		this.draw = function()
		{
			Map.ctx.save();
			
			Map.ctx.translate( self.previousX + self.offsetX + Map.viewPortX, self.previousY + self.offsetY + Map.viewPortY );
			
			Map.ctx.rotate( ( self.rotation - 90 ) * Math.PI / 180 );
			
			Map.ctx.shadowColor = 'rgba(0, 0, 0, 0.7)';
			Map.ctx.shadowOffsetX = 3;
			Map.ctx.shadowOffsetY = 3;
			
			Map.ctx.drawImage(
							_moveFrames[ _currentIndex ].image,
							- self.offsetX,
							- self.offsetY
						);
			
			Map.ctx.restore();
			
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the deathDecay
		this.remove = function()
		{
			clearTimeout( _changeFrameFunctionPointer );
			
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[0][ this.ID ] = null;
			
			delete _tc._internal.spellEffects[ this.characterSpellEffectID ];
		}
		
		var _changeFrameFunction = function()
		{
			_currentIndex++;
			
			if( _currentIndex > _maxFrames )
			{
				self.remove();
				
				return;
			}
			
			_changeFrameFunctionPointer = setTimeout( _changeFrameFunction, 100 );
		}
		
		_changeFrameFunction();
		
	} //end bombardierBeetleDeath

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.q3.js
*/

	
	spellEffects[ 'q3' ] = function( args )
	{
		var self = this,
				_ccd = Component.bugcraft.currentCharacterObject.characterData,
				_moveFrames = {},
				_tc = args.targetCharacter,
				_tcd = _tc.characterData,
				_changeFrameFunctionPointer = null,
				_currentIndex = 1,
				_maxFrames = 1;
		
		this.ID = spellEffects.layer[0].push( this ) - 1;
		this.characterSpellEffectID = _tc._internal.spellEffects.push( this ) - 1;
		this.offsetX = 20;
		this.offsetY = 20;
		this.rotation = _tcd.character_rotation;
		this.deleteRange = 40;
		this.previousX = _tcd.character_zone_x - this.offsetX;
		this.previousY = _tcd.character_zone_y - this.offsetY;
		
		// initialize
		
		for(var i=1;i<=_maxFrames;i++)
		{
			_moveFrames[ i ] = { image: new Image(), alpha: 0 };
			_moveFrames[ i ].image.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/q3/q3' + i + '.png';
		}
		
		//draw the bombardierBeetleDeath spatter
		this.draw = function()
		{
			Map.ctx.save();
			
			Map.ctx.translate( self.previousX + self.offsetX + Map.viewPortX, self.previousY + self.offsetY + Map.viewPortY );
			
			Map.ctx.rotate( ( self.rotation - 90 ) * Math.PI / 180 );
			
			Map.ctx.shadowColor = 'rgba(0, 0, 0, 0.7)';
			Map.ctx.shadowOffsetX = 3;
			Map.ctx.shadowOffsetY = 3;
			
			Map.ctx.drawImage(
							_moveFrames[ _currentIndex ].image,
							- self.offsetX,
							- self.offsetY
						);
			
			Map.ctx.restore();
			
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the deathDecay
		this.remove = function()
		{
			clearTimeout( _changeFrameFunctionPointer );
			
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[0][ this.ID ] = null;
			
			delete _tc._internal.spellEffects[ this.characterSpellEffectID ];
		}
		
		var _changeFrameFunction = function()
		{
			_currentIndex++;
			
			if( _currentIndex > _maxFrames )
			{
				self.remove();
				
				return;
			}
			
			_changeFrameFunctionPointer = setTimeout( _changeFrameFunction, 100 );
		}
		
		_changeFrameFunction();
		
	} //end bombardierBeetleDeath

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.q4.js
*/

	
	spellEffects[ 'q4' ] = function( args )
	{
		var self = this,
				_ccd = Component.bugcraft.currentCharacterObject.characterData,
				_moveFrames = {},
				_tc = args.targetCharacter,
				_tcd = _tc.characterData,
				_changeFrameFunctionPointer = null,
				_currentIndex = 1,
				_maxFrames = 1;
		
		this.ID = spellEffects.layer[0].push( this ) - 1;
		this.characterSpellEffectID = _tc._internal.spellEffects.push( this ) - 1;
		this.offsetX = 20;
		this.offsetY = 20;
		this.rotation = _tcd.character_rotation;
		this.deleteRange = 40;
		this.previousX = _tcd.character_zone_x - this.offsetX;
		this.previousY = _tcd.character_zone_y - this.offsetY;
		
		// initialize
		
		for(var i=1;i<=_maxFrames;i++)
		{
			_moveFrames[ i ] = { image: new Image(), alpha: 0 };
			_moveFrames[ i ].image.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/q4/q4' + i + '.png';
		}
		
		//draw the bombardierBeetleDeath spatter
		this.draw = function()
		{
			Map.ctx.save();
			
			Map.ctx.translate( self.previousX + self.offsetX + Map.viewPortX, self.previousY + self.offsetY + Map.viewPortY );
			
			Map.ctx.rotate( ( self.rotation - 90 ) * Math.PI / 180 );
			
			Map.ctx.shadowColor = 'rgba(0, 0, 0, 0.7)';
			Map.ctx.shadowOffsetX = 3;
			Map.ctx.shadowOffsetY = 3;
			
			Map.ctx.drawImage(
							_moveFrames[ _currentIndex ].image,
							- self.offsetX,
							- self.offsetY
						);
			
			Map.ctx.restore();
			
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the deathDecay
		this.remove = function()
		{
			clearTimeout( _changeFrameFunctionPointer );
			
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[0][ this.ID ] = null;
			
			delete _tc._internal.spellEffects[ this.characterSpellEffectID ];
		}
		
		var _changeFrameFunction = function()
		{
			_currentIndex++;
			
			if( _currentIndex > _maxFrames )
			{
				self.remove();
				
				return;
			}
			
			_changeFrameFunctionPointer = setTimeout( _changeFrameFunction, 100 );
		}
		
		_changeFrameFunction();
		
	} //end bombardierBeetleDeath

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.q5.js
*/

	
	spellEffects[ 'q5' ] = function( args )
	{
		var self = this,
				_ccd = Component.bugcraft.currentCharacterObject.characterData,
				_moveFrames = {},
				_tc = args.targetCharacter,
				_tcd = _tc.characterData,
				_changeFrameFunctionPointer = null,
				_currentIndex = 1,
				_maxFrames = 1;
		
		this.ID = spellEffects.layer[0].push( this ) - 1;
		this.characterSpellEffectID = _tc._internal.spellEffects.push( this ) - 1;
		this.offsetX = 20;
		this.offsetY = 20;
		this.rotation = _tcd.character_rotation;
		this.deleteRange = 40;
		this.previousX = _tcd.character_zone_x - this.offsetX;
		this.previousY = _tcd.character_zone_y - this.offsetY;
		
		// initialize
		
		for(var i=1;i<=_maxFrames;i++)
		{
			_moveFrames[ i ] = { image: new Image(), alpha: 0 };
			_moveFrames[ i ].image.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/q5/q5' + i + '.png';
		}
		
		//draw the bombardierBeetleDeath spatter
		this.draw = function()
		{
			Map.ctx.save();
			
			Map.ctx.translate( self.previousX + self.offsetX + Map.viewPortX, self.previousY + self.offsetY + Map.viewPortY );
			
			Map.ctx.rotate( ( self.rotation - 90 ) * Math.PI / 180 );
			
			Map.ctx.shadowColor = 'rgba(0, 0, 0, 0.7)';
			Map.ctx.shadowOffsetX = 3;
			Map.ctx.shadowOffsetY = 3;
			
			Map.ctx.drawImage(
							_moveFrames[ _currentIndex ].image,
							- self.offsetX,
							- self.offsetY
						);
			
			Map.ctx.restore();
			
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the deathDecay
		this.remove = function()
		{
			clearTimeout( _changeFrameFunctionPointer );
			
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[0][ this.ID ] = null;
			
			delete _tc._internal.spellEffects[ this.characterSpellEffectID ];
		}
		
		var _changeFrameFunction = function()
		{
			_currentIndex++;
			
			if( _currentIndex > _maxFrames )
			{
				self.remove();
				
				return;
			}
			
			_changeFrameFunctionPointer = setTimeout( _changeFrameFunction, 100 );
		}
		
		_changeFrameFunction();
		
	} //end bombardierBeetleDeath

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.q6.js
*/

	
	spellEffects[ 'q6' ] = function( args )
	{
		var self = this,
				_ccd = Component.bugcraft.currentCharacterObject.characterData,
				_moveFrames = {},
				_tc = args.targetCharacter,
				_tcd = _tc.characterData,
				_changeFrameFunctionPointer = null,
				_currentIndex = 1,
				_maxFrames = 1;
		
		this.ID = spellEffects.layer[0].push( this ) - 1;
		this.characterSpellEffectID = _tc._internal.spellEffects.push( this ) - 1;
		this.offsetX = 20;
		this.offsetY = 20;
		this.rotation = _tcd.character_rotation;
		this.deleteRange = 40;
		this.previousX = _tcd.character_zone_x - this.offsetX;
		this.previousY = _tcd.character_zone_y - this.offsetY;
		
		// initialize
		
		Application.sound.playExclusive({
											url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/q6/q6.mp3',
											volume: spellEffects.volumeByRangeVoice(
																		_ccd.character_zone_x,
																		_ccd.character_zone_y,
																		_tcd.character_zone_x,
																		_tcd.character_zone_y,
																		spellEffects.volumeRangeLong
																	),
											onFinish: function()
											{
												
											}
										});
		
		for(var i=1;i<=_maxFrames;i++)
		{
			_moveFrames[ i ] = { image: new Image(), alpha: 0 };
			_moveFrames[ i ].image.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/q6/q6' + i + '.png';
		}
		
		//draw the bombardierBeetleDeath spatter
		this.draw = function()
		{
			Map.ctx.save();
			
			Map.ctx.translate( self.previousX + self.offsetX + Map.viewPortX, self.previousY + self.offsetY + Map.viewPortY );
			
			Map.ctx.rotate( ( self.rotation - 90 ) * Math.PI / 180 );
			
			Map.ctx.shadowColor = 'rgba(0, 0, 0, 0.7)';
			Map.ctx.shadowOffsetX = 3;
			Map.ctx.shadowOffsetY = 3;
			
			Map.ctx.drawImage(
							_moveFrames[ _currentIndex ].image,
							- self.offsetX,
							- self.offsetY
						);
			
			Map.ctx.restore();
			
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the deathDecay
		this.remove = function()
		{
			clearTimeout( _changeFrameFunctionPointer );
			
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[0][ this.ID ] = null;
			
			delete _tc._internal.spellEffects[ this.characterSpellEffectID ];
		}
		
		var _changeFrameFunction = function()
		{
			_currentIndex++;
			
			if( _currentIndex > _maxFrames )
			{
				self.remove();
				
				return;
			}
			
			_changeFrameFunctionPointer = setTimeout( _changeFrameFunction, 100 );
		}
		
		_changeFrameFunction();
		
	} //end bombardierBeetleDeath

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.questAvailable.js
*/


	spellEffects.questAvailable = function( args )
	{
		var self = this, questImageObject = new Image(), _tc = args.targetCharacter, _tcd = _tc.characterData;
		
		this.ID = spellEffects.layer[1].push( this ) - 1;
		this.characterSpellEffectID = _tc._internal.spellEffects.push( this ) - 1;
		this.alpha = 0;
		this.offsetX = 30;
		this.offsetY = 30;
		this.deleteRange = 60;
		
		questImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/quests/questAvailable.png';
		
		//draw the low health effect
		this.draw = function()
		{
			Map.ctx.globalAlpha = self.alpha;
			
			Map.ctx.drawImage(
							questImageObject,
							_tcd.character_zone_x - self.offsetX + Map.viewPortX + 15,
							_tcd.character_zone_y - self.offsetY + Map.viewPortY - _tcd.character_height / 2 + 10
						);
			
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the hitVenomSting
		this.remove = function()
		{
			spellEffects.layerCleaner.push( self );
			spellEffects.layer[1][ self.ID ] = null;
			
			delete _tc._internal.spellEffects[ self.characterSpellEffectID ];
		}
		
		var _fadeFunction = function( _inc, _final, _gt )
		{
			self.alpha = Math.round( ( self.alpha += _inc ) * 100 ) / 100;
			
			if( ( _gt ? self.alpha > _final : self.alpha < _final ) )
			{
				setTimeout( function()
				{
					_fadeFunction( _inc, _final, _gt );
				}, 100 );
				
				return;
			}
			
			// reached the target
			setTimeout( function()
			{
				_fadeFunction( -_inc, ( _final == 1 ) ? 0.5 : 1, ( _final == 1 ) );
			}, 100 );
		}
		
		_fadeFunction( 0.04, 1, false );
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.questDone.js
*/


	spellEffects.questDone = function( args )
	{
		var self = this, questImageObject = new Image(), _tc = args.targetCharacter, _tcd = _tc.characterData;
		
		this.ID = spellEffects.layer[1].push( this ) - 1;
		this.characterSpellEffectID = _tc._internal.spellEffects.push( this ) - 1;
		this.alpha = 0;
		this.offsetX = 30;
		this.offsetY = 30;
		this.deleteRange = 60;
		
		questImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/quests/questDone.png';
		
		//draw the low health effect
		this.draw = function()
		{
			Map.ctx.globalAlpha = self.alpha;
			
			Map.ctx.drawImage(
							questImageObject,
							_tcd.character_zone_x - self.offsetX + Map.viewPortX + 15,
							_tcd.character_zone_y - self.offsetY + Map.viewPortY - _tcd.character_height / 2 + 10
						);
			
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the hitVenomSting
		this.remove = function()
		{
			spellEffects.layerCleaner.push( self );
			spellEffects.layer[1][ self.ID ] = null;
			
			delete _tc._internal.spellEffects[ self.characterSpellEffectID ];
		}
		
		var _fadeFunction = function( _inc, _final, _gt )
		{
			self.alpha = Math.round( ( self.alpha += _inc ) * 100 ) / 100;
			
			if( ( _gt ? self.alpha > _final : self.alpha < _final ) )
			{
				setTimeout( function()
				{
					_fadeFunction( _inc, _final, _gt );
				}, 100 );
				
				return;
			}
			
			// reached the target
			setTimeout( function()
			{
				_fadeFunction( -_inc, ( _final == 1 ) ? 0.5 : 1, ( _final == 1 ) );
			}, 100 );
		}
		
		_fadeFunction( 0.04, 1, false );
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.questNotAvailable.js
*/


	spellEffects.questNotAvailable = function( args )
	{
		var self = this, questImageObject = new Image(), _tc = args.targetCharacter, _tcd = _tc.characterData;
		
		this.ID = spellEffects.layer[1].push( this ) - 1;
		this.characterSpellEffectID = _tc._internal.spellEffects.push( this ) - 1;
		this.alpha = 0;
		this.offsetX = 30;
		this.offsetY = 30;
		this.deleteRange = 60;
		
		questImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/quests/questNotAvailable.png';
		
		//draw the low health effect
		this.draw = function()
		{
			Map.ctx.globalAlpha = self.alpha;
			
			Map.ctx.drawImage(
							questImageObject,
							_tcd.character_zone_x - self.offsetX + Map.viewPortX + 15,
							_tcd.character_zone_y - self.offsetY + Map.viewPortY - _tcd.character_height / 2 + 10
						);
			
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the hitVenomSting
		this.remove = function()
		{
			spellEffects.layerCleaner.push( self );
			spellEffects.layer[1][ self.ID ] = null;
			
			delete _tc._internal.spellEffects[ self.characterSpellEffectID ];
		}
		
		var _fadeFunction = function( _inc, _final, _gt )
		{
			self.alpha = Math.round( ( self.alpha += _inc ) * 100 ) / 100;
			
			if( ( _gt ? self.alpha > _final : self.alpha < _final ) )
			{
				setTimeout( function()
				{
					_fadeFunction( _inc, _final, _gt );
				}, 100 );
				
				return;
			}
			
			// reached the target
			setTimeout( function()
			{
				_fadeFunction( -_inc, ( _final == 1 ) ? 0.5 : 1, ( _final == 1 ) );
			}, 100 );
		}
		
		_fadeFunction( 0.04, 1, false );
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.questWaiting.js
*/


	spellEffects.questWaiting = function( args )
	{
		var self = this, questImageObject = new Image(), _tc = args.targetCharacter, _tcd = _tc.characterData;
		
		this.ID = spellEffects.layer[1].push( this ) - 1;
		this.characterSpellEffectID = _tc._internal.spellEffects.push( this ) - 1;
		this.alpha = 0;
		this.offsetX = 30;
		this.offsetY = 30;
		this.deleteRange = 60;
		
		questImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/quests/questWaiting.png';
		
		//draw the low health effect
		this.draw = function()
		{
			Map.ctx.globalAlpha = self.alpha;
			
			Map.ctx.drawImage(
							questImageObject,
							_tcd.character_zone_x - self.offsetX + Map.viewPortX + 15,
							_tcd.character_zone_y - self.offsetY + Map.viewPortY - _tcd.character_height / 2 + 10
						);
			
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the hitVenomSting
		this.remove = function()
		{
			spellEffects.layerCleaner.push( self );
			spellEffects.layer[1][ self.ID ] = null;
			
			delete _tc._internal.spellEffects[ self.characterSpellEffectID ];
		}
		
		var _fadeFunction = function( _inc, _final, _gt )
		{
			self.alpha = Math.round( ( self.alpha += _inc ) * 100 ) / 100;
			
			if( ( _gt ? self.alpha > _final : self.alpha < _final ) )
			{
				setTimeout( function()
				{
					_fadeFunction( _inc, _final, _gt );
				}, 100 );
				
				return;
			}
			
			// reached the target
			setTimeout( function()
			{
				_fadeFunction( -_inc, ( _final == 1 ) ? 0.5 : 1, ( _final == 1 ) );
			}, 100 );
		}
		
		_fadeFunction( 0.04, 1, false );
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.rainforestloop1min.js
*/

	
	spellEffects[ 'rainforestloop1min' ] = function( args )
	{
		var self = this,
				_ccd = Component.bugcraft.currentCharacterObject.characterData,
				_moveFrames = {},
				_tc = args.targetCharacter,
				_tcd = _tc.characterData,
				_changeFrameFunctionPointer = null,
				_currentIndex = 1,
				_maxFrames = 1,
				_backgroundSound = null;
		
		this.ID = spellEffects.layer[0].push( this ) - 1;
		this.characterSpellEffectID = _tc._internal.spellEffects.push( this ) - 1;
		this.offsetX = 20;
		this.offsetY = 20;
		this.rotation = _tcd.character_rotation;
		this.deleteRange = 40;
		this.previousX = _tcd.character_zone_x - this.offsetX;
		this.previousY = _tcd.character_zone_y - this.offsetY;
		
		// initialize
		
		var _soundLoop = function()
		{
			_backgroundSound = Application.sound.playExclusive({
												url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/rainforestloop1min/rainforestloop1min.mp3',
												volume: spellEffects.volumeByRangeVoice(
																			_ccd.character_zone_x,
																			_ccd.character_zone_y,
																			_tcd.character_zone_x,
																			_tcd.character_zone_y,
																			spellEffects.volumeRangeLong
																		),
												onFinish: function()
												{
													_soundLoop();
												}
											});
		}
		
		for(var i=1;i<=_maxFrames;i++)
		{
			_moveFrames[ i ] = { image: new Image(), alpha: 0 };
			_moveFrames[ i ].image.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/rainforestloop1min/rainforestloop1min' + i + '.png';
		}
		
		//draw the bombardierBeetleDeath spatter
		this.draw = function()
		{
			Map.ctx.save();
			
			Map.ctx.translate( self.previousX + self.offsetX + Map.viewPortX, self.previousY + self.offsetY + Map.viewPortY );
			
			Map.ctx.rotate( ( self.rotation - 90 ) * Math.PI / 180 );
			
			Map.ctx.shadowColor = 'rgba(0, 0, 0, 0.7)';
			Map.ctx.shadowOffsetX = 3;
			Map.ctx.shadowOffsetY = 3;
			
			Map.ctx.drawImage(
							_moveFrames[ _currentIndex ].image,
							- self.offsetX,
							- self.offsetY
						);
			
			Map.ctx.restore();
			
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the deathDecay
		this.remove = function()
		{
			clearTimeout( _changeFrameFunctionPointer );
			
			if( _backgroundSound )
			{
				_backgroundSound.stop();
			}
			
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[0][ this.ID ] = null;
			
			delete _tc._internal.spellEffects[ this.characterSpellEffectID ];
		}
		
		var _changeFrameFunction = function()
		{
			_currentIndex++;
			
			if( _currentIndex > _maxFrames )
			{
				_currentIndex = 1;
				
				setTimeout( _changeFrameFunction, 2000 + Math.random() * 5000 );
				
				return;
			}
			
			_changeFrameFunctionPointer = setTimeout( _changeFrameFunction, 100 );
		}
		
		_soundLoop();
		_changeFrameFunction();
		
	} //end bombardierBeetleDeath

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.removeLootable.js
*/


	spellEffects.removeLootable = function( args )
	{
		var _iSpellEffects = args.targetCharacter._internal.spellEffects;
			
		for( var i in _iSpellEffects )
		{
			var spellEffectObject = _iSpellEffects[i].constructor;
			
			if( spellEffectObject != spellEffects.lootableComplete )
			{
				continue;
			}
			
			// effect needs to be removed
			
			_iSpellEffects[i].remove();
		}
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.res2.js
*/


	spellEffects.res2 = function( args )
	{
		this.ID = spellEffects.layer[0].push( this ) - 1;
		this.alpha = 1;
		
		var res2ImageObject = new Image();
		res2ImageObject.src = 'images/resurrect/ress1.png';
		
		var res2Sound = soundManager.createSound({
				id: 'res2' + ( ++soundIncrementor ),
				url: 'sounds/res2.mp3',
				volume: spellEffects.volumeByRange ( Component.bugcraft.currentCharacterObject.characterData.character_zone_x, Component.bugcraft.currentCharacterObject.characterData.character_zone_y, args.targetCharacter.characterData.character_zone_x, args.targetCharacter.characterData.character_zone_y, spellEffects.volumeRangeLong )
		});
		//res2Sound.play();

		//draw the res2
		this.draw = function()
		{
			spellEffects.ctx.globalAlpha = self.alpha;
			
			spellEffects.ctx.save();
			
			spellEffects.ctx.translate( args.x, args.y );
			
			spellEffects.ctx.rotate( args.rotation );
			
			spellEffects.ctx.drawImage(
											res2ImageObject,
											-30 ,
											-30
										);
	
			spellEffects.ctx.restore();
			
			spellEffects.ctx.globalAlpha = 1;
			
			
		}
		
		//remove the res2
		var self = this;
		
		this.remove = function()
		{
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[0][ this.ID ] = null;
		}

		setTimeout( function()
							{
								res2ImageObject.src = 'images/resurrect/ress2.png';
								
								setTimeout( function()
													{
														res2ImageObject.src = 'images/resurrect/ress3.png';
														
														setTimeout( function()
																			{
																				res2ImageObject.src = 'images/resurrect/ress4.png';
																				
																				setTimeout( function()
																									{
																										res2ImageObject.src = 'images/resurrect/ress5.png';
																										
																										var _t = setInterval( function()
																															{
																																self.alpha -= 0.1;
																																
																																if( self.alpha > 0 )
																																{
																																	return;
																																}
																																
																																self.remove();
																																
																																clearInterval( _t );
																																
																															}, 100 );
																									}, 100 );
																			}, 100 );						
													}, 100 );
							}, 100 );
	} //end spinning aura

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.resurrect.js
*/

spellEffects.resurrect = function( args )
	{
		this.ID = spellEffects.layer[1].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		this.alpha = 1;
		this.offsetX = 30;
		this.offsetY = 30;
		this.rotation = Math.random() * (Math.PI * 2);
		this.deleteRange = 60;
		this.previousX = args.targetCharacter.characterData.character_zone_x - this.offsetX;
		this.previousY = args.targetCharacter.characterData.character_zone_y - this.offsetY;
		
		var self = this;
		
		var resurrectImageObject = new Image();
		resurrectImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/resurrect/resurrect0.png';
		
		var resurrectSound = soundManager.createSound({
				id: 'resurrect' + ( ++spellEffects.soundIncrementor ),
				url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/resurrect/res_part2.mp3',
				volume: spellEffects.volumeByRange ( Component.bugcraft.currentCharacterObject.characterData.character_zone_x, Component.bugcraft.currentCharacterObject.characterData.character_zone_y, args.targetCharacter.characterData.character_zone_x, args.targetCharacter.characterData.character_zone_y, spellEffects.volumeRangeLong )
		});
		
		this.spellEffectSoundID = args.targetCharacter._internal.soundEffects.push( resurrectSound ) - 1;
		
		soundManager.play( 'resurrect' + spellEffects.soundIncrementor, 
										{
											onfinish: function () 
											{
												delete args.targetCharacter._internal.soundEffects[ self.spellEffectSoundID ];	
											}
										});
		
		//draw the resurrect spatter
		this.draw = function()
		{
			Map.ctx.globalAlpha = self.alpha;
			Map.ctx.drawImage(
							resurrectImageObject,
							args.targetCharacter.characterData.character_zone_x - self.offsetX + Map.viewPortX,
							args.targetCharacter.characterData.character_zone_y - self.offsetY + Map.viewPortY
						);
			
			self.previousX = args.targetCharacter.characterData.character_zone_x - self.offsetX;
			self.previousY = args.targetCharacter.characterData.character_zone_y - self.offsetY;		
			
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the resurrect spatter
		this.remove = function()
		{
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[1][ this.ID ] = null;
			delete args.targetCharacter._internal.spellEffects[ this.characterSpellEffectID ];
		}
		
		setTimeout( function()
							{
								resurrectImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/resurrect/resurrect1.png';
								
								setTimeout( function()
													{
														resurrectImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/resurrect/resurrect2.png';
														
														setTimeout( function()
																			{
																				resurrectImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/resurrect/resurrect3.png';
																				
																				setTimeout( function()
																									{
																										resurrectImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/resurrect/resurrect4.png';
																			
																										var _t = setInterval( function()
																															{
																																self.alpha -= 0.1;
																																
																																if( self.alpha > 0 )
																																{
																																	return;
																																}
																																
																																self.remove();
																																
																																clearInterval( _t );
																																
																															}, 20 );
																										
																									}, 75 );
																			}, 75 );
													
													}, 75 );
							}, 75 );
							
	} //end resurrect spatter

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.resurrectComplete.js
*/


	spellEffects.resurrectComplete = function( args )
	{
		this.ID = spellEffects.layer[1].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		
		this.draw = function()
		{
			
		}
		
		var fade = new spellEffects.characterFadeInLong({ 
			sourceCharacter: args.sourceCharacter,
			targetCharacter: args.targetCharacter,
				
		});
	
		var pulse = new spellEffects.pulse({ 
			sourceCharacter: args.sourceCharacter,
			targetCharacter: args.targetCharacter,
		});
		
		var preResurrectSound = soundManager.createSound({
			id: 'preResurrect' + ( ++spellEffects.soundIncrementor ),
			url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/resurrect/res_part1.mp3',
			volume: spellEffects.volumeByRange ( Component.bugcraft.currentCharacterObject.characterData.character_zone_x, Component.bugcraft.currentCharacterObject.characterData.character_zone_y, args.targetCharacter.characterData.character_zone_x, args.targetCharacter.characterData.character_zone_y, spellEffects.volumeRangeLong )
		});
		
		this.spellEffectSoundID = args.targetCharacter._internal.soundEffects.push( preResurrectSound ) - 1;
		
		soundManager.play( 'preResurrect' + spellEffects.soundIncrementor, 
			{
				onfinish: function () 
				{
					var resurrect = new spellEffects.resurrect({ 
						sourceCharacter: args.sourceCharacter,
						targetCharacter: args.targetCharacter,
							
					});
					
					delete args.targetCharacter._internal.soundEffects[ self.spellEffectSoundID ];
					
				}
			});
		
		this.remove = function()
		{
			fade.remove();
			pulse.remove();
			
			spellEffects.layer[1][ self.ID ] = null;
				
			delete args.targetCharacter._internal.spellEffects[ self.characterSpellEffectID ];
		}
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.selectEnemyAnimation.js
*/


	spellEffects.selectEnemyAnimation = function( args )
	{
		var self = this, _tc = args.targetCharacter, _tcd = _tc.characterData;
		
		this.ID = spellEffects.layer[0].push( this ) - 1;
		this.characterSpellEffectID = _tc._internal.spellEffects.push( this ) - 1;
		this.alpha = 1;
		this.offsetX = _tcd.character_width * 0.66;
		this.offsetY = _tcd.character_height * 0.66;
		//this.deleteRange = 80;
		this.previousX = _tcd.character_zone_x - this.offsetX;
		this.previousY = _tcd.character_zone_y - this.offsetY;
		
		var _imageObject = new Image();
		_imageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/selectAnimation/char_selectenemy_' + _tcd.character_width + 'x' + _tcd.character_height + '.png';
		
		//draw the selectEnemyAnimation
		this.draw = function()
		{
			//Map.ctx.globalAlpha = self.alpha;
			
			Map.ctx.drawImage(
								_imageObject,
								_tcd.character_zone_x - self.offsetX + Map.viewPortX,
								_tcd.character_zone_y - self.offsetY + Map.viewPortY
							);
	
			self.previousX = _tcd.character_zone_x - self.offsetX;
			self.previousY = _tcd.character_zone_y - self.offsetY;
	
			//Map.ctx.globalAlpha = 1;
		}
		
		//remove the selectEnemyAnimation
		this.remove = function()
		{
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[0][ this.ID ] = null;
			delete _tc._internal.spellEffects[ this.characterSpellEffectID ];
		}
		
	} //end selectEnemyAnimation

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.selectFriendlyAnimation.js
*/


	spellEffects.selectFriendlyAnimation = function( args )
	{
		var self = this, _tc = args.targetCharacter, _tcd = _tc.characterData;
		
		this.ID = spellEffects.layer[0].push( this ) - 1;
		this.characterSpellEffectID = _tc._internal.spellEffects.push( this ) - 1;
		this.alpha = 1;
		this.offsetX = _tcd.character_width * 0.66;
		this.offsetY = _tcd.character_height * 0.66;
		//this.deleteRange = 80;
		this.previousX = _tcd.character_zone_x - this.offsetX;
		this.previousY = _tcd.character_zone_y - this.offsetY;
		
		var _imageObject = new Image();
		_imageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/selectAnimation/char_selectfriendly_' + _tcd.character_width + 'x' + _tcd.character_height + '.png';
		
		//draw the selectEnemyAnimation
		this.draw = function()
		{
			//Map.ctx.globalAlpha = self.alpha;
			
			Map.ctx.drawImage(
								_imageObject,
								_tcd.character_zone_x - self.offsetX + Map.viewPortX,
								_tcd.character_zone_y - self.offsetY + Map.viewPortY
							);
	
			self.previousX = _tcd.character_zone_x - self.offsetX;
			self.previousY = _tcd.character_zone_y - self.offsetY;
	
			//Map.ctx.globalAlpha = 1;
		}
		
		//remove the selectEnemyAnimation
		this.remove = function()
		{
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[0][ this.ID ] = null;
			delete _tc._internal.spellEffects[ this.characterSpellEffectID ];
		}
		
	} //end selectFriendlyAnimation

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.selectNeutralAnimation.js
*/


	spellEffects.selectNeutralAnimation = function( args )
	{
		var self = this, _tc = args.targetCharacter, _tcd = _tc.characterData;
		
		this.ID = spellEffects.layer[0].push( this ) - 1;
		this.characterSpellEffectID = _tc._internal.spellEffects.push( this ) - 1;
		this.alpha = 1;
		this.offsetX = _tcd.character_width * 0.66;
		this.offsetY = _tcd.character_height * 0.66;
		//this.deleteRange = 80;
		this.previousX = _tcd.character_zone_x - this.offsetX;
		this.previousY = _tcd.character_zone_y - this.offsetY;
		
		var _imageObject = new Image();
		_imageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/selectAnimation/char_selectneutral_' + _tcd.character_width + 'x' + _tcd.character_height + '.png';
		
		//draw the selectEnemyAnimation
		this.draw = function()
		{
			//Map.ctx.globalAlpha = self.alpha;
			
			Map.ctx.drawImage(
								_imageObject,
								_tcd.character_zone_x - self.offsetX + Map.viewPortX,
								_tcd.character_zone_y - self.offsetY + Map.viewPortY
							);
	
			self.previousX = _tcd.character_zone_x - self.offsetX;
			self.previousY = _tcd.character_zone_y - self.offsetY;
	
			//Map.ctx.globalAlpha = 1;
		}
		
		//remove the selectEnemyAnimation
		this.remove = function()
		{
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[0][ this.ID ] = null;
			delete _tc._internal.spellEffects[ this.characterSpellEffectID ];
		}
		
	} //end selectEnemyAnimation

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.selectSelfAnimation.js
*/


	spellEffects.selectSelfAnimation = function( args )
	{
		var self = this, _tc = args.targetCharacter, _tcd = _tc.characterData;
		
		this.ID = spellEffects.layer[0].push( this ) - 1;
		this.characterSpellEffectID = _tc._internal.spellEffects.push( this ) - 1;
		this.alpha = 1;
		this.offsetX = _tcd.character_width * 0.66;
		this.offsetY = _tcd.character_height * 0.66;
		//this.deleteRange = 80;
		this.previousX = _tcd.character_zone_x - this.offsetX;
		this.previousY = _tcd.character_zone_y - this.offsetY;
		
		var _imageObject = new Image();
		_imageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/selectAnimation/char_selectself_' + args.faction + '_' + _tcd.character_width + 'x' + _tcd.character_height + '.png';
		
		//draw the selectEnemyAnimation
		this.draw = function()
		{
			//Map.ctx.globalAlpha = self.alpha;
			
			Map.ctx.drawImage(
								_imageObject,
								_tcd.character_zone_x - self.offsetX + Map.viewPortX,
								_tcd.character_zone_y - self.offsetY + Map.viewPortY
							);
	
			self.previousX = _tcd.character_zone_x - self.offsetX;
			self.previousY = _tcd.character_zone_y - self.offsetY;
	
			//Map.ctx.globalAlpha = 1;
		}
		
		//remove the selectEnemyAnimation
		this.remove = function()
		{
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[0][ this.ID ] = null;
			delete _tc._internal.spellEffects[ this.characterSpellEffectID ];
		}
		
	} //end selectEnemyAnimation

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.shieldArc.js
*/


	spellEffects.shieldArc = function( args )
	{
		this.ID = spellEffects.layer[1].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		this.alpha = 1;
		this.offsetX = 30;
		this.offsetY = 30;
		this.rotation = Math.random() * (Math.PI * 2);
		this.deleteRange = 67;
		this.previousX = args.targetCharacter.characterData.character_zone_x - this.offsetX;
		this.previousY = args.targetCharacter.characterData.character_zone_y - this.offsetY;
		this.duration = 5000;
		
		var self = this;
		
		var shieldArcImageObject = new Image();
		shieldArcImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/shield/shield.png';
		
		var shieldArcSound = soundManager.createSound({
				id: 'shieldArc' + ( ++spellEffects.soundIncrementor ),
				url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/shield.mp3',
				volume: spellEffects.volumeByRange ( Component.bugcraft.currentCharacterObject.characterData.character_zone_x, Component.bugcraft.currentCharacterObject.characterData.character_zone_y, args.targetCharacter.characterData.character_zone_x, args.targetCharacter.characterData.character_zone_y, spellEffects.volumeRangeLong )
		});
		
		this.spellEffectSoundID = args.targetCharacter._internal.soundEffects.push( shieldArcSound ) - 1;
		
		soundManager.play( 'shieldArc' + spellEffects.soundIncrementor, 
										{
											onfinish: function () 
											{
												delete args.targetCharacter._internal.soundEffects[ self.spellEffectSoundID ];	
											}
										});

		//draw the shieldArc
		this.draw = function()
		{
			Map.ctx.globalAlpha = self.alpha;
			
			Map.ctx.save();
			
			Map.ctx.translate( args.targetCharacter.characterData.character_zone_x + Map.viewPortX, args.targetCharacter.characterData.character_zone_y + Map.viewPortY );
			
			Map.ctx.rotate( self.rotation );
			
			Map.ctx.shadowOffsetX = 6;
			Map.ctx.shadowOffsetY = 6;
			Map.ctx.shadowColor   = 'rgba(0, 0, 0, 1)';
			
			Map.ctx.drawImage(
							shieldArcImageObject,
							- self.offsetX,
							- self.offsetX
						);
						
			self.previousX = args.targetCharacter.characterData.character_zone_x - self.offsetX - 6;
			self.previousY = args.targetCharacter.characterData.character_zone_y - self.offsetY - 6;			
			
			Map.ctx.restore();
						
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the shieldArc
		var self = this;
		
		this.remove = function()
		{
			spellEffects.layer[1][ this.ID ] = null;
			clearTimeout( _animateFunctionPointer );
			delete args.targetCharacter._internal.spellEffects[ this.characterSpellEffectID ];
		}
		
		var _animateFunction = function()
												{
													self.rotation += Math.PI / 16;

													_animateFunctionPointer = setTimeout( _animateFunction, 30 );
												}			
												
		var _animateFunctionPointer = setTimeout( _animateFunction, 30 );
		
		setTimeout( function() 
								{ 
									var _t = setInterval( function()
																		{
																			self.alpha -= 0.1;
																			
																			if( self.alpha > 0 )
																			{
																				return;
																			}
																			
																			self.remove();
																			
																			clearInterval( _t );
																			
																		}, 100 );
								}, self.duration );
	} //end arc shield

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.shieldHoney.js
*/


	spellEffects.shieldHoney = function( args )
	{
		this.ID = spellEffects.layer[1].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		this.alpha = 1;
		this.offsetX = 30;
		this.offsetY = 30;
		this.rotation = Math.random() * (Math.PI * 2);
		this.deleteRange = 60;
		this.previousX = args.targetCharacter.characterData.character_zone_x - this.offsetX;
		this.previousY = args.targetCharacter.characterData.character_zone_y - this.offsetY;
		this.duration = 5000;
		
		var self = this;
		
		var shieldHoneyImageObject = new Image();
		shieldHoneyImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/shield/honey_shield2.png';
		
		var shieldHoneySound = soundManager.createSound({
				id: 'shieldHoney' + ( ++spellEffects.soundIncrementor ),
				url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/shield.mp3',
				volume: spellEffects.volumeByRange ( Component.bugcraft.currentCharacterObject.characterData.character_zone_x, Component.bugcraft.currentCharacterObject.characterData.character_zone_y, args.targetCharacter.characterData.character_zone_x, args.targetCharacter.characterData.character_zone_y, spellEffects.volumeRangeLong )
		});
		
		this.spellEffectSoundID = args.targetCharacter._internal.soundEffects.push( shieldHoneySound ) - 1;
		
		soundManager.play( 'shieldHoney' + spellEffects.soundIncrementor, 
										{
											onfinish: function () 
											{
												delete args.targetCharacter._internal.soundEffects[ self.spellEffectSoundID ];	
											}
										});
		
		//draw the shieldHoney
		this.draw = function()
		{
			Map.ctx.globalAlpha = self.alpha;
			
			Map.ctx.save();
			
			Map.ctx.translate( args.targetCharacter.characterData.character_zone_x + Map.viewPortX, args.targetCharacter.characterData.character_zone_y + Map.viewPortY );
			
			Map.ctx.rotate( self.rotation );
			
			Map.ctx.drawImage(
											shieldHoneyImageObject,
											- self.offsetX,
											- self.offsetX
										);
			
			self.previousX = args.targetCharacter.characterData.character_zone_x - self.offsetX - 6;
			self.previousY = args.targetCharacter.characterData.character_zone_y - self.offsetY - 6;
										
			Map.ctx.restore();
			
			Map.ctx.globalAlpha = 1;
			
			
		}
		
		//remove the shieldHoney
		this.remove = function()
		{
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[1][ this.ID ] = null;
			delete args.targetCharacter._internal.spellEffects[ this.characterSpellEffectID ];
		}

		var opacityVariation = 3 * Math.PI / 2;
		
		var _animateFunction =  function()
												{

													self.alpha = Math.abs( Math.sin( opacityVariation ) );

													opacityVariation += Math.PI / 16;
													
													if (self.alpha < 0.5 )
													{
														self.alpha = 0.5;
													}
													
													_animateFunctionPointer = setTimeout( _animateFunction, 75 );
													
												}
						
		var _animateFunctionPointer = setTimeout( _animateFunction, 75 );				
		
		setTimeout( function() 
								{ 
									
									clearTimeout( _animateFunctionPointer );
								
									var _timeout = setInterval( function()
																		{
																			self.alpha -= 0.1;
																			
																			if( self.alpha > 0 )
																			{
																				return;
																			}
																			
																			self.remove();
																			
																			clearInterval( _timeout );
																			
																		}, 100 );
								}, self.duration );
	} //end shieldHoney

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.shieldHoneyBuff.js
*/


	spellEffects.shieldHoneyBuff = function( args )
	{
		this.ID = spellEffects.layer[1].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		this.alpha = 1;
		this.offsetX = 30;
		this.offsetY = 30;
		this.deleteRange = 60;
		this.previousX = args.targetCharacter.characterData.character_zone_x - this.offsetX;
		this.previousY = args.targetCharacter.characterData.character_zone_y - this.offsetY;
		this.roation = 0;
		this.duration = 60000 - Component.bugcraft.latency;
		
		var self = this;
		
		var shieldHoneyBuffImageObject = new Image();
		shieldHoneyBuffImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/shield/honeyBuff/honey_buff0.png';
		
		var shieldHoneyBuffSound = soundManager.createSound({
				id: 'shieldHoneyBuff' + ( ++spellEffects.soundIncrementor ),
				url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/magic/magic_impact.mp3', 
				volume: spellEffects.volumeByRange ( Component.bugcraft.currentCharacterObject.characterData.character_zone_x, Component.bugcraft.currentCharacterObject.characterData.character_zone_y, args.targetCharacter.characterData.character_zone_x, args.targetCharacter.characterData.character_zone_y, spellEffects.volumeRangeLong )
		});
		
		this.spellEffectSoundID = args.targetCharacter._internal.soundEffects.push( shieldHoneyBuffSound ) - 1;
		
		soundManager.play( 'shieldHoneyBuff' + spellEffects.soundIncrementor, 
										{
											onfinish: function () 
											{
												delete args.targetCharacter._internal.soundEffects[ self.spellEffectSoundID ];	
											}
										});
		
		//draw the shieldHoneyBuff
		this.draw = function()
		{
			Map.ctx.globalAlpha = self.alpha;
			
			Map.ctx.save();
			
			Map.ctx.translate( args.targetCharacter.characterData.character_zone_x + Map.viewPortX, args.targetCharacter.characterData.character_zone_y + Map.viewPortY );
			
			Map.ctx.rotate( self.rotation );
			
			Map.ctx.drawImage(
							shieldHoneyBuffImageObject,
							- self.offsetX,
							- self.offsetY
						);
			
			self.previousX = args.targetCharacter.characterData.character_zone_x - this.offsetX;
			self.previousY = args.targetCharacter.characterData.character_zone_y - this.offsetY; 
						
			Map.ctx.restore();
						
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the shieldHoneyBuff
		this.remove = function()
		{
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[1][ this.ID ] = null;
			delete args.targetCharacter._internal.spellEffects[ this.characterSpellEffectID ];
		}
							
		var _animateFunction =  function()
											{
												//self.rotation += Math.PI / 16;
												
												shieldHoneyBuffImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/shield/honeyBuff/honey_buff' + Math.floor( Math.random() * 4 ) + '.png';
												
												_animateFunctionPointer = setTimeout( _animateFunction, 60 );
											}
		var _animateFunctionPointer = setTimeout( _animateFunction, 60 );
		
		setTimeout( function() 
								{ 
									clearTimeout( _animateFunctionPointer );
									var _t = setInterval( function()
																		{
																			self.alpha -= 0.1;
																			
																			if( self.alpha > 0 )
																			{
																				return;
																			}
																			
																			self.remove();
																			
																			clearInterval( _t );
																			
																		}, 100 );
								}, self.duration );
	} //end shieldHoneyBuff

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.shieldMagic.js
*/


	spellEffects.shieldMagic = function( args )
	{
		this.ID = spellEffects.layer[1].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		this.alpha = 1;
		this.offsetX = 40;
		this.offsetY = 40;
		this.rotation = Math.random() * (Math.PI * 2);
		this.deleteRange = 80;
		this.previousX = args.targetCharacter.characterData.character_zone_x - this.offsetX;
		this.previousY = args.targetCharacter.characterData.character_zone_y - this.offsetY;
		this.duration = 12000 - Component.bugcraft.latency;
		
		var self = this;
		
		var shieldMagicImageObject = new Image();
		shieldMagicImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/shield/magic/magic_shield' + args.component + '.png';
		
		//draw the shieldMagic
		this.draw = function()
		{
			Map.ctx.globalAlpha = self.alpha;
			
			Map.ctx.save();
			
			Map.ctx.translate( args.targetCharacter.characterData.character_zone_x + Map.viewPortX, args.targetCharacter.characterData.character_zone_y + Map.viewPortY );
			
			Map.ctx.rotate( self.rotation );
			
			Map.ctx.drawImage(
											shieldMagicImageObject,
											- self.offsetX,
											- self.offsetY
										);
	
			self.previousX = args.targetCharacter.characterData.character_zone_x - self.offsetX;
			self.previousY = args.targetCharacter.characterData.character_zone_y - self.offsetY;
	
			Map.ctx.restore();
			
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the shieldMagic
		this.remove = function()
		{
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[1][ this.ID ] = null;
			delete args.targetCharacter._internal.spellEffects[ this.characterSpellEffectID ];
		}
		
		
		
		switch( args.component )
		{
			case 0:	
				self.alpha = 0;
				
				var shieldMagicSound = soundManager.createSound({
						id: 'shieldMagic' + ( ++spellEffects.soundIncrementor ),
						url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/heal/ELECTRONIC.mp3',
						volume: spellEffects.volumeByRange ( Component.bugcraft.currentCharacterObject.characterData.character_zone_x, Component.bugcraft.currentCharacterObject.characterData.character_zone_y, args.targetCharacter.characterData.character_zone_x, args.targetCharacter.characterData.character_zone_y, spellEffects.volumeRangeLong )
				});
				
				this.spellEffectSoundID = args.targetCharacter._internal.soundEffects.push( shieldMagicSound ) - 1;
				
				soundManager.play( 'shieldMagic' + spellEffects.soundIncrementor, 
												{
													onfinish: function () 
													{
														delete args.targetCharacter._internal.soundEffects[ self.spellEffectSoundID ];	
													}
												});
				
				var _animateFunction =	function()
																	{
																		if( self.alpha < 1 )
																		{
																			self.alpha += 0.1;
																		}
																		
																		self.rotation += Math.PI / 16;
			
																		_animateFunctionPointer = setTimeout( _animateFunction, 50 );
																	}			
			break;
			case 1:
				self.alpha = 0;
				var _animateFunction =	function()
																	{
																		if( self.alpha < 1 )
																		{
																			self.alpha += 0.1;
																		}
																		
																		self.rotation -= Math.PI / 16;

																		_animateFunctionPointer = setTimeout( _animateFunction, 50 );
																	}						
			break;
			case 3:
				self.alpha = 0;
				var _animateFunction =	function()
																	{
																		if( self.alpha < 1 )
																		{
																			self.alpha += 0.1;
																		}

																		_animateFunctionPointer = setTimeout( _animateFunction, 50 );
																	}						
			break;
			case 4:
				self.alpha = 0;
				var _animateFunction =	function()
																	{
																		if( self.alpha < 1 )
																		{
																			self.alpha += 0.1;
																		}

																		self.rotation += Math.PI / 64;

																		_animateFunctionPointer = setTimeout( _animateFunction, 50 );
																	}						
			break;
			case 5:
				self.alpha = 0;
				var _animateFunction =	function()
																	{
																		if( self.alpha < 1 )
																		{
																			self.alpha += 0.1;
																		}

																		self.rotation -= Math.PI / 64;

																		_animateFunctionPointer = setTimeout( _animateFunction, 50 );
																	}						
			break;
		}
		
		var _animateFunctionPointer = setTimeout( _animateFunction, 50 );
		
		setTimeout( function() 
								{ 
									clearTimeout( _animateFunctionPointer );
									
									var _t = setInterval( function()
																		{
																			self.alpha -= 0.1;
																			
																			if( self.alpha > 0 )
																			{
																				return;
																			}
																			
																			self.remove();
																			
																			clearInterval( _t );
																			
																		}, 40 );
								}, self.duration );
	} //end spinning aura

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.shieldMagicComplete.js
*/


	spellEffects.shieldMagicComplete = function( args )
	{
		this.ID = spellEffects.layer[1].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		
		this.draw = function()
		{
			
		}
		
		var effect0 = new spellEffects.shieldMagic({ 			
				sourceCharacter: args.sourceCharacter,														
				targetCharacter: args.targetCharacter,
				component: 0
		});
		
		var effect1 = new spellEffects.shieldMagic({ 																						
				sourceCharacter: args.sourceCharacter,
				targetCharacter: args.targetCharacter,
				component: 1
		});
		
		var effect3 = new spellEffects.shieldMagic({ 			
				sourceCharacter: args.sourceCharacter,														
				targetCharacter: args.targetCharacter,
				component: 3
		});
		var effect4 = new spellEffects.shieldMagic({ 			
				sourceCharacter: args.sourceCharacter,														
				targetCharacter: args.targetCharacter,
				component: 4
		});
		var effect5 = new spellEffects.shieldMagic({ 			
				sourceCharacter: args.sourceCharacter,														
				targetCharacter: args.targetCharacter,
				component: 5
		});
		
		this.remove = function()
		{
			effect0.remove();
			effect1.remove();
			effect3.remove();
			effect4.remove();
			effect5.remove();
			
			spellEffects.layer[1][ self.ID ] = null;
				
			delete args.targetCharacter._internal.spellEffects[ self.characterSpellEffectID ];
		}
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.shieldWater.js
*/


	spellEffects.shieldWater = function( args )
	{
		this.ID = spellEffects.layer[1].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		this.alpha = 1;
		this.offsetX = 30;
		this.offsetY = 30;
		this.rotation = Math.random() * (Math.PI * 2);
		this.deleteRange = 67;
		this.previousX = args.targetCharacter.characterData.character_zone_x - this.offsetX;
		this.previousY = args.targetCharacter.characterData.character_zone_y - this.offsetY;
		this.duration = 20000 - Component.bugcraft.latency;
		
		var self = this;
		
		var shieldWaterImageObject = new Image();
		shieldWaterImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/shield/water_shield.png';
		
		var shieldWaterSound = soundManager.createSound({
				id: 'shieldWater' + ( ++spellEffects.soundIncrementor ),
				url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/waterShield.mp3',
				volume: spellEffects.volumeByRange ( Component.bugcraft.currentCharacterObject.characterData.character_zone_x, Component.bugcraft.currentCharacterObject.characterData.character_zone_y, args.targetCharacter.characterData.character_zone_x, args.targetCharacter.characterData.character_zone_y, spellEffects.volumeRangeLong )
		});
		
		this.spellEffectSoundID = args.targetCharacter._internal.soundEffects.push( shieldWaterSound ) - 1;
		
		soundManager.play( 'shieldWater' + spellEffects.soundIncrementor, 
										{
											onfinish: function () 
											{
												delete args.targetCharacter._internal.soundEffects[ self.spellEffectSoundID ];	
											}
										});

		//draw the shieldWater
		this.draw = function()
		{
			Map.ctx.globalAlpha = self.alpha;
			
			Map.ctx.save();
			
			Map.ctx.translate( args.targetCharacter.characterData.character_zone_x + Map.viewPortX, args.targetCharacter.characterData.character_zone_y + Map.viewPortY );
			
			Map.ctx.rotate( self.rotation );
			
			Map.ctx.shadowOffsetX = 6;
			Map.ctx.shadowOffsetY = 6;
			//Map.ctx.shadowBlur    = 4;
			Map.ctx.shadowColor   = 'rgba(0, 0, 0, 0.75)';
			
			Map.ctx.drawImage(
											shieldWaterImageObject,
											- self.offsetX,
											- self.offsetY
										);
										
			self.previousX = args.targetCharacter.characterData.character_zone_x - self.offsetX;
			self.previousY = args.targetCharacter.characterData.character_zone_y - self.offsetY;
	
			Map.ctx.restore();
			
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the shieldWater
		this.remove = function()
		{
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[1][ this.ID ] = null;
			delete args.targetCharacter._internal.spellEffects[ this.characterSpellEffectID ];
		}

		var _animateFunction =	function()
															{
																self.rotation += Math.PI / 32;

																setTimeout( _animateFunction, 30 );
															}			
		_animateFunction();
		
		setTimeout( function() 
								{ 
									var _t = setInterval( function()
																		{
																			self.alpha -= 0.1;
																			
																			if( self.alpha > 0 )
																			{
																				return;
																			}
																			
																			self.remove();
																			
																			clearInterval( _t );
																			
																		}, 200 );
								}, self.duration );
	} //end water shield

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.shieldWater130.js
*/


	spellEffects.shieldWater130 = function( args )
	{
		this.ID = spellEffects.layer[1].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		this.alpha = 1;
		this.offsetX = 30;
		this.offsetY = 30;
		this.rotation = Math.random() * (Math.PI * 2);
		this.deleteRange = 67;
		this.previousX = args.targetCharacter.characterData.character_zone_x - this.offsetX;
		this.previousY = args.targetCharacter.characterData.character_zone_y - this.offsetY;
		this.duration = 30000 - Component.bugcraft.latency;
		
		var self = this;
		
		var shieldWater130ImageObject = new Image();
		shieldWater130ImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/shield/water_shield.png';
		
		var shieldWater130Sound = soundManager.createSound({
				id: 'shieldWater130' + ( ++spellEffects.soundIncrementor ),
				url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/waterShield.mp3',
				volume: spellEffects.volumeByRange ( Component.bugcraft.currentCharacterObject.characterData.character_zone_x, Component.bugcraft.currentCharacterObject.characterData.character_zone_y, args.targetCharacter.characterData.character_zone_x, args.targetCharacter.characterData.character_zone_y, spellEffects.volumeRangeLong )
		});
		
		this.spellEffectSoundID = args.targetCharacter._internal.soundEffects.push( shieldWater130Sound ) - 1;
		
		soundManager.play( 'shieldWater130' + spellEffects.soundIncrementor, 
										{
											onfinish: function () 
											{
												delete args.targetCharacter._internal.soundEffects[ self.spellEffectSoundID ];	
											}
										});

		//draw the shieldWater130
		this.draw = function()
		{
			Map.ctx.globalAlpha = self.alpha;
			
			Map.ctx.save();
			
			Map.ctx.translate( args.targetCharacter.characterData.character_zone_x + Map.viewPortX, args.targetCharacter.characterData.character_zone_y + Map.viewPortY );
			
			Map.ctx.rotate( self.rotation );
			
			Map.ctx.shadowOffsetX = 6;
			Map.ctx.shadowOffsetY = 6;
			//Map.ctx.shadowBlur    = 4;
			Map.ctx.shadowColor   = 'rgba(0, 0, 0, 0.75)';
			
			Map.ctx.drawImage(
											shieldWater130ImageObject,
											- self.offsetX,
											- self.offsetY
										);
										
			self.previousX = args.targetCharacter.characterData.character_zone_x - self.offsetX;
			self.previousY = args.targetCharacter.characterData.character_zone_y - self.offsetY;
	
			Map.ctx.restore();
			
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the shieldWater130
		this.remove = function()
		{
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[1][ this.ID ] = null;
			delete args.targetCharacter._internal.spellEffects[ this.characterSpellEffectID ];
		}

		var _animateFunction =	function()
															{
																self.rotation += Math.PI / 32;

																setTimeout( _animateFunction, 30 );
															}			
		_animateFunction();
		
		setTimeout( function() 
								{ 
									var _t = setInterval( function()
																		{
																			self.alpha -= 0.1;
																			
																			if( self.alpha > 0 )
																			{
																				return;
																			}
																			
																			self.remove();
																			
																			clearInterval( _t );
																			
																		}, 200 );
								}, self.duration );
	} //end water shield

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.shockwave.js
*/


	spellEffects.shockwave = function( args )
	{
		this.ID = spellEffects.layer[0].push( this ) - 1;
		this.alpha = 1;
		this.offsetX = 30;
		this.offsetY = 30;
		this.deleteRange = 60;
		this.previousX = args.targetCharacter.characterData.character_zone_x - this.offsetX;
		this.previousY = args.targetCharacter.characterData.character_zone_y - this.offsetY;
		
		var self = this;
		
		var shockwaveImageObject = new Image();
		shockwaveImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/shockwaves/shockwavesconc1.png';
		
		//draw the shockwave
		this.draw = function()
		{
			Map.ctx.globalAlpha = self.alpha;
			
			Map.ctx.drawImage(
							shockwaveImageObject,
							args.targetCharacter.characterData.character_zone_x - self.offsetX + Map.viewPortX,
							args.targetCharacter.characterData.character_zone_y + self.offsetY + Map.viewPortY
						);
						
			self.previousX = args.targetCharacter.characterData.character_zone_x - self.offsetX;
			self.previousY = args.targetCharacter.characterData.character_zone_y - self.offsetY;
						
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the shockwaves
		this.remove = function()
		{
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[0][ this.ID ] = null;
		}
		
		setTimeout( function()
							{
								shockwaveImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/shockwaves/shockwavesconc2.png';
								
								setTimeout( function()
													{
														shockwaveImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/shockwaves/shockwavesconc3.png';
														
														setTimeout( function()
																			{
																				shockwaveImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/shockwaves/shockwavesconc4.png';
																				
																				setTimeout( function()
																									{
																										shockwaveImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/shockwaves/shockwavesconc5.png';
																										
																										var _t = setInterval( function()
																															{
																																self.alpha -= 0.1;
																																
																																if( self.alpha > 0 )
																																{
																																	return;
																																}
																																
																																self.remove();
																																
																																clearInterval( _t );
																																
																															}, 20 );
																									}, 20 );
																			}, 20 );						
													}, 20 );
							}, 20 );
	} //end shockwave

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.slash.js
*/


	spellEffects.slash = function( args )
	{
		this.ID = spellEffects.layer[1].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		this.alpha = 1;
		this.rotation = Math.random() * (Math.PI * 2);
		this.offsetX = 50;
		this.offsetY = 30;
		this.deleteRange = 100;
		this.previousX = args.targetCharacter.characterData.character_zone_x - this.offsetX;
		this.previousY = args.targetCharacter.characterData.character_zone_y - this.offsetY - 20;
		
		var self = this;
		
		var slashImageObject = new Image();
		slashImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/slash/slash1.png';
		
		var slashSound = soundManager.createSound({
				id: 'slash' + ( ++spellEffects.soundIncrementor ),
				url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/slash/swosh_0' + Math.floor( Math.random() * 9 ) + '.mp3',
				volume: spellEffects.volumeByRange ( Component.bugcraft.currentCharacterObject.characterData.character_zone_x, Component.bugcraft.currentCharacterObject.characterData.character_zone_y, args.targetCharacter.characterData.character_zone_x, args.targetCharacter.characterData.character_zone_y, spellEffects.volumeRangeLong )
		});
		
		this.spellEffectSoundID = args.targetCharacter._internal.soundEffects.push( slashSound ) - 1;
		
		soundManager.play( 'slash' + spellEffects.soundIncrementor, 
										{
											onfinish: function () 
											{
												delete args.targetCharacter._internal.soundEffects[ self.spellEffectSoundID ];	
											}
										});
		
		//draw the slash effect
		this.draw = function()
		{
			Map.ctx.globalAlpha = self.alpha;
			
			Map.ctx.save();
			
			Map.ctx.translate( args.targetCharacter.characterData.character_zone_x + Map.viewPortX, args.targetCharacter.characterData.character_zone_y + Map.viewPortY );
			
			Map.ctx.rotate( self.rotation );
			
			Map.ctx.drawImage(
											slashImageObject,
											- self.offsetX,
											- self.offsetY
										);
			
			self.previousX = args.targetCharacter.characterData.character_zone_x - self.offsetX;
			self.previousY = args.targetCharacter.characterData.character_zone_y - self.offsetY - 20;
										
			Map.ctx.restore();
			
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the slash effect
		this.remove = function()
		{
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[1][ this.ID ] = null;
			delete args.targetCharacter._internal.spellEffects[ this.characterSpellEffectID ];
		}

		setTimeout( function()
							{
								slashImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/slash/slash22.png';
								
								setTimeout( function()
													{
														slashImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/slash/slash3.png';
														
														var _t = setInterval( function()
																			{
																				self.alpha -= 0.1;
																				
																				if( self.alpha > 0 )
																				{
																					return;
																				}
																				
																				self.remove();
																				
																				clearInterval( _t );
																				
																			}, 20 );
														
													}, 100 );
							}, 100 );
							
	} //end slash effect

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.slash89.js
*/


	spellEffects.slash89 = function( args )
	{
		this.ID = spellEffects.layer[1].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		this.alpha = 1;
		this.rotation = Math.random() * (Math.PI * 2);
		this.offsetX = 50;
		this.offsetY = 30;
		this.deleteRange = 100;
		this.previousX = args.targetCharacter.characterData.character_zone_x - this.offsetX;
		this.previousY = args.targetCharacter.characterData.character_zone_y - this.offsetY - 20;
		
		var self = this;
		
		var slashImageObject = new Image();
		slashImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/slash/slash1.png';
		
		var slashSound = soundManager.createSound({
				id: 'slash' + ( ++spellEffects.soundIncrementor ),
				url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/slash/swosh_0' + Math.floor( Math.random() * 9 ) + '.mp3',
				volume: spellEffects.volumeByRange ( Component.bugcraft.currentCharacterObject.characterData.character_zone_x, Component.bugcraft.currentCharacterObject.characterData.character_zone_y, args.targetCharacter.characterData.character_zone_x, args.targetCharacter.characterData.character_zone_y, spellEffects.volumeRangeLong )
		});
		
		this.spellEffectSoundID = args.targetCharacter._internal.soundEffects.push( slashSound ) - 1;
		
		soundManager.play( 'slash' + spellEffects.soundIncrementor, 
										{
											onfinish: function () 
											{
												delete args.targetCharacter._internal.soundEffects[ self.spellEffectSoundID ];	
											}
										});
										
		var hitShineSound = soundManager.createSound({
				id: 'hitShine' + ( ++spellEffects.soundIncrementor ),
				url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/bolt/woosh.mp3', 
				volume: spellEffects.volumeByRange ( Component.bugcraft.currentCharacterObject.characterData.character_zone_x, Component.bugcraft.currentCharacterObject.characterData.character_zone_y, args.targetCharacter.characterData.character_zone_x, args.targetCharacter.characterData.character_zone_y, spellEffects.volumeRangeLong )
		});
		
		this.spellEffectSoundID = args.targetCharacter._internal.soundEffects.push( hitShineSound ) - 1;
		
		
		setTimeout( function() {
											soundManager.play( 'hitShine' + spellEffects.soundIncrementor, 
																			{
																				onfinish: function () 
																				{
																					delete args.targetCharacter._internal.soundEffects[ self.spellEffectSoundID ];	
																				}
																			});
											}, 200);
		//draw the slash effect
		this.draw = function()
		{
			Map.ctx.globalAlpha = self.alpha;
			
			Map.ctx.save();
			
			Map.ctx.translate( args.targetCharacter.characterData.character_zone_x + Map.viewPortX, args.targetCharacter.characterData.character_zone_y + Map.viewPortY );
			
			Map.ctx.rotate( self.rotation );
			
			Map.ctx.drawImage(
											slashImageObject,
											- self.offsetX,
											- self.offsetY
										);
			
			self.previousX = args.targetCharacter.characterData.character_zone_x - self.offsetX;
			self.previousY = args.targetCharacter.characterData.character_zone_y - self.offsetY - 20;
										
			Map.ctx.restore();
			
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the slash effect
		this.remove = function()
		{
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[1][ this.ID ] = null;
			delete args.targetCharacter._internal.spellEffects[ this.characterSpellEffectID ];
		}

		setTimeout( function()
							{
								slashImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/slash/slash22.png';
								
								setTimeout( function()
													{
														slashImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/slash/slash3.png';
														
														var _t = setInterval( function()
																			{
																				self.alpha -= 0.1;
																				
																				if( self.alpha > 0 )
																				{
																					return;
																				}
																				
																				self.remove();
																				
																				clearInterval( _t );
																				
																			}, 20 );
														
													}, 100 );
							}, 100 );
							
	} //end slash effect

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.slashAmber.js
*/


	spellEffects.slashAmber = function( args )
	{
		this.ID = spellEffects.layer[1].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		this.alpha = 1;
		this.rotation = Math.random() * (Math.PI * 2);
		this.offsetX = 50;
		this.offsetY = 30;
		this.deleteRange = 100;
		this.previousX = args.targetCharacter.characterData.character_zone_x - this.offsetX;
		this.previousY = args.targetCharacter.characterData.character_zone_y - this.offsetY - 20;
		
		var self = this;
		
		var slashAmberImageObject = new Image();
		slashAmberImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/slash/amber/slashamber0.png';
		
		var slashAmberSound = soundManager.createSound({
				id: 'slashAmber' + ( ++spellEffects.soundIncrementor ),
				url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/slash/swosh_0' + Math.floor( Math.random() * 9 ) + '.mp3',
				volume: spellEffects.volumeByRange ( Component.bugcraft.currentCharacterObject.characterData.character_zone_x, Component.bugcraft.currentCharacterObject.characterData.character_zone_y, args.targetCharacter.characterData.character_zone_x, args.targetCharacter.characterData.character_zone_y, spellEffects.volumeRangeLong )
		});
		
		this.spellEffectSoundID = args.targetCharacter._internal.soundEffects.push( slashAmberSound ) - 1;
		
		soundManager.play( 'slashAmber' + spellEffects.soundIncrementor, 
										{
											onfinish: function () 
											{
												delete args.targetCharacter._internal.soundEffects[ self.spellEffectSoundID ];	
											}
										});
		
		//draw the slashAmber effect
		this.draw = function()
		{
			Map.ctx.globalAlpha = self.alpha;
			
			Map.ctx.save();
			
			Map.ctx.translate( args.targetCharacter.characterData.character_zone_x + Map.viewPortX, args.targetCharacter.characterData.character_zone_y + Map.viewPortY );
			
			Map.ctx.rotate( self.rotation );
			
			Map.ctx.drawImage(
											slashAmberImageObject,
											- self.offsetX,
											- self.offsetY
										);
			
			self.previousX = args.targetCharacter.characterData.character_zone_x - self.offsetX;
			self.previousY = args.targetCharacter.characterData.character_zone_y - self.offsetY - 20;
										
			Map.ctx.restore();
			
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the slashAmber effect
		this.remove = function()
		{
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[1][ this.ID ] = null;
			delete args.targetCharacter._internal.spellEffects[ this.characterSpellEffectID ];
		}

		setTimeout( function()
							{
								slashAmberImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/slash/amber/slashamber1.png';
								
								setTimeout( function()
													{
														slashAmberImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/slash/amber/slashamber2.png';
														
														var _t = setInterval( function()
																			{
																				self.alpha -= 0.1;
																				
																				if( self.alpha > 0 )
																				{
																					return;
																				}
																				
																				self.remove();
																				
																				clearInterval( _t );
																				
																			}, 20 );
														
													}, 100 );
							}, 100 );
							
	} //end slashAmber effect

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.slashAmber116.js
*/


	spellEffects.slashAmber116 = function( args )
	{
		this.ID = spellEffects.layer[1].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		this.alpha = 1;
		this.rotation = Math.random() * (Math.PI * 2);
		this.offsetX = 50;
		this.offsetY = 30;
		this.deleteRange = 100;
		this.previousX = args.targetCharacter.characterData.character_zone_x - this.offsetX;
		this.previousY = args.targetCharacter.characterData.character_zone_y - this.offsetY - 20;
		
		var self = this;
		
		var slashAmberImageObject = new Image();
		slashAmberImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/slash/amber/slashamber0.png';
		
		var slashAmberSound = soundManager.createSound({
				id: 'slashAmber' + ( ++spellEffects.soundIncrementor ),
				url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/slash/swosh_0' + Math.floor( Math.random() * 9 ) + '.mp3',
				volume: spellEffects.volumeByRange ( Component.bugcraft.currentCharacterObject.characterData.character_zone_x, Component.bugcraft.currentCharacterObject.characterData.character_zone_y, args.targetCharacter.characterData.character_zone_x, args.targetCharacter.characterData.character_zone_y, spellEffects.volumeRangeLong )
		});
		
		this.spellEffectSoundID = args.targetCharacter._internal.soundEffects.push( slashAmberSound ) - 1;
		
		soundManager.play( 'slashAmber' + spellEffects.soundIncrementor, 
										{
											onfinish: function () 
											{
												delete args.targetCharacter._internal.soundEffects[ self.spellEffectSoundID ];	
											}
										});
		
		var hitShineSound = soundManager.createSound({
				id: 'hitShine' + ( ++spellEffects.soundIncrementor ),
				url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/bolt/woosh.mp3', 
				volume: spellEffects.volumeByRange ( Component.bugcraft.currentCharacterObject.characterData.character_zone_x, Component.bugcraft.currentCharacterObject.characterData.character_zone_y, args.targetCharacter.characterData.character_zone_x, args.targetCharacter.characterData.character_zone_y, spellEffects.volumeRangeLong )
		});
		
		this.spellEffectSoundID = args.targetCharacter._internal.soundEffects.push( hitShineSound ) - 1;
		
		
		setTimeout( function() {
											soundManager.play( 'hitShine' + spellEffects.soundIncrementor, 
																			{
																				onfinish: function () 
																				{
																					delete args.targetCharacter._internal.soundEffects[ self.spellEffectSoundID ];	
																				}
																			});
											}, 200);
		
		//draw the slashAmber effect
		this.draw = function()
		{
			Map.ctx.globalAlpha = self.alpha;
			
			Map.ctx.save();
			
			Map.ctx.translate( args.targetCharacter.characterData.character_zone_x + Map.viewPortX, args.targetCharacter.characterData.character_zone_y + Map.viewPortY );
			
			Map.ctx.rotate( self.rotation );
			
			Map.ctx.drawImage(
											slashAmberImageObject,
											- self.offsetX,
											- self.offsetY
										);
			
			self.previousX = args.targetCharacter.characterData.character_zone_x - self.offsetX;
			self.previousY = args.targetCharacter.characterData.character_zone_y - self.offsetY - 20;
										
			Map.ctx.restore();
			
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the slashAmber effect
		this.remove = function()
		{
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[1][ this.ID ] = null;
			delete args.targetCharacter._internal.spellEffects[ this.characterSpellEffectID ];
		}

		setTimeout( function()
							{
								slashAmberImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/slash/amber/slashamber1.png';
								
								setTimeout( function()
													{
														slashAmberImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/slash/amber/slashamber2.png';
														
														var _t = setInterval( function()
																			{
																				self.alpha -= 0.1;
																				
																				if( self.alpha > 0 )
																				{
																					return;
																				}
																				
																				self.remove();
																				
																				clearInterval( _t );
																				
																			}, 20 );
														
													}, 100 );
							}, 100 );
							
	} //end slashAmber effect

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.slashAmber72.js
*/


	spellEffects.slashAmber72 = function( args )
	{
		this.ID = spellEffects.layer[1].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		this.alpha = 1;
		this.rotation = Math.random() * (Math.PI * 2);
		this.offsetX = 50;
		this.offsetY = 30;
		this.deleteRange = 100;
		this.previousX = args.targetCharacter.characterData.character_zone_x - this.offsetX;
		this.previousY = args.targetCharacter.characterData.character_zone_y - this.offsetY - 20;
		
		var self = this;
		
		var slashAmberImageObject = new Image();
		slashAmberImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/slash/amber/slashamber0.png';
		
		var slashAmberSound = soundManager.createSound({
				id: 'slashAmber' + ( ++spellEffects.soundIncrementor ),
				url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/punch/punch' + Math.floor( Math.random() * 3 ) + '.mp3',
				volume: spellEffects.volumeByRange ( Component.bugcraft.currentCharacterObject.characterData.character_zone_x, Component.bugcraft.currentCharacterObject.characterData.character_zone_y, args.targetCharacter.characterData.character_zone_x, args.targetCharacter.characterData.character_zone_y, spellEffects.volumeRangeLong )
		});
		
		this.spellEffectSoundID = args.targetCharacter._internal.soundEffects.push( slashAmberSound ) - 1;
		
		soundManager.play( 'slashAmber' + spellEffects.soundIncrementor, 
										{
											onfinish: function () 
											{
												delete args.targetCharacter._internal.soundEffects[ self.spellEffectSoundID ];	
											}
										});
		
		//draw the slashAmber effect
		this.draw = function()
		{
			Map.ctx.globalAlpha = self.alpha;
			
			Map.ctx.save();
			
			Map.ctx.translate( args.targetCharacter.characterData.character_zone_x + Map.viewPortX, args.targetCharacter.characterData.character_zone_y + Map.viewPortY );
			
			Map.ctx.rotate( self.rotation );
			
			Map.ctx.drawImage(
											slashAmberImageObject,
											- self.offsetX,
											- self.offsetY
										);
			
			self.previousX = args.targetCharacter.characterData.character_zone_x - self.offsetX;
			self.previousY = args.targetCharacter.characterData.character_zone_y - self.offsetY - 20;
										
			Map.ctx.restore();
			
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the slashAmber effect
		this.remove = function()
		{
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[1][ this.ID ] = null;
			delete args.targetCharacter._internal.spellEffects[ this.characterSpellEffectID ];
		}

		setTimeout( function()
							{
								slashAmberImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/slash/amber/slashamber1.png';
								
								setTimeout( function()
													{
														slashAmberImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/slash/amber/slashamber2.png';
														
														var _t = setInterval( function()
																			{
																				self.alpha -= 0.1;
																				
																				if( self.alpha > 0 )
																				{
																					return;
																				}
																				
																				self.remove();
																				
																				clearInterval( _t );
																				
																			}, 20 );
														
													}, 100 );
							}, 100 );
							
	} //end slashAmber effect

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.slashDouble.js
*/


	spellEffects.slashDouble = function( args )
	{
		this.ID = spellEffects.layer[1].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		this.alpha = 1;
		this.offsetX = 30;
		this.offsetY = 30;
		this.rotation = Math.random() * (Math.PI / 2);
		this.deleteRange = 60;
		this.previousX = args.targetCharacter.characterData.character_zone_x - this.offsetX;
		this.previousY = args.targetCharacter.characterData.character_zone_y - this.offsetY;
		
		var self = this;
		
		var slashDoubleImageObject = new Image();
		slashDoubleImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/slash/double/J_slash_double0.png';
		
		var slashDoubleSound = soundManager.createSound({
				id: 'slashDouble' + ( ++spellEffects.soundIncrementor ),
				url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/slash/flesh sword slash 0' + ( Math.floor( Math.random() * 3 ) + 1 ) + '.mp3',
				volume: spellEffects.volumeByRange ( Component.bugcraft.currentCharacterObject.characterData.character_zone_x, Component.bugcraft.currentCharacterObject.characterData.character_zone_y, args.targetCharacter.characterData.character_zone_x, args.targetCharacter.characterData.character_zone_y, spellEffects.volumeRangeLong )
		});
		
		this.spellEffectSoundID = args.targetCharacter._internal.soundEffects.push( slashDoubleSound ) - 1;
		
		soundManager.play( 'slashDouble' + spellEffects.soundIncrementor, 
										{
											onfinish: function () 
											{
												delete args.targetCharacter._internal.soundEffects[ self.spellEffectSoundID ];	
											}
										});
		
		//draw the slashDouble effect
		this.draw = function()
		{
			Map.ctx.globalAlpha = self.alpha;
			
			Map.ctx.save();
			
			Map.ctx.translate( args.targetCharacter.characterData.character_zone_x + Map.viewPortX, args.targetCharacter.characterData.character_zone_y + Map.viewPortY );
			
			Map.ctx.rotate( self.rotation );
			
			Map.ctx.drawImage(
							slashDoubleImageObject,
							- self.offsetX,
							- self.offsetY
						);
			
			self.previousX = args.targetCharacter.characterData.character_zone_x - self.offsetX;
			self.previousY = args.targetCharacter.characterData.character_zone_y - self.offsetY;
			
			Map.ctx.restore();
						
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the slashDouble effect
		this.remove = function()
		{
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[1][ this.ID ] = null;
			delete args.targetCharacter._internal.spellEffects[ this.characterSpellEffectID ];
		}

		setTimeout( function()
							{
								slashDoubleImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/slash/double/J_slash_double1.png';
								
								setTimeout( function()
													{
														slashDoubleImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/slash/double/J_slash_double2.png';
														
														var _t = setInterval( function()
																			{
																				self.alpha -= 0.1;
																				
																				if( self.alpha > 0 )
																				{
																					return;
																				}
																				
																				self.remove();
																				
																				clearInterval( _t );
																				
																			}, 20 );
														
													}, 60 );
							}, 60 );
							
	} //end slashDouble effect

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.slashFuchsia.js
*/


	spellEffects.slashFuchsia = function( args )
	{
		this.ID = spellEffects.layer[1].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		this.alpha = 1;
		this.rotation = Math.random() * (Math.PI * 2);
		this.offsetX = 50;
		this.offsetY = 30;
		this.deleteRange = 100;
		this.previousX = args.targetCharacter.characterData.character_zone_x - this.offsetX;
		this.previousY = args.targetCharacter.characterData.character_zone_y - this.offsetY - 20;
		
		var self = this;
		
		var slashFuchsiaImageObject = new Image();
		slashFuchsiaImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/slash/fuchsia/slashdarkfuchsia0.png';
		
		var slashFuchsiaSound = soundManager.createSound({
				id: 'slashFuchsia' + ( ++spellEffects.soundIncrementor ),
				url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/slash/swosh_0' + Math.floor( Math.random() * 9 ) + '.mp3',
				volume: spellEffects.volumeByRange ( Component.bugcraft.currentCharacterObject.characterData.character_zone_x, Component.bugcraft.currentCharacterObject.characterData.character_zone_y, args.targetCharacter.characterData.character_zone_x, args.targetCharacter.characterData.character_zone_y, spellEffects.volumeRangeLong )
		});
		
		this.spellEffectSoundID = args.targetCharacter._internal.soundEffects.push( slashFuchsiaSound ) - 1;
		
		soundManager.play( 'slashFuchsia' + spellEffects.soundIncrementor, 
										{
											onfinish: function () 
											{
												delete args.targetCharacter._internal.soundEffects[ self.spellEffectSoundID ];	
											}
										});
		
		//draw the slashFuchsia effect
		this.draw = function()
		{
			Map.ctx.globalAlpha = self.alpha;
			
			Map.ctx.save();
			
			Map.ctx.translate( args.targetCharacter.characterData.character_zone_x + Map.viewPortX, args.targetCharacter.characterData.character_zone_y + Map.viewPortY );
			
			Map.ctx.rotate( self.rotation );
			
			Map.ctx.drawImage(
											slashFuchsiaImageObject,
											- self.offsetX,
											- self.offsetY
										);
			
			self.previousX = args.targetCharacter.characterData.character_zone_x - self.offsetX;
			self.previousY = args.targetCharacter.characterData.character_zone_y - self.offsetY - 20;
										
			Map.ctx.restore();
			
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the slashFuchsia effect
		this.remove = function()
		{
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[1][ this.ID ] = null;
			delete args.targetCharacter._internal.spellEffects[ this.characterSpellEffectID ];
		}

		setTimeout( function()
							{
								slashFuchsiaImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/slash/fuchsia/slashdarkfuchsia1.png';
								
								setTimeout( function()
													{
														slashFuchsiaImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/slash/fuchsia/slashdarkfuchsia2.png';
														
														var _t = setInterval( function()
																			{
																				self.alpha -= 0.1;
																				
																				if( self.alpha > 0 )
																				{
																					return;
																				}
																				
																				self.remove();
																				
																				clearInterval( _t );
																				
																			}, 20 );
														
													}, 100 );
							}, 100 );
							
	} //end slashFuchsia effect

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.slashGreen.js
*/


	spellEffects.slashGreen = function( args )
	{
		this.ID = spellEffects.layer[1].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		this.alpha = 1;
		this.rotation = Math.random() * (Math.PI * 2);
		this.offsetX = 50;
		this.offsetY = 30;
		this.deleteRange = 100;
		this.previousX = args.targetCharacter.characterData.character_zone_x - this.offsetX;
		this.previousY = args.targetCharacter.characterData.character_zone_y - this.offsetY - 20;
		
		var self = this;
		
		var slashGreenImageObject = new Image();
		slashGreenImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/slash/green/slashgreen1.png';
		
		var slashGreenSound = soundManager.createSound({
				id: 'slashGreen' + ( ++spellEffects.soundIncrementor ),
				url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/slash/swosh_0' + Math.floor( Math.random() * 9 ) + '.mp3',
				volume: spellEffects.volumeByRange ( Component.bugcraft.currentCharacterObject.characterData.character_zone_x, Component.bugcraft.currentCharacterObject.characterData.character_zone_y, args.targetCharacter.characterData.character_zone_x, args.targetCharacter.characterData.character_zone_y, spellEffects.volumeRangeLong )
		});
		
		this.spellEffectSoundID = args.targetCharacter._internal.soundEffects.push( slashGreenSound ) - 1;
		
		soundManager.play( 'slashGreen' + spellEffects.soundIncrementor, 
										{
											onfinish: function () 
											{
												delete args.targetCharacter._internal.soundEffects[ self.spellEffectSoundID ];	
											}
										});
		
		//draw the slashGreen effect
		this.draw = function()
		{
			Map.ctx.globalAlpha = self.alpha;
			
			Map.ctx.save();
			
			Map.ctx.translate( args.targetCharacter.characterData.character_zone_x + Map.viewPortX, args.targetCharacter.characterData.character_zone_y + Map.viewPortY );
			
			Map.ctx.rotate( self.rotation );
			
			Map.ctx.drawImage(
											slashGreenImageObject,
											- self.offsetX,
											- self.offsetY
										);
			
			self.previousX = args.targetCharacter.characterData.character_zone_x - self.offsetX;
			self.previousY = args.targetCharacter.characterData.character_zone_y - self.offsetY - 20;
										
			Map.ctx.restore();
			
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the slashGreen effect
		this.remove = function()
		{
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[1][ this.ID ] = null;
			delete args.targetCharacter._internal.spellEffects[ this.characterSpellEffectID ];
		}

		setTimeout( function()
							{
								slashGreenImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/slash/green/slashgreen2.png';
								
								setTimeout( function()
													{
														slashGreenImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/slash/green/slashgreen3.png';
														
														var _t = setInterval( function()
																			{
																				self.alpha -= 0.1;
																				
																				if( self.alpha > 0 )
																				{
																					return;
																				}
																				
																				self.remove();
																				
																				clearInterval( _t );
																				
																			}, 20 );
														
													}, 100 );
							}, 100 );
							
	} //end slashGreen effect

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.slashSingle.js
*/


	spellEffects.slashSingle = function( args )
	{
		this.ID = spellEffects.layer[1].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		this.alpha = 1;
		this.offsetX = 30;
		this.offsetY = 30;
		this.rotation = Math.random() * (Math.PI * 2);
		this.deleteRange = 60;
		this.previousX = args.targetCharacter.characterData.character_zone_x - this.offsetX;
		this.previousY = args.targetCharacter.characterData.character_zone_y - this.offsetY;
		
		var self = this;
		
		var slashSingleImageObject = new Image();
		slashSingleImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/slash/single/J_slash1.png';
		
		var slashSingleSound = soundManager.createSound({
				id: 'slashSingle' + ( ++spellEffects.soundIncrementor ),
				url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/punch/punch' + Math.floor( Math.random() * 3 ) + '.mp3',
				volume: spellEffects.volumeByRange ( Component.bugcraft.currentCharacterObject.characterData.character_zone_x, Component.bugcraft.currentCharacterObject.characterData.character_zone_y, args.targetCharacter.characterData.character_zone_x, args.targetCharacter.characterData.character_zone_y, spellEffects.volumeRangeLong )
		});
		
		this.spellEffectSoundID = args.targetCharacter._internal.soundEffects.push( slashSingleSound ) - 1;
		
		soundManager.play( 'slashSingle' + spellEffects.soundIncrementor, 
										{
											onfinish: function () 
											{
												delete args.targetCharacter._internal.soundEffects[ self.spellEffectSoundID ];	
											}
										});
		
		//draw the slashSingle effect
		this.draw = function()
		{
			Map.ctx.globalAlpha = self.alpha;
			
			Map.ctx.save();
			
			Map.ctx.translate( args.targetCharacter.characterData.character_zone_x + Map.viewPortX, args.targetCharacter.characterData.character_zone_y + Map.viewPortY );
			
			Map.ctx.rotate( self.rotation );
			
			Map.ctx.drawImage(
							slashSingleImageObject,
							- self.offsetX,
							- self.offsetY
						);
						
			self.previousX = args.targetCharacter.characterData.character_zone_x - self.offsetX;
			self.previousY = args.targetCharacter.characterData.character_zone_y - self.offsetY;
			
			Map.ctx.restore();
						
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the slashSingle effect
		this.remove = function()
		{
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[1][ this.ID ] = null;
			delete args.targetCharacter._internal.spellEffects[ this.characterSpellEffectID ];
		}

		setTimeout( function()
							{
								slashSingleImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/slash/single/J_slash2.png';
								
								setTimeout( function()
													{
														slashSingleImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/slash/single/J_slash3.png';
														
														var _t = setInterval( function()
																			{
																				self.alpha -= 0.1;
																				
																				if( self.alpha > 0 )
																				{
																					return;
																				}
																				
																				self.remove();
																				
																				clearInterval( _t );
																				
																			}, 20 );
														
													}, 60 );
							}, 60 );
							
	} //end slashSingle effect

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.slashSingleCritical.js
*/


	spellEffects.slashSingleCritical = function( args )
	{
		this.ID = spellEffects.layer[1].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		this.alpha = 1;
		this.rotation = Math.random() * (Math.PI * 2);
		this.offsetX = 30;
		this.offsetY = 30;
		this.deleteRange = 60;
		this.previousX = args.targetCharacter.characterData.character_zone_x - this.offsetX;
		this.previousY = args.targetCharacter.characterData.character_zone_y - this.offsetY;
		
		var slashSingleCriticalImageObject = new Image();
		slashSingleCriticalImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/slash/single/J_slashCrit1.png';
		
		var slashSingleCriticalSound = soundManager.createSound({
				id: 'slashSingleCritical' + ( ++spellEffects.soundIncrementor ),
				url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/punch/punch' + Math.floor( Math.random() * 3 ) + '.mp3',
				volume: spellEffects.volumeByRange ( Component.bugcraft.currentCharacterObject.characterData.character_zone_x, Component.bugcraft.currentCharacterObject.characterData.character_zone_y, args.targetCharacter.characterData.character_zone_x, args.targetCharacter.characterData.character_zone_y, spellEffects.volumeRangeLong )
		});
		
		this.spellEffectSoundID = args.targetCharacter._internal.soundEffects.push( slashSingleCriticalSound ) - 1;
		
		soundManager.play( 'slashSingleCritical' + spellEffects.soundIncrementor, 
										{
											onfinish: function () 
											{
												delete args.targetCharacter._internal.soundEffects[ self.spellEffectSoundID ];	
											}
										});
		
		//draw the slashSingleCritical effect
		this.draw = function()
		{
			Map.ctx.globalAlpha = self.alpha;
			
			Map.ctx.save();
			
			Map.ctx.translate( args.targetCharacter.characterData.character_zone_x + Map.viewPortX, args.targetCharacter.characterData.character_zone_y + Map.viewPortY );
			
			Map.ctx.rotate( self.rotation );
			
			Map.ctx.drawImage(
							slashSingleCriticalImageObject,
							- self.offsetX,
							- self.offsetY
						);
			
			self.previousX = args.targetCharacter.characterData.character_zone_x - self.offsetX;
			self.previousY = args.targetCharacter.characterData.character_zone_y - self.offsetY;
			
			Map.ctx.restore();
						
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the slashSingleCritical effect
		var self = this;
		
		this.remove = function()
		{
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[1][ this.ID ] = null;
			delete args.targetCharacter._internal.spellEffects[ this.characterSpellEffectID ];
		}

		setTimeout( function()
							{
								slashSingleCriticalImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/slash/single/J_slashCrit2.png';
								
								setTimeout( function()
													{
														slashSingleCriticalImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/slash/single/J_slashCrit3.png';
														
														var _t = setInterval( function()
																			{
																				self.alpha -= 0.1;
																				
																				if( self.alpha > 0 )
																				{
																					return;
																				}
																				
																				self.remove();
																				
																				clearInterval( _t );
																				
																			}, 20 );
														
													}, 60 );
							}, 60 );
							
	} //end slashSingleCritical effect

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.slashThunder.js
*/


	spellEffects.slashThunder = function( args )
	{
		this.ID = spellEffects.layer[1].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		this.alpha = 1;
		this.rotation = Math.random() * (Math.PI * 2);
		this.offsetX = 50;
		this.offsetY = 30;
		this.deleteRange = 100;
		this.previousX = args.targetCharacter.characterData.character_zone_x - this.offsetX;
		this.previousY = args.targetCharacter.characterData.character_zone_y - this.offsetY - 20;
		
		var slashThunderImageObject = new Image();
		slashThunderImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/slash/thunder-slash1.png';
		
		var slashThunderSound = soundManager.createSound({
				id: 'slashThunder' + ( ++spellEffects.soundIncrementor ),
				url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/electric/lightning strike.mp3',
				volume: spellEffects.volumeByRange ( Component.bugcraft.currentCharacterObject.characterData.character_zone_x, Component.bugcraft.currentCharacterObject.characterData.character_zone_y, args.targetCharacter.characterData.character_zone_x, args.targetCharacter.characterData.character_zone_y, spellEffects.volumeRangeLong )
		});
		
		this.spellEffectSoundID = args.targetCharacter._internal.soundEffects.push( slashThunderSound ) - 1;
		
		soundManager.play( 'slashThunder' + spellEffects.soundIncrementor, 
										{
											onfinish: function () 
											{
												delete args.targetCharacter._internal.soundEffects[ self.spellEffectSoundID ];	
											}
										});
		
		//draw the slashThunder effect
		this.draw = function()
		{
			Map.ctx.globalAlpha = self.alpha;
			
			Map.ctx.save();
			
			Map.ctx.translate( args.targetCharacter.characterData.character_zone_x + Map.viewPortX, args.targetCharacter.characterData.character_zone_y + Map.viewPortY );
			
			Map.ctx.rotate( self.rotation );
			
			Map.ctx.drawImage(
											slashThunderImageObject,
											- self.offsetX,
											- self.offsetY
										);
			
			self.previousX = args.targetCharacter.characterData.character_zone_x - self.offsetX;
			self.previousY = args.targetCharacter.characterData.character_zone_y - self.offsetY - 20;
										
			Map.ctx.restore();
			
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the slashThunder effect
		var self = this;
		
		this.remove = function()
		{
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[1][ this.ID ] = null;
			delete args.targetCharacter._internal.spellEffects[ this.characterSpellEffectID ];
		}

		setTimeout( function()
							{
								slashThunderImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/slash/thunder-slash2.png';
								
								setTimeout( function()
													{
														slashThunderImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/slash/thunder-slash3.png';
														
														var _t = setInterval( function()
																			{
																				self.alpha -= 0.1;
																				
																				if( self.alpha > 0 )
																				{
																					return;
																				}
																				
																				self.remove();
																				
																				clearInterval( _t );
																				
																			}, 20 );
														
													}, 100 );
							}, 100 );
							
	} //end slashThunder effect

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.slashTriple.js
*/


	spellEffects.slashTriple = function( args )
	{
		this.ID = spellEffects.layer[1].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		this.effectSounds = [];
		this.alpha = 1;
		this.rotation = Math.random() * (Math.PI * 2);
		this.offsetX = 30;
		this.offsetY = 30;
		this.deleteRange = 60;
		this.previousX = args.targetCharacter.characterData.character_zone_x - this.offsetX;
		this.previousY = args.targetCharacter.characterData.character_zone_y - this.offsetY;
		
		var self = this;
		
		var slashTripleImageObject = new Image();
		slashTripleImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/slash/triple/slash_triple_Red0.png';
		
		var slashTripleSound = soundManager.createSound({
				id: 'slashTriple' + ( ++spellEffects.soundIncrementor ),
				url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/slash/flesh sword slash 0' + ( Math.floor( Math.random() * 3 ) + 1 ) + '.mp3',
				volume: spellEffects.volumeByRange ( Component.bugcraft.currentCharacterObject.characterData.character_zone_x, Component.bugcraft.currentCharacterObject.characterData.character_zone_y, args.targetCharacter.characterData.character_zone_x, args.targetCharacter.characterData.character_zone_y, spellEffects.volumeRangeLong )
		});
		
		this.spellEffectSoundID = args.targetCharacter._internal.soundEffects.push( slashTripleSound ) - 1;
		
		soundManager.play( 'slashTriple' + spellEffects.soundIncrementor, 
										{	
											onfinish: function () 
											{
												delete args.targetCharacter._internal.soundEffects[ self.spellEffectSoundID ];	
											}
										});
				
		//draw the slashTriple effect
		this.draw = function()
		{
			Map.ctx.globalAlpha = self.alpha;
			
			Map.ctx.save();
			
			Map.ctx.translate( args.targetCharacter.characterData.character_zone_x + Map.viewPortX, args.targetCharacter.characterData.character_zone_y + Map.viewPortY );
			
			Map.ctx.rotate( self.rotation );
			
			Map.ctx.drawImage(
							slashTripleImageObject,
							 - self.offsetX,
							 - self.offsetY
						);
			
			Map.ctx.restore();
			
			self.previousX = args.targetCharacter.characterData.character_zone_x - self.offsetX;
			self.previousY = args.targetCharacter.characterData.character_zone_y - self.offsetY;
						
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the slashTriple effect
		this.remove = function()
		{
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[1][ this.ID ] = null;
			delete args.targetCharacter._internal.spellEffects[ self.characterSpellEffectID ];
		}

		setTimeout( function()
							{
								slashTripleImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/slash/triple/slash_triple_Red1.png';
								
								setTimeout( function()
													{
														slashTripleImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/slash/triple/slash_triple_Red2.png';
														
														var _t = setInterval( function()
																			{
																				self.alpha -= 0.1;
																				
																				if( self.alpha > 0 )
																				{
																					return;
																				}
																				
																				self.remove();
																				
																				clearInterval( _t );
																				
																			}, 30 );
														
													}, 50 );
							}, 50 );
							
	} //end slashTriple effect

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.slashTriple103.js
*/


	spellEffects.slashTriple103 = function( args )
	{
		this.ID = spellEffects.layer[1].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		this.effectSounds = [];
		this.alpha = 1;
		this.rotation = Math.random() * (Math.PI * 2);
		this.offsetX = 30;
		this.offsetY = 30;
		this.deleteRange = 60;
		this.previousX = args.targetCharacter.characterData.character_zone_x - this.offsetX;
		this.previousY = args.targetCharacter.characterData.character_zone_y - this.offsetY;
		
		var self = this;
		
		var slashTripleImageObject = new Image();
		slashTripleImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/slash/triple/slash_triple_Red0.png';
		
		var slashTripleSound = soundManager.createSound({
				id: 'slashTriple' + ( ++spellEffects.soundIncrementor ),
				url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/slash/swosh_0' + Math.floor( Math.random() * 9 ) + '.mp3',
				volume: spellEffects.volumeByRange ( Component.bugcraft.currentCharacterObject.characterData.character_zone_x, Component.bugcraft.currentCharacterObject.characterData.character_zone_y, args.targetCharacter.characterData.character_zone_x, args.targetCharacter.characterData.character_zone_y, spellEffects.volumeRangeLong )
		});
		
		this.spellEffectSoundID = args.targetCharacter._internal.soundEffects.push( slashTripleSound ) - 1;
		
		soundManager.play( 'slashTriple' + spellEffects.soundIncrementor, 
										{	
											onfinish: function () 
											{
												delete args.targetCharacter._internal.soundEffects[ self.spellEffectSoundID ];	
											}
										});
		
		var hitShineSound = soundManager.createSound({
				id: 'hitShine' + ( ++spellEffects.soundIncrementor ),
				url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/bolt/woosh.mp3', 
				volume: spellEffects.volumeByRange ( Component.bugcraft.currentCharacterObject.characterData.character_zone_x, Component.bugcraft.currentCharacterObject.characterData.character_zone_y, args.targetCharacter.characterData.character_zone_x, args.targetCharacter.characterData.character_zone_y, spellEffects.volumeRangeLong )
		});
		
		this.spellEffectSoundID = args.targetCharacter._internal.soundEffects.push( hitShineSound ) - 1;
		
		
		setTimeout( function() {
											soundManager.play( 'hitShine' + spellEffects.soundIncrementor, 
																			{
																				onfinish: function () 
																				{
																					delete args.targetCharacter._internal.soundEffects[ self.spellEffectSoundID ];	
																				}
																			});
											}, 200);
				
		//draw the slashTriple effect
		this.draw = function()
		{
			Map.ctx.globalAlpha = self.alpha;
			
			Map.ctx.save();
			
			Map.ctx.translate( args.targetCharacter.characterData.character_zone_x + Map.viewPortX, args.targetCharacter.characterData.character_zone_y + Map.viewPortY );
			
			Map.ctx.rotate( self.rotation );
			
			Map.ctx.drawImage(
							slashTripleImageObject,
							 - self.offsetX,
							 - self.offsetY
						);
			
			Map.ctx.restore();
			
			self.previousX = args.targetCharacter.characterData.character_zone_x - self.offsetX;
			self.previousY = args.targetCharacter.characterData.character_zone_y - self.offsetY;
						
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the slashTriple effect
		this.remove = function()
		{
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[1][ this.ID ] = null;
			delete args.targetCharacter._internal.spellEffects[ self.characterSpellEffectID ];
		}

		setTimeout( function()
							{
								slashTripleImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/slash/triple/slash_triple_Red1.png';
								
								setTimeout( function()
													{
														slashTripleImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/slash/triple/slash_triple_Red2.png';
														
														var _t = setInterval( function()
																			{
																				self.alpha -= 0.1;
																				
																				if( self.alpha > 0 )
																				{
																					return;
																				}
																				
																				self.remove();
																				
																				clearInterval( _t );
																				
																			}, 30 );
														
													}, 50 );
							}, 50 );
							
	} //end slashTriple effect

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.slashTriple111.js
*/


	spellEffects.slashTriple111 = function( args )
	{
		this.ID = spellEffects.layer[1].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		this.effectSounds = [];
		this.alpha = 1;
		this.rotation = Math.random() * (Math.PI * 2);
		this.offsetX = 30;
		this.offsetY = 30;
		this.deleteRange = 60;
		this.previousX = args.targetCharacter.characterData.character_zone_x - this.offsetX;
		this.previousY = args.targetCharacter.characterData.character_zone_y - this.offsetY;
		
		var self = this;
		
		var slashTripleImageObject = new Image();
		slashTripleImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/slash/triple/slash_triple_Red0.png';
		
		var slashTripleSound = soundManager.createSound({
				id: 'slashTriple' + ( ++spellEffects.soundIncrementor ),
				url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/punch/punch' + Math.floor( Math.random() * 3 ) + '.mp3',
				volume: spellEffects.volumeByRange ( Component.bugcraft.currentCharacterObject.characterData.character_zone_x, Component.bugcraft.currentCharacterObject.characterData.character_zone_y, args.targetCharacter.characterData.character_zone_x, args.targetCharacter.characterData.character_zone_y, spellEffects.volumeRangeLong )
		});
		
		this.spellEffectSoundID = args.targetCharacter._internal.soundEffects.push( slashTripleSound ) - 1;
		
		soundManager.play( 'slashTriple' + spellEffects.soundIncrementor, 
										{	
											onfinish: function () 
											{
												delete args.targetCharacter._internal.soundEffects[ self.spellEffectSoundID ];	
											}
										});
				
		//draw the slashTriple effect
		this.draw = function()
		{
			Map.ctx.globalAlpha = self.alpha;
			
			Map.ctx.save();
			
			Map.ctx.translate( args.targetCharacter.characterData.character_zone_x + Map.viewPortX, args.targetCharacter.characterData.character_zone_y + Map.viewPortY );
			
			Map.ctx.rotate( self.rotation );
			
			Map.ctx.drawImage(
							slashTripleImageObject,
							 - self.offsetX,
							 - self.offsetY
						);
			
			Map.ctx.restore();
			
			self.previousX = args.targetCharacter.characterData.character_zone_x - self.offsetX;
			self.previousY = args.targetCharacter.characterData.character_zone_y - self.offsetY;
						
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the slashTriple effect
		this.remove = function()
		{
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[1][ this.ID ] = null;
			delete args.targetCharacter._internal.spellEffects[ self.characterSpellEffectID ];
		}

		setTimeout( function()
							{
								slashTripleImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/slash/triple/slash_triple_Red1.png';
								
								setTimeout( function()
													{
														slashTripleImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/slash/triple/slash_triple_Red2.png';
														
														var _t = setInterval( function()
																			{
																				self.alpha -= 0.1;
																				
																				if( self.alpha > 0 )
																				{
																					return;
																				}
																				
																				self.remove();
																				
																				clearInterval( _t );
																				
																			}, 30 );
														
													}, 50 );
							}, 50 );
							
	} //end slashTriple effect

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.sss.js
*/

	
	spellEffects.sss = function( args )
	{
		var self = this,
				_ccd = Component.bugcraft.currentCharacterObject.characterData,
				_moveFrames = {},
				_tc = args.targetCharacter,
				_tcd = _tc.characterData,
				_changeFrameFunctionPointer = null,
				_currentIndex = 1,
				_maxFrames = 3;
		
		this.ID = spellEffects.layer[0].push( this ) - 1;
		this.characterSpellEffectID = _tc._internal.spellEffects.push( this ) - 1;
		this.offsetX = 20;
		this.offsetY = 20;
		this.rotation = _tcd.character_rotation;
		this.deleteRange = 40;
		this.previousX = _tcd.character_zone_x - this.offsetX;
		this.previousY = _tcd.character_zone_y - this.offsetY;
		
		// initialize
		
		Application.sound.playExclusive({
											url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/sss/sss.mp3',
											volume: spellEffects.volumeByRangeVoice(
																		_ccd.character_zone_x,
																		_ccd.character_zone_y,
																		_tcd.character_zone_x,
																		_tcd.character_zone_y,
																		spellEffects.volumeRangeLong
																	),
											onFinish: function()
											{
												
											}
										});
		
		for(var i=1;i<=_maxFrames;i++)
		{
			_moveFrames[ i ] = { image: new Image(), alpha: 0 };
			_moveFrames[ i ].image.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/sss/sss' + i + '.png';
		}
		
		//draw the bombardierBeetleDeath spatter
		this.draw = function()
		{
			Map.ctx.save();
			
			Map.ctx.translate( self.previousX + self.offsetX + Map.viewPortX, self.previousY + self.offsetY + Map.viewPortY );
			
			Map.ctx.rotate( ( self.rotation - 90 ) * Math.PI / 180 );
			
			Map.ctx.shadowColor = 'rgba(0, 0, 0, 0.7)';
			Map.ctx.shadowOffsetX = 3;
			Map.ctx.shadowOffsetY = 3;
			
			Map.ctx.drawImage(
							_moveFrames[ _currentIndex ].image,
							- self.offsetX,
							- self.offsetY
						);
			
			Map.ctx.restore();
			
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the deathDecay
		this.remove = function()
		{
			clearTimeout( _changeFrameFunctionPointer );
			
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[0][ this.ID ] = null;
			
			delete _tc._internal.spellEffects[ this.characterSpellEffectID ];
		}
		
		var _changeFrameFunction = function()
		{
			_currentIndex++;
			
			if( _currentIndex > _maxFrames )
			{
				_currentIndex = 1;
				
				setTimeout( _changeFrameFunction, 2000 + Math.random() * 5000 );
				
				return;
			}
			
			_changeFrameFunctionPointer = setTimeout( _changeFrameFunction, 100 );
		}
		
		_changeFrameFunction();
		
	} //end bombardierBeetleDeath

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.star1.js
*/

	
	spellEffects[ 'star1' ] = function( args )
	{
		var self = this,
				_moveFrames = {},
				_tc = args.targetCharacter,
				_tcd = _tc.characterData,
				_changeFrameFunctionPointer = null,
				_currentIndex = 1,
				_maxFrames = 1;
		
		this.ID = spellEffects.layer[0].push( this ) - 1;
		this.characterSpellEffectID = _tc._internal.spellEffects.push( this ) - 1;
		this.offsetX = 20;
		this.offsetY = 20;
		this.rotation = _tcd.character_rotation;
		this.deleteRange = 40;
		this.previousX = _tcd.character_zone_x - this.offsetX;
		this.previousY = _tcd.character_zone_y - this.offsetY;
		
		// initialize
		
		for(var i=1;i<=_maxFrames;i++)
		{
			_moveFrames[ i ] = { image: new Image(), alpha: 0 };
			_moveFrames[ i ].image.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/star1/star1' + i + '.png';
		}
		
		//draw the bombardierBeetleDeath spatter
		this.draw = function()
		{
			Map.ctx.save();
			
			Map.ctx.translate( self.previousX + self.offsetX + Map.viewPortX, self.previousY + self.offsetY + Map.viewPortY );
			
			Map.ctx.rotate( ( self.rotation - 90 ) * Math.PI / 180 );
			
			Map.ctx.shadowColor = 'rgba(0, 0, 0, 0.7)';
			Map.ctx.shadowOffsetX = 3;
			Map.ctx.shadowOffsetY = 3;
			
			Map.ctx.drawImage(
							_moveFrames[ _currentIndex ].image,
							- self.offsetX,
							- self.offsetY
						);
			
			Map.ctx.restore();
			
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the deathDecay
		this.remove = function()
		{
			clearTimeout( _changeFrameFunctionPointer );
			
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[0][ this.ID ] = null;
			
			delete _tc._internal.spellEffects[ this.characterSpellEffectID ];
		}
		
		var _changeFrameFunction = function()
		{
			_currentIndex++;
			
			if( _currentIndex > _maxFrames )
			{
				_currentIndex = 1;
				
				setTimeout( _changeFrameFunction, 2000 + Math.random() * 5000 );
				
				return;
			}
			
			_changeFrameFunctionPointer = setTimeout( _changeFrameFunction, 100 );
		}
		
		_changeFrameFunction();
		
	} //end bombardierBeetleDeath

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.star21.js
*/

	
	spellEffects[ 'star21' ] = function( args )
	{
		var self = this,
				_moveFrames = {},
				_tc = args.targetCharacter,
				_tcd = _tc.characterData,
				_changeFrameFunctionPointer = null,
				_currentIndex = 1,
				_maxFrames = 6;
		
		this.ID = spellEffects.layer[0].push( this ) - 1;
		this.characterSpellEffectID = _tc._internal.spellEffects.push( this ) - 1;
		this.offsetX = 20;
		this.offsetY = 20;
		this.rotation = _tcd.character_rotation;
		this.deleteRange = 40;
		this.previousX = _tcd.character_zone_x - this.offsetX;
		this.previousY = _tcd.character_zone_y - this.offsetY;
		
		// initialize
		
		for(var i=1;i<=_maxFrames;i++)
		{
			_moveFrames[ i ] = { image: new Image(), alpha: 0 };
			_moveFrames[ i ].image.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/star21/star21' + i + '.png';
		}
		
		//draw the bombardierBeetleDeath spatter
		this.draw = function()
		{
			Map.ctx.save();
			
			Map.ctx.translate( self.previousX + self.offsetX + Map.viewPortX, self.previousY + self.offsetY + Map.viewPortY );
			
			Map.ctx.rotate( ( self.rotation - 90 ) * Math.PI / 180 );
			
			Map.ctx.shadowColor = 'rgba(0, 0, 0, 0.7)';
			Map.ctx.shadowOffsetX = 3;
			Map.ctx.shadowOffsetY = 3;
			
			Map.ctx.drawImage(
							_moveFrames[ _currentIndex ].image,
							- self.offsetX,
							- self.offsetY
						);
			
			Map.ctx.restore();
			
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the deathDecay
		this.remove = function()
		{
			clearTimeout( _changeFrameFunctionPointer );
			
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[0][ this.ID ] = null;
			
			delete _tc._internal.spellEffects[ this.characterSpellEffectID ];
		}
		
		var _changeFrameFunction = function()
		{
			_currentIndex++;
			
			if( _currentIndex > _maxFrames )
			{
				_currentIndex = 1;
				
				setTimeout( _changeFrameFunction, 2000 + Math.random() * 5000 );
				
				return;
			}
			
			_changeFrameFunctionPointer = setTimeout( _changeFrameFunction, 100 );
		}
		
		_changeFrameFunction();
		
	} //end bombardierBeetleDeath

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.stun.js
*/


	spellEffects.stun = function( args )
	{
		this.ID = spellEffects.layer[1].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		this.alpha = 1;
		this.offsetX = 30;
		this.offsetY = 30;
		this.deleteRange = 68;
		this.previousX = args.targetCharacter.characterData.character_zone_x - this.offsetX;
		this.previousY = args.targetCharacter.characterData.character_zone_y - this.offsetY;
		this.rotation = Math.random() * (Math.PI * 2);
		this.duration = 5000;
		
		var self = this;
		
		var stunImageObject = new Image();
		stunImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/stun.png';
		
		var stunSound = soundManager.createSound({
				id: 'waterShield' + ( ++spellEffects.soundIncrementor ),
				url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/stun/sorcery - quick zip.mp3',
				volume: spellEffects.volumeByRange ( Component.bugcraft.currentCharacterObject.characterData.character_zone_x, Component.bugcraft.currentCharacterObject.characterData.character_zone_y, args.targetCharacter.characterData.character_zone_x, args.targetCharacter.characterData.character_zone_y, spellEffects.volumeRangeLong )
		});
		
		this.spellEffectSoundID = args.targetCharacter._internal.soundEffects.push( stunSound ) - 1;
		
		soundManager.play( 'waterShield' + spellEffects.soundIncrementor, 
										{
											onfinish: function () 
											{
												delete args.targetCharacter._internal.soundEffects[ self.spellEffectSoundID ];	
											}
										});
		
		var timeElapsed = 0;
		
		//draw the stun effect
		this.draw = function()
		{
			Map.ctx.globalAlpha = self.alpha;
			
			Map.ctx.save();
			
			Map.ctx.translate( args.targetCharacter.characterData.character_zone_x + Map.viewPortX, args.targetCharacter.characterData.character_zone_y + Map.viewPortY );
			
			Map.ctx.rotate( self.rotation );
			
			Map.ctx.shadowOffsetX = 7;
			Map.ctx.shadowOffsetY = 7;
			Map.ctx.shadowColor = 'rgba(0, 0, 0, 1)';
			
			Map.ctx.drawImage(
							stunImageObject,
							- self.offsetX,
							- self.offsetY
						);
			
			self.previousX = args.targetCharacter.characterData.character_zone_x - self.offsetX;
			self.previousY = args.targetCharacter.characterData.character_zone_y - self.offsetY;
			
			Map.ctx.restore();
						
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the stun effect
		var self = this;
		
		this.remove = function()
		{
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[1][ this.ID ] = null;
			clearTimeout( _animateFunctionPointer );
			delete args.targetCharacter._internal.spellEffects[ this.characterSpellEffectID ];
		}
		
		var _animateFunction = function()
												{
													self.rotation += Math.PI / 32;

													_animateFunctionPointer = setTimeout( _animateFunction, 30 );
												}			
												
		var _animateFunctionPointer = setTimeout( _animateFunction, 30 );
		
		setTimeout( function() 
								{ 
									var _t = setInterval( function()
																		{
																			self.alpha -= 0.1;
																			
																			if( self.alpha > 0 )
																			{
																				return;
																			}
																			
																			self.remove();
																			
																			clearInterval( _t );
																			
																		}, 100 );
								}, self.duration );
	} //end stun effect

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.talentLearn.js
*/


	spellEffects.talentLearn = function( args )
	{
		setTimeout( function()
							{
								new spellEffects.talentLearnSecondPart({ 
									sourceCharacter: args.sourceCharacter,
									targetCharacter: args.targetCharacter,
									component: 0,
								});							
								new spellEffects.talentLearnSecondPart({ 
									sourceCharacter: args.sourceCharacter,
									targetCharacter: args.targetCharacter,
									component: 1,
								});			
								new spellEffects.talentLearnThirdPart({ 
									sourceCharacter: args.sourceCharacter,
									targetCharacter: args.targetCharacter,
									component: 0,
								});
								
							
							}, 1000 );
		
		new spellEffects.talentLearnFirstPart({
			sourceCharacter: args.sourceCharacter,
			targetCharacter: args.targetCharacter,
		});
	} //end talentLearn

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.talentLearnFirstPart.js
*/


	spellEffects.talentLearnFirstPart = function( args )
	{//part with the spellbook
		this.ID = spellEffects.layer[1].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		this.alpha = 1;
		this.duration = 1900;
		this.offsetX = 30;
		this.offsetY = 30;
		this.rotation = 0;
		this.stepDistance =  25 / (this.duration / 100);
		this.deleteRange = 60;
		this.previousX = args.targetCharacter.characterData.character_zone_x - this.offsetX;
		this.previousY = args.targetCharacter.characterData.character_zone_y - this.offsetY;
		
		var self = this;
		
		var talentLearnFirstPartImageObject = new Image();
		talentLearnFirstPartImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/other/talentLearn/talentLearn_book.png';
		
		var yMovement = 0;
		var shadowOffset  = 0;
		
		var talentLearnFirstPartSound = soundManager.createSound({
				id: 'talentLearnFirstPart' + ( ++spellEffects.soundIncrementor ),
				url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/lvlUp/game_win_ident_1.mp3',
				volume: spellEffects.volumeByRange ( Component.bugcraft.currentCharacterObject.characterData.character_zone_x, Component.bugcraft.currentCharacterObject.characterData.character_zone_y, args.targetCharacter.characterData.character_zone_x, args.targetCharacter.characterData.character_zone_y, spellEffects.volumeRangeLong )
		});
		
		this.spellEffectSoundID = args.targetCharacter._internal.soundEffects.push( talentLearnFirstPartSound ) - 1;
	
		soundManager.play( 'talentLearnFirstPart' + spellEffects.soundIncrementor, 
										{
											onfinish: function () 
											{
												delete args.targetCharacter._internal.soundEffects[ self.spellEffectSoundID ];	
											}
										});
		
		//draw the the talentLearnFirstPart
		this.draw = function()
		{
			Map.ctx.globalAlpha = self.alpha;
			
			Map.ctx.save();
			
			Map.ctx.drawImage(
								talentLearnFirstPartImageObject,
								args.targetCharacter.characterData.character_zone_x - self.offsetX + Map.viewPortX,
								args.targetCharacter.characterData.character_zone_y - self.offsetY + Map.viewPortY + yMovement
							);
			
			self.previousX = args.targetCharacter.characterData.character_zone_x - self.offsetX;
			self.previousY = args.targetCharacter.characterData.character_zone_y - self.offsetY + yMovement;
										
			Map.ctx.restore();
			
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the talentLearnFirstPart
		this.remove = function()
		{
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[1][ this.ID ] = null;
			clearTimeout( _animateFunctionPointer );
			delete args.targetCharacter._internal.spellEffects[ this.characterSpellEffectID ];
		}
		
		self.alpha = 0;

		var _fadeIn = function()
								{
									if( self.alpha < 1 )
									{
										self.alpha += 0.1;
										
										setTimeout( _fadeIn, 50 );
										
										return;
									}
									
									return;
								}
		
		_fadeIn();
		
		var _animateFunction =	function()
											{
												yMovement -= self.stepDistance;
												
												if( yMovement < -25 )
												{
													self.alpha-=0.05;
												}
												
												if( self.alpha < 0 )
												{
													self.alpha = 0;
												
													self.remove();
													
													return;
												}
												
												_animateFunctionPointer = setTimeout( _animateFunction, 50 );
											}			
				
		var _animateFunctionPointer = setTimeout( _animateFunction, 1000 );
		
		setTimeout( function()
							{
								self.remove;
							
							}, self.duration );
	} //end the lvl up first part effect

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.talentLearnSecondPart.js
*/


	spellEffects.talentLearnSecondPart = function( args )
	{//spinning part of the effect
		this.ID = spellEffects.layer[0].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		this.alpha = 1;
		this.duration = 2000;
		this.offsetX = 30;
		this.offsetY = 30;
		this.rotation = 0;
		this.deleteRange = 60;
		this.previousX = args.targetCharacter.characterData.character_zone_x - this.offsetX;
		this.previousY = args.targetCharacter.characterData.character_zone_y - this.offsetY;
		
		var self = this;
		
		var talentLearnSecondPartImageObject = new Image();
		talentLearnSecondPartImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/other/talentLearn/talentLearn_spin' + args.component + '.png';
		
		//draw the lvl up second part effect
		this.draw = function()
		{
			Map.ctx.globalAlpha = self.alpha;
			
			Map.ctx.save();
			
			Map.ctx.translate( args.targetCharacter.characterData.character_zone_x + Map.viewPortX, args.targetCharacter.characterData.character_zone_y + Map.viewPortY );
			
			Map.ctx.rotate( self.rotation );
			
			Map.ctx.drawImage(
							talentLearnSecondPartImageObject,
							- self.offsetX,
							- self.offsetY
						);
						
			self.previousX = args.targetCharacter.characterData.character_zone_x - self.offsetX;
			self.previousY = args.targetCharacter.characterData.character_zone_y - self.offsetY;
						
			Map.ctx.restore();
						
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the talentLearnSecondPart
		this.remove = function()
		{
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[0][ this.ID ] = null;
			delete args.targetCharacter._internal.spellEffects[ this.characterSpellEffectID ];
		}
		
		switch( args.component )
		{
			case 0:
				self.alpha = 0;
		
				var _animateFunction =	function()
																	{
																		if( self.alpha > 1 )
																		{
																			self.rotation += Math.PI / 32;
																			
																			_animateFunctionPointer = setTimeout( _animateFunction, 50 );
																			return;
																		}
																		
																		self.alpha += 0.2;
																		
																		self.rotation += Math.PI / 32;

																		_animateFunctionPointer = setTimeout( _animateFunction, 50 );
																	}			
			break;
			case 1:
				self.alpha = 0;
				
				var _animateFunction =	function()
																	{
																		if( self.alpha > 1 )
																		{
																			self.rotation -= Math.PI / 32;
																			
																			_animateFunctionPointer = setTimeout( _animateFunction, 50 );
																			return;
																		}
																		
																		self.alpha += 0.2;
																		
																		self.rotation -= Math.PI / 32;

																		_animateFunctionPointer = setTimeout( _animateFunction, 50 );
																	}						
			break;
		}
		
		var _animateFunctionPointer = setTimeout( _animateFunction, 1 );
		
		setTimeout( function() 
								{ 
									clearTimeout( _animateFunctionPointer );
									
									var _t = setInterval( function()
																		{
																			self.alpha -= 0.2;
																			
																			if( self.alpha > 0 )
																			{
																				return;
																			}
																			
																			self.remove();
																			
																			clearInterval( _t );
																			
																		}, 40 );
								}, self.duration );
	} //end the lvl up second part effect

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.talentLearnThirdPart.js
*/


	spellEffects.talentLearnThirdPart = function( args )
	{//part that transitions upward
		this.ID = spellEffects.layer[1].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		this.alpha = 1;
		this.duration = 1900;
		this.offsetX = 30;
		this.offsetY = 30;
		this.rotation = 0;
		this.stepDistance =  25 / (this.duration / 100);
		this.deleteRange = 60;
		this.previousX = args.targetCharacter.characterData.character_zone_x - this.offsetX;
		this.previousY = args.targetCharacter.characterData.character_zone_y - this.offsetY;
		
		var self = this;
		
		var talentLearnThirdPartImageObject = new Image();
		talentLearnThirdPartImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/other/talentLearn/talentLearn_icon' + args.component + '.png';
		
		var yMovement = 0;
		var shadowOffset  = 0;
		
		//draw the the talentLearnThirdPart
		this.draw = function()
		{
			Map.ctx.globalAlpha = self.alpha;
			
			Map.ctx.save();
			
			Map.ctx.drawImage(
								talentLearnThirdPartImageObject,
								args.targetCharacter.characterData.character_zone_x - self.offsetX + Map.viewPortX,
								args.targetCharacter.characterData.character_zone_y - self.offsetY + Map.viewPortY + yMovement
							);
			
			self.previousX = args.targetCharacter.characterData.character_zone_x - self.offsetX;
			self.previousY = args.targetCharacter.characterData.character_zone_y - self.offsetY + yMovement;
										
			Map.ctx.restore();
			
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the talentLearnThirdPart
		this.remove = function()
		{
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[1][ this.ID ] = null;
			clearTimeout( _animateFunctionPointer );
			delete args.targetCharacter._internal.spellEffects[ this.characterSpellEffectID ];
		}
		
		self.alpha = 0;

		var _fadeIn = function()
								{
									if( self.alpha < 1 )
									{
										self.alpha += 0.1;
										
										setTimeout( _fadeIn, 50 );
										
										return;
									}
									
									return;
								}
		
		_fadeIn();
		
		var _animateFunction =	function()
											{
												yMovement -= self.stepDistance;
												
												if( yMovement < -25 )
												{
													self.alpha-=0.05;
												}
												
												if( self.alpha < 0 )
												{
													self.alpha = 0;
												
													self.remove();
													
													return;
												}
												
												_animateFunctionPointer = setTimeout( _animateFunction, 50 );
											}			
				
		var _animateFunctionPointer = setTimeout( _animateFunction, 1 );
		
		setTimeout( function()
							{
								self.remove;
							
							}, self.duration );
		
	} //end the talentLearnThirdPart

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.teleport.js
*/


	spellEffects.teleport = function( args )
	{
		this.ID = spellEffects.layer[0].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		this.alpha = 1;
		this.offsetX = 60;
		this.offsetY = 60;
		this.rotation = 0;
		this.deleteRange = 120;
		this.previousX = args.targetCharacter.characterData.character_zone_x - this.offsetX;
		this.previousY = args.targetCharacter.characterData.character_zone_y - this.offsetY;
		this.duration = 1500;
		
		var self = this;
		
		var teleportImageObject = new Image();
		teleportImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/teleport/teleport' + args.component + '.png';
		
		var teleportSound = soundManager.createSound({
				id: 'teleport' + ( ++spellEffects.soundIncrementor ),
				url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/magic/MAGIC.mp3',
				volume: spellEffects.volumeByRange ( Component.bugcraft.currentCharacterObject.characterData.character_zone_x, Component.bugcraft.currentCharacterObject.characterData.character_zone_y, args.targetCharacter.characterData.character_zone_x, args.targetCharacter.characterData.character_zone_y, spellEffects.volumeRangeLong )
		});
		
		this.spellEffectSoundID = args.targetCharacter._internal.soundEffects.push( teleportSound ) - 1;
		
		//draw the teleport
		this.draw = function()
		{
			Map.ctx.globalAlpha = self.alpha;
			
			Map.ctx.save();
			
			Map.ctx.translate( args.targetCharacter.characterData.character_zone_x + Map.viewPortX, args.targetCharacter.characterData.character_zone_y + Map.viewPortY );
			
			Map.ctx.rotate( self.rotation );
			
			Map.ctx.drawImage(
											teleportImageObject,
											- self.offsetX,
											- self.offsetY
										);
	
			self.previousX = args.targetCharacter.characterData.character_zone_x - self.offsetX;
			self.previousY = args.targetCharacter.characterData.character_zone_y - self.offsetY;
	
			Map.ctx.restore();
			
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the teleport
		this.remove = function()
		{
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[0][ this.ID ] = null;
			delete args.targetCharacter._internal.spellEffects[ this.characterSpellEffectID ];
		}
		
		
		
		switch( args.component )
		{
			case 0:	
				self.alpha = 0;
				
				soundManager.play( 'teleport' + spellEffects.soundIncrementor, 
												{
													onfinish: function () 
													{
														delete args.targetCharacter._internal.soundEffects[ self.spellEffectSoundID ];	
													}
												});
				
				var _animateFunction =	function()
																	{
																		if( self.alpha < 1 )
																		{
																			self.alpha += 0.2;
																		}
																		
																		self.rotation += Math.PI / 32;

																		_animateFunctionPointer = setTimeout( _animateFunction, 50 );
																	}
				
				var _animateFunctionPointer = setTimeout( _animateFunction, 50 );
		
				setTimeout( function() 
										{ 
											clearTimeout( _animateFunctionPointer );
											
											var _t = setInterval( function()
																				{
																					self.alpha -= 0.1;
																					
																					if( self.alpha > 0 )
																					{
																						return;
																					}
																					
																					self.remove();
																					
																					clearInterval( _t );
																					
																				}, 40 );
										}, self.duration );
										
			break;
			case 1:
				setTimeout( function()
							{
								teleportImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/teleport/teleport2.png';
								
								setTimeout( function()
													{
														teleportImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/teleport/teleport3.png';
														
														setTimeout( function()
																			{
																				teleportImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/teleport/teleport4.png';
																				
																				setTimeout( function()
																									{
																										teleportImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/teleport/teleport5.png';
														
																										var _t = setInterval( function()
																															{
																																self.alpha -= 0.1;
																																
																																if( self.alpha > 0 )
																																{
																																	return;
																																}
																																
																																self.remove();
																																
																																clearInterval( _t );
																																
																															}, 20 );
																										
																									}, 100 );
																			}, 100 );	
													}, 100 );
							}, 100 );	
			break;
		}
		
		
	} //end spinning aura

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.teleportAura.js
*/


	spellEffects.teleportAura = function( args )
	{
		this.ID = spellEffects.layer[0].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		this.alpha = 1;
		this.offsetX = 60;
		this.offsetY = 60;
		this.rotation = Math.random() * (Math.PI * 2);
		this.deleteRange = 120;
		this.previousX = args.targetCharacter.characterData.character_zone_x - this.offsetX;
		this.previousY = args.targetCharacter.characterData.character_zone_y - this.offsetY;
		this.duration = 1500;
		
		var self = this;
		
		var teleportAuraImageObject = new Image();
		teleportAuraImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/aura/blue/aura_blue1' + args.component + '.png';
		
		//draw the teleportAura
		this.draw = function()
		{
			Map.ctx.globalAlpha = self.alpha;
			
			Map.ctx.save();
			
			Map.ctx.translate( args.targetCharacter.characterData.character_zone_x + Map.viewPortX, args.targetCharacter.characterData.character_zone_y + Map.viewPortY );
			
			Map.ctx.rotate( self.rotation );
			
			Map.ctx.drawImage(
											teleportAuraImageObject,
											- self.offsetX,
											- self.offsetY
										);
	
			self.previousX = args.targetCharacter.characterData.character_zone_x - self.offsetX;
			self.previousY = args.targetCharacter.characterData.character_zone_y - self.offsetY;
	
			Map.ctx.restore();
			
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the teleportAura
		this.remove = function()
		{
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[0][ this.ID ] = null;
			delete args.targetCharacter._internal.spellEffects[ this.characterSpellEffectID ];
		}
		
		
		
		switch( args.component )
		{
			case 0:	
				self.alpha = 0;
				
				var teleportAuraSound = soundManager.createSound({
						id: 'teleportAura' + ( ++spellEffects.soundIncrementor ),
						url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/02 - Freedom 90.mp3',
						volume: spellEffects.volumeByRange ( Component.bugcraft.currentCharacterObject.characterData.character_zone_x, Component.bugcraft.currentCharacterObject.characterData.character_zone_y, args.targetCharacter.characterData.character_zone_x, args.targetCharacter.characterData.character_zone_y, spellEffects.volumeRangeLong ),
						pan:  spellEffects.soundPan ( Component.bugcraft.currentCharacterObject.characterData.character_zone_x, Component.bugcraft.currentCharacterTarget.characterData.character_zone_x, spellEffects.volumeRangeLong ) - 20
					});
				
				this.spellEffectSoundID = args.targetCharacter._internal.soundEffects.push( teleportAuraSound ) - 1;
				
				soundManager.play( 'teleportAura' + spellEffects.soundIncrementor, 
												{
													onfinish: function () 
													{
														delete args.targetCharacter._internal.soundEffects[ self.spellEffectSoundID ];	
													}
												});
				
				var _animateFunction =	function()
																	{
																		if( self.alpha < 1 )
																		{
																			self.alpha += 0.2;
																		}
			
																		_animateFunctionPointer = setTimeout( _animateFunction, 50 );
																	}			
			break;
			case 1:
				self.alpha = 0;
				var _animateFunction =	function()
																	{
																		if( self.alpha < 1 )
																		{
																			self.alpha += 0.2;
																		}
																		
																		self.rotation += Math.PI / 32;

																		_animateFunctionPointer = setTimeout( _animateFunction, 50 );
																	}						
			break;
			case 2:
				self.alpha = 0;
				var _animateFunction =	function()
																	{
																		if( self.alpha < 1 )
																		{
																			self.alpha += 0.2;
																		}

																		self.rotation -= Math.PI / 32;

																		_animateFunctionPointer = setTimeout( _animateFunction, 50 );
																	}						
			break;
		}
		
		var _animateFunctionPointer = setTimeout( _animateFunction, 50 );
		
		setTimeout( function() 
								{ 
									clearTimeout( _animateFunctionPointer );
									
									var _t = setInterval( function()
																		{
																			self.alpha -= 0.1;
																			
																			if( self.alpha > 0 )
																			{
																				return;
																			}
																			
																			self.remove();
																			
																			clearInterval( _t );
																			
																		}, 40 );
								}, self.duration );
	} //end spinning aura

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.teleportComplete.js
*/


	spellEffects.teleportComplete = function( args )
	{
		this.ID = spellEffects.layer[1].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		
		this.draw = function()
		{
			
		}
		
		var effect0 = new spellEffects.teleportAura({ 			
				sourceCharacter: args.sourceCharacter,														
				targetCharacter: args.targetCharacter,
				component: 0
		});
		var effect1 = new spellEffects.teleportAura({ 																							
				sourceCharacter: args.sourceCharacter,
				targetCharacter: args.targetCharacter,
				component: 1
		});
		var effect2 = new spellEffects.teleportAura({ 																						
				sourceCharacter: args.sourceCharacter,
				targetCharacter: args.targetCharacter,
				component: 2
		});	
		var effect00 = new spellEffects.teleport({ 			
				sourceCharacter: args.sourceCharacter,														
				targetCharacter: args.targetCharacter,
				component: 0
		});
		var effect01 = new spellEffects.teleport({ 																							
				sourceCharacter: args.sourceCharacter,
				targetCharacter: args.targetCharacter,
				component: 1
		});

		this.remove = function()
		{
			effect0.remove();
			effect1.remove();
			effect2.remove();
			effect00.remove();
			effect01.remove();
		}
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.tentCapturedAnterium.js
*/

	
	spellEffects.tentCapturedAnterium = function( args )
	{
		var _c = args.targetCharacter, _cd = _c.characterData;
		
		this.ID = spellEffects.layer[0].push( this ) - 1;
		this.characterSpellEffectID = _c._internal.spellEffects.push( this ) - 1;
		this.alpha = 1;
		this.offsetX = 70; //half the width of the image 
		this.offsetY = 70; //half the height of the image
		this.deleteRange = 140; // greatest of the height or widht of the image
		this.previousX = _cd.character_zone_x - this.offsetX - 100; // both previousX/Y used to erase the image from the canvas
		this.previousY = _cd.character_zone_y - this.offsetY - 100;
		
		var self = this, _glowImage = new Image(), _rotation = 0;
		
		_glowImage.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/towerCapturedAnterium/storeroom_anterium.png';
		
		//draw the anteriumFlag
		this.draw = function()
		{
			Map.ctx.globalAlpha = self.alpha;
			
			Map.ctx.save();
			
			Map.ctx.translate( _cd.character_zone_x + Map.viewPortX, _cd.character_zone_y + Map.viewPortY );
			
			Map.ctx.rotate( ( _rotation += 0.001 ) * Math.PI * 2 );
			
			Map.ctx.drawImage(
									_glowImage,
									- self.offsetX,
									- self.offsetY
								);
			
			self.previousX = _cd.character_zone_x - self.offsetX - 50;
			self.previousY = _cd.character_zone_y - self.offsetY - 50;
			
			Map.ctx.restore();
			
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the anteriumFlag
		this.remove = function()
		{
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[0][ this.ID ] = null;
			delete _c._internal.spellEffects[ this.characterSpellEffectID ];
		}
		
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.tentCapturedHegemony.js
*/

	
	spellEffects.tentCapturedHegemony = function( args )
	{
		var _c = args.targetCharacter, _cd = _c.characterData;
		
		this.ID = spellEffects.layer[0].push( this ) - 1;
		this.characterSpellEffectID = _c._internal.spellEffects.push( this ) - 1;
		this.alpha = 1;
		this.offsetX = 70; //half the width of the image 
		this.offsetY = 70; //half the height of the image
		this.deleteRange = 140; // greatest of the height or widht of the image
		this.previousX = _cd.character_zone_x - this.offsetX - 100; // both previousX/Y used to erase the image from the canvas
		this.previousY = _cd.character_zone_y - this.offsetY - 100;
		
		var self = this, _glowImage = new Image(), _rotation = 0;
		
		_glowImage.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/towerCapturedHegemony/storeroom_hegemony.png';
		
		//draw the anteriumFlag
		this.draw = function()
		{
			Map.ctx.globalAlpha = self.alpha;
			
			Map.ctx.save();
			
			Map.ctx.translate( _cd.character_zone_x + Map.viewPortX, _cd.character_zone_y + Map.viewPortY );
			
			Map.ctx.rotate( ( _rotation += 0.001 ) * Math.PI * 2 );
			
			Map.ctx.drawImage(
									_glowImage,
									- self.offsetX,
									- self.offsetY
								);
			
			self.previousX = _cd.character_zone_x - self.offsetX - 50;
			self.previousY = _cd.character_zone_y - self.offsetY - 50;
			
			Map.ctx.restore();
			
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the anteriumFlag
		this.remove = function()
		{
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[0][ this.ID ] = null;
			delete _c._internal.spellEffects[ this.characterSpellEffectID ];
		}
		
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.towerExplosion.js
*/

	
	spellEffects.towerExplosion = function( args )
	{
		var self = this,
				_deathFrames = {},
				_tc = args.targetCharacter,
				_tcd = _tc.characterData,
				_changeFrameFunctionPointer = null,
				_currentIndex = 1,
				_processingIndex = 1,
				_messImageAlpha = 0,
				_messIncrement = 0.1;
		
		this.ID = spellEffects.layer[0].push( this ) - 1;
		this.characterSpellEffectID = _tc._internal.spellEffects.push( this ) - 1;
		this.offsetX = 75;
		this.offsetY = 75;
		this.rotation = _tcd.character_rotation;
		this.deleteRange = 70;
		this.previousX = _tcd.character_zone_x - this.offsetX;
		this.previousY = _tcd.character_zone_y - this.offsetY;
		
		// initialize
		
		Application.sound.playExclusive({
											url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/towerExplosion/explosion.mp3',
											onFinish: function()
											{
												
											}
										});
		
		for(var i=1;i<=8;i++)
		{
			_deathFrames[ i ] = { image: new Image(), alpha: 0 };
			_deathFrames[ i ].image.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/towerExplosion/towerexplode' + i + '.png';
		}
		
		//draw the bombardierBeetleDeath spatter
		this.draw = function()
		{
			Map.ctx.save();
			
			Map.ctx.translate( self.previousX + self.offsetX + Map.viewPortX, self.previousY + self.offsetY + Map.viewPortY );
			
			Map.ctx.rotate( ( self.rotation - 90 ) * Math.PI / 180 );
			
			for(var i in _deathFrames)
			{
				var _ia = _deathFrames[ _currentIndex ];
				
				Map.ctx.globalAlpha = _ia.alpha;
				
				Map.ctx.drawImage(
								_ia.image,
								- self.offsetX,
								- self.offsetY
							);
			}
			
			Map.ctx.restore();
			
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the deathDecay
		this.remove = function()
		{
			clearTimeout( _changeFrameFunctionPointer );
			
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[0][ this.ID ] = null;
			
			delete _tc._internal.spellEffects[ this.characterSpellEffectID ];
		}
		
		var _changeFrameFunction = function()
		{
			_deathFrames[ _currentIndex ].alpha += 0.1;
			
			for(var i=_processingIndex - 1;i>0;i--)
			{
				if( i - 1 < 1 )
				{
					continue;
				}
				
				_deathFrames[ Math.min( i - 1, 8 ) ].alpha = Math.max( 0, _deathFrames[ Math.min( i, 8 ) ].alpha - 0.1 );
			}
			
			for(var i=_processingIndex;i<=_processingIndex + 1;i++)
			{
				if( i + 1 > 8 )
				{
					continue;
				}
				
				_deathFrames[ i + 1 ].alpha = Math.max( 0, _deathFrames[ i ].alpha - 0.1 );
			}
			
			if( _deathFrames[ _currentIndex ].alpha >= 1 )
			{
				_deathFrames[ _currentIndex ].alpha = 1;
				
				if( _currentIndex < 8 )
				{
					_currentIndex++;
				}
				
				_processingIndex++;
			}
			
			if( _currentIndex == 8 && _deathFrames[ _currentIndex ].alpha <= 0 )
			{
				self.remove();
				
				return;
			}
			
			_changeFrameFunctionPointer = setTimeout( _changeFrameFunction, 100 );
		}
		
		_changeFrameFunction();
		
	} //end bombardierBeetleDeath

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.trapAmber.js
*/


	spellEffects.trapAmber = function( args )
	{
		this.ID = spellEffects.layer[1].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		this.alpha = 1;
		this.offsetX = 30;
		this.offsetY = 30;
		this.deleteRange = 60;
		this.previousX = args.targetCharacter.characterData.character_zone_x - 43;
		this.previousY = args.targetCharacter.characterData.character_zone_y - 43;
		this.rotation = Math.random() * (Math.PI * 2);
		this.duration = 5000 - Component.bugcraft.latency;
		
		var self = this;
		
		var trapAmberImageObject = new Image();
		trapAmberImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/trap/amber/amber_trap0.png';
		
		var trapAmberSound = soundManager.createSound({
				id: 'trapAmber' + ( ++spellEffects.soundIncrementor ),
				url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/trap/amber/cracks2.mp3', 
				volume: spellEffects.volumeByRange ( Component.bugcraft.currentCharacterObject.characterData.character_zone_x, Component.bugcraft.currentCharacterObject.characterData.character_zone_y, args.targetCharacter.characterData.character_zone_x, args.targetCharacter.characterData.character_zone_y, spellEffects.volumeRangeLong )
		});
		
		this.spellEffectSoundID = args.targetCharacter._internal.soundEffects.push( trapAmberSound ) - 1;
		
		soundManager.play( 'trapAmber' + spellEffects.soundIncrementor, 
										{
											onfinish: function () 
											{
												delete args.targetCharacter._internal.soundEffects[ self.spellEffectSoundID ];	
											}
										});
		
		//draw the trapAmber
		this.draw = function()
		{
			
			Map.ctx.globalAlpha = self.alpha;
			
			Map.ctx.save();
			
			Map.ctx.translate( args.targetCharacter.characterData.character_zone_x + Map.viewPortX, args.targetCharacter.characterData.character_zone_y + Map.viewPortY );
			
			Map.ctx.rotate( self.rotation );
			
			Map.ctx.drawImage(
							trapAmberImageObject,
							- self.offsetX,
							- self.offsetY
						);
						
			self.previousX = args.targetCharacter.characterData.character_zone_x - 43;
			self.previousY = args.targetCharacter.characterData.character_zone_y - 43;
			
			Map.ctx.restore();
			
			Map.ctx.globalAlpha = 1;
		}

		//remove the trapAmber
		
		
		this.remove = function()
		{
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[1][ this.ID ] = null;
			delete args.targetCharacter._internal.spellEffects[ this.characterSpellEffectID ];
		}

		setTimeout( function()
							{
								trapAmberImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/trap/amber/amber_trap1.png';
								
								setTimeout( function()
													{
														trapAmberImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/trap/amber/amber_trap2.png';
														
														setTimeout( function()
																			{
																				trapAmberImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/trap/amber/amber_trap3.png';
																				
																				setTimeout( function()
																									{
																										trapAmberImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/trap/amber/amber_trap4.png';
																										
																										setTimeout( function()
																																{
																																	var _t = setInterval( function()
																																						{
																																							self.alpha -= 0.02;
																																							
																																							if( self.alpha > 0 )
																																							{
																																								return;
																																							}
																																							
																																							self.remove();
																																							
																																							clearInterval( _t );
																																							
																																						}, 50 );
																																						
																																}, self.duration );
																									}, 170);
																			}, 170);
													}, 170);
							}, 170);					
	
	} //end trapAmber

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.vendorIcon.js
*/


	spellEffects.vendorIcon = function( args )
	{
		var self = this, iconImageObject = new Image(), _tc = args.targetCharacter;
		
		this.ID = spellEffects.layer[1].push( this ) - 1;
		this.characterSpellEffectID = _tc._internal.spellEffects.push( this ) - 1;
		this.alpha = 0;
		this.offsetX = 30;
		this.offsetY = 30;
		this.deleteRange = 60;
		
		iconImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/vendorIcon/' + args.iconName + '.png';
		
		//draw the low health effect
		this.draw = function()
		{
			Map.ctx.globalAlpha = self.alpha;
			
			Map.ctx.drawImage(
							iconImageObject,
							_tc.characterData.character_zone_x - self.offsetX + Map.viewPortX + 15,
							_tc.characterData.character_zone_y - self.offsetY + Map.viewPortY - 15
						);
			
			Map.ctx.globalAlpha = 1;
		}
		
		//remove the hitVenomSting
		this.remove = function()
		{
			spellEffects.layerCleaner.push( self );
			spellEffects.layer[1][ self.ID ] = null;
			
			delete _tc._internal.spellEffects[ self.characterSpellEffectID ];
		}
		
		var _fadeFunction = function( _inc, _final, _gt )
		{
			self.alpha = Math.round( ( self.alpha += _inc ) * 100 ) / 100;
			
			if( ( _gt ? self.alpha > _final : self.alpha < _final ) )
			{
				setTimeout( function()
				{
					_fadeFunction( _inc, _final, _gt );
				}, 100 );
				
				return;
			}
			
			// reached the target
			setTimeout( function()
			{
				_fadeFunction( -_inc, ( _final == 1 ) ? 0.5 : 1, ( _final == 1 ) );
			}, 100 );
		}
		
		_fadeFunction( 0.04, 1, false );
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.waterWaves.js
*/

	
	spellEffects.waterWaves = function( args )
	{
		var self = this,
				_animationFrames = {},
				_tc = args.targetCharacter,
				_tcd = _tc.characterData,
				_changeFrameFunctionPointer = null,
				_currentIndex = 1,
				_maxFrames = 9;
		
		this.ID = spellEffects.layer[0].push( this ) - 1;
		this.characterSpellEffectID = _tc._internal.spellEffects.push( this ) - 1;
		this.offsetX = 150;
		this.offsetY = 150;
		this.deleteRange = 150;
		this.previousX = _tcd.character_zone_x - this.offsetX;
		this.previousY = _tcd.character_zone_y - this.offsetY;
		
		// initialize
		
		Application.sound.playExclusive({
											url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/waterWaves/gulls.mp3',
											onFinish: function()
											{
												
											}
										});
		
		for(var i=1;i<=_maxFrames;i++)
		{
			_animationFrames[ i ] = { image: new Image(), alpha: 0 };
			_animationFrames[ i ].image.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/waterWaves/singlewave' + i + '.png';
		}
		
		//draw the bombardierBeetleDeath spatter
		this.draw = function()
		{
			Map.ctx.save();
			
			Map.ctx.translate( self.previousX + self.offsetX + Map.viewPortX, self.previousY + self.offsetY + Map.viewPortY );
			
			Map.ctx.rotate( ( _tcd.character_rotation - 90 ) * Math.PI / 180 );
			
			Map.ctx.drawImage(
							_animationFrames[ _currentIndex ].image,
							- self.offsetX,
							- self.offsetY
						);
			
			Map.ctx.restore();
		}
		
		//remove the deathDecay
		this.remove = function()
		{
			clearTimeout( _changeFrameFunctionPointer );
			
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[0][ this.ID ] = null;
			
			delete _tc._internal.spellEffects[ this.characterSpellEffectID ];
		}
		
		var _changeFrameFunction = function()
		{
			_currentIndex++;
			
			if( _currentIndex == _maxFrames )
			{
				_changeFrameFunctionPointer = setTimeout( _changeFrameFunction, 1000 + Math.random() * 2000 );
				
				return;
			}
			else if( _currentIndex < _maxFrames )
			{
				_changeFrameFunctionPointer = setTimeout( _changeFrameFunction, 100 );
				
				return;
			}
			else
			{
				_currentIndex = 1;
				
				_changeFrameFunctionPointer = setTimeout( _changeFrameFunction, 100 );
			}
		}
		
		_changeFrameFunction();
		
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.waterWaves2.js
*/

	
	spellEffects.waterWaves2 = function( args )
	{
		var self = this,
				_animationFrames = {},
				_tc = args.targetCharacter,
				_tcd = _tc.characterData,
				_changeFrameFunctionPointer = null,
				_currentIndex = 1,
				_maxFrames = 9;
		
		this.ID = spellEffects.layer[0].push( this ) - 1;
		this.characterSpellEffectID = _tc._internal.spellEffects.push( this ) - 1;
		this.offsetX = 150;
		this.offsetY = 150;
		this.deleteRange = 150;
		this.previousX = _tcd.character_zone_x - this.offsetX;
		this.previousY = _tcd.character_zone_y - this.offsetY;
		
		// initialize
		
		Application.sound.playExclusive({
											url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/waterWaves/gulls.mp3',
											onFinish: function()
											{
												
											}
										});
		
		for(var i=1;i<=_maxFrames;i++)
		{
			_animationFrames[ i ] = { image: new Image(), alpha: 0 };
			_animationFrames[ i ].image.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/waterWaves2/waves' + i + '.png';
		}
		
		//draw the bombardierBeetleDeath spatter
		this.draw = function()
		{
			Map.ctx.save();
			
			Map.ctx.translate( self.previousX + self.offsetX + Map.viewPortX, self.previousY + self.offsetY + Map.viewPortY );
			
			Map.ctx.rotate( ( _tcd.character_rotation - 90 ) * Math.PI / 180 );
			
			Map.ctx.drawImage(
							_animationFrames[ _currentIndex ].image,
							- self.offsetX,
							- self.offsetY
						);
			
			Map.ctx.restore();
		}
		
		//remove the deathDecay
		this.remove = function()
		{
			clearTimeout( _changeFrameFunctionPointer );
			
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[0][ this.ID ] = null;
			
			delete _tc._internal.spellEffects[ this.characterSpellEffectID ];
		}
		
		var _changeFrameFunction = function()
		{
			_currentIndex++;
			
			if( _currentIndex == _maxFrames )
			{
				_changeFrameFunctionPointer = setTimeout( _changeFrameFunction, 1000 + Math.random() * 2000 );
				
				return;
			}
			else if( _currentIndex < _maxFrames )
			{
				_changeFrameFunctionPointer = setTimeout( _changeFrameFunction, 100 );
				
				return;
			}
			else
			{
				_currentIndex = 1;
				
				_changeFrameFunctionPointer = setTimeout( _changeFrameFunction, 100 );
			}
		}
		
		_changeFrameFunction();
		
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.watertrickle1.js
*/

	
	spellEffects[ 'watertrickle1' ] = function( args )
	{
		var self = this,
				_ccd = Component.bugcraft.currentCharacterObject.characterData,
				_moveFrames = {},
				_tc = args.targetCharacter,
				_tcd = _tc.characterData,
				_changeFrameFunctionPointer = null,
				_currentIndex = 1,
				_maxFrames = 1,
				_backgroundSound = null;
		
		this.ID = spellEffects.layer[0].push( this ) - 1;
		this.characterSpellEffectID = _tc._internal.spellEffects.push( this ) - 1;
		this.offsetX = 20;
		this.offsetY = 20;
		this.rotation = _tcd.character_rotation;
		this.deleteRange = 40;
		this.previousX = _tcd.character_zone_x - this.offsetX;
		this.previousY = _tcd.character_zone_y - this.offsetY;
		
		// initialize
		
		var _soundLoop = function()
		{
			_backgroundSound = Application.sound.playExclusive({
												url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/watertrickle1/watertrickle1.mp3',
												volume: spellEffects.volumeByRangeVoice(
																			_ccd.character_zone_x,
																			_ccd.character_zone_y,
																			_tcd.character_zone_x,
																			_tcd.character_zone_y,
																			spellEffects.volumeRangeLong
																		),
												onFinish: function()
												{
													_soundLoop();
												}
											});
		}
		
		//draw the bombardierBeetleDeath spatter
		this.draw = function()
		{
			
		}
		
		//remove the deathDecay
		this.remove = function()
		{
			clearTimeout( _changeFrameFunctionPointer );
			
			if( _backgroundSound )
			{
				_backgroundSound.stop();
			}
			
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[0][ this.ID ] = null;
			
			delete _tc._internal.spellEffects[ this.characterSpellEffectID ];
		}
		
		var _changeFrameFunction = function()
		{
			_currentIndex++;
			
			if( _currentIndex > _maxFrames )
			{
				_currentIndex = 1;
				
				setTimeout( _changeFrameFunction, 2000 + Math.random() * 5000 );
				
				return;
			}
			
			_changeFrameFunctionPointer = setTimeout( _changeFrameFunction, 100 );
		}
		
		_soundLoop();
		//_changeFrameFunction();
		
	} //end bombardierBeetleDeath

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.wave5secs.js
*/

	
	spellEffects[ 'wave5secs' ] = function( args )
	{
		var self = this,
				_ccd = Component.bugcraft.currentCharacterObject.characterData,
				_moveFrames = {},
				_tc = args.targetCharacter,
				_tcd = _tc.characterData,
				_changeFrameFunctionPointer = null,
				_currentIndex = 1,
				_maxFrames = 1,
				_backgroundSound = null;
		
		this.ID = spellEffects.layer[0].push( this ) - 1;
		this.characterSpellEffectID = _tc._internal.spellEffects.push( this ) - 1;
		this.offsetX = 20;
		this.offsetY = 20;
		this.rotation = _tcd.character_rotation;
		this.deleteRange = 40;
		this.previousX = _tcd.character_zone_x - this.offsetX;
		this.previousY = _tcd.character_zone_y - this.offsetY;
		
		// initialize
		
		var _soundLoop = function()
		{
			_backgroundSound = Application.sound.playExclusive({
												url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/wave5secs/wave5secs.mp3',
												volume: spellEffects.volumeByRangeVoice(
																			_ccd.character_zone_x,
																			_ccd.character_zone_y,
																			_tcd.character_zone_x,
																			_tcd.character_zone_y,
																			spellEffects.volumeRangeLong
																		),
												onFinish: function()
												{
													_soundLoop();
												}
											});
		}
		
		// for(var i=1;i<=_maxFrames;i++)
		// {
		// 	_moveFrames[ i ] = { image: new Image(), alpha: 0 };
		// 	_moveFrames[ i ].image.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/wave5secs/wave5secs' + i + '.png';
		// }
		
		//draw the bombardierBeetleDeath spatter
		this.draw = function()
		{
			// Map.ctx.save();
			
			// Map.ctx.translate( self.previousX + self.offsetX + Map.viewPortX, self.previousY + self.offsetY + Map.viewPortY );
			
			// Map.ctx.rotate( ( self.rotation - 90 ) * Math.PI / 180 );
			
			// Map.ctx.shadowColor = 'rgba(0, 0, 0, 0.7)';
			// Map.ctx.shadowOffsetX = 3;
			// Map.ctx.shadowOffsetY = 3;
			
			// Map.ctx.drawImage(
			// 				_moveFrames[ _currentIndex ].image,
			// 				- self.offsetX,
			// 				- self.offsetY
			// 			);
			
			// Map.ctx.restore();
			
			// Map.ctx.globalAlpha = 1;
		}
		
		//remove the deathDecay
		this.remove = function()
		{
			clearTimeout( _changeFrameFunctionPointer );
			
			if( _backgroundSound )
			{
				_backgroundSound.stop();
			}
			
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[0][ this.ID ] = null;
			
			delete _tc._internal.spellEffects[ this.characterSpellEffectID ];
		}
		
		var _changeFrameFunction = function()
		{
			_currentIndex++;
			
			if( _currentIndex > _maxFrames )
			{
				_currentIndex = 1;
				
				setTimeout( _changeFrameFunction, 2000 + Math.random() * 5000 );
				
				return;
			}
			
			_changeFrameFunctionPointer = setTimeout( _changeFrameFunction, 100 );
		}
		
		_soundLoop();
		// _changeFrameFunction();
		
	} //end bombardierBeetleDeath

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.wavesanimsound.js
*/

	
	spellEffects[ 'wavesanimsound' ] = function( args )
	{
		var self = this,
				_moveFrames = {},
				_tc = args.targetCharacter,
				_tcd = _tc.characterData,
				_changeFrameFunctionPointer = null,
				_currentIndex = 1,
				_maxFrames = 9;
		
		this.ID = spellEffects.layer[0].push( this ) - 1;
		this.characterSpellEffectID = _tc._internal.spellEffects.push( this ) - 1;
		this.offsetX = 20;
		this.offsetY = 20;
		this.rotation = _tcd.character_rotation;
		this.deleteRange = 40;
		this.previousX = _tcd.character_zone_x - this.offsetX;
		this.previousY = _tcd.character_zone_y - this.offsetY;
		
		// initialize
		
		for(var i=1;i<=_maxFrames;i++)
		{
			_moveFrames[ i ] = { image: new Image(), alpha: 0 };
			_moveFrames[ i ].image.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/wavesanimsound/wavesanimsound' + i + '.png';
		}
		
		//draw the bombardierBeetleDeath spatter
		this.draw = function()
		{
			Map.ctx.save();
			
			Map.ctx.translate( self.previousX + self.offsetX + Map.viewPortX, self.previousY + self.offsetY + Map.viewPortY );
			
			Map.ctx.rotate( ( self.rotation - 90 ) * Math.PI / 180 );
			
			//Map.ctx.shadowColor = 'rgba(0, 0, 0, 0.7)';
			//Map.ctx.shadowOffsetX = 3;
			//Map.ctx.shadowOffsetY = 3;
			
			Map.ctx.drawImage(
							_moveFrames[ _currentIndex ].image,
							- self.offsetX,
							- self.offsetY
						);
			
			Map.ctx.restore();
			
			//Map.ctx.globalAlpha = 1;
		}
		
		//remove the deathDecay
		this.remove = function()
		{
			clearTimeout( _changeFrameFunctionPointer );
			
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[0][ this.ID ] = null;
			
			delete _tc._internal.spellEffects[ this.characterSpellEffectID ];
		}
		
		var _changeFrameFunction = function()
		{
			_currentIndex++;
			
			if( _currentIndex > _maxFrames )
			{
				_currentIndex = 1;
				
				setTimeout( _changeFrameFunction, 2000 + Math.random() * 5000 );
				
				return;
			}
			
			_changeFrameFunctionPointer = setTimeout( _changeFrameFunction, 100 );
		}
		
		_changeFrameFunction();
		
	} //end bombardierBeetleDeath

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.wavesrythmical7sec.js
*/

	
	spellEffects[ 'wavesrythmical7sec' ] = function( args )
	{
		var self = this,
				_ccd = Component.bugcraft.currentCharacterObject.characterData,
				_moveFrames = {},
				_tc = args.targetCharacter,
				_tcd = _tc.characterData,
				_changeFrameFunctionPointer = null,
				_currentIndex = 1,
				_maxFrames = 1,
				_backgroundSound = null;
		
		this.ID = spellEffects.layer[0].push( this ) - 1;
		this.characterSpellEffectID = _tc._internal.spellEffects.push( this ) - 1;
		this.offsetX = 20;
		this.offsetY = 20;
		this.rotation = _tcd.character_rotation;
		this.deleteRange = 40;
		this.previousX = _tcd.character_zone_x - this.offsetX;
		this.previousY = _tcd.character_zone_y - this.offsetY;
		
		// initialize
		
		var _soundLoop = function()
		{
			_backgroundSound = Application.sound.playExclusive({
												url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/wavesrythmical7sec/wavesrythmical7sec.mp3',
												volume: spellEffects.volumeByRangeVoice(
																			_ccd.character_zone_x,
																			_ccd.character_zone_y,
																			_tcd.character_zone_x,
																			_tcd.character_zone_y,
																			spellEffects.volumeRangeLong
																		),
												onFinish: function()
												{
													_soundLoop();
												}
											});
		}
		
		// for(var i=1;i<=_maxFrames;i++)
		// {
		// 	_moveFrames[ i ] = { image: new Image(), alpha: 0 };
		// 	_moveFrames[ i ].image.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/wavesrythmical7sec/wavesrythmical7sec' + i + '.png';
		// }
		
		//draw the bombardierBeetleDeath spatter
		this.draw = function()
		{
			// Map.ctx.save();
			
			// Map.ctx.translate( self.previousX + self.offsetX + Map.viewPortX, self.previousY + self.offsetY + Map.viewPortY );
			
			// Map.ctx.rotate( ( self.rotation - 90 ) * Math.PI / 180 );
			
			// Map.ctx.shadowColor = 'rgba(0, 0, 0, 0.7)';
			// Map.ctx.shadowOffsetX = 3;
			// Map.ctx.shadowOffsetY = 3;
			
			// Map.ctx.drawImage(
			// 				_moveFrames[ _currentIndex ].image,
			// 				- self.offsetX,
			// 				- self.offsetY
			// 			);
			
			// Map.ctx.restore();
			
			// Map.ctx.globalAlpha = 1;
		}
		
		//remove the deathDecay
		this.remove = function()
		{
			clearTimeout( _changeFrameFunctionPointer );
			
			if( _backgroundSound )
			{
				_backgroundSound.stop();
			}
			
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[0][ this.ID ] = null;
			
			delete _tc._internal.spellEffects[ this.characterSpellEffectID ];
		}
		
		var _changeFrameFunction = function()
		{
			_currentIndex++;
			
			if( _currentIndex > _maxFrames )
			{
				_currentIndex = 1;
				
				setTimeout( _changeFrameFunction, 2000 + Math.random() * 5000 );
				
				return;
			}
			
			_changeFrameFunctionPointer = setTimeout( _changeFrameFunction, 100 );
		}
		
		_soundLoop();
		// _changeFrameFunction();
		
	} //end bombardierBeetleDeath

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.webBottom.js
*/


	spellEffects.webBottom = function( args )
	{
		this.ID = spellEffects.layer[0].push( this ) - 1;
		this.characterSpellEffectID = args.targetCharacter._internal.spellEffects.push( this ) - 1;
		this.alpha = 1;
		this.offsetX = 40;
		this.offsetY = 40;
		this.rotation = Math.random() * (Math.PI * 2);
		this.deleteRange = 80;
		this.previousX = args.targetCharacter.characterData.character_zone_x - this.offsetX;
		this.previousY = args.targetCharacter.characterData.character_zone_y - this.offsetY;
		this.duration = 10000 - Component.bugcraft.latency;
		
		var self = this;
		
		var webBottomImageObject = new Image();
		webBottomImageObject.src = '/components/bugcraft/resources/public/component.bugcraft.spellEffects/images/debuffs/web/web_effectbkgrndVariant.png';
		
		var webBottomSound = soundManager.createSound({
				id: 'webBottom' + ( ++spellEffects.soundIncrementor ),
				url: '/components/bugcraft/resources/public/component.bugcraft.spellEffects/sounds/aura/fortify.mp3',
				volume: spellEffects.volumeByRange ( Component.bugcraft.currentCharacterObject.characterData.character_zone_x, Component.bugcraft.currentCharacterObject.characterData.character_zone_y, args.targetCharacter.characterData.character_zone_x, args.targetCharacter.characterData.character_zone_y, spellEffects.volumeRangeLong )
		});
		
		this.spellEffectSoundID = args.targetCharacter._internal.soundEffects.push( webBottomSound ) - 1;
		
		soundManager.play( 'webBottom' + spellEffects.soundIncrementor, 
										{
											onfinish: function () 
											{
												delete args.targetCharacter._internal.soundEffects[ self.spellEffectSoundID ];	
											}
										});

		//draw the webBottom
		this.draw = function()
		{
			Map.ctx.globalAlpha = self.alpha;
			
			Map.ctx.save();
			
			Map.ctx.translate( args.targetCharacter.characterData.character_zone_x + Map.viewPortX, args.targetCharacter.characterData.character_zone_y + Map.viewPortY );
			
			Map.ctx.rotate( self.rotation );
			
			Map.ctx.drawImage(
											webBottomImageObject,
											- self.offsetX,
											- self.offsetY
										);
			
			self.previousX = args.targetCharacter.characterData.character_zone_x - self.offsetX;
			self.previousY = args.targetCharacter.characterData.character_zone_y - self.offsetY;
										
			Map.ctx.restore();
			
			Map.ctx.globalAlpha = 1;
			
		}
		
		//remove the webBottom
		var self = this;
		
		this.remove = function()
		{
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[0][ this.ID ] = null;
			clearTimeout( _animateFunctionPointer );
			delete args.targetCharacter._internal.spellEffects[ this.characterSpellEffectID ];
		}

		var _animateFunction =	function()
												{
													self.rotation -= Math.PI / 32;

													_animateFunctionPointer = setTimeout( _animateFunction, 40 );
												}
															
		var _animateFunctionPointer = setTimeout( _animateFunction, 10 );
		
		setTimeout( function() 
								{ 
									var _t = setInterval( function()
																		{
																			self.alpha -= 0.1;
																			
																			if( self.alpha > 0 )
																			{
																				return;
																			}
																			
																			self.remove();
																			
																			clearInterval( _t );
																			
																		}, 100 );
								}, self.duration );
	} //end webBottom

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.webBottomV2.js
*/


	spellEffects.webBottomV2 = function( args )
	{
		this.ID = spellEffects.layer[0].push( this ) - 1;
		this.alpha = 1;
		
		var webBottomV2ImageObject = new Image();
		webBottomV2ImageObject.src = 'images/debuff/web/web_effecttop.png';
		
		var webBottomV2Sound = soundManager.createSound({
				id: 'webBottomV2' + ( ++soundIncrementor ),
				url: 'sounds/aura/fortify.mp3',
				volume: spellEffects.volumeByRange ( Component.bugcraft.currentCharacterObject.characterData.character_zone_x, Component.bugcraft.currentCharacterObject.characterData.character_zone_y, args.targetCharacter.characterData.character_zone_x, args.targetCharacter.characterData.character_zone_y, spellEffects.volumeRangeLong )
		});
		//webBottomV2Sound.play();

		//draw the webBottomV2
		this.draw = function()
		{
			spellEffects.ctx.globalAlpha = self.alpha;
			
			spellEffects.ctx.save();
			
			spellEffects.ctx.translate( args.x, args.y );
			
			spellEffects.ctx.rotate( args.rotation );
			
			spellEffects.ctx.drawImage(
											webBottomV2ImageObject,
											-40 ,
											-40
										);
										
			spellEffects.ctx.restore();
			
			spellEffects.ctx.globalAlpha = 1;
			
			
		}
		
		//remove the webBottomV2
		var self = this;
		
		this.remove = function()
		{
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[0][ this.ID ] = null;
		}

		var _animateFunction =	function()
															{
																args.rotation -= Math.PI / 64;

																setTimeout( _animateFunction, 30 );
															}			
		_animateFunction();
		
		setTimeout( function() 
								{ 
									var _t = setInterval( function()
																		{
																			self.alpha -= 0.1;
																			
																			if( self.alpha > 0 )
																			{
																				return;
																			}
																			
																			self.remove();
																			
																			clearInterval( _t );
																			
																		}, 200 );
								}, args.duration );
	} //end webBottomV2

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.webBottomV2_.js
*/


	spellEffects.webBottomV2 = function( args )
	{
		this.ID = spellEffects.layer[0].push( this ) - 1;
		this.alpha = 1;
		
		var webBottomV2ImageObject = new Image();
		webBottomV2ImageObject.src = 'images/debuff/web/web_effecttop.png';
		
		var webBottomV2Sound = soundManager.createSound({
				id: 'webBottomV2' + ( ++soundIncrementor ),
				url: 'sounds/aura/fortify.mp3',
				volume: spellEffects.volumeByRange ( Component.bugcraft.currentCharacterObject.characterData.character_zone_x, Component.bugcraft.currentCharacterObject.characterData.character_zone_y, args.targetCharacter.characterData.character_zone_x, args.targetCharacter.characterData.character_zone_y, spellEffects.volumeRangeLong )
		});
		//webBottomV2Sound.play();

		//draw the webBottomV2
		this.draw = function()
		{
			spellEffects.ctx.globalAlpha = self.alpha;
			
			spellEffects.ctx.save();
			
			spellEffects.ctx.translate( args.x, args.y );
			
			spellEffects.ctx.rotate( args.rotation );
			
			spellEffects.ctx.drawImage(
											webBottomV2ImageObject,
											-40 ,
											-40
										);
										
			spellEffects.ctx.restore();
			
			spellEffects.ctx.globalAlpha = 1;
			
			
		}
		
		//remove the webBottomV2
		var self = this;
		
		this.remove = function()
		{
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[0][ this.ID ] = null;
		}

		var _animateFunction =	function()
															{
																args.rotation -= Math.PI / 64;

																setTimeout( _animateFunction, 30 );
															}			
		_animateFunction();
		
		setTimeout( function() 
								{ 
									var _t = setInterval( function()
																		{
																			self.alpha -= 0.1;
																			
																			if( self.alpha > 0 )
																			{
																				return;
																			}
																			
																			self.remove();
																			
																			clearInterval( _t );
																			
																		}, 200 );
								}, args.duration );
	} //end webBottomV2

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.webTop.js
*/


	spellEffects.webTop = function( args )
	{
		this.ID = spellEffects.layer[1].push( this ) - 1;
		this.alpha = 1;
		
		var webTopImageObject = new Image();
		webTopImageObject.src = 'images/debuff/web/web_effecttopnew0.png';
		
		var webTopSound = soundManager.createSound({
				id: 'webTop' + ( ++soundIncrementor ),
				url: 'sounds/aura/fortify.mp3',
				volume: spellEffects.volumeByRange ( Component.bugcraft.currentCharacterObject.characterData.character_zone_x, Component.bugcraft.currentCharacterObject.characterData.character_zone_y, args.targetCharacter.characterData.character_zone_x, args.targetCharacter.characterData.character_zone_y, spellEffects.volumeRangeLong )
		});
		//webTopSound.play();

		//draw the webTop
		this.draw = function()
		{
			spellEffects.ctx.globalAlpha = self.alpha;
			
			spellEffects.ctx.save();
			
			spellEffects.ctx.translate( args.x, args.y );
			
			spellEffects.ctx.rotate( args.rotation );
			
			spellEffects.ctx.drawImage(
											webTopImageObject,
											-35 ,
											-35
										);
										
			spellEffects.ctx.restore();
			
			spellEffects.ctx.globalAlpha = 1;
			
			
		}
		
		//remove the webTop
		var self = this;
		
		this.remove = function()
		{
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[1][ this.ID ] = null;
		}

		var _animateFunction =	function()
															{
																args.rotation += Math.PI / 32;

																setTimeout( _animateFunction, 30 );
															}			
		_animateFunction();
		
		setTimeout( function() 
								{ 
									var _t = setInterval( function()
																		{
																			self.alpha -= 0.1;
																			
																			if( self.alpha > 0 )
																			{
																				return;
																			}
																			
																			self.remove();
																			
																			clearInterval( _t );
																			
																		}, 200 );
								}, args.duration );
	} //end webTop

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.webTopV2.js
*/


	spellEffects.webTopV2 = function( args )
	{
		this.ID = spellEffects.layer[1].push( this ) - 1;
		this.alpha = 1;
		
		var webTopV2ImageObject = new Image();
		webTopV2ImageObject.src = 'images/debuff/web/web_effectbkgrnd.png';
		
		var webTopV2Sound = soundManager.createSound({
				id: 'webTopV2' + ( ++soundIncrementor ),
				url: 'sounds/aura/fortify.mp3',
				volume: spellEffects.volumeByRange ( Component.bugcraft.currentCharacterObject.characterData.character_zone_x, Component.bugcraft.currentCharacterObject.characterData.character_zone_y, args.targetCharacter.characterData.character_zone_x, args.targetCharacter.characterData.character_zone_y, spellEffects.volumeRangeLong )
		});
		//webTopV2Sound.play();

		//draw the webTopV2
		this.draw = function()
		{
			spellEffects.ctx.globalAlpha = self.alpha;
			
			spellEffects.ctx.save();
			
			spellEffects.ctx.translate( args.x, args.y );
			
			spellEffects.ctx.rotate( args.rotation );
			
			spellEffects.ctx.drawImage(
											webTopV2ImageObject,
											-40 ,
											-40
										);
										
			spellEffects.ctx.restore();
			
			spellEffects.ctx.globalAlpha = 1;
			
			
		}
		
		//remove the webTopV2
		var self = this;
		
		this.remove = function()
		{
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[1][ this.ID ] = null;
		}

		var _animateFunction =	function()
															{
																args.rotation += Math.PI / 32;

																setTimeout( _animateFunction, 30 );
															}			
		_animateFunction();
		
		setTimeout( function() 
								{ 
									var _t = setInterval( function()
																		{
																			self.alpha -= 0.1;
																			
																			if( self.alpha > 0 )
																			{
																				return;
																			}
																			
																			self.remove();
																			
																			clearInterval( _t );
																			
																		}, 200 );
								}, args.duration );
	} //end webTopV2

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.webTopV2_.js
*/


	spellEffects.webTopV2 = function( args )
	{
		this.ID = spellEffects.layer[1].push( this ) - 1;
		this.alpha = 1;
		
		var webTopV2ImageObject = new Image();
		webTopV2ImageObject.src = 'images/debuff/web/web_effectbkgrnd.png';
		
		var webTopV2Sound = soundManager.createSound({
				id: 'webTopV2' + ( ++soundIncrementor ),
				url: 'sounds/aura/fortify.mp3',
				volume: spellEffects.volumeByRange ( Component.bugcraft.currentCharacterObject.characterData.character_zone_x, Component.bugcraft.currentCharacterObject.characterData.character_zone_y, args.targetCharacter.characterData.character_zone_x, args.targetCharacter.characterData.character_zone_y, spellEffects.volumeRangeLong )
		});
		//webTopV2Sound.play();

		//draw the webTopV2
		this.draw = function()
		{
			spellEffects.ctx.globalAlpha = self.alpha;
			
			spellEffects.ctx.save();
			
			spellEffects.ctx.translate( args.x, args.y );
			
			spellEffects.ctx.rotate( args.rotation );
			
			spellEffects.ctx.drawImage(
											webTopV2ImageObject,
											-40 ,
											-40
										);
										
			spellEffects.ctx.restore();
			
			spellEffects.ctx.globalAlpha = 1;
			
			
		}
		
		//remove the webTopV2
		var self = this;
		
		this.remove = function()
		{
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[1][ this.ID ] = null;
		}

		var _animateFunction =	function()
															{
																args.rotation += Math.PI / 32;

																setTimeout( _animateFunction, 30 );
															}			
		_animateFunction();
		
		setTimeout( function() 
								{ 
									var _t = setInterval( function()
																		{
																			self.alpha -= 0.1;
																			
																			if( self.alpha > 0 )
																			{
																				return;
																			}
																			
																			self.remove();
																			
																			clearInterval( _t );
																			
																		}, 200 );
								}, args.duration );
	} //end webTopV2

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellEffects.webTop_.js
*/


	spellEffects.webTop = function( args )
	{
		this.ID = spellEffects.layer[1].push( this ) - 1;
		this.alpha = 1;
		
		var webTopImageObject = new Image();
		webTopImageObject.src = 'images/debuff/web/web_effecttopnew0.png';
		
		var webTopSound = soundManager.createSound({
				id: 'webTop' + ( ++soundIncrementor ),
				url: 'sounds/aura/fortify.mp3',
				volume: spellEffects.volumeByRange ( Component.bugcraft.currentCharacterObject.characterData.character_zone_x, Component.bugcraft.currentCharacterObject.characterData.character_zone_y, args.targetCharacter.characterData.character_zone_x, args.targetCharacter.characterData.character_zone_y, spellEffects.volumeRangeLong )
		});
		//webTopSound.play();

		//draw the webTop
		this.draw = function()
		{
			spellEffects.ctx.globalAlpha = self.alpha;
			
			spellEffects.ctx.save();
			
			spellEffects.ctx.translate( args.x, args.y );
			
			spellEffects.ctx.rotate( args.rotation );
			
			spellEffects.ctx.drawImage(
											webTopImageObject,
											-35 ,
											-35
										);
										
			spellEffects.ctx.restore();
			
			spellEffects.ctx.globalAlpha = 1;
			
			
		}
		
		//remove the webTop
		var self = this;
		
		this.remove = function()
		{
			spellEffects.layerCleaner.push( this );
			spellEffects.layer[1][ this.ID ] = null;
		}

		var _animateFunction =	function()
															{
																args.rotation += Math.PI / 32;

																setTimeout( _animateFunction, 30 );
															}			
		_animateFunction();
		
		setTimeout( function() 
								{ 
									var _t = setInterval( function()
																		{
																			self.alpha -= 0.1;
																			
																			if( self.alpha > 0 )
																			{
																				return;
																			}
																			
																			self.remove();
																			
																			clearInterval( _t );
																			
																		}, 200 );
								}, args.duration );
	} //end webTop

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.spellScenario.js
*/


	var spellScenario = {
		
		parallel: function( args )
		{
			new args.effect1({
						sourceCharacter: args.sourceCharacter,
						targetCharacter: args.sourceCharacter,
						text: args.text
					});
					
			//in order to feel the fact that your spell has an effect, the effect on the target is seen after a delay of 300 ms
			setTimeout( function() {
									new args.effect2({
												sourceCharacter: args.sourceCharacter,
												targetCharacter: args.targetCharacter,
												text: args.text
											});
							}, 200);
		},
		
		cascade: function( args )
		{
			if ( args.targetCharacter != args.sourceCharacter )
			{
				new args.effect1({
							sourceCharacter: args.sourceCharacter,
							targetCharacter: args.targetCharacter,
							text: args.text,
							afterFunction: 	function()
													{
														new args.effect2({
																	sourceCharacter: args.sourceCharacter,
																	targetCharacter: args.targetCharacter,
																	text: args.text
																});
													}
						});
			}
			else
			{
				new args.effect2({
					sourceCharacter: args.sourceCharacter,
					targetCharacter: args.targetCharacter,
					text: args.text
				});
			}
		}
		
	};

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.spellEffects/class.surface.js
*/


	var Surface = {
		
		ctx: null,
		
		layer: 
		{ 
			0: [], 
			1: [] 
		}, 
		
		
		init: function()
		{
			this.ctx = Map.ctx;
			
			//documentWidth = document.body.offsetWidth;
			//documentHeight = document.documentElement.clientHeight
			
			spellEffects.init();
		},
		
		clear: function()
		{
			//this.ctx.clearRect(0, 0, documentWidth, documentHeight);
		}
		
	}





































































































































































































































































































































































































































































































































































/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.skinsStructure/component.bugcraft.skinsStructure.js
*/

	
	if( !Component.bugcraft )
	{
		Component.bugcraft = {};
	}
	
	if( !Component.bugcraft.skinsStructure )
	{
		Component.bugcraft.skinsStructure = {};
	}
	
	if( !Component.bugcraft.skinsStructure.defs )
	{
		Component.bugcraft.skinsStructure.defs = {};
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.skinsStructure/component.bugcraft.skinsStructure.7.js
*/

Component.bugcraft.skinsStructure.defs[ "7" ] =
	{
		frames:
		{
			idle: 1,
			
			walk: 0,
			
			attackMelee: 0
		},
		events:
		{
			
		}
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.skinsStructure/component.bugcraft.skinsStructure.8.js
*/

Component.bugcraft.skinsStructure.defs[ "8" ] =
	{
		frames:
		{
			idle: 1,
			
			walk: 0,
			
			attackMelee: 0
		},
		events:
		{
			
		}
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.skinsStructure/component.bugcraft.skinsStructure.AlgaeCrateFoam.js
*/


		
		Component.bugcraft.skinsStructure.defs[ 'AlgaeCrateFoam' ] =
		{
			frames:
			{
				walk: 0,
		
	idle: 1,
		
	attackMelee: 0,
		
	
			},
			
			events:
			{
				
			}
		}
		
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.skinsStructure/component.bugcraft.skinsStructure.AlgaeCrateWave.js
*/

Component.bugcraft.skinsStructure.defs[ 'AlgaeCrateWave' ] =
	{
		frames:
		{
			idle: 1,
			
			walk: 0,
			
			attackMelee: 0
		},
		events:
		{
			
		}
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.skinsStructure/component.bugcraft.skinsStructure.Bubba.js
*/

Component.bugcraft.skinsStructure.defs[ 'Bubba' ] =
	{
		frames:
		{
			idle: 1,
			
			walk: 0,
			
			attackMelee: 0
		},
		events:
		{
			
		}
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.skinsStructure/component.bugcraft.skinsStructure.CarnivorousPlant.js
*/

Component.bugcraft.skinsStructure.defs[ 'CarnivorousPlant' ] =
	{
		frames:
		{
			idle: 4,
			
			walk: 4,
			
			attackMelee: 4
		},
		events:
		{
			
		}
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.skinsStructure/component.bugcraft.skinsStructure.CarnivorousPlantCorpse.js
*/

	
	Component.bugcraft.skinsStructure.defs[ 'CarnivorousPlantCorpse' ] =
	{
		frames:
		{
			idle: 1,
			
			walk: 0,
			
			attackMelee: 0
		},
		events:
		{
			show: function( characterObject )
			{
				new spellEffects.VEGEDEATH({
														targetCharacter: characterObject
													});
			},
			hide: function( characterObject )
			{
				characterObject.removeVisualEffect( spellEffects.VEGEDEATH );
			}
		}
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.skinsStructure/component.bugcraft.skinsStructure.CarnivorousPlantCorpse1.js
*/

	
	Component.bugcraft.skinsStructure.defs[ 'CarnivorousPlantCorpse1' ] =
	{
		frames:
		{
			idle: 1,
			
			walk: 0,
			
			attackMelee: 0
		},
		events:
		{
			show: function( characterObject )
			{
				new spellEffects.VEGEDEATH({
														targetCharacter: characterObject
													});
			},
			hide: function( characterObject )
			{
				characterObject.removeVisualEffect( spellEffects.VEGEDEATH );
			}
		}
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.skinsStructure/component.bugcraft.skinsStructure.Cat1.js
*/


		
		Component.bugcraft.skinsStructure.defs[ 'Cat1' ] =
		{
			frames:
			{
				walk: 0,
		
	idle: 1,
		
	attackMelee: 0,
		
	
			},
			
			events:
			{
				
			}
		}
		
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.skinsStructure/component.bugcraft.skinsStructure.Cat1Corpse.js
*/


		
		Component.bugcraft.skinsStructure.defs[ 'Cat1Corpse' ] =
		{
			frames:
			{
				walk: 0,
		
	idle: 1,
		
	attackMelee: 0,
		
	
			},
			
			events:
			{
				show: function( characterObject )
			{
				
		
		new spellEffects.RummageJunk({
															targetCharacter: characterObject
														});
		
	
			},
			
		
					
					hide: function( characterObject )
					{
						
								characterObject.removeVisualEffect( spellEffects.RummageJunk );
							
					}
					
				
			}
		}
		
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.skinsStructure/component.bugcraft.skinsStructure.Coc2.js
*/

Component.bugcraft.skinsStructure.defs[ 'Coc2' ] =
	{
		frames:
		{
			idle: 1,
			
			walk: 0,
			
			attackMelee: 4
		},
		events:
		{
			
		}
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.skinsStructure/component.bugcraft.skinsStructure.Coccoon.js
*/

Component.bugcraft.skinsStructure.defs[ 'Coccoon' ] =
	{
		frames:
		{
			idle: 1,
			
			walk: 1,
			
			attackMelee: 1
		},
		events:
		{
			
		}
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.skinsStructure/component.bugcraft.skinsStructure.CoccoonCorpse.js
*/

	
	Component.bugcraft.skinsStructure.defs[ 'CoccoonCorpse' ] =
	{
		frames:
		{
			idle: 1,
			
			walk: 0,
			
			attackMelee: 0
		},
		events:
		{
			show: function( characterObject )
			{
				new spellEffects.adiexplodecocoon({
														targetCharacter: characterObject
													});
			},
			hide: function( characterObject )
			{
				characterObject.removeVisualEffect( spellEffects.adiexplodecocoon );
			}
		}
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.skinsStructure/component.bugcraft.skinsStructure.CoccoonCorpse1.js
*/

	
	Component.bugcraft.skinsStructure.defs[ 'CoccoonCorpse1' ] =
	{
		frames:
		{
			idle: 1,
			
			walk: 0,
			
			attackMelee: 0
		},
		events:
		{
			show: function( characterObject )
			{
				new spellEffects.CorpseCocSound({
														targetCharacter: characterObject
													});
			},
			hide: function( characterObject )
			{
				characterObject.removeVisualEffect( spellEffects.CorpseCocSound );
			}
		}
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.skinsStructure/component.bugcraft.skinsStructure.CoccoonCorpse2.js
*/

Component.bugcraft.skinsStructure.defs[ 'CoccoonCorpse2' ] =
	{
		frames:
		{
			idle: 1,
			
			walk: 0,
			
			attackMelee: 0
		},
		events:
		{
			
		}
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.skinsStructure/component.bugcraft.skinsStructure.CoccoonCorpse3.js
*/


		
		Component.bugcraft.skinsStructure.defs[ 'CoccoonCorpse3' ] =
		{
			frames:
			{
				walk: 0,
		
	idle: 1,
		
	attackMelee: 0,
		
	
			},
			
			events:
			{
				
			}
		}
		
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.skinsStructure/component.bugcraft.skinsStructure.CoccoonCorpse4.js
*/

	
	Component.bugcraft.skinsStructure.defs[ 'CoccoonCorpse4' ] =
	{
		frames:
		{
			idle: 1,
			
			walk: 0,
			
			attackMelee: 0
		},
		events:
		{
			show: function( characterObject )
			{
				new spellEffects.CorpseCocSound({
														targetCharacter: characterObject
													});
			},
			hide: function( characterObject )
			{
				characterObject.removeVisualEffect( spellEffects.CorpseCocSound );
			}
		}
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.skinsStructure/component.bugcraft.skinsStructure.CoccoonCorpse5.js
*/

	
	Component.bugcraft.skinsStructure.defs[ 'CoccoonCorpse5' ] =
	{
		frames:
		{
			idle: 1,
			
			walk: 0,
			
			attackMelee: 0
		},
		events:
		{
			show: function( characterObject )
			{
				new spellEffects.CorpseCocSound({
														targetCharacter: characterObject
													});
			},
			hide: function( characterObject )
			{
				characterObject.removeVisualEffect( spellEffects.CorpseCocSound );
			}
		}
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.skinsStructure/component.bugcraft.skinsStructure.Condom.js
*/

Component.bugcraft.skinsStructure.defs[ 'Condom' ] =
	{
		frames:
		{
			idle: 1,
			
			walk: 1,
			
			attackMelee: 1
		},
		events:
		{
			
		}
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.skinsStructure/component.bugcraft.skinsStructure.Curiosity.js
*/

	
	Component.bugcraft.skinsStructure.defs[ 'Curiosity' ] =
	{
		frames:
		{
			idle: 1,
			
			walk: 1,
			
			attackMelee: 1
		},
		events:
		{
			show: function( characterObject )
			{
				new spellEffects.Droid({
														targetCharacter: characterObject
													});
			},
			hide: function( characterObject )
			{
				characterObject.removeVisualEffect( spellEffects.Droid );
			}
		}
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.skinsStructure/component.bugcraft.skinsStructure.DoorAnte.js
*/


		
		Component.bugcraft.skinsStructure.defs[ 'DoorAnte' ] =
		{
			frames:
			{
				walk: 0,
		
	idle: 1,
		
	attackMelee: 0,
		
	
			},
			
			events:
			{
				
			}
		}
		
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.skinsStructure/component.bugcraft.skinsStructure.DoorAnteBoat.js
*/


		
		Component.bugcraft.skinsStructure.defs[ 'DoorAnteBoat' ] =
		{
			frames:
			{
				walk: 0,
		
	idle: 1,
		
	attackMelee: 0,
		
	
			},
			
			events:
			{
				
			}
		}
		
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.skinsStructure/component.bugcraft.skinsStructure.EggSack.js
*/


		
		Component.bugcraft.skinsStructure.defs[ 'EggSack' ] =
		{
			frames:
			{
				walk: 0,
		
	idle: 1,
		
	attackMelee: 0,
		
	
			},
			
			events:
			{
				
			}
		}
		
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.skinsStructure/component.bugcraft.skinsStructure.EggSack22.js
*/


		
		Component.bugcraft.skinsStructure.defs[ 'EggSack22' ] =
		{
			frames:
			{
				walk: 0,
		
	idle: 4,
		
	attackMelee: 0,
		
	
			},
			
			events:
			{
				
			}
		}
		
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.skinsStructure/component.bugcraft.skinsStructure.EggSack22Corpse.js
*/


		
		Component.bugcraft.skinsStructure.defs[ 'EggSack22Corpse' ] =
		{
			frames:
			{
				walk: 0,
		
	idle: 1,
		
	attackMelee: 0,
		
	
			},
			
			events:
			{
				
			}
		}
		
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.skinsStructure/component.bugcraft.skinsStructure.EggSackCorpse.js
*/


		
		Component.bugcraft.skinsStructure.defs[ 'EggSackCorpse' ] =
		{
			frames:
			{
				walk: 0,
		
	idle: 1,
		
	attackMelee: 0,
		
	
			},
			
			events:
			{
				show: function( characterObject )
			{
				
		
		new spellEffects.EggDie({
															targetCharacter: characterObject
														});
		
	
			},
			
		
					
					hide: function( characterObject )
					{
						
								characterObject.removeVisualEffect( spellEffects.EggDie );
							
					}
					
				
			}
		}
		
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.skinsStructure/component.bugcraft.skinsStructure.EnemySkin.js
*/


		
		Component.bugcraft.skinsStructure.defs[ 'itemDoorModel2Left' ] =
		{
			frames:
			{
				walk: 4,
		
	idle: 1,
		
	attackMelee: 4,
		
	
			},
			
			events:
			{
				
			}
		}
		
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.skinsStructure/component.bugcraft.skinsStructure.HealingTank120.js
*/


		
		Component.bugcraft.skinsStructure.defs[ 'HealingTank120' ] =
		{
			frames:
			{
				walk: 1,
		
	idle: 1,
		
	attackMelee: 1,
		
	
			},
			
			events:
			{
				
			}
		}
		
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.skinsStructure/component.bugcraft.skinsStructure.HealingTank60.js
*/


		
		Component.bugcraft.skinsStructure.defs[ 'HealingTank60' ] =
		{
			frames:
			{
				walk: 1,
		
	idle: 1,
		
	attackMelee: 1,
		
	
			},
			
			events:
			{
				
			}
		}
		
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.skinsStructure/component.bugcraft.skinsStructure.Hoomin.js
*/


		
		Component.bugcraft.skinsStructure.defs[ 'Hoomin' ] =
		{
			frames:
			{
				walk: 4,
		
	idle: 1,
		
	attackMelee: 2,
		
	
			},
			
			events:
			{
				
			}
		}
		
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.skinsStructure/component.bugcraft.skinsStructure.HornyTurtle.js
*/

Component.bugcraft.skinsStructure.defs[ "HornyTurtle" ] =
	{
		frames:
		{
			idle: 1,
			
			walk: 1,
			
			attackMelee: 1
		},
		events:
		{
			
		}
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.skinsStructure/component.bugcraft.skinsStructure.Human.js
*/


		
		Component.bugcraft.skinsStructure.defs[ 'defaultSkin' ] =
		{
			frames:
			{
				walk: 1,
		
	idle: 1,
		
	attackMelee: 0,
		
	
			},
			
			events:
			{
				
			}
		}
		
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.skinsStructure/component.bugcraft.skinsStructure.InvisibleSkin.js
*/

Component.bugcraft.skinsStructure.defs[ "InvisibleSkin" ] =
	{
		frames:
		{
			idle: 1,
			
			walk: 1,
			
			attackMelee: 0
		},
		events:
		{
			
		}
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.skinsStructure/component.bugcraft.skinsStructure.JungleExit.js
*/

Component.bugcraft.skinsStructure.defs[ "JungleExit" ] =
	{
		frames:
		{
			idle: 1,
			
			walk: 0,
			
			attackMelee: 0
		},
		events:
		{
			
		}
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.skinsStructure/component.bugcraft.skinsStructure.MarsRover.js
*/


		
		Component.bugcraft.skinsStructure.defs[ 'MarsRover' ] =
		{
			frames:
			{
				walk: 4,
		
	idle: 1,
		
	attackMelee: 4,
		
	
			},
			
			events:
			{
				
			}
		}
		
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.skinsStructure/component.bugcraft.skinsStructure.NPCSpaceMarine.js
*/


		
		Component.bugcraft.skinsStructure.defs[ 'NPCSpaceMarine' ] =
		{
			frames:
			{
				walk: 6,
		
	idle: 1,
		
	attackMelee: 4,
		
	
			},
			
			events:
			{
				
			}
		}
		
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.skinsStructure/component.bugcraft.skinsStructure.PhermoneAmp.js
*/


		
		Component.bugcraft.skinsStructure.defs[ 'PhermoneAmp' ] =
		{
			frames:
			{
				walk: 1,
		
	idle: 2,
		
	attackMelee: 1,
		
	
			},
			
			events:
			{
				
			}
		}
		
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.skinsStructure/component.bugcraft.skinsStructure.SandFlea.js
*/

Component.bugcraft.skinsStructure.defs[ "SandFlea" ] =
	{
		frames:
		{
			idle: 1,
			
			walk: 15,
			
			attackMelee: 4
		},
		events:
		{
			
		}
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.skinsStructure/component.bugcraft.skinsStructure.SandFleaBetter.js
*/

Component.bugcraft.skinsStructure.defs[ 'SandFleaBetter' ] =
	{
		frames:
		{
			idle: 1,
			
			walk: 4,
			
			attackMelee: 4
		},
		events:
		{
			
		}
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.skinsStructure/component.bugcraft.skinsStructure.Ship1.js
*/

Component.bugcraft.skinsStructure.defs[ 'Ship1' ] =
	{
		frames:
		{
			idle: 1,
			
			walk: 4,
			
			attackMelee: 7
		},
		events:
		{
			
		}
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.skinsStructure/component.bugcraft.skinsStructure.Shipdoor.js
*/

Component.bugcraft.skinsStructure.defs[ 'Shipdoor' ] =
	{
		frames:
		{
			idle: 1,
			
			walk: 0,
			
			attackMelee: 0
		},
		events:
		{
			
		}
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.skinsStructure/component.bugcraft.skinsStructure.SmallCarnivPlant2.js
*/

Component.bugcraft.skinsStructure.defs[ "SmallCarnivPlant2" ] =
	{
		frames:
		{
			idle: 1,
			
			walk: 0,
			
			attackMelee: 0
		},
		events:
		{
			
		}
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.skinsStructure/component.bugcraft.skinsStructure.SmallCarnivPlant3.js
*/


		
		Component.bugcraft.skinsStructure.defs[ 'SmallCarnivPlant3' ] =
		{
			frames:
			{
				walk: 0,
		
	idle: 1,
		
	attackMelee: 0,
		
	
			},
			
			events:
			{
				
			}
		}
		
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.skinsStructure/component.bugcraft.skinsStructure.SmallCarnivorousPlant.js
*/

Component.bugcraft.skinsStructure.defs[ "SmallCarnivorousPlant" ] =
	{
		frames:
		{
			idle: 1,
			
			walk: 4,
			
			attackMelee: 4
		},
		events:
		{
			
		}
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.skinsStructure/component.bugcraft.skinsStructure.SpaceMarine.js
*/


		
		Component.bugcraft.skinsStructure.defs[ 'SpaceMarine' ] =
		{
			frames:
			{
				walk: 6,
		
	idle: 1,
		
	attackMelee: 15,
		
	
			},
			
			events:
			{
				
			}
		}
		
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.skinsStructure/component.bugcraft.skinsStructure.Staircase.js
*/


		
		Component.bugcraft.skinsStructure.defs[ 'Staircase' ] =
		{
			frames:
			{
				walk: 0,
		
	idle: 1,
		
	attackMelee: 0,
		
	
			},
			
			events:
			{
				
			}
		}
		
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.skinsStructure/component.bugcraft.skinsStructure.StaircaseHegemony.js
*/


		
		Component.bugcraft.skinsStructure.defs[ 'StaircaseHegemony' ] =
		{
			frames:
			{
				walk: 0,
		
	idle: 1,
		
	attackMelee: 0,
		
	
			},
			
			events:
			{
				
			}
		}
		
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.skinsStructure/component.bugcraft.skinsStructure.Teleporter.js
*/


		
		Component.bugcraft.skinsStructure.defs[ 'Teleporter' ] =
		{
			frames:
			{
				walk: 1,
		
	idle: 4,
		
	attackMelee: 1,
		
	
			},
			
			events:
			{
				
			}
		}
		
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.skinsStructure/component.bugcraft.skinsStructure.TurtePimp.js
*/

Component.bugcraft.skinsStructure.defs[ 'TurtePimp' ] =
	{
		frames:
		{
			idle: 1,
			
			walk: 1,
			
			attackMelee: 0
		},
		events:
		{
			
		}
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.skinsStructure/component.bugcraft.skinsStructure.TurtlePimp.js
*/

Component.bugcraft.skinsStructure.defs[ 'TurtlePimp' ] =
	{
		frames:
		{
			idle: 1,
			
			walk: 1,
			
			attackMelee: 1
		},
		events:
		{
			
		}
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.skinsStructure/component.bugcraft.skinsStructure.aditestsound.js
*/


		
		Component.bugcraft.skinsStructure.defs[ 'aditestsound' ] =
		{
			frames:
			{
				walk: 0,
		
	idle: 1,
		
	attackMelee: 0,
		
	
			},
			
			events:
			{
				
			}
		}
		
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.skinsStructure/component.bugcraft.skinsStructure.corpse.js
*/

Component.bugcraft.skinsStructure.defs[ "corpse" ] =
	{
		frames:
		{
			idle: 1,
			
			walk: 1,
			
			attackMelee: 0
		},
		events:
		{
			
		}
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.skinsStructure/component.bugcraft.skinsStructure.defaultSkin.js
*/

Component.bugcraft.skinsStructure.defs[ "defaultSkin" ] =
	{
		frames:
		{
			idle: 1,
			
			walk: 0,
			
			attackMelee: 0
		},
		events:
		{
			
		}
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.skinsStructure/component.bugcraft.skinsStructure.defaultSkin2.js
*/

Component.bugcraft.skinsStructure.defs[ 'defaultSkin2' ] =
	{
		frames:
		{
			idle: 1,
			
			walk: 0,
			
			attackMelee: 0
		},
		events:
		{
			
		}
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.skinsStructure/component.bugcraft.skinsStructure.defaultSkin2Corpse1.js
*/


		
		Component.bugcraft.skinsStructure.defs[ 'defaultSkin2Corpse1' ] =
		{
			frames:
			{
				walk: 0,
		
	idle: 1,
		
	attackMelee: 0,
		
	
			},
			
			events:
			{
				
			}
		}
		
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.skinsStructure/component.bugcraft.skinsStructure.defaultSkinCorpse.js
*/

Component.bugcraft.skinsStructure.defs[ "defaultSkinCorpse" ] =
	{
		frames:
		{
			idle: 1,
			
			walk: 0,
			
			attackMelee: 0
		},
		events:
		{
			
		}
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.skinsStructure/component.bugcraft.skinsStructure.furnica3.js
*/


		
		Component.bugcraft.skinsStructure.defs[ 'furnica3' ] =
		{
			frames:
			{
				walk: 0,
		
	idle: 1,
		
	attackMelee: 0,
		
	
			},
			
			events:
			{
				use: function( characterObject )
			{
				
		
		new spellEffects.RiverFlow({
															targetCharacter: characterObject
														});
		
	
			},
			
		show: function( characterObject )
			{
				
		
		new spellEffects.RiverWaves({
															targetCharacter: characterObject
														});
		
	
			},
			
		
					
					hide: function( characterObject )
					{
						
								characterObject.removeVisualEffect( spellEffects.RiverFlow );
							
								characterObject.removeVisualEffect( spellEffects.RiverWaves );
							
		
		new spellEffects.OceanWaves({
															targetCharacter: characterObject
														});
		
	
					}
					
				
			}
		}
		
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.skinsStructure/component.bugcraft.skinsStructure.itemArbalest.js
*/


		
		Component.bugcraft.skinsStructure.defs[ 'itemArbalest' ] =
		{
			frames:
			{
				walk: 5,
		
	idle: 1,
		
	attackMelee: 5,
		
	
			},
			
			events:
			{
				
			}
		}
		
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.skinsStructure/component.bugcraft.skinsStructure.itemBeetleSummonerUnUsable.js
*/


		
		Component.bugcraft.skinsStructure.defs[ 'itemBeetleSummonerUnUsable' ] =
		{
			frames:
			{
				walk: 0,
		
	idle: 1,
		
	attackMelee: 0,
		
	
			},
			
			events:
			{
				
			}
		}
		
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.skinsStructure/component.bugcraft.skinsStructure.itemBeetleSummonerUsable.js
*/

Component.bugcraft.skinsStructure.defs[ "itemBeetleSummonerUsable" ] =
	{
		frames:
		{
			idle: 1,
			
			walk: 0,
			
			attackMelee: 0
		},
		events:
		{
			
		}
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.skinsStructure/component.bugcraft.skinsStructure.itemCatapult.js
*/

Component.bugcraft.skinsStructure.defs[ 'itemCatapult' ] =
	{
		frames:
		{
			idle: 1,
			
			walk: 0,
			
			attackMelee: 5
		},
		events:
		{
			
		}
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.skinsStructure/component.bugcraft.skinsStructure.itemChest.js
*/

Component.bugcraft.skinsStructure.defs[ "itemChest" ] =
	{
		frames:
		{
			idle: 1,
			
			walk: 0,
			
			attackMelee: 0
		},
		events:
		{
			
		}
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.skinsStructure/component.bugcraft.skinsStructure.itemChestCorpse.js
*/

Component.bugcraft.skinsStructure.defs[ "itemChestCorpse" ] =
	{
		frames:
		{
			idle: 1,
			
			walk: 0,
			
			attackMelee: 0
		},
		events:
		{
			
		}
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.skinsStructure/component.bugcraft.skinsStructure.itemChestalgae.js
*/

Component.bugcraft.skinsStructure.defs[ 'itemChestalgae' ] =
	{
		frames:
		{
			idle: 1,
			
			walk: 0,
			
			attackMelee: 0
		},
		events:
		{
			
		}
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.skinsStructure/component.bugcraft.skinsStructure.itemDoorModel1Left.js
*/

Component.bugcraft.skinsStructure.defs[ "itemDoorModel1Left" ] =
	{
		frames:
		{
			idle: 1,
			
			walk: 0,
			
			attackMelee: 0
		},
		events:
		{
			
		}
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.skinsStructure/component.bugcraft.skinsStructure.itemDoorModel1Middle.js
*/

Component.bugcraft.skinsStructure.defs[ "itemDoorModel1Middle" ] =
	{
		frames:
		{
			idle: 1,
			
			walk: 0,
			
			attackMelee: 0
		},
		events:
		{
			
		}
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.skinsStructure/component.bugcraft.skinsStructure.itemDoorModel1Right.js
*/

Component.bugcraft.skinsStructure.defs[ "itemDoorModel1Right" ] =
	{
		frames:
		{
			idle: 1,
			
			walk: 0,
			
			attackMelee: 0
		},
		events:
		{
			
		}
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.skinsStructure/component.bugcraft.skinsStructure.itemDoorModel2Left.js
*/

Component.bugcraft.skinsStructure.defs[ "itemDoorModel2Left" ] =
	{
		frames:
		{
			idle: 1,
			
			walk: 0,
			
			attackMelee: 0
		},
		events:
		{
			
		}
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.skinsStructure/component.bugcraft.skinsStructure.itemDoorModel2Middle.js
*/

Component.bugcraft.skinsStructure.defs[ "itemDoorModel2Middle" ] =
	{
		frames:
		{
			idle: 1,
			
			walk: 0,
			
			attackMelee: 0
		},
		events:
		{
			
		}
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.skinsStructure/component.bugcraft.skinsStructure.itemDoorModel2Right.js
*/

Component.bugcraft.skinsStructure.defs[ "itemDoorModel2Right" ] =
	{
		frames:
		{
			idle: 1,
			
			walk: 0,
			
			attackMelee: 0
		},
		events:
		{
			
		}
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.skinsStructure/component.bugcraft.skinsStructure.itemPracticeDummy.js
*/

Component.bugcraft.skinsStructure.defs[ "itemPracticeDummy" ] =
	{
		frames:
		{
			idle: 1,
			
			walk: 0,
			
			attackMelee: 0
		},
		events:
		{
			
		}
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.skinsStructure/component.bugcraft.skinsStructure.itemStoreRoom.js
*/

Component.bugcraft.skinsStructure.defs[ "itemStoreRoom" ] =
	{
		frames:
		{
			idle: 1,
			
			walk: 0,
			
			attackMelee: 0
		},
		events:
		{
			
		}
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.skinsStructure/component.bugcraft.skinsStructure.itemTargetDummy.js
*/

Component.bugcraft.skinsStructure.defs[ "itemTargetDummy" ] =
	{
		frames:
		{
			idle: 1,
			
			walk: 0,
			
			attackMelee: 0
		},
		events:
		{
			
		}
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.skinsStructure/component.bugcraft.skinsStructure.itemTentAnterium.js
*/

Component.bugcraft.skinsStructure.defs[ "itemTentAnterium" ] =
	{
		frames:
		{
			idle: 1,
			
			walk: 0,
			
			attackMelee: 0
		},
		events:
		{
			
		}
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.skinsStructure/component.bugcraft.skinsStructure.itemTentHegemony.js
*/

Component.bugcraft.skinsStructure.defs[ "itemTentHegemony" ] =
	{
		frames:
		{
			idle: 1,
			
			walk: 0,
			
			attackMelee: 0
		},
		events:
		{
			
		}
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.skinsStructure/component.bugcraft.skinsStructure.itemTowerAnterium.js
*/

Component.bugcraft.skinsStructure.defs[ "itemTowerAnterium" ] =
	{
		frames:
		{
			idle: 1,
			
			walk: 0,
			
			attackMelee: 0
		},
		events:
		{
			
		}
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.skinsStructure/component.bugcraft.skinsStructure.itemTowerCorpse.js
*/

Component.bugcraft.skinsStructure.defs[ "itemTowerCorpse" ] =
	{
		frames:
		{
			idle: 1,
			
			walk: 0,
			
			attackMelee: 0
		},
		events:
		{
			
		}
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.skinsStructure/component.bugcraft.skinsStructure.itemTowerHegemony.js
*/

Component.bugcraft.skinsStructure.defs[ "itemTowerHegemony" ] =
	{
		frames:
		{
			idle: 1,
			
			walk: 0,
			
			attackMelee: 0
		},
		events:
		{
			
		}
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.skinsStructure/component.bugcraft.skinsStructure.itemTurretCorpse.js
*/


		
		Component.bugcraft.skinsStructure.defs[ 'itemTurretCorpse' ] =
		{
			frames:
			{
				walk: 0,
		
	idle: 1,
		
	attackMelee: 0,
		
	
			},
			
			events:
			{
				
			}
		}
		
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.skinsStructure/component.bugcraft.skinsStructure.itemUntargetable.js
*/


		
		Component.bugcraft.skinsStructure.defs[ 'itemUntargetable' ] =
		{
			frames:
			{
				walk: 1,
		
	idle: 1,
		
	attackMelee: 0,
		
	
			},
			
			events:
			{
				
			}
		}
		
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.skinsStructure/component.bugcraft.skinsStructure.lowerDoor.js
*/

Component.bugcraft.skinsStructure.defs[ "lowerDoor" ] =
	{
		frames:
		{
			idle: 1,
			
			walk: 0,
			
			attackMelee: 0
		},
		events:
		{
			
		}
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.skinsStructure/component.bugcraft.skinsStructure.npcAnt.js
*/

	
	Component.bugcraft.skinsStructure.defs[ 'npcAnt' ] =
	{
		frames:
		{
			idle: 1,
			
			walk: 0,
			
			attackMelee: 0
		},
		events:
		{
			show: function( characterObject )
			{
				new spellEffects.LongMellowWaves2min({
														targetCharacter: characterObject
													});
			},
			hide: function( characterObject )
			{
				characterObject.removeVisualEffect( spellEffects.LongMellowWaves2min );
			}
		}
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.skinsStructure/component.bugcraft.skinsStructure.npcAntMinion.js
*/

Component.bugcraft.skinsStructure.defs[ "npcAntMinion" ] =
	{
		frames:
		{
			idle: 4,
			
			walk: 4,
			
			attackMelee: 4
		},
		events:
		{
			
		}
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.skinsStructure/component.bugcraft.skinsStructure.npcAntRare.js
*/

Component.bugcraft.skinsStructure.defs[ "npcAntRare" ] =
	{
		frames:
		{
			idle: 1,
			
			walk: 1,
			
			attackMelee: 0
		},
		events:
		{
			
		}
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.skinsStructure/component.bugcraft.skinsStructure.npcAnteriumCommander.js
*/

Component.bugcraft.skinsStructure.defs[ "npcAnteriumCommander" ] =
	{
		frames:
		{
			idle: 1,
			
			walk: 4,
			
			attackMelee: 4
		},
		events:
		{
			
		}
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.skinsStructure/component.bugcraft.skinsStructure.npcAphid.js
*/


		
		Component.bugcraft.skinsStructure.defs[ 'npcAphid' ] =
		{
			frames:
			{
				walk: 4,
		
	idle: 1,
		
	attackMelee: 4,
		
	
			},
			
			events:
			{
				
			}
		}
		
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.skinsStructure/component.bugcraft.skinsStructure.npcAphidCorpse.js
*/


		
		Component.bugcraft.skinsStructure.defs[ 'npcAphidCorpse' ] =
		{
			frames:
			{
				walk: 0,
		
	idle: 1,
		
	attackMelee: 0,
		
	
			},
			
			events:
			{
				show: function( characterObject )
			{
				
		
		new spellEffects.AphidDeath({
															targetCharacter: characterObject
														});
		
	
			},
			
		
					
					hide: function( characterObject )
					{
						
								characterObject.removeVisualEffect( spellEffects.AphidDeath );
							
					}
					
				
			}
		}
		
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.skinsStructure/component.bugcraft.skinsStructure.npcBee.js
*/


		
		Component.bugcraft.skinsStructure.defs[ 'npcBee' ] =
		{
			frames:
			{
				walk: 4,
		
	idle: 4,
		
	attackMelee: 4,
		
	
			},
			
			events:
			{
				
			}
		}
		
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.skinsStructure/component.bugcraft.skinsStructure.npcBombardierBeetle.js
*/


		
		Component.bugcraft.skinsStructure.defs[ 'npcBombardierBeetle' ] =
		{
			frames:
			{
				walk: 4,
		
	idle: 2,
		
	attackMelee: 1,
		
	
			},
			
			events:
			{
				
			}
		}
		
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.skinsStructure/component.bugcraft.skinsStructure.npcBombardierBeetleCorpse.js
*/

Component.bugcraft.skinsStructure.defs[ "npcBombardierBeetleCorpse" ] =
	{
		frames:
		{
			idle: 1,
			
			walk: 1,
			
			attackMelee: 0
		},
		events:
		{
			
		}
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.skinsStructure/component.bugcraft.skinsStructure.npcButterfly.js
*/

Component.bugcraft.skinsStructure.defs[ "npcButterfly" ] =
	{
		frames:
		{
			idle: 1,
			
			walk: 0,
			
			attackMelee: 0
		},
		events:
		{
			
		}
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.skinsStructure/component.bugcraft.skinsStructure.npcCockroach.js
*/

Component.bugcraft.skinsStructure.defs[ "npcCockroach" ] =
	{
		frames:
		{
			idle: 1,
			
			walk: 0,
			
			attackMelee: 0
		},
		events:
		{
			
		}
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.skinsStructure/component.bugcraft.skinsStructure.npcFireAnt.js
*/

Component.bugcraft.skinsStructure.defs[ "npcFireAnt" ] =
	{
		frames:
		{
			idle: 1,
			
			walk: 0,
			
			attackMelee: 0
		},
		events:
		{
			
		}
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.skinsStructure/component.bugcraft.skinsStructure.npcFireAntElite.js
*/

Component.bugcraft.skinsStructure.defs[ "npcFireAntElite" ] =
	{
		frames:
		{
			idle: 1,
			
			walk: 0,
			
			attackMelee: 0
		},
		events:
		{
			
		}
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.skinsStructure/component.bugcraft.skinsStructure.npcFireAntRare.js
*/

Component.bugcraft.skinsStructure.defs[ "npcFireAntRare" ] =
	{
		frames:
		{
			idle: 1,
			
			walk: 0,
			
			attackMelee: 0
		},
		events:
		{
			
		}
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.skinsStructure/component.bugcraft.skinsStructure.npcFly.js
*/

Component.bugcraft.skinsStructure.defs[ "npcFly" ] =
	{
		frames:
		{
			idle: 1,
			
			walk: 0,
			
			attackMelee: 0
		},
		events:
		{
			
		}
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.skinsStructure/component.bugcraft.skinsStructure.npcHegemonyCommander.js
*/


		
		Component.bugcraft.skinsStructure.defs[ 'npcHegemonyCommander' ] =
		{
			frames:
			{
				walk: 4,
		
	idle: 1,
		
	attackMelee: 4,
		
	
			},
			
			events:
			{
				
			}
		}
		
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.skinsStructure/component.bugcraft.skinsStructure.npcLadyBug.js
*/

Component.bugcraft.skinsStructure.defs[ "npcLadyBug" ] =
	{
		frames:
		{
			idle: 1,
			
			walk: 4,
			
			attackMelee: 0
		},
		events:
		{
			
		}
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.skinsStructure/component.bugcraft.skinsStructure.npcLadybug.js
*/

Component.bugcraft.skinsStructure.defs[ "npcLadybug" ] =
	{
		frames:
		{
			idle: 4,
			
			walk: 0,
			
			attackMelee: 0
		},
		events:
		{
			
		}
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.skinsStructure/component.bugcraft.skinsStructure.npcMantis.js
*/

Component.bugcraft.skinsStructure.defs[ "npcMantis" ] =
	{
		frames:
		{
			idle: 1,
			
			walk: 0,
			
			attackMelee: 0
		},
		events:
		{
			
		}
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.skinsStructure/component.bugcraft.skinsStructure.npcMantisElite.js
*/

Component.bugcraft.skinsStructure.defs[ "npcMantisElite" ] =
	{
		frames:
		{
			idle: 1,
			
			walk: 0,
			
			attackMelee: 0
		},
		events:
		{
			
		}
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.skinsStructure/component.bugcraft.skinsStructure.npcMantisRare.js
*/

Component.bugcraft.skinsStructure.defs[ "npcMantisRare" ] =
	{
		frames:
		{
			idle: 1,
			
			walk: 0,
			
			attackMelee: 0
		},
		events:
		{
			
		}
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.skinsStructure/component.bugcraft.skinsStructure.npcMosquitoJamaican.js
*/

Component.bugcraft.skinsStructure.defs[ "npcMosquitoJamaican" ] =
	{
		frames:
		{
			idle: 1,
			
			walk: 0,
			
			attackMelee: 0
		},
		events:
		{
			
		}
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.skinsStructure/component.bugcraft.skinsStructure.npcMosquitoVampire.js
*/

Component.bugcraft.skinsStructure.defs[ "npcMosquitoVampire" ] =
	{
		frames:
		{
			idle: 1,
			
			walk: 0,
			
			attackMelee: 0
		},
		events:
		{
			
		}
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.skinsStructure/component.bugcraft.skinsStructure.npcMoth.js
*/


		
		Component.bugcraft.skinsStructure.defs[ 'npcMoth' ] =
		{
			frames:
			{
				walk: 0,
		
	idle: 1,
		
	attackMelee: 0,
		
	
			},
			
			events:
			{
				
			}
		}
		
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.skinsStructure/component.bugcraft.skinsStructure.npcRedWeevil.js
*/

Component.bugcraft.skinsStructure.defs[ "npcRedWeevil" ] =
	{
		frames:
		{
			idle: 1,
			
			walk: 1,
			
			attackMelee: 2
		},
		events:
		{
			
		}
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.skinsStructure/component.bugcraft.skinsStructure.npcWave.js
*/

Component.bugcraft.skinsStructure.defs[ 'npcWave' ] =
	{
		frames:
		{
			idle: 1,
			
			walk: 1,
			
			attackMelee: 1
		},
		events:
		{
			
		}
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.skinsStructure/component.bugcraft.skinsStructure.npcWave2.js
*/


		
		Component.bugcraft.skinsStructure.defs[ 'npcWave2' ] =
		{
			frames:
			{
				walk: 0,
		
	idle: 1,
		
	attackMelee: 0,
		
	
			},
			
			events:
			{
				
			}
		}
		
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.skinsStructure/component.bugcraft.skinsStructure.plantredone.js
*/

Component.bugcraft.skinsStructure.defs[ 'plantredone' ] =
	{
		frames:
		{
			idle: 4,
			
			walk: 4,
			
			attackMelee: 4
		},
		events:
		{
			
		}
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.skinsStructure/component.bugcraft.skinsStructure.playerAnt.js
*/


		
		Component.bugcraft.skinsStructure.defs[ 'playerAnt' ] =
		{
			frames:
			{
				walk: 4,
		
	idle: 4,
		
	attackMelee: 4,
		
	
			},
			
			events:
			{
				
			}
		}
		
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.skinsStructure/component.bugcraft.skinsStructure.playerAnttest.js
*/

Component.bugcraft.skinsStructure.defs[ "playerAnttest" ] =
	{
		frames:
		{
			idle: 3,
			
			walk: 1,
			
			attackMelee: 2
		},
		events:
		{
			
		}
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.skinsStructure/component.bugcraft.skinsStructure.playerBee.js
*/

Component.bugcraft.skinsStructure.defs[ "playerBee" ] =
	{
		frames:
		{
			idle: 1,
			
			walk: 4,
			
			attackMelee: 4
		},
		events:
		{
			
		}
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.skinsStructure/component.bugcraft.skinsStructure.playerButterfly.js
*/


		
		Component.bugcraft.skinsStructure.defs[ 'playerButterfly' ] =
		{
			frames:
			{
				walk: 4,
		
	idle: 1,
		
	attackMelee: 4,
		
	
			},
			
			events:
			{
				
			}
		}
		
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.skinsStructure/component.bugcraft.skinsStructure.playerButterflyOld.js
*/

Component.bugcraft.skinsStructure.defs[ "playerButterflyOld" ] =
	{
		frames:
		{
			idle: 0,
			
			walk: 0,
			
			attackMelee: 0
		},
		events:
		{
			
		}
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.skinsStructure/component.bugcraft.skinsStructure.playerButterflyalwaysattack.js
*/

Component.bugcraft.skinsStructure.defs[ "playerButterflyalwaysattack" ] =
	{
		frames:
		{
			idle: 6,
			
			walk: 4,
			
			attackMelee: 0
		},
		events:
		{
			
		}
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.skinsStructure/component.bugcraft.skinsStructure.playerFireant.js
*/


		
		Component.bugcraft.skinsStructure.defs[ 'playerFireant' ] =
		{
			frames:
			{
				walk: 4,
		
	idle: 4,
		
	attackMelee: 4,
		
	
			},
			
			events:
			{
				
			}
		}
		
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.skinsStructure/component.bugcraft.skinsStructure.playerFireantOld.js
*/

Component.bugcraft.skinsStructure.defs[ "playerFireantOld" ] =
	{
		frames:
		{
			idle: 0,
			
			walk: 0,
			
			attackMelee: 0
		},
		events:
		{
			
		}
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.skinsStructure/component.bugcraft.skinsStructure.playerLadybug.js
*/


		
		Component.bugcraft.skinsStructure.defs[ 'playerLadybug' ] =
		{
			frames:
			{
				walk: 4,
		
	idle: 4,
		
	attackMelee: 4,
		
	
			},
			
			events:
			{
				
			}
		}
		
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.skinsStructure/component.bugcraft.skinsStructure.playerMantis.js
*/


		
		Component.bugcraft.skinsStructure.defs[ 'playerMantis' ] =
		{
			frames:
			{
				walk: 4,
		
	idle: 4,
		
	attackMelee: 4,
		
	
			},
			
			events:
			{
				
			}
		}
		
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.skinsStructure/component.bugcraft.skinsStructure.playerMantisOld.js
*/

Component.bugcraft.skinsStructure.defs[ "playerMantisOld" ] =
	{
		frames:
		{
			idle: 0,
			
			walk: 0,
			
			attackMelee: 0
		},
		events:
		{
			
		}
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.skinsStructure/component.bugcraft.skinsStructure.playerMantisOld2.js
*/

Component.bugcraft.skinsStructure.defs[ "playerMantisOld2" ] =
	{
		frames:
		{
			idle: 0,
			
			walk: 0,
			
			attackMelee: 0
		},
		events:
		{
			
		}
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.skinsStructure/component.bugcraft.skinsStructure.playerMantisOld3.js
*/

Component.bugcraft.skinsStructure.defs[ "playerMantisOld3" ] =
	{
		frames:
		{
			idle: 0,
			
			walk: 0,
			
			attackMelee: 0
		},
		events:
		{
			
		}
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.skinsStructure/component.bugcraft.skinsStructure.smallturret.js
*/


		
		Component.bugcraft.skinsStructure.defs[ 'smallturret' ] =
		{
			frames:
			{
				walk: 1,
		
	idle: 1,
		
	attackMelee: 1,
		
	
			},
			
			events:
			{
				
			}
		}
		
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.skinsStructure/component.bugcraft.skinsStructure.stalker.js
*/


		
		Component.bugcraft.skinsStructure.defs[ 'stalker' ] =
		{
			frames:
			{
				walk: 4,
		
	idle: 1,
		
	attackMelee: 3,
		
	
			},
			
			events:
			{
				
			}
		}
		
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.skinsStructure/component.bugcraft.skinsStructure.stalkerbroodling.js
*/


		
		Component.bugcraft.skinsStructure.defs[ 'stalkerbroodling' ] =
		{
			frames:
			{
				walk: 4,
		
	idle: 1,
		
	attackMelee: 4,
		
	
			},
			
			events:
			{
				
			}
		}
		
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.skinsStructure/component.bugcraft.skinsStructure.topleftcavedoor.js
*/


		
		Component.bugcraft.skinsStructure.defs[ 'topleftcavedoor' ] =
		{
			frames:
			{
				walk: 0,
		
	idle: 1,
		
	attackMelee: 0,
		
	
			},
			
			events:
			{
				
			}
		}
		
	



/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.js
*/


	var npcScript = {};
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.1.js
*/

	
	//
	// Anterius' Son ( 1 )
	// Level 7
	// Faction anterium
	// Assigned to Alchemist's Fray ( 4 )
	//
	
	npcScript[ 1 ] = function( npcObject )
	{
		this.onShow = function()
		{
		
		}
		
		this.onUse = function()
		{
			
		}
	}
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.10.js
*/

	
	//
	// Tinderbrand ( 10 )
	// Level 10
	// Faction anterium
	// Assigned to Arthurius Keep ( 1 )
	//
	
	npcScript[ 10 ] = function( npcObject )
	{
		npcObject.events._add( "show", function()
		{
			npcObject.removeVisualEffect( spellEffects.vendorIcon );
			
			// create new chat bubble
			new spellEffects.vendorIcon({
												targetCharacter: npcObject,
												iconName: "blacksmith"
											});
		});
		
		npcObject.events._add( "hide", function()
		{
			npcObject.removeVisualEffect( spellEffects.vendorIcon );
		});
		
		npcObject.events._add( "use", function( pageContext )
		{
			Component.bugcraft.pageVendor( npcObject, pageContext );
		});
	}
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.100.js
*/

	
	//
	// Anterium Tower ( 100 )
	// Level 1
	// Faction anterium
	// Assigned to Jungle Camps ( 7 )
	//
	
	npcScript[ 100 ] = function( npcObject )
	{
		/*
		var _showedDeathAnimation = false;
		
		npcObject.events._add( "damageTake", function()
		{
			if( npcObject.characterData.character_hp_current > 0 || _showedDeathAnimation == true )
			{
				return;
			}
			
			_showedDeathAnimation = true;
			
			npcObject.setSkin( "corpse" );
			
			new spellEffects.towerExplosion({
													targetCharacter: npcObject
												});
		});
		*/
	}
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.101.js
*/

	
	//
	// Anterium Tower ( 101 )
	// Level 1
	// Faction anterium
	// Assigned to Jungle Camps ( 7 )
	//
	
	npcScript[ 101 ] = function( npcObject )
	{
		/*
		var _showedDeathAnimation = false;
		
		npcObject.events._add( "damageTake", function()
		{
			if( npcObject.characterData.character_hp_current > 0 || _showedDeathAnimation == true )
			{
				return;
			}
			
			_showedDeathAnimation = true;
			
			npcObject.setSkin( "corpse" );
			
			new spellEffects.towerExplosion({
													targetCharacter: npcObject
												});
		});
		*/
	}
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.102.js
*/

	
	//
	// Anterium Soldier ( 102 )
	// Level 1
	// Faction anterium
	// Assigned to Jungle Camps ( 7 )
	//
	
	npcScript[ 102 ] = function( npcObject )
	{
		this.onShow = function()
		{
		
		}
		
		this.onUse = function()
		{
			
		}
	}
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.103.js
*/

	
	//
	// Hegemony Soldier ( 103 )
	// Level 1
	// Faction hegemony
	// Assigned to Jungle Camps ( 7 )
	//
	
	npcScript[ 103 ] = function( npcObject )
	{
		this.onShow = function()
		{
		
		}
		
		this.onUse = function()
		{
			
		}
	}
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.104.js
*/

	
	//
	// Destroyed Tower ( 104 )
	// Level 1
	// Faction hegemony
	// Assigned to Jungle Camps ( 7 )
	//
	
	npcScript[ 104 ] = function( npcObject )
	{
		npcObject.events._add( "show", function()
		{
			new spellEffects.towerExplosion({
													targetCharacter: npcObject
												});
		});
	}
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.105.js
*/

	
	//
	// Recruiter Boombay ( 105 )
	// Level 12
	// Faction hegemony
	// Assigned to Fort Saltre ( 2 )
	//
	
	npcScript[ 105 ] = function( npcObject )
	{
		this.onShow = function()
		{
		
		}
		
		this.onUse = function()
		{
			
		}
	}
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.106.js
*/

	
	//
	// Recruiter Blasto ( 106 )
	// Level 12
	// Faction anterium
	// Assigned to Arthurius Keep ( 1 )
	//
	
	npcScript[ 106 ] = function( npcObject )
	{
		this.onShow = function()
		{
		
		}
		
		this.onUse = function()
		{
			
		}
	}
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.107.js
*/

	
	//
	// Quartermaster Khorr ( 107 )
	// Level 12
	// Faction hegemony
	// Assigned to Fort Saltre ( 2 )
	//
	
	npcScript[ 107 ] = function( npcObject )
	{
		this.onShow = function()
		{
		
		}
		
		this.onUse = function()
		{
			
		}
	}
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.109.js
*/

	
	//
	// Quartermaster Braxx ( 109 )
	// Level 12
	// Faction null
	// Assigned to Arthurius Keep ( 1 )
	//
	
	npcScript[ 109 ] = function( npcObject )
	{
		this.onShow = function()
		{
		
		}
		
		this.onUse = function()
		{
			
		}
	}
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.11.js
*/

	
	//
	// Farin ( 11 )
	// Level 10
	// Faction anterium
	// Assigned to Arthurius Keep ( 1 )
	//
	
	npcScript[ 11 ] = function( npcObject )
	{
		npcObject.events._add( "show", function()
		{
			npcObject.removeVisualEffect( spellEffects.vendorIcon );
			
			// create new chat bubble
			new spellEffects.vendorIcon({
												targetCharacter: npcObject,
												iconName: "anvil"
											});
			
			new spellEffects.ambientRadialSounds({
														targetCharacter: npcObject,
														streams:
														{
															20000: [ 'blacksmith1', 'blacksmith2' ]
														}
													});
		});
		
		npcObject.events._add( "hide", function()
		{
			npcObject.removeVisualEffect( spellEffects.vendorIcon );
		});
		
		npcObject.events._add( "use", function( pageContext )
		{
			Component.bugcraft.pageVendor( npcObject, pageContext );
		});
	}
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.110.js
*/

	
	//
	// TestSoldier ( 110 )
	// Level 20
	// Faction anterium
	// Assigned to Shay's Playground ( 10 )
	//
	
	npcScript[ 110 ] = function( npcObject )
	{
		this.onShow = function()
		{
		
		}
		
		this.onUse = function()
		{
			
		}
	}
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.111.js
*/

	
	//
	// TestScout ( 111 )
	// Level 20
	// Faction anterium
	// Assigned to Shay's Playground ( 10 )
	//
	
	npcScript[ 111 ] = function( npcObject )
	{
		this.onShow = function()
		{
		
		}
		
		this.onUse = function()
		{
			
		}
	}
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.112.js
*/

	
	//
	// SoldierSummoner ( 112 )
	// Level 1
	// Faction null
	// Assigned to Shay's Playground ( 10 )
	//
	
	npcScript[ 112 ] = function( npcObject )
	{
		this.onShow = function()
		{
		
		}
		
		this.onUse = function()
		{
			
		}
	}
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.113.js
*/

	
	//
	// ScoutSummoner ( 113 )
	// Level 1
	// Faction null
	// Assigned to Shay's Playground ( 10 )
	//
	
	npcScript[ 113 ] = function( npcObject )
	{
		this.onShow = function()
		{
		
		}
		
		this.onUse = function()
		{
			
		}
	}
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.114.js
*/

	
	//
	// TestNoble ( 114 )
	// Level 20
	// Faction anterium
	// Assigned to Shay's Playground ( 10 )
	//
	
	npcScript[ 114 ] = function( npcObject )
	{
		this.onShow = function()
		{
		
		}
		
		this.onUse = function()
		{
			
		}
	}
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.115.js
*/

	
	//
	// NobleSummoner ( 115 )
	// Level 1
	// Faction null
	// Assigned to Shay's Playground ( 10 )
	//
	
	npcScript[ 115 ] = function( npcObject )
	{
		this.onShow = function()
		{
		
		}
		
		this.onUse = function()
		{
			
		}
	}
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.116.js
*/

	
	//
	// Wave Generator ( 116 )
	// Level 1
	// Faction null
	// Assigned to Shay's Playground ( 10 )
	//
	
	npcScript[ 116 ] = function( npcObject )
	{
		npcObject.events._add( "show", function()
		{
			new spellEffects.waterWaves2({
													targetCharacter: npcObject
												});
		});
	}
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.117.js
*/

	
	//
	// wave generator2 ( 117 )
	// Level 1
	// Faction null
	// Assigned to Shay's Playground ( 10 )
	//
	
	npcScript[ 117 ] = function( npcObject )
	{
		npcObject.events._add( "show", function()
		{
			new spellEffects.waterWaves({
													targetCharacter: npcObject
												});
		});
	}
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.118.js
*/

	
	//
	// wave generator3 ( 118 )
	// Level 1
	// Faction null
	// Assigned to Shay's Playground ( 10 )
	//
	
	npcScript[ 118 ] = function( npcObject )
	{
		npcObject.events._add( "show", function()
		{
			new spellEffects.waterWaves({
													targetCharacter: npcObject
												});
		});
		
		npcObject.events._add( "use", function()
		{
			new spellEffects.waterWaves({
													targetCharacter: npcObject
												});
		});
	}
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.12.js
*/

	
	//
	// Lady Ocean Song ( 12 )
	// Level 30
	// Faction anterium
	// Assigned to Arthurius Keep ( 1 )
	//
	
	npcScript[ 12 ] = function( npcObject )
	{
		this.onShow = function()
		{
		
		}
		
		this.onUse = function()
		{
			
		}
	}
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.13.js
*/

	
	//
	// Champion Searos ( 13 )
	// Level 30
	// Faction anterium
	// Assigned to Arthurius Keep ( 1 )
	//
	
	npcScript[ 13 ] = function( npcObject )
	{
		this.onShow = function()
		{
		
		}
		
		this.onUse = function()
		{
			
		}
	}
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.14.js
*/

	
	//
	// Stalker Ahto ( 14 )
	// Level 30
	// Faction anterium
	// Assigned to Arthurius Keep ( 1 )
	//
	
	npcScript[ 14 ] = function( npcObject )
	{
		this.onShow = function()
		{
		
		}
		
		this.onUse = function()
		{
			
		}
	}
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.15.js
*/

	
	//
	// Resinault ( 15 )
	// Level 1
	// Faction anterium
	// Assigned to Arthurius Keep ( 1 )
	//
	
	npcScript[ 15 ] = function( npcObject )
	{
		this.onShow = function()
		{
		
		}
		
		this.onUse = function()
		{
			
		}
	}
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.16.js
*/

	
	//
	// Gracchus ( 16 )
	// Level 1
	// Faction anterium
	// Assigned to Arthurius Keep ( 1 )
	//
	
	npcScript[ 16 ] = function( npcObject )
	{
		this.onShow = function()
		{
		
		}
		
		this.onUse = function()
		{
			
		}
	}
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.17.js
*/

	
	//
	// Gekko ( 17 )
	// Level 1
	// Faction anterium
	// Assigned to Arthurius Keep ( 1 )
	//
	
	npcScript[ 17 ] = function( npcObject )
	{
		this.onShow = function()
		{
		
		}
		
		this.onUse = function()
		{
			
		}
	}
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.18.js
*/

	
	//
	// Seth ( 18 )
	// Level 1
	// Faction anterium
	// Assigned to Arthurius Keep ( 1 )
	//
	
	npcScript[ 18 ] = function( npcObject )
	{
		this.onShow = function()
		{
		
		}
		
		this.onUse = function()
		{
			
		}
	}
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.19.js
*/

	
	//
	// Bayrill ( 19 )
	// Level 1
	// Faction anterium
	// Assigned to Arthurius Keep ( 1 )
	//
	
	npcScript[ 19 ] = function( npcObject )
	{
		this.onShow = function()
		{
		
		}
		
		this.onUse = function()
		{
			
		}
	}
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.2.js
*/

	
	//
	// Anterius ( 2 )
	// Level 7
	// Faction anterium
	// Assigned to Alchemist's Fray ( 4 )
	//
	
	npcScript[ 2 ] = function( npcObject )
	{
		this.onShow = function()
		{
		
		}
		
		this.onUse = function()
		{
			
		}
	}
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.20.js
*/

	
	//
	// Mach ( 20 )
	// Level 1
	// Faction anterium
	// Assigned to Arthurius Keep ( 1 )
	//
	
	npcScript[ 20 ] = function( npcObject )
	{
		this.onShow = function()
		{
		
		}
		
		this.onUse = function()
		{
			
		}
	}
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.21.js
*/

	
	//
	// Beamant ( 21 )
	// Level 1
	// Faction anterium
	// Assigned to Arthurius Keep ( 1 )
	//
	
	npcScript[ 21 ] = function( npcObject )
	{
		this.onShow = function()
		{
		
		}
		
		this.onUse = function()
		{
			
		}
	}
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.211.js
*/


	npcScript[ 211 ] = function( npcObject )
	{
		
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.218.js
*/


	npcScript[ 218 ] = function( npcObject )
	{
		npcObject.events._add( "show", function()
		{
			new spellEffects.junglecreaturesambient2min({
													targetCharacter: npcObject
												});
		});
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.22.js
*/

	
	//
	// Garrend ( 22 )
	// Level 1
	// Faction anterium
	// Assigned to Arthurius Keep ( 1 )
	//
	
	npcScript[ 22 ] = function( npcObject )
	{
		this.onShow = function()
		{
		
		}
		
		this.onUse = function()
		{
			
		}
	}
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.23.js
*/

	
	//
	// Tamerkhan ( 23 )
	// Level 1
	// Faction hegemony
	// Assigned to Fort Saltre ( 2 )
	//
	
	npcScript[ 23 ] = function( npcObject )
	{
		npcObject.events._add( "show", function()
		{
			npcObject.removeVisualEffect( spellEffects.vendorIcon );
			
			// create new chat bubble
			new spellEffects.vendorIcon({
												targetCharacter: npcObject,
												iconName: "blacksmith"
											});
		});
		
		npcObject.events._add( "hide", function()
		{
			npcObject.removeVisualEffect( spellEffects.vendorIcon );
		});
		
		npcObject.events._add( "use", function( pageContext )
		{
			Component.bugcraft.pageVendor( npcObject, pageContext );
		});
	}
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.237.js
*/


	npcScript[ 237 ] = function( npcObject )
	{
		npcObject.events._add( "show", function()
		{
			new spellEffects.junglecreatures({
													targetCharacter: npcObject
												});
		});
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.24.js
*/

	
	//
	// Meliam ( 24 )
	// Level 1
	// Faction hegemony
	// Assigned to Fort Saltre ( 2 )
	//
	
	npcScript[ 24 ] = function( npcObject )
	{
		npcObject.events._add( "show", function()
		{
			npcObject.removeVisualEffect( spellEffects.vendorIcon );
			
			// create new chat bubble
			new spellEffects.vendorIcon({
												targetCharacter: npcObject,
												iconName: "anvil"
											});
			
			new spellEffects.ambientRadialSounds({
														targetCharacter: npcObject,
														streams:
														{
															20000: [ 'blacksmith1', 'blacksmith2' ]
														}
													});
		});
		
		npcObject.events._add( "hide", function()
		{
			npcObject.removeVisualEffect( spellEffects.vendorIcon );
		});
		
		npcObject.events._add( "use", function( pageContext )
		{
			Component.bugcraft.pageVendor( npcObject, pageContext );
		});
	}
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.25.js
*/

	
	//
	// Potentate Iskender ( 25 )
	// Level 30
	// Faction hegemony
	// Assigned to Fort Saltre ( 2 )
	//
	
	npcScript[ 25 ] = function( npcObject )
	{
		npcObject.events._add( "use", function()
		{
			Component.bugcraft.sound.characters.playCharacterVoiceExclusive( npcObject, "trainer_hi" );
		});
	}
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.257.js
*/


	npcScript[ 257 ] = function( npcObject )
	{
		npcObject.events._add( "show", function()
		{
			new spellEffects.RiverWaves({
													targetCharacter: npcObject
												});
		});
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.26.js
*/

	
	//
	// Legionnaire Tyr ( 26 )
	// Level 30
	// Faction hegemony
	// Assigned to Fort Saltre ( 2 )
	//
	
	npcScript[ 26 ] = function( npcObject )
	{
		npcObject.events._add( "use", function( pageContext )
		{
			Component.bugcraft.sound.characters.playCharacterVoiceExclusive( npcObject, "trainer_hi" );
			
			Component.bugcraft.pageQuestGiver( npcObject, pageContext );
		});
	}
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.27.js
*/

	
	//
	// Outrider Bosso ( 27 )
	// Level 30
	// Faction hegemony
	// Assigned to Fort Saltre ( 2 )
	//
	
	npcScript[ 27 ] = function( npcObject )
	{
		npcObject.events._add( "use", function()
		{
			Component.bugcraft.sound.characters.playCharacterVoiceExclusive( npcObject, "trainer_hi" );
		});
	}
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.28.js
*/

	
	//
	// Sothebee ( 28 )
	// Level 1
	// Faction hegemony
	// Assigned to Fort Saltre ( 2 )
	//
	
	npcScript[ 28 ] = function( npcObject )
	{
		npcObject.events._add( "show", function()
		{
			npcObject.removeVisualEffect( spellEffects.vendorIcon );
			
			// create new chat bubble
			new spellEffects.vendorIcon({
												targetCharacter: npcObject,
												iconName: "amber"
											});
		});
		
		npcObject.events._add( "hide", function()
		{
			npcObject.removeVisualEffect( spellEffects.vendorIcon );
		});
		
		npcObject.events._add( "use", function( pageContext )
		{
			Component.bugcraft.pageVendor( npcObject, { id: pageContext.id, isAmberStore: true } );
		});
	}
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.29.js
*/

	
	//
	// Ambro ( 29 )
	// Level 1
	// Faction hegemony
	// Assigned to Fort Saltre ( 2 )
	//
	
	npcScript[ 29 ] = function( npcObject )
	{
		npcObject.events._add( "show", function()
		{
			npcObject.removeVisualEffect( spellEffects.vendorIcon );
			
			// create new chat bubble
			new spellEffects.vendorIcon({
												targetCharacter: npcObject,
												iconName: "amber"
											});
		});
		
		npcObject.events._add( "hide", function()
		{
			npcObject.removeVisualEffect( spellEffects.vendorIcon );
		});
		
		npcObject.events._add( "use", function( pageContext )
		{
			Component.bugcraft.pageVendor( npcObject, { id: pageContext.id, isAmberStore: true } );
		});
	}
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.299.js
*/


	npcScript[ 299 ] = function( npcObject )
	{
		npcObject.events._add( "show", function()
		{
			new spellEffects.wavesanimsound({
													targetCharacter: npcObject
												});
		});
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.3.js
*/

	
	//
	// anterium flag ( 3 )
	// Level 1
	// Faction anterium
	// Assigned to Alchemist's Fray ( 4 )
	//
	
	npcScript[ 3 ] = function( npcObject )
	{
		this.onShow = function()
		{
		
		}
		
		this.onUse = function()
		{
			
		}
	}
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.30.js
*/

	
	//
	// Swarm Warlord Gengkis ( 30 )
	// Level 1
	// Faction hegemony
	// Assigned to Fort Saltre ( 2 )
	//
	
	npcScript[ 30 ] = function( npcObject )
	{
		npcObject.events._add( "show", function()
		{
			new spellEffects.ambientRadialSounds({
														targetCharacter: npcObject,
														streams:
														{
															20000: [ 'church1' ]
														}
													});
		});
		
		npcObject.events._add( "use", function( pageContext )
		{
			Component.bugcraft.sound.characters.playCharacterVoiceExclusive( npcObject, "trainer_hi" );
			
			Component.bugcraft.pageQuestGiver( npcObject, pageContext );
		});
	}
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.301.js
*/


	npcScript[ 301 ] = function( npcObject )
	{
		npcObject.events._add( "show", function()
		{
			new spellEffects.BlueWaveLoop({
													targetCharacter: npcObject
												});
		});
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.302.js
*/


	npcScript[ 302 ] = function( npcObject )
	{
		npcObject.events._add( "show", function()
		{
			new spellEffects.wavesrythmical7sec({
													targetCharacter: npcObject
												});
		});
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.303.js
*/


	npcScript[ 303 ] = function( npcObject )
	{
		npcObject.events._add( "show", function()
		{
			new spellEffects.LargeWaveLoop({
													targetCharacter: npcObject
												});
		});
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.304.js
*/


	npcScript[ 304 ] = function( npcObject )
	{
		npcObject.events._add( "show", function()
		{
			new spellEffects.LargeWaveLoop({
													targetCharacter: npcObject
												});
		});
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.306.js
*/


	npcScript[ 306 ] = function( npcObject )
	{
		npcObject.events._add( "show", function()
		{
			new spellEffects.wave5secs({
													targetCharacter: npcObject
												});
		});
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.307.js
*/


	npcScript[ 307 ] = function( npcObject )
	{
		npcObject.events._add( "show", function()
		{
			new spellEffects.BlueWaveLoop({
													targetCharacter: npcObject
												});
		});
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.31.js
*/

	
	//
	// Wons ( 31 )
	// Level 1
	// Faction hegemony
	// Assigned to Fort Saltre ( 2 )
	//
	
	npcScript[ 31 ] = function( npcObject )
	{
		npcObject.events._add( "use", function( pageContext )
		{
			Component.bugcraft.sound.characters.playCharacterVoiceExclusive( npcObject, "vendor_hi" );
		});
	}
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.317.js
*/


	npcScript[ 317 ] = function( npcObject )
	{
		npcObject.events._add( "use", function()
		{
			new spellEffects.RummageJunk({
													targetCharacter: npcObject
												});
		});
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.32.js
*/

	
	//
	// Tueiss ( 32 )
	// Level 1
	// Faction hegemony
	// Assigned to Fort Saltre ( 2 )
	//
	
	npcScript[ 32 ] = function( npcObject )
	{
		npcObject.events._add( "use", function()
		{
			Component.bugcraft.sound.characters.playCharacterVoiceExclusive( npcObject, "vendor_hi" );
		});
	}
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.321.js
*/


	npcScript[ 321 ] = function( npcObject )
	{
		npcObject.events._add( "use", function()
		{
			new spellEffects.RummageMetal({
													targetCharacter: npcObject
												});
		});
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.326.js
*/


		
		npcScript[ 326 ] = function( npcObject )
		{
			
		
			npcObject.events._add( "use", function()
			{
				
		
				new spellEffects.RummageJunk(	{
									targetCharacter: npcObject
								});
		
	
			});
		
	
		}
		
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.33.js
*/

	
	//
	// Souldd ( 33 )
	// Level 1
	// Faction hegemony
	// Assigned to Fort Saltre ( 2 )
	//
	
	npcScript[ 33 ] = function( npcObject )
	{
		npcObject.events._add( "use", function( pageContext )
		{
			Component.bugcraft.sound.characters.playCharacterVoiceExclusive( npcObject, "vendor_hi" );
		});
		
		npcObject.events._add( "show", function( pageContext )
		{
			
		});
		
		npcObject.events._add( "hide", function( pageContext )
		{
			
		});
	}
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.34.js
*/

	
	//
	// Goen ( 34 )
	// Level 1
	// Faction hegemony
	// Assigned to Fort Saltre ( 2 )
	//
	
	npcScript[ 34 ] = function( npcObject )
	{
		npcObject.events._add( "use", function( pageContext )
		{
			Component.bugcraft.sound.characters.playCharacterVoiceExclusive( npcObject, "vendor_hi" );
		});
	}
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.340.js
*/


	npcScript[ 340 ] = function( npcObject )
	{
		npcObject.events._add( "show", function()
		{
			new spellEffects.LongCreak({
													targetCharacter: npcObject
												});
		});
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.343.js
*/


		
		npcScript[ 343 ] = function( npcObject )
		{
			
		
			npcObject.events._add( "use", function()
			{
				
		
				new spellEffects.AmpTransmit2(	{
									targetCharacter: npcObject
								});
		
	
			});
		
	
		}
		
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.349.js
*/


		
		npcScript[ 349 ] = function( npcObject )
		{
			
		
			npcObject.events._add( "use", function()
			{
				
		
				new spellEffects.chestOpennoLoopSoundL(	{
									targetCharacter: npcObject
								});
		
	
			});
		
	
		
			npcObject.events._add( "show", function()
			{
				
		
				new spellEffects.BoxWavesRadiant(	{
									targetCharacter: npcObject
								});
		
	
			});
		
	
		}
		
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.35.js
*/

	
	//
	// Baay ( 35 )
	// Level 1
	// Faction hegemony
	// Assigned to Fort Saltre ( 2 )
	//
	
	npcScript[ 35 ] = function( npcObject )
	{
		npcObject.events._add( "use", function( pageContext )
		{
			Component.bugcraft.sound.characters.playCharacterVoiceExclusive( npcObject, "vendor_hi" );
		});
	}
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.351.js
*/


	npcScript[ 351 ] = function( npcObject )
	{
		
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.352.js
*/


	npcScript[ 352 ] = function( npcObject )
	{
		npcObject.events._add( "show", function()
		{
			new spellEffects.LongCreak({
													targetCharacter: npcObject
												});
		});
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.36.js
*/

	
	//
	// Celh ( 36 )
	// Level 1
	// Faction hegemony
	// Assigned to Fort Saltre ( 2 )
	//
	
	npcScript[ 36 ] = function( npcObject )
	{
		npcObject.events._add( "use", function( pageContext )
		{
			Component.bugcraft.sound.characters.playCharacterVoiceExclusive( npcObject, "vendor_hi" );
		});
	}
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.365.js
*/


		
		npcScript[ 365 ] = function( npcObject )
		{
			
		
			npcObject.events._add( "use", function()
			{
				
		
				new spellEffects.RummageJunk(	{
									targetCharacter: npcObject
								});
		
	
			});
		
	
		}
		
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.366.js
*/


		
		npcScript[ 366 ] = function( npcObject )
		{
			
		
			npcObject.events._add( "use", function()
			{
				
		
				new spellEffects.RummageJunk(	{
									targetCharacter: npcObject
								});
		
	
			});
		
	
		}
		
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.367.js
*/


	npcScript[ 367 ] = function( npcObject )
	{
		npcObject.events._add( "show", function()
		{
			new spellEffects.RummageMetal({
													targetCharacter: npcObject
												});
		});
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.368.js
*/


	npcScript[ 368 ] = function( npcObject )
	{
		npcObject.events._add( "use", function()
		{
			new spellEffects.RummageJunk({
													targetCharacter: npcObject
												});
		});
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.369.js
*/


	npcScript[ 369 ] = function( npcObject )
	{
		npcObject.events._add( "use", function()
		{
			new spellEffects.RummageJunk({
													targetCharacter: npcObject
												});
		});
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.370.js
*/


	npcScript[ 370 ] = function( npcObject )
	{
		npcObject.events._add( "use", function()
		{
			new spellEffects.RummageMetal({
													targetCharacter: npcObject
												});
		});
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.371.js
*/


	npcScript[ 371 ] = function( npcObject )
	{
		npcObject.events._add( "use", function()
		{
			new spellEffects.RummageMetal({
													targetCharacter: npcObject
												});
		});
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.38.js
*/

	
	//
	// Target Dummy ( 38 )
	// Level 10
	// Faction hegemony
	// Assigned to Arthurius Keep ( 1 )
	//
	
	npcScript[ 38 ] = function( npcObject )
	{
		this.onShow = function()
		{
		
		}
		
		this.onUse = function()
		{
			
		}
	}
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.381.js
*/


		
		npcScript[ 381 ] = function( npcObject )
		{
			
		
			npcObject.events._add( "use", function()
			{
				
		
				new spellEffects.RummageJunk(	{
									targetCharacter: npcObject
								});
		
	
			});
		
	
		}
		
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.382.js
*/


		
		npcScript[ 382 ] = function( npcObject )
		{
			
		
			npcObject.events._add( "use", function()
			{
				
		
				new spellEffects.RummageJunk(	{
									targetCharacter: npcObject
								});
		
	
			});
		
	
		}
		
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.383.js
*/


		
		npcScript[ 383 ] = function( npcObject )
		{
			
		
			npcObject.events._add( "use", function()
			{
				
		
				new spellEffects.RummageJunk(	{
									targetCharacter: npcObject
								});
		
	
			});
		
	
		}
		
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.385.js
*/


	npcScript[ 385 ] = function( npcObject )
	{
		npcObject.events._add( "show", function()
		{
			new spellEffects.watertrickle1({
													targetCharacter: npcObject
												});
		});
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.386.js
*/


	npcScript[ 386 ] = function( npcObject )
	{
		npcObject.events._add( "show", function()
		{
			new spellEffects.LongCreak({
													targetCharacter: npcObject
												});
		});
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.389.js
*/


		
		npcScript[ 389 ] = function( npcObject )
		{
			
		
			npcObject.events._add( "show", function()
			{
				
		
				new spellEffects.junglecreaturesambient2min(	{
									targetCharacter: npcObject
								});
		
	
			});
		
	
		}
		
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.39.js
*/

	
	//
	// Target Dummy ( 39 )
	// Level 20
	// Faction hegemony
	// Assigned to Arthurius Keep ( 1 )
	//
	
	npcScript[ 39 ] = function( npcObject )
	{
		this.onShow = function()
		{
		
		}
		
		this.onUse = function()
		{
			
		}
	}
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.390.js
*/


	npcScript[ 390 ] = function( npcObject )
	{
		npcObject.events._add( "show", function()
		{
			new spellEffects.RiverWaves({
													targetCharacter: npcObject
												});
		});
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.391.js
*/


	npcScript[ 391 ] = function( npcObject )
	{
		npcObject.events._add( "show", function()
		{
			new spellEffects.Underwater({
													targetCharacter: npcObject
												});
		});
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.392.js
*/


	npcScript[ 392 ] = function( npcObject )
	{
		npcObject.events._add( "show", function()
		{
			new spellEffects.junglecreaturesambient2min({
													targetCharacter: npcObject
												});
		});
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.394.js
*/


	npcScript[ 394 ] = function( npcObject )
	{
		npcObject.events._add( "show", function()
		{
			new spellEffects.Rainforestoneminute({
													targetCharacter: npcObject
												});
		});
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.395.js
*/


		
		npcScript[ 395 ] = function( npcObject )
		{
			
		
			npcObject.events._add( "show", function()
			{
				
		
				new spellEffects.JungleAmbient1min(	{
									targetCharacter: npcObject
								});
		
	
			});
		
	
		}
		
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.4.js
*/

	
	//
	// hegemony flag ( 4 )
	// Level 1
	// Faction hegemony
	// Assigned to Alchemist's Fray ( 4 )
	//
	
	npcScript[ 4 ] = function( npcObject )
	{
		this.onShow = function()
		{
		
		}
		
		this.onUse = function()
		{
			
		}
	}
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.40.js
*/

	
	//
	// Target Dummy ( 40 )
	// Level 30
	// Faction hegemony
	// Assigned to Arthurius Keep ( 1 )
	//
	
	npcScript[ 40 ] = function( npcObject )
	{
		this.onShow = function()
		{
		
		}
		
		this.onUse = function()
		{
			
		}
	}
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.407.js
*/


	npcScript[ 407 ] = function( npcObject )
	{
		npcObject.events._add( "show", function()
		{
			new spellEffects.FlagFlap({
													targetCharacter: npcObject
												});
		});
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.408.js
*/


	npcScript[ 408 ] = function( npcObject )
	{
		npcObject.events._add( "show", function()
		{
			new spellEffects.junglecreaturesambient2min({
													targetCharacter: npcObject
												});
		});
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.409.js
*/


	npcScript[ 409 ] = function( npcObject )
	{
		npcObject.events._add( "show", function()
		{
			new spellEffects.JungleAmbient1min({
													targetCharacter: npcObject
												});
		});
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.41.js
*/

	
	//
	// Target Dummy ( 41 )
	// Level 40
	// Faction hegemony
	// Assigned to Arthurius Keep ( 1 )
	//
	
	npcScript[ 41 ] = function( npcObject )
	{
		this.onShow = function()
		{
		
		}
		
		this.onUse = function()
		{
			
		}
	}
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.410.js
*/


	npcScript[ 410 ] = function( npcObject )
	{
		npcObject.events._add( "show", function()
		{
			new spellEffects.junglecreatures({
													targetCharacter: npcObject
												});
		});
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.411.js
*/


	npcScript[ 411 ] = function( npcObject )
	{
		npcObject.events._add( "show", function()
		{
			new spellEffects.Rainforestoneminute({
													targetCharacter: npcObject
												});
		});
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.412.js
*/


	npcScript[ 412 ] = function( npcObject )
	{
		npcObject.events._add( "show", function()
		{
			new spellEffects.junglerainlong({
													targetCharacter: npcObject
												});
		});
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.414.js
*/


		
		npcScript[ 414 ] = function( npcObject )
		{
			
		
			npcObject.events._add( "show", function()
			{
				
		
				new spellEffects.LargeWaveLoop(	{
									targetCharacter: npcObject
								});
		
	
			});
		
	
		}
		
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.415.js
*/


		
		npcScript[ 415 ] = function( npcObject )
		{
			
		
			npcObject.events._add( "show", function()
			{
				
		
				new spellEffects.JungleAmbient1min(	{
									targetCharacter: npcObject
								});
		
	
			});
		
	
		}
		
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.42.js
*/

	
	//
	// Challenger ( 32 )
	// Level 1
	// Faction hegemony
	// Assigned to Fort Saltre ( 2 )
	//
	
	npcScript[ 42 ] = function( npcObject )
	{
		npcObject.events._add( "use", function( pageContext )
		{
			Component.bugcraft.pageQuestGiver( npcObject, pageContext );
		});
	}
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.424.js
*/


	npcScript[ 424 ] = function( npcObject )
	{
		npcObject.events._add( "show", function()
		{
			new spellEffects.q4({
													targetCharacter: npcObject
												});
		});
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.43.js
*/

	
	//
	// Gatekeeper Togh ( 43 )
	// Level 1
	// Faction hegemony
	// Assigned to Fort Saltre ( 2 )
	//
	
	npcScript[ 43 ] = function( npcObject )
	{
		npcObject.events._add( "use", function( pageContext )
		{
			Component.bugcraft.sound.characters.playCharacterVoiceExclusive( npcObject, "guard_hi" );
			
			Component.bugcraft.pageQuestGiver( npcObject, pageContext );
		});
	}
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.44.js
*/

	
	//
	// Target Dummy ( 44 )
	// Level 30
	// Faction anterium
	// Assigned to Fort Saltre ( 2 )
	//
	
	npcScript[ 44 ] = function( npcObject )
	{
		this.onShow = function()
		{
		
		}
		
		this.onUse = function()
		{
			
		}
	}
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.45.js
*/

	
	//
	// Target Dummy ( 45 )
	// Level 10
	// Faction anterium
	// Assigned to Fort Saltre ( 2 )
	//
	
	npcScript[ 45 ] = function( npcObject )
	{
		this.onShow = function()
		{
		
		}
		
		this.onUse = function()
		{
			
		}
	}
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.46.js
*/

	
	//
	// Target Dummy ( 46 )
	// Level 20
	// Faction anterium
	// Assigned to Fort Saltre ( 2 )
	//
	
	npcScript[ 46 ] = function( npcObject )
	{
		this.onShow = function()
		{
		
		}
		
		this.onUse = function()
		{
			
		}
	}
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.47.js
*/

	
	//
	// Target Dummy ( 47 )
	// Level 40
	// Faction anterium
	// Assigned to Fort Saltre ( 2 )
	//
	
	npcScript[ 47 ] = function( npcObject )
	{
		this.onShow = function()
		{
		
		}
		
		this.onUse = function()
		{
			
		}
	}
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.48.js
*/

	
	//
	// Purveyor Beetrice	( 48 )
	// Level 1
	// Faction hegemony
	// Assigned to Fort Saltre ( 2 )
	//
	
	npcScript[ 48 ] = function( npcObject )
	{
		npcObject.events._add( "show", function()
		{
			npcObject.removeVisualEffect( spellEffects.vendorIcon );
			
			// create new chat bubble
			new spellEffects.vendorIcon({
												targetCharacter: npcObject,
												iconName: "anvil"
											});
			
			new spellEffects.ambientRadialSounds({
														targetCharacter: npcObject,
														streams:
														{
															20000: [ 'blacksmith1', 'blacksmith2' ]
														}
													});
		});
		
		npcObject.events._add( "hide", function()
		{
			npcObject.removeVisualEffect( spellEffects.vendorIcon );
		});
		
		npcObject.events._add( "use", function( pageContext )
		{
			Component.bugcraft.pageVendor( npcObject, pageContext );
		});
	}
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.5.js
*/

	
	npcScript[ 5 ] = function( npcObject )
	{
		npcObject.events._add( "show", function()
		{
			new spellEffects.deathDecayComplete({
													sourceCharacter: npcObject,
													targetCharacter: npcObject
												});
			
			/*
			new spellEffects.lootableComplete({
													sourceCharacter: npcObject,
													targetCharacter: npcObject
												});
			*/
		});
		
		npcObject.events._add( "hide", function()
		{
			npcObject.removeVisualEffect( spellEffects.lootableComplete );
			npcObject.removeVisualEffect( spellEffects.deathDecayComplete );
		});
	}
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.50.js
*/

	
	//
	// Cardinal Bertila ( 50 )
	// Level 20
	// Faction hegemony
	// Assigned to Fort Saltre ( 2 )
	//
	
	npcScript[ 50 ] = function( npcObject )
	{
		this.onShow = function()
		{
		
		}
		
		this.onUse = function()
		{
			
		}
	}
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.51.js
*/

	
	//
	// Chief Vund ( 51 )
	// Level 20
	// Faction hegemony
	// Assigned to Fort Saltre ( 2 )
	//
	
	npcScript[ 51 ] = function( npcObject )
	{
		npcObject.events._add( "use", function()
		{
			Component.bugcraft.sound.characters.playCharacterVoiceExclusive( npcObject, "trainer_hi" );
		});
	}
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.52.js
*/

	
	//
	// Outrider Ikke ( 52 )
	// Level 20
	// Faction hegemony
	// Assigned to Fort Saltre ( 2 )
	//
	
	npcScript[ 52 ] = function( npcObject )
	{
		npcObject.events._add( "use", function( pageContext )
		{
			Component.bugcraft.sound.characters.playCharacterVoiceExclusive( npcObject, "trainer_hi" );
		});
	}
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.53.js
*/

	
	//
	// Herbalist Dewberry ( 53 )
	// Level 15
	// Faction hegemony
	// Assigned to Fort Saltre ( 2 )
	//
	
	npcScript[ 53 ] = function( npcObject )
	{
		this.onShow = function()
		{
		
		}
		
		this.onUse = function()
		{
			
		}
	}
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.54.js
*/

	
	//
	// Bailiff Fasun ( 54 )
	// Level 30
	// Faction hegemony
	// Assigned to Fort Saltre ( 2 )
	//
	
	npcScript[ 54 ] = function( npcObject )
	{
		npcObject.events._add( "use", function()
		{
			Component.bugcraft.sound.characters.playCharacterVoiceExclusive( npcObject, "trainer_hi" );
		});
	}
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.55.js
*/

	
	//
	// Jozsef, Savant ( 55 )
	// Level 15
	// Faction hegemony
	// Assigned to Fort Saltre ( 2 )
	//
	
	npcScript[ 55 ] = function( npcObject )
	{
		npcObject.events._add( "use", function( pageContext )
		{
			Component.bugcraft.sound.characters.playCharacterVoiceExclusiveOtherRace( npcObject, "mantis", "trainer_hi" );
		});
	}
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.57.js
*/

	
	//
	// Fort Saltre Guard ( 57 )
	// Level 35
	// Faction hegemony
	// Assigned to Fort Saltre ( 2 )
	//
	
	npcScript[ 57 ] = function( npcObject )
	{
		npcObject.events._add( "use", function()
		{
			Component.bugcraft.sound.characters.playCharacterVoiceExclusive( npcObject, "guard_hi" );
		});
	}
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.58.js
*/

	
	//
	// Fort Saltre Guard ( 58 )
	// Level 35
	// Faction hegemony
	// Assigned to Fort Saltre ( 2 )
	//
	
	npcScript[ 58 ] = function( npcObject )
	{
		npcObject.events._add( "use", function()
		{
			Component.bugcraft.sound.characters.playCharacterVoiceExclusive( npcObject, "guard_hi" );
		});
	}
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.59.js
*/

	
	//
	// Fort Saltre Guard ( 59 )
	// Level 1
	// Faction hegemony
	// Assigned to Fort Saltre ( 2 )
	//
	
	npcScript[ 59 ] = function( npcObject )
	{
		npcObject.events._add( "use", function()
		{
			Component.bugcraft.sound.characters.playCharacterVoiceExclusive( npcObject, "funny" );
		});
	}
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.591.js
*/


		
		npcScript[ 591 ] = function( npcObject )
		{
			
		}
		
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.5912.js
*/



/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.592.js
*/


	npcScript[ 592 ] = function( npcObject )
	{
		npcObject.events._add( "show", function()
		{
			new spellEffects.wavesanimsound({
													targetCharacter: npcObject
												});
		});
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.593.js
*/


	npcScript[ 593 ] = function( npcObject )
	{
		npcObject.events._add( "show", function()
		{
			new spellEffects.wavesanimsound({
													targetCharacter: npcObject
												});
		});
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.594.js
*/


	npcScript[ 594 ] = function( npcObject )
	{
		npcObject.events._add( "show", function()
		{
			new spellEffects.wave5secs({
													targetCharacter: npcObject
												});
		});
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.595.js
*/


	npcScript[ 595 ] = function( npcObject )
	{
		npcObject.events._add( "show", function()
		{
			new spellEffects.LargeWaveLoop({
													targetCharacter: npcObject
												});
		});
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.596.js
*/


	npcScript[ 596 ] = function( npcObject )
	{
		npcObject.events._add( "show", function()
		{
			new spellEffects.LongMellowWaves2min({
													targetCharacter: npcObject
												});
		});
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.598.js
*/


	npcScript[ 598 ] = function( npcObject )
	{
		npcObject.events._add( "show", function()
		{
			new spellEffects.wave5secs({
													targetCharacter: npcObject
												});
		});
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.599.js
*/


	npcScript[ 599 ] = function( npcObject )
	{
		npcObject.events._add( "show", function()
		{
			new spellEffects.wavesrythmical7sec({
													targetCharacter: npcObject
												});
		});
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.6.js
*/

	
	//
	// anterium flag ( 6 )
	// Level 1
	// Faction anterium
	// Assigned to Alchemist's Fray ( 4 )
	//
	
	npcScript[ 6 ] = function( npcObject )
	{
		this.onShow = function()
		{
		
		}
		
		this.onUse = function()
		{
			
		}
	}
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.60.js
*/

	
	//
	// Fort Saltre Guard ( 60 )
	// Level 35
	// Faction hegemony
	// Assigned to Fort Saltre ( 2 )
	//
	
	npcScript[ 60 ] = function( npcObject )
	{
		npcObject.events._add( "use", function()
		{
			Component.bugcraft.sound.characters.playCharacterVoiceExclusive( npcObject, "guard_hi" );
		});
	}
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.600.js
*/


	npcScript[ 600 ] = function( npcObject )
	{
		npcObject.events._add( "show", function()
		{
			new spellEffects.wavesanimsound({
													targetCharacter: npcObject
												});
		});
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.608.js
*/


	npcScript[ 608 ] = function( npcObject )
	{
		npcObject.events._add( "show", function()
		{
			new spellEffects.LargeWaveLoop({
													targetCharacter: npcObject
												});
		});
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.609.js
*/


	npcScript[ 609 ] = function( npcObject )
	{
		npcObject.events._add( "show", function()
		{
			new spellEffects.LongMellowWaves2min({
													targetCharacter: npcObject
												});
		});
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.61.js
*/

	
	//
	// Fort Saltre Patrol ( 61 )
	// Level 35
	// Faction hegemony
	// Assigned to Fort Saltre ( 2 )
	//
	
	npcScript[ 61 ] = function( npcObject )
	{
		npcObject.events._add( "use", function()
		{
			Component.bugcraft.sound.characters.playCharacterVoiceExclusive( npcObject, "guard_hi" );
		});
	}
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.610.js
*/


	npcScript[ 610 ] = function( npcObject )
	{
		npcObject.events._add( "show", function()
		{
			new spellEffects.wavesrythmical7sec({
													targetCharacter: npcObject
												});
		});
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.613.js
*/


		
		npcScript[ 613 ] = function( npcObject )
		{
			
		}
		
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.614.js
*/


	npcScript[ 614 ] = function( npcObject )
	{
		npcObject.events._add( "show", function()
		{
			new spellEffects.exclam1({
													targetCharacter: npcObject
												});
		});
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.615.js
*/


	npcScript[ 615 ] = function( npcObject )
	{
		npcObject.events._add( "show", function()
		{
			new spellEffects.star1({
													targetCharacter: npcObject
												});
		});
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.616.js
*/


	npcScript[ 616 ] = function( npcObject )
	{
		npcObject.events._add( "show", function()
		{
			new spellEffects.q3({
													targetCharacter: npcObject
												});
		});
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.617.js
*/


	npcScript[ 617 ] = function( npcObject )
	{
		
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.618.js
*/


		
		npcScript[ 618 ] = function( npcObject )
		{
			
		
			npcObject.events._add( "use", function()
			{
				
		
				new spellEffects.chestOpennoLoopSoundL(	{
									targetCharacter: npcObject
								});
		
	
			});
		
	
		
			npcObject.events._add( "show", function()
			{
				
		
				new spellEffects.BoxWavesRadiant(	{
									targetCharacter: npcObject
								});
		
	
			});
		
	
		}
		
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.619.js
*/


		
		npcScript[ 619 ] = function( npcObject )
		{
			
		
			npcObject.events._add( "use", function()
			{
				
		
				new spellEffects.chestOpennoLoopSoundL(	{
									targetCharacter: npcObject
								});
		
	
			});
		
	
		
			npcObject.events._add( "show", function()
			{
				
		
				new spellEffects.BoxWavesRadiant(	{
									targetCharacter: npcObject
								});
		
	
			});
		
	
		}
		
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.62.js
*/

	
	//
	// Dewde ( 62 )
	// Level 1
	// Faction hegemony
	// Assigned to Fort Saltre ( 2 )
	//
	
	npcScript[ 62 ] = function( npcObject )
	{
		npcObject.events._add( "use", function()
		{
			Component.bugcraft.sound.characters.playCharacterVoiceExclusive( npcObject, "funny" );
		});
	}
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.620.js
*/


		
		npcScript[ 620 ] = function( npcObject )
		{
			
		
			npcObject.events._add( "use", function()
			{
				
		
				new spellEffects.chestOpennoLoopSoundL(	{
									targetCharacter: npcObject
								});
		
	
			});
		
	
		
			npcObject.events._add( "show", function()
			{
				
		
				new spellEffects.BoxWavesRadiant(	{
									targetCharacter: npcObject
								});
		
	
			});
		
	
		}
		
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.621.js
*/


		
		npcScript[ 621 ] = function( npcObject )
		{
			
		
			npcObject.events._add( "use", function()
			{
				
		
				new spellEffects.chestOpennoLoopSoundL(	{
									targetCharacter: npcObject
								});
		
	
			});
		
	
		
			npcObject.events._add( "show", function()
			{
				
		
				new spellEffects.BoxWavesRadiant(	{
									targetCharacter: npcObject
								});
		
	
			});
		
	
		}
		
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.622.js
*/


		
		npcScript[ 622 ] = function( npcObject )
		{
			
		
			npcObject.events._add( "use", function()
			{
				
		
				new spellEffects.chestOpennoLoopSoundL(	{
									targetCharacter: npcObject
								});
		
	
			});
		
	
		
			npcObject.events._add( "show", function()
			{
				
		
				new spellEffects.BoxWavesRadiant(	{
									targetCharacter: npcObject
								});
		
	
			});
		
	
		}
		
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.623.js
*/


	npcScript[ 623 ] = function( npcObject )
	{
		npcObject.events._add( "show", function()
		{
			new spellEffects.RiverWaves({
													targetCharacter: npcObject
												});
		});
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.624.js
*/


	npcScript[ 624 ] = function( npcObject )
	{
		npcObject.events._add( "show", function()
		{
			new spellEffects.LargeWaveLoop({
													targetCharacter: npcObject
												});
		});
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.625.js
*/


	npcScript[ 625 ] = function( npcObject )
	{
		npcObject.events._add( "show", function()
		{
			new spellEffects.LargeWaveLoop({
													targetCharacter: npcObject
												});
		});
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.626.js
*/


	npcScript[ 626 ] = function( npcObject )
	{
		npcObject.events._add( "show", function()
		{
			new spellEffects.LargeWaveLoop({
													targetCharacter: npcObject
												});
		});
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.627.js
*/


	npcScript[ 627 ] = function( npcObject )
	{
		npcObject.events._add( "show", function()
		{
			new spellEffects.wavesanimsound({
													targetCharacter: npcObject
												});
		});
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.628.js
*/


	npcScript[ 628 ] = function( npcObject )
	{
		npcObject.events._add( "show", function()
		{
			new spellEffects.LargeWaveLoop({
													targetCharacter: npcObject
												});
		});
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.629.js
*/


	npcScript[ 629 ] = function( npcObject )
	{
		npcObject.events._add( "show", function()
		{
			new spellEffects.LargeWaveLoop({
													targetCharacter: npcObject
												});
		});
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.63.js
*/

	
	//
	// Broh ( 63 )
	// Level 1
	// Faction hegemony
	// Assigned to Fort Saltre ( 2 )
	//
	
	npcScript[ 63 ] = function( npcObject )
	{
		npcObject.events._add( "use", function()
		{
			Component.bugcraft.sound.characters.playCharacterVoiceExclusive( npcObject, "funny" );
		});
	}
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.630.js
*/


	npcScript[ 630 ] = function( npcObject )
	{
		npcObject.events._add( "show", function()
		{
			new spellEffects.LargeWaveLoop({
													targetCharacter: npcObject
												});
		});
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.631.js
*/


	npcScript[ 631 ] = function( npcObject )
	{
		npcObject.events._add( "show", function()
		{
			new spellEffects.LargeWaveLoop({
													targetCharacter: npcObject
												});
		});
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.632.js
*/


	npcScript[ 632 ] = function( npcObject )
	{
		npcObject.events._add( "show", function()
		{
			new spellEffects.LargeWaveLoop({
													targetCharacter: npcObject
												});
		});
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.633.js
*/


	npcScript[ 633 ] = function( npcObject )
	{
		npcObject.events._add( "show", function()
		{
			new spellEffects.LargeWaveLoop({
													targetCharacter: npcObject
												});
		});
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.634.js
*/


	npcScript[ 634 ] = function( npcObject )
	{
		npcObject.events._add( "show", function()
		{
			new spellEffects.LargeWaveLoop({
													targetCharacter: npcObject
												});
		});
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.635.js
*/


	npcScript[ 635 ] = function( npcObject )
	{
		npcObject.events._add( "show", function()
		{
			new spellEffects.LargeWaveLoop({
													targetCharacter: npcObject
												});
		});
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.636.js
*/


	npcScript[ 636 ] = function( npcObject )
	{
		npcObject.events._add( "show", function()
		{
			new spellEffects.LargeWaveLoop({
													targetCharacter: npcObject
												});
		});
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.637.js
*/


	npcScript[ 637 ] = function( npcObject )
	{
		npcObject.events._add( "show", function()
		{
			new spellEffects.LargeWaveLoop({
													targetCharacter: npcObject
												});
		});
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.638.js
*/


	npcScript[ 638 ] = function( npcObject )
	{
		npcObject.events._add( "show", function()
		{
			new spellEffects.LargeWaveLoop({
													targetCharacter: npcObject
												});
		});
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.639.js
*/


	npcScript[ 639 ] = function( npcObject )
	{
		npcObject.events._add( "show", function()
		{
			new spellEffects.LargeWaveLoop({
													targetCharacter: npcObject
												});
		});
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.64.js
*/

	
	//
	//  ( 64 )
	// Level 1
	// Faction hegemony
	// Assigned to Fort Saltre ( 2 )
	//
	
	npcScript[ 64 ] = function( npcObject )
	{
		npcObject.events._add( "show", function()
		{
			new spellEffects.auraRevive({
												targetCharacter: npcObject
											});
			
			new spellEffects.ambientRadialSounds({
														targetCharacter: npcObject,
														streams:
														{
															1000: [ 'deathWhispers1' ]
														}
													});
		});
		
		npcObject.events._add( "hide", function()
		{
			npcObject.removeVisualEffect( spellEffects.auraRevive );
		});
	}
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.640.js
*/


	npcScript[ 640 ] = function( npcObject )
	{
		npcObject.events._add( "show", function()
		{
			new spellEffects.LargeWaveLoop({
													targetCharacter: npcObject
												});
		});
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.641.js
*/


	npcScript[ 641 ] = function( npcObject )
	{
		npcObject.events._add( "show", function()
		{
			new spellEffects.LargeWaveLoop({
													targetCharacter: npcObject
												});
		});
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.642.js
*/


	npcScript[ 642 ] = function( npcObject )
	{
		npcObject.events._add( "show", function()
		{
			new spellEffects.LargeWaveLoop({
													targetCharacter: npcObject
												});
		});
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.643.js
*/


	npcScript[ 643 ] = function( npcObject )
	{
		npcObject.events._add( "show", function()
		{
			new spellEffects.LargeWaveLoop({
													targetCharacter: npcObject
												});
		});
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.644.js
*/


	npcScript[ 644 ] = function( npcObject )
	{
		npcObject.events._add( "show", function()
		{
			new spellEffects.LargeWaveLoop({
													targetCharacter: npcObject
												});
		});
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.645.js
*/


	npcScript[ 645 ] = function( npcObject )
	{
		npcObject.events._add( "show", function()
		{
			new spellEffects.LargeWaveLoop({
													targetCharacter: npcObject
												});
		});
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.646.js
*/


	npcScript[ 646 ] = function( npcObject )
	{
		npcObject.events._add( "show", function()
		{
			new spellEffects.RiverLong({
													targetCharacter: npcObject
												});
		});
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.647.js
*/


	npcScript[ 647 ] = function( npcObject )
	{
		npcObject.events._add( "show", function()
		{
			new spellEffects.LargeWaveLoop({
													targetCharacter: npcObject
												});
		});
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.648.js
*/


	npcScript[ 648 ] = function( npcObject )
	{
		npcObject.events._add( "show", function()
		{
			new spellEffects.LargeWaveLoop({
													targetCharacter: npcObject
												});
		});
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.649.js
*/


	npcScript[ 649 ] = function( npcObject )
	{
		npcObject.events._add( "show", function()
		{
			new spellEffects.BlueWaveLoop({
													targetCharacter: npcObject
												});
		});
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.65.js
*/

	
	//
	// Elder Bodhisattva ( 65 )
	// Level 15
	// Faction anterium
	// Assigned to Arthurius Keep ( 1 )
	//
	
	npcScript[ 65 ] = function( npcObject )
	{
		this.onShow = function()
		{
		
		}
		
		this.onUse = function()
		{
			
		}
	}
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.650.js
*/


	npcScript[ 650 ] = function( npcObject )
	{
		npcObject.events._add( "show", function()
		{
			new spellEffects.BlueWaveLoop({
													targetCharacter: npcObject
												});
		});
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.652.js
*/


	npcScript[ 652 ] = function( npcObject )
	{
		npcObject.events._add( "show", function()
		{
			new spellEffects.wavesrythmical7sec({
													targetCharacter: npcObject
												});
		});
	}

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.66.js
*/

	
	//
	// Bannerbug Furnas ( 66 )
	// Level 15
	// Faction anterium
	// Assigned to Arthurius Keep ( 1 )
	//
	
	npcScript[ 66 ] = function( npcObject )
	{
		this.onShow = function()
		{
		
		}
		
		this.onUse = function()
		{
			
		}
	}
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.67.js
*/

	
	//
	// Sleuth Jakko ( 67 )
	// Level 15
	// Faction anterium
	// Assigned to Arthurius Keep ( 1 )
	//
	
	npcScript[ 67 ] = function( npcObject )
	{
		this.onShow = function()
		{
		
		}
		
		this.onUse = function()
		{
			
		}
	}
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.671.js
*/


		
		npcScript[ 671 ] = function( npcObject )
		{
			
		
			npcObject.events._add( "show", function()
			{
				
		
				new spellEffects.AphidZonedroned(	{
									targetCharacter: npcObject
								});
		
	
			});
		
	
		}
		
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.674.js
*/


		
		npcScript[ 674 ] = function( npcObject )
		{
			
		
			npcObject.events._add( "show", function()
			{
				
		
				new spellEffects.AphidAngry(	{
									targetCharacter: npcObject
								});
		
	
			});
		
	
		}
		
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.675.js
*/


		
		npcScript[ 675 ] = function( npcObject )
		{
			
		
			npcObject.events._add( "show", function()
			{
				
		
				new spellEffects.AphidLowZoneDrone(	{
									targetCharacter: npcObject
								});
		
	
			});
		
	
		}
		
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.676.js
*/


		
		npcScript[ 676 ] = function( npcObject )
		{
			
		
			npcObject.events._add( "show", function()
			{
				
		
				new spellEffects.AphidLowZoneDrone(	{
									targetCharacter: npcObject
								});
		
	
			});
		
	
		}
		
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.677.js
*/


		
		npcScript[ 677 ] = function( npcObject )
		{
			
		
			npcObject.events._add( "show", function()
			{
				
		
				new spellEffects.AphidZonedroned(	{
									targetCharacter: npcObject
								});
		
	
			});
		
	
		}
		
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.678.js
*/


		
		npcScript[ 678 ] = function( npcObject )
		{
			
		
			npcObject.events._add( "show", function()
			{
				
		
				new spellEffects.AphidAngry(	{
									targetCharacter: npcObject
								});
		
	
			});
		
	
		}
		
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.679.js
*/


		
		npcScript[ 679 ] = function( npcObject )
		{
			
		
			npcObject.events._add( "show", function()
			{
				
		
				new spellEffects.AphidZonedroned(	{
									targetCharacter: npcObject
								});
		
	
			});
		
	
		}
		
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.68.js
*/

	
	//
	// Smith Voulge ( 68 )
	// Level 10
	// Faction anterium
	// Assigned to Arthurius Keep ( 1 )
	//
	
	npcScript[ 68 ] = function( npcObject )
	{
		npcObject.events._add( "show", function()
		{
			npcObject.removeVisualEffect( spellEffects.vendorIcon );
			
			// create new chat bubble
			new spellEffects.vendorIcon({
												targetCharacter: npcObject,
												iconName: "blacksmith"
											});
		});
		
		npcObject.events._add( "hide", function()
		{
			npcObject.removeVisualEffect( spellEffects.vendorIcon );
		});
		
		npcObject.events._add( "use", function( pageContext )
		{
			Component.bugcraft.pageVendor( npcObject, pageContext );
		});
	}
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.689.js
*/


		
		npcScript[ 689 ] = function( npcObject )
		{
			
		
			npcObject.events._add( "show", function()
			{
				
		
				new spellEffects.CaveDripEerie(	{
									targetCharacter: npcObject
								});
		
	
			});
		
	
		}
		
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.69.js
*/

	
	//
	// Supply Officer Ignos ( 69 )
	// Level 10
	// Faction anterium
	// Assigned to Arthurius Keep ( 1 )
	//
	
	npcScript[ 69 ] = function( npcObject )
	{
		this.onShow = function()
		{
		
		}
		
		this.onUse = function()
		{
			
		}
	}
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.692.js
*/


		
		npcScript[ 692 ] = function( npcObject )
		{
			
		
			npcObject.events._add( "show", function()
			{
				
		
				new spellEffects.CaveDripEerie(	{
									targetCharacter: npcObject
								});
		
	
			});
		
	
		}
		
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.693.js
*/


		
		npcScript[ 693 ] = function( npcObject )
		{
			
		
			npcObject.events._add( "show", function()
			{
				
		
				new spellEffects.CaveDripEerie(	{
									targetCharacter: npcObject
								});
		
	
			});
		
	
		}
		
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.694.js
*/


		
		npcScript[ 694 ] = function( npcObject )
		{
			
		
			npcObject.events._add( "show", function()
			{
				
		
				new spellEffects.CaveDripEerie(	{
									targetCharacter: npcObject
								});
		
	
			});
		
	
		}
		
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.696.js
*/


		
		npcScript[ 696 ] = function( npcObject )
		{
			
		
			npcObject.events._add( "show", function()
			{
				
		
				new spellEffects.CaveDripEerie(	{
									targetCharacter: npcObject
								});
		
	
			});
		
	
		}
		
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.7.js
*/

	
	//
	// hegemony flag ( 7 )
	// Level 1
	// Faction hegemony
	// Assigned to Alchemist's Fray ( 4 )
	//
	
	npcScript[ 7 ] = function( npcObject )
	{
		this.onShow = function()
		{
		
		}
		
		this.onUse = function()
		{
			
		}
	}
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.70.js
*/

	
	//
	// Nostrildew ( 70 )
	// Level 1
	// Faction anterium
	// Assigned to Arthurius Keep ( 1 )
	//
	
	npcScript[ 70 ] = function( npcObject )
	{
		this.onShow = function()
		{
		
		}
		
		this.onUse = function()
		{
			
		}
	}
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.700.js
*/


		
		npcScript[ 700 ] = function( npcObject )
		{
			
		
			npcObject.events._add( "show", function()
			{
				
		
				new spellEffects.EggPulse(	{
									targetCharacter: npcObject
								});
		
	
			});
		
	
		}
		
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.703.js
*/


		
		npcScript[ 703 ] = function( npcObject )
		{
			
		
			npcObject.events._add( "show", function()
			{
				
		
				new spellEffects.EggPulse(	{
									targetCharacter: npcObject
								});
		
	
			});
		
	
		}
		
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.704.js
*/


		
		npcScript[ 704 ] = function( npcObject )
		{
			
		
			npcObject.events._add( "show", function()
			{
				
		
				new spellEffects.EggPulse(	{
									targetCharacter: npcObject
								});
		
	
			});
		
	
		}
		
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.709.js
*/


		
		npcScript[ 709 ] = function( npcObject )
		{
			
		
			npcObject.events._add( "show", function()
			{
				
		
				new spellEffects.EggPulse(	{
									targetCharacter: npcObject
								});
		
	
			});
		
	
		}
		
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.71.js
*/

	
	//
	// Arthurius Sentinel ( 71 )
	// Level 35
	// Faction anterium
	// Assigned to Arthurius Keep ( 1 )
	//
	
	npcScript[ 71 ] = function( npcObject )
	{
		this.onShow = function()
		{
		
		}
		
		this.onUse = function()
		{
			
		}
	}
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.710.js
*/


		
		npcScript[ 710 ] = function( npcObject )
		{
			
		
			npcObject.events._add( "show", function()
			{
				
		
				new spellEffects.EggPulse(	{
									targetCharacter: npcObject
								});
		
	
			});
		
	
		}
		
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.714.js
*/


		
		npcScript[ 714 ] = function( npcObject )
		{
			
		
			npcObject.events._add( "show", function()
			{
				
		
				new spellEffects.EggPulse(	{
									targetCharacter: npcObject
								});
		
	
			});
		
	
		}
		
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.715.js
*/


		
		npcScript[ 715 ] = function( npcObject )
		{
			
		
			npcObject.events._add( "show", function()
			{
				
		
				new spellEffects.EggPulse(	{
									targetCharacter: npcObject
								});
		
	
			});
		
	
		}
		
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.716.js
*/


		
		npcScript[ 716 ] = function( npcObject )
		{
			
		
			npcObject.events._add( "show", function()
			{
				
		
				new spellEffects.EggPulse(	{
									targetCharacter: npcObject
								});
		
	
			});
		
	
		}
		
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.717.js
*/


		
		npcScript[ 717 ] = function( npcObject )
		{
			
		
			npcObject.events._add( "show", function()
			{
				
		
				new spellEffects.EggPulse(	{
									targetCharacter: npcObject
								});
		
	
			});
		
	
		}
		
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.718.js
*/


		
		npcScript[ 718 ] = function( npcObject )
		{
			
		
			npcObject.events._add( "show", function()
			{
				
		
				new spellEffects.EggPulse(	{
									targetCharacter: npcObject
								});
		
	
			});
		
	
		}
		
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.719.js
*/


		
		npcScript[ 719 ] = function( npcObject )
		{
			
		
			npcObject.events._add( "show", function()
			{
				
		
				new spellEffects.EggPulse(	{
									targetCharacter: npcObject
								});
		
	
			});
		
	
		}
		
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.72.js
*/

	
	//
	// Arthurius Keep Sentinel ( 72 )
	// Level 35
	// Faction anterium
	// Assigned to Arthurius Keep ( 1 )
	//
	
	npcScript[ 72 ] = function( npcObject )
	{
		this.onShow = function()
		{
		
		}
		
		this.onUse = function()
		{
			
		}
	}
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.720.js
*/


		
		npcScript[ 720 ] = function( npcObject )
		{
			
		
			npcObject.events._add( "show", function()
			{
				
		
				new spellEffects.EggPulse(	{
									targetCharacter: npcObject
								});
		
	
			});
		
	
		}
		
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.721.js
*/


		
		npcScript[ 721 ] = function( npcObject )
		{
			
		
			npcObject.events._add( "show", function()
			{
				
		
				new spellEffects.EggPulse(	{
									targetCharacter: npcObject
								});
		
	
			});
		
	
		}
		
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.73.js
*/

	
	//
	// Gatekeeper Candescos ( 73 )
	// Level 35
	// Faction anterium
	// Assigned to Arthurius Keep ( 1 )
	//
	
	npcScript[ 73 ] = function( npcObject )
	{
		this.onShow = function()
		{
		
		}
		
		this.onUse = function()
		{
			
		}
	}
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.739.js
*/


		
		npcScript[ 739 ] = function( npcObject )
		{
			
		
			npcObject.events._add( "show", function()
			{
				
		
				new spellEffects.EggPulse(	{
									targetCharacter: npcObject
								});
		
	
			});
		
	
		}
		
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.74.js
*/

	
	//
	// Tutor Rashnipos ( 74 )
	// Level 30
	// Faction anterium
	// Assigned to Arthurius Keep ( 1 )
	//
	
	npcScript[ 74 ] = function( npcObject )
	{
		this.onShow = function()
		{
		
		}
		
		this.onUse = function()
		{
			
		}
	}
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.75.js
*/

	
	//
	// Herbalist Cordobo ( 75 )
	// Level 15
	// Faction anterium
	// Assigned to Arthurius Keep ( 1 )
	//
	
	npcScript[ 75 ] = function( npcObject )
	{
		this.onShow = function()
		{
		
		}
		
		this.onUse = function()
		{
			
		}
	}
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.76.js
*/

	
	//
	// Anterium Fray Retainer ( 76 )
	// Level 40
	// Faction anterium
	// Assigned to Alchemist's Fray ( 4 )
	//
	
	npcScript[ 76 ] = function( npcObject )
	{
		npcObject.events._add( "show", function()
		{
			new spellEffects.auraRevive({
												targetCharacter: npcObject
											});
			
			new spellEffects.ambientRadialSounds({
														targetCharacter: npcObject,
														streams:
														{
															1000: [ 'deathWhispers1' ]
														}
													});
		});
		
		npcObject.events._add( "hide", function()
		{
			npcObject.removeVisualEffect( spellEffects.auraRevive );
		});
	}
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.77.js
*/

	
	//
	// Hegemony Fray Retainer ( 77 )
	// Level 40
	// Faction hegemony
	// Assigned to Alchemist's Fray ( 4 )
	//
	
	npcScript[ 77 ] = function( npcObject )
	{
		npcObject.events._add( "show", function()
		{
			new spellEffects.auraRevive({
												targetCharacter: npcObject
											});
			
			new spellEffects.ambientRadialSounds({
														targetCharacter: npcObject,
														streams:
														{
															1000: [ 'deathWhispers1' ]
														}
													});
		});
		
		npcObject.events._add( "hide", function()
		{
			npcObject.removeVisualEffect( spellEffects.auraRevive );
		});
	}
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.78.js
*/

	
	//
	// Hegemony Minion ( 78 )
	// Level 1
	// Faction hegemony
	// Assigned to New Gardenia ( 5 )
	//
	
	npcScript[ 78 ] = function( npcObject )
	{
		this.onShow = function()
		{
		
		}
		
		this.onUse = function()
		{
			
		}
	}
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.787.js
*/


		
		npcScript[ 787 ] = function( npcObject )
		{
			
		
			npcObject.events._add( "show", function()
			{
				
		
				new spellEffects.WaterTrickle(	{
									targetCharacter: npcObject
								});
		
	
			});
		
	
		}
		
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.79.js
*/

	
	//
	// Anterium Minion ( 79 )
	// Level 1
	// Faction anterium
	// Assigned to New Gardenia ( 5 )
	//
	
	npcScript[ 79 ] = function( npcObject )
	{
		this.onShow = function()
		{
		
		}
		
		this.onUse = function()
		{
			
		}
	}
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.80.js
*/

	
	//
	// Hegemony Retainer ( 80 )
	// Level 40
	// Faction hegemony
	// Assigned to Fortress Assault ( 9 )
	//
	
	npcScript[ 80 ] = function( npcObject )
	{
		npcObject.events._add( "show", function()
		{
			new spellEffects.auraRevive({
												targetCharacter: npcObject
											});
			
			new spellEffects.ambientRadialSounds({
														targetCharacter: npcObject,
														streams:
														{
															1000: [ 'deathWhispers1' ]
														}
													});
		});
		
		npcObject.events._add( "hide", function()
		{
			npcObject.removeVisualEffect( spellEffects.auraRevive );
		});
	}
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.81.js
*/

	
	//
	// Anterium Retainer ( 81 )
	// Level 40
	// Faction anterium
	// Assigned to Fortress Assault ( 9 )
	//
	
	npcScript[ 81 ] = function( npcObject )
	{
		npcObject.events._add( "show", function()
		{
			new spellEffects.auraRevive({
												targetCharacter: npcObject
											});
			
			new spellEffects.ambientRadialSounds({
														targetCharacter: npcObject,
														streams:
														{
															1000: [ 'deathWhispers1' ]
														}
													});
		});
		
		npcObject.events._add( "hide", function()
		{
			npcObject.removeVisualEffect( spellEffects.auraRevive );
		});
	}
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.82.js
*/

	
	//
	// Bombardier Beetle ( 82 )
	// Level 30
	// Faction hegemony
	// Assigned to Fortress Assault ( 9 )
	//
	
	npcScript[ 82 ] = function( npcObject )
	{
		this.onShow = function()
		{
		
		}
		
		this.onUse = function()
		{
			
		}
	}
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.83.js
*/

	
	//
	// Bombardier Beetle ( 83 )
	// Level 30
	// Faction hegemony
	// Assigned to Fortress Assault ( 9 )
	//
	
	npcScript[ 83 ] = function( npcObject )
	{
		this.onShow = function()
		{
		
		}
		
		this.onUse = function()
		{
			
		}
	}
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.84.js
*/

	
	//
	// FA Anterium Left Gate ( 84 )
	// Level 40
	// Faction anterium
	// Assigned to Fortress Assault ( 9 )
	//
	
	npcScript[ 84 ] = function( npcObject )
	{
		this.onShow = function()
		{
		
		}
		
		this.onUse = function()
		{
			
		}
	}
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.85.js
*/

	
	//
	// FA Anterium Right Gate ( 85 )
	// Level 40
	// Faction anterium
	// Assigned to Fortress Assault ( 9 )
	//
	
	npcScript[ 85 ] = function( npcObject )
	{
		this.onShow = function()
		{
		
		}
		
		this.onUse = function()
		{
			
		}
	}
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.86.js
*/

	
	//
	// FA Anterium Mid Gate ( 86 )
	// Level 40
	// Faction anterium
	// Assigned to Fortress Assault ( 9 )
	//
	
	npcScript[ 86 ] = function( npcObject )
	{
		this.onShow = function()
		{
		
		}
		
		this.onUse = function()
		{
			
		}
	}
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.87.js
*/

	
	//
	// FA Hegemony Left Gate ( 87 )
	// Level 40
	// Faction hegemony
	// Assigned to Fortress Assault ( 9 )
	//
	
	npcScript[ 87 ] = function( npcObject )
	{
		this.onShow = function()
		{
		
		}
		
		this.onUse = function()
		{
			
		}
	}
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.88.js
*/

	
	//
	// FA Hegemony Right Gate ( 88 )
	// Level 40
	// Faction hegemony
	// Assigned to Fortress Assault ( 9 )
	//
	
	npcScript[ 88 ] = function( npcObject )
	{
		this.onShow = function()
		{
		
		}
		
		this.onUse = function()
		{
			
		}
	}
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.89.js
*/

	
	//
	// FA Hegemony Mid Gate ( 89 )
	// Level 40
	// Faction hegemony
	// Assigned to Fortress Assault ( 9 )
	//
	
	npcScript[ 89 ] = function( npcObject )
	{
		this.onShow = function()
		{
		
		}
		
		this.onUse = function()
		{
			
		}
	}
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.9.js
*/

	
	//
	// Swarm General Embershield ( 9 )
	// Level 40
	// Faction anterium
	// Assigned to Arthurius Keep ( 1 )
	//
	
	npcScript[ 9 ] = function( npcObject )
	{
		this.onShow = function()
		{
		
		}
		
		this.onUse = function()
		{
			
		}
	}
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.90.js
*/

	
	npcScript[ 90 ] = function( npcObject )
	{
		npcObject.events._add( "show", function()
		{
			new spellEffects.bombardierBeetleDeath({
													sourceCharacter: npcObject,
													targetCharacter: npcObject,
													rotation: npcObject.characterData.character_rotation
												});
		});
		
		npcObject.events._add( "hide", function()
		{
			npcObject.removeVisualEffect( spellEffects.bombardierBeetleDeath );
		});
	}
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.904.js
*/


		
		npcScript[ 904 ] = function( npcObject )
		{
			
		
			npcObject.events._add( "show", function()
			{
				
		
				new spellEffects.ShipDroneScary(	{
									targetCharacter: npcObject
								});
		
	
			});
		
	
		}
		
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.907.js
*/


		
		npcScript[ 907 ] = function( npcObject )
		{
			
		
			npcObject.events._add( "show", function()
			{
				
		
				new spellEffects.PowerStation(	{
									targetCharacter: npcObject
								});
		
	
			});
		
	
		}
		
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.908.js
*/


		
		npcScript[ 908 ] = function( npcObject )
		{
			
		
			npcObject.events._add( "show", function()
			{
				
		
				new spellEffects.ShipDroneScary(	{
									targetCharacter: npcObject
								});
		
	
			});
		
	
		}
		
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.909.js
*/


		
		npcScript[ 909 ] = function( npcObject )
		{
			
		
			npcObject.events._add( "show", function()
			{
				
		
				new spellEffects.PowerStation(	{
									targetCharacter: npcObject
								});
		
	
			});
		
	
		}
		
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.91.js
*/

	
	//
	// Beetle Summoner (Left) ( 91 )
	// Level 1
	// Faction null
	// Assigned to Fortress Assault ( 9 )
	//
	
	npcScript[ 91 ] = function( npcObject )
	{
		var _changeSkin = function()
		{
			if( npcObject.characterData.character_is_usable == null )
			{
				npcObject.setSkin( "itemBeetleSummonerUnUsable" );
			}
			else
			{
				npcObject.setSkin( "itemBeetleSummonerUsable" );
			}
		}
		
		npcObject.events._add( "setUnusable", function()
		{
			_changeSkin();
		});
		
		npcObject.events._add( "setUsable", function()
		{
			_changeSkin();
		});
		
		npcObject.events._add( "show", function()
		{
			_changeSkin();
		});
		
		npcObject.events._add( "hide", function()
		{
			npcObject.removeVisualEffect( spellEffects.auraRevive );
		});
	}
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.910.js
*/


		
		npcScript[ 910 ] = function( npcObject )
		{
			
		
			npcObject.events._add( "show", function()
			{
				
		
				new spellEffects.ShipDroneNormal(	{
									targetCharacter: npcObject
								});
		
	
			});
		
	
		}
		
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.911.js
*/


		
		npcScript[ 911 ] = function( npcObject )
		{
			
		
			npcObject.events._add( "show", function()
			{
				
		
				new spellEffects.ShipDroneNormal(	{
									targetCharacter: npcObject
								});
		
	
			});
		
	
		}
		
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.912.js
*/


		
		npcScript[ 912 ] = function( npcObject )
		{
			
		
			npcObject.events._add( "show", function()
			{
				
		
				new spellEffects.ShipDroneScary(	{
									targetCharacter: npcObject
								});
		
	
			});
		
	
		}
		
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.913.js
*/


		
		npcScript[ 913 ] = function( npcObject )
		{
			
		
			npcObject.events._add( "show", function()
			{
				
		
				new spellEffects.Flicker(	{
									targetCharacter: npcObject
								});
		
	
			});
		
	
		}
		
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.914.js
*/


		
		npcScript[ 914 ] = function( npcObject )
		{
			
		
			npcObject.events._add( "show", function()
			{
				
		
				new spellEffects.PowerStation(	{
									targetCharacter: npcObject
								});
		
	
			});
		
	
		}
		
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.915.js
*/


		
		npcScript[ 915 ] = function( npcObject )
		{
			
		
			npcObject.events._add( "show", function()
			{
				
		
				new spellEffects.ShipDroneScary(	{
									targetCharacter: npcObject
								});
		
	
			});
		
	
		}
		
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.916.js
*/


		
		npcScript[ 916 ] = function( npcObject )
		{
			
		
			npcObject.events._add( "show", function()
			{
				
		
				new spellEffects.ShipDroneScary(	{
									targetCharacter: npcObject
								});
		
	
			});
		
	
		}
		
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.917.js
*/


		
		npcScript[ 917 ] = function( npcObject )
		{
			
		
			npcObject.events._add( "show", function()
			{
				
		
				new spellEffects.ShipDroneNormal(	{
									targetCharacter: npcObject
								});
		
	
			});
		
	
		}
		
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.918.js
*/


		
		npcScript[ 918 ] = function( npcObject )
		{
			
		
			npcObject.events._add( "show", function()
			{
				
		
				new spellEffects.Flicker(	{
									targetCharacter: npcObject
								});
		
	
			});
		
	
		}
		
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.919.js
*/


		
		npcScript[ 919 ] = function( npcObject )
		{
			
		
			npcObject.events._add( "show", function()
			{
				
		
				new spellEffects.ShipDroneNormal(	{
									targetCharacter: npcObject
								});
		
	
			});
		
	
		}
		
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.92.js
*/

	
	//
	// Beetle Summoner (Right) ( 92 )
	// Level 1
	// Faction null
	// Assigned to Fort Saltre ( 2 )
	//
	
	npcScript[ 92 ] = function( npcObject )
	{
		var _changeSkin = function()
		{
			if( npcObject.characterData.character_is_usable == null )
			{
				npcObject.setSkin( "itemBeetleSummonerUnUsable" );
			}
			else
			{
				npcObject.setSkin( "itemBeetleSummonerUsable" );
			}
		}
		
		npcObject.events._add( "setUnusable", function()
		{
			_changeSkin();
		});
		
		npcObject.events._add( "setUsable", function()
		{
			_changeSkin();
		});
		
		npcObject.events._add( "show", function()
		{
			_changeSkin();
		});
		
		npcObject.events._add( "hide", function()
		{
			npcObject.removeVisualEffect( spellEffects.auraRevive );
		});
	}
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.927.js
*/


		
		npcScript[ 927 ] = function( npcObject )
		{
			
		
			npcObject.events._add( "use", function()
			{
				
		
				new spellEffects.TeleportUsed(	{
									targetCharacter: npcObject
								});
		
	
			});
		
	
		
			npcObject.events._add( "show", function()
			{
				
		
				new spellEffects.TeleportUsed(	{
									targetCharacter: npcObject
								});
		
	
			});
		
	
		}
		
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.928.js
*/


		
		npcScript[ 928 ] = function( npcObject )
		{
			
		
			npcObject.events._add( "use", function()
			{
				
		
				new spellEffects.TeleportUsed(	{
									targetCharacter: npcObject
								});
		
	
			});
		
	
		
			npcObject.events._add( "show", function()
			{
				
		
				new spellEffects.TeleportUsed(	{
									targetCharacter: npcObject
								});
		
	
			});
		
	
		}
		
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.929.js
*/


		
		npcScript[ 929 ] = function( npcObject )
		{
			
		}
		
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.93.js
*/

	
	//
	// Anterium Commander ( 93 )
	// Level 40
	// Faction anterium
	// Assigned to Fortress Assault ( 9 )
	//
	
	npcScript[ 93 ] = function( npcObject )
	{
		this.onShow = function()
		{
		
		}
		
		this.onUse = function()
		{
			
		}
	}
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.931.js
*/


		
		npcScript[ 931 ] = function( npcObject )
		{
			
		
			npcObject.events._add( "show", function()
			{
				
		
				new spellEffects.ShipDroneScary(	{
									targetCharacter: npcObject
								});
		
	
			});
		
	
		}
		
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.932.js
*/


		
		npcScript[ 932 ] = function( npcObject )
		{
			
		
			npcObject.events._add( "show", function()
			{
				
		
				new spellEffects.Flicker(	{
									targetCharacter: npcObject
								});
		
	
			});
		
	
		}
		
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.938.js
*/


		
		npcScript[ 938 ] = function( npcObject )
		{
			
		}
		
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.939.js
*/


		
		npcScript[ 939 ] = function( npcObject )
		{
			
		}
		
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.94.js
*/

	
	//
	// Hegemony Commander ( 94 )
	// Level 40
	// Faction hegemony
	// Assigned to Fortress Assault ( 9 )
	//
	
	npcScript[ 94 ] = function( npcObject )
	{
		this.onShow = function()
		{
		
		}
		
		this.onUse = function()
		{
			
		}
	}
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.940.js
*/


		
		npcScript[ 940 ] = function( npcObject )
		{
			
		}
		
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.941.js
*/


		
		npcScript[ 941 ] = function( npcObject )
		{
			
		
			npcObject.events._add( "show", function()
			{
				
		
				new spellEffects.EggPulse(	{
									targetCharacter: npcObject
								});
		
	
			});
		
	
		}
		
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.943.js
*/


		
		npcScript[ 943 ] = function( npcObject )
		{
			
		
			npcObject.events._add( "show", function()
			{
				
		
				new spellEffects.Flicker(	{
									targetCharacter: npcObject
								});
		
	
			});
		
	
		}
		
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.944.js
*/


		
		npcScript[ 944 ] = function( npcObject )
		{
			
		
			npcObject.events._add( "use", function()
			{
				
		
				new spellEffects.chestOpennoLoopSoundL(	{
									targetCharacter: npcObject
								});
		
	
			});
		
	
		
			npcObject.events._add( "show", function()
			{
				
		
				new spellEffects.BoxWavesRadiant(	{
									targetCharacter: npcObject
								});
		
	
			});
		
	
		}
		
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.945.js
*/


		
		npcScript[ 945 ] = function( npcObject )
		{
			
		
			npcObject.events._add( "use", function()
			{
				
		
				new spellEffects.chestOpennoLoopSoundL(	{
									targetCharacter: npcObject
								});
		
	
			});
		
	
		
			npcObject.events._add( "show", function()
			{
				
		
				new spellEffects.BoxWavesRadiant(	{
									targetCharacter: npcObject
								});
		
	
			});
		
	
		}
		
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.946.js
*/


		
		npcScript[ 946 ] = function( npcObject )
		{
			
		
			npcObject.events._add( "use", function()
			{
				
		
				new spellEffects.chestOpennoLoopSoundL(	{
									targetCharacter: npcObject
								});
		
	
			});
		
	
		
			npcObject.events._add( "show", function()
			{
				
		
				new spellEffects.BoxWavesRadiant(	{
									targetCharacter: npcObject
								});
		
	
			});
		
	
		}
		
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.947.js
*/


		
		npcScript[ 947 ] = function( npcObject )
		{
			
		
			npcObject.events._add( "use", function()
			{
				
		
				new spellEffects.chestOpennoLoopSoundL(	{
									targetCharacter: npcObject
								});
		
	
			});
		
	
		
			npcObject.events._add( "show", function()
			{
				
		
				new spellEffects.BoxWavesRadiant(	{
									targetCharacter: npcObject
								});
		
	
			});
		
	
		}
		
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.948.js
*/


		
		npcScript[ 948 ] = function( npcObject )
		{
			
		
			npcObject.events._add( "use", function()
			{
				
		
				new spellEffects.chestOpennoLoopSoundL(	{
									targetCharacter: npcObject
								});
		
	
			});
		
	
		
			npcObject.events._add( "show", function()
			{
				
		
				new spellEffects.BoxWavesRadiant(	{
									targetCharacter: npcObject
								});
		
	
			});
		
	
		}
		
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.949.js
*/


		
		npcScript[ 949 ] = function( npcObject )
		{
			
		
			npcObject.events._add( "use", function()
			{
				
		
				new spellEffects.chestOpennoLoopSoundL(	{
									targetCharacter: npcObject
								});
		
	
			});
		
	
		
			npcObject.events._add( "show", function()
			{
				
		
				new spellEffects.BoxWavesRadiant(	{
									targetCharacter: npcObject
								});
		
	
			});
		
	
		}
		
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.95.js
*/

	
	//
	// Anterium Tent ( 95 )
	// Level 1
	// Faction anterium
	// Assigned to Jungle Camps ( 7 )
	//
	
	npcScript[ 95 ] = function( npcObject )
	{
		this.onShow = function()
		{
		
		}
		
		this.onUse = function()
		{
			
		}
	}
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.950.js
*/


		
		npcScript[ 950 ] = function( npcObject )
		{
			
		
			npcObject.events._add( "use", function()
			{
				
		
				new spellEffects.RummageJunk(	{
									targetCharacter: npcObject
								});
		
	
			});
		
	
		}
		
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.951.js
*/


		
		npcScript[ 951 ] = function( npcObject )
		{
			
		
			npcObject.events._add( "use", function()
			{
				
		
				new spellEffects.RummageMetal(	{
									targetCharacter: npcObject
								});
		
	
			});
		
	
		}
		
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.952.js
*/


		
		npcScript[ 952 ] = function( npcObject )
		{
			
		
			npcObject.events._add( "use", function()
			{
				
		
				new spellEffects.RummageJunk(	{
									targetCharacter: npcObject
								});
		
	
			});
		
	
		}
		
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.953.js
*/


		
		npcScript[ 953 ] = function( npcObject )
		{
			
		
			npcObject.events._add( "use", function()
			{
				
		
				new spellEffects.RummageMetal(	{
									targetCharacter: npcObject
								});
		
	
			});
		
	
		}
		
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.954.js
*/


		
		npcScript[ 954 ] = function( npcObject )
		{
			
		
			npcObject.events._add( "use", function()
			{
				
		
				new spellEffects.RummageJunk(	{
									targetCharacter: npcObject
								});
		
	
			});
		
	
		}
		
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.955.js
*/


		
		npcScript[ 955 ] = function( npcObject )
		{
			
		
			npcObject.events._add( "show", function()
			{
				
		
				new spellEffects.RummageMetal(	{
									targetCharacter: npcObject
								});
		
	
			});
		
	
		}
		
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.96.js
*/

	
	//
	// Hegemony Tent ( 96 )
	// Level 1
	// Faction hegemony
	// Assigned to Jungle Camps ( 7 )
	//
	
	npcScript[ 96 ] = function( npcObject )
	{
		this.onShow = function()
		{
		
		}
		
		this.onUse = function()
		{
			
		}
	}
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.97.js
*/

	
	//
	// Supply Tent ( 97 )
	// Level 1
	// Faction null
	// Assigned to Jungle Camps ( 7 )
	//
	
	npcScript[ 97 ] = function( npcObject )
	{
		this.onShow = function()
		{
		
		}
		
		this.onUse = function()
		{
			
		}
	}
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.98.js
*/

	
	//
	// Hegemony Tower ( 98 )
	// Level 1
	// Faction hegemony
	// Assigned to Jungle Camps ( 7 )
	//
	
	npcScript[ 98 ] = function( npcObject )
	{
		var _showedDeathAnimation = false;
		
		npcObject.events._add( "damageTake", function()
		{
			if( npcObject.characterData.character_hp_current > 0 || _showedDeathAnimation == true )
			{
				return;
			}
			
			_showedDeathAnimation = true;
			
			npcObject.setSkin( "corpse" );
			
			new spellEffects.towerExplosion({
													targetCharacter: npcObject
												});
		});
	}
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.980.js
*/


		
		npcScript[ 980 ] = function( npcObject )
		{
			
		
			npcObject.events._add( "show", function()
			{
				
		
				new spellEffects.junglecreaturesambient2min(	{
									targetCharacter: npcObject
								});
		
	
			});
		
	
		}
		
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.981.js
*/


		
		npcScript[ 981 ] = function( npcObject )
		{
			
		
			npcObject.events._add( "show", function()
			{
				
		
				new spellEffects.wavesrythmical7sec(	{
									targetCharacter: npcObject
								});
		
	
			});
		
	
		}
		
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.982.js
*/


		
		npcScript[ 982 ] = function( npcObject )
		{
			
		
			npcObject.events._add( "show", function()
			{
				
		
				new spellEffects.JungleAmbient1min(	{
									targetCharacter: npcObject
								});
		
	
			});
		
	
		}
		
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.984.js
*/


		
		npcScript[ 984 ] = function( npcObject )
		{
			
		
			npcObject.events._add( "show", function()
			{
				
		
				new spellEffects.LongCreak(	{
									targetCharacter: npcObject
								});
		
	
			});
		
	
		}
		
	

/*
	File: /usr/www/harendar.gameleon.co//public_web/components/bugcraft/resources/public/component.bugcraft.npcScripts/npcScript.99.js
*/

	
	//
	// Hegemony Tower ( 99 )
	// Level 1
	// Faction hegemony
	// Assigned to Jungle Camps ( 7 )
	//
	
	npcScript[ 99 ] = function( npcObject )
	{
		var _showedDeathAnimation = false;
		
		npcObject.events._add( "damageTake", function()
		{
			if( npcObject.characterData.character_hp_current > 0 || _showedDeathAnimation == true )
			{
				return;
			}
			
			_showedDeathAnimation = true;
			
			npcObject.setSkin( "corpse" );
			
			new spellEffects.towerExplosion({
													targetCharacter: npcObject
												});
		});
	}
	



/*
	File: /usr/www/harendar.gameleon.co//public_web/components/login/resources/public/component.login.js
*/

	
	/*
		login JS
	*/
	
	Component.login = {
		
		componentName: "login",
		
		init: function( args )
		{
			for(var i=args.length-1;i>=0;i--)
			{
				new Component.login.create( args[i] );	
			}
		},
		
		create: function( args )
		{
			Application.facebook.init({
												afterFunction: 	function()
																		{
																			
																		}
											});
		}
		
	};



/*
	File: /usr/www/harendar.gameleon.co//public_web/components/payment/resources/public/component.payment.js
*/

	
	/*
		payment JS
	*/
	
	Component.payment = {
		
		componentName: "payment",
		
		init: function( args )
		{
			for(var i=args.length-1;i>=0;i--)
			{
				new Component.payment.create( args[i] );	
			}
		},
		
		create: function( args )
		{
			var getMouseXY = function(e)
			{
				var tempX = 0;
				var tempY = 0;
				
				if( !e.pageX )
				{ // grab the x-y pos.s if browser is IE
					tempX = event.clientX + document.body.scrollLeft;
					tempY = event.clientY + document.body.scrollTop;
				}
				else
				{  // grab the x-y pos.s if browser is NS
					tempX = e.pageX;
					tempY = e.pageY;
				}  

				if (tempX < 0)
				{
					tempX = 0;
				}
				if (tempY < 0)
				{
					tempY = 0;
				}  

				return { x: tempX, y: tempY };
			}
		
		
			var idCount = 0,
				addNPCFlag = false,
				npcs = [];
			
			var mainWorkZone = document.getElementById( args.id + "_mainWorkZone" ),
				behaviourEditContainer = document.getElementById( args.id + "_behaviourEditContainer" ),
				behaviourEditCanvas = document.getElementById( args.id + "_behaviourEditCanvas" ),
				ctx = behaviourEditCanvas.getContext("2d");
			
			var loadBehaviour = function( id )
			{
				ctx.clearRect( 0, 0, behaviourEditCanvas.width, behaviourEditCanvas.height );
				
				//retrieve npc object by id
				var selectedNPC;
				for( var i = 0; i < npcs.length; i++ )
				{
					if( npcs[i] == null || npcs[i].id != id )
					{
						continue;
					}
					
					selectedNPC = npcs[i];
					break;
				}
				
				selectedNPC.drawElement();
				
				behaviourEditContainer.className = "behaviourEditContainer";
			}
			
			var npc = function( _args )
			{
				var self = this;
				this.id = idCount++;
				this.events = [];
				this.input = [];
				this.posX = _args.posX;
				this.posY = _args.posY;
				
				var newdiv = document.createElement("div");
				newdiv.className = "npc";
				newdiv.style.left = _args.posX + "px";
				newdiv.style.top = _args.posY + "px";
				Application.event.add( newdiv,
										"click",
										function( e )
										{
											if( addNPCFlag )
											{
												return;
											}
											
											loadBehaviour( self.id );
										},
										false
									);
				mainWorkZone.appendChild( newdiv );
				
				addNPCFlag = false;
				
				this.drawElement = function()
				{
					var _height = Math.max( 1, Math.max( self.events.length, self.input.length ) ) * (30 + 5);
					var _width = 30;
					
					//draw element body
					ctx.fillStyle = "#FF0000";
					ctx.fillRect( self.posX + 30, self.posY,_width, _height );
					
					//draw element output nodes
					ctx.fillStyle = "#00ff00";
					for( var i = 0; i < self.events.length; i++ )
					{
						ctx.fillRect( self.posX + 30 + _width, i * (30 + 5), 30, 30 );
					}
					
					//draw element input nodes
					ctx.fillStyle = "#0000ff";
					for( var i = 0; i < self.events.length; i++ )
					{
						ctx.fillRect( self.posX, i * (30 + 5), 30, 30 );
					}
				}
			}
			
			Application.event.add( document.getElementById( args.id + "_addNPCButton" ), 
									"click", 
									function()
									{
										addNPCFlag = true;
									},
									false
								);
								
			Application.event.add( mainWorkZone, 
									"click", 
									function( e )
									{
										if( !addNPCFlag )
										{
											return;
										}
										
										var	mousePos = getMouseXY( e );
										
										npcs.push( new npc({
															posX: mousePos.x - mainWorkZone.offsetLeft,
															posY: mousePos.y - mainWorkZone.offsetTop
														})
												);
									},
									false
								);
			
			Application.event.add( document.getElementById( args.id + "_behaviourSaveButton" ), 
									"click", 
									function()
									{
										addNPCFlag = true;
									},
									false
								);
			Application.event.add( document.getElementById( args.id + "_behaviourCloseButton" ), 
									"click", 
									function()
									{
										behaviourEditContainer.className = "closed";
									},
									false
								);
		/*
			FB.init({
						appId: "115106231869046", 
						status: true, 
						cookie: true
					});

			FB.Canvas.getPageInfo( function()
									{
										document.getElementById( args.id + "_facebookContainer" ).style.display = "block";
									});
			
			var userId = /userID=[0-9]+/.exec( document.location.href ).toString().split('=')[1];
			var choice = 0;
			
			var sendOrder = function( itemId )
			{
				Application.connect.ajaxComponent({
													component: "payment",
													event: "addOrder",
													vars:
													{
														itemId: itemId,
														userId: userId
													},
													sendErrorReport: false,
													successFunction: 	function( jsonEl )
																				{
																					if(jsonEl.header.result != 200 && jsonEl.header.result != 201)
																					{
																						return;
																					}
																					
																					console.debug(jsonEl);
																					document.getElementById( args.id + "_itemNameInput" ).setAttribute( "value", (jsonEl.content["@attributes"].itemId * 100) + " amber" );
																					document.getElementById( args.id + "_amountInput" ).setAttribute( "value", (jsonEl.content["@attributes"].itemId * 5) );
																					document.getElementById( args.id + "_itemNumberInput" ).setAttribute( "value", jsonEl.content["@attributes"].itemId );
																					document.getElementById( args.id + "_orderIdInput" ).setAttribute( "value", jsonEl.content["@attributes"].orderId );
																					
																					document.getElementById( args.id + "_paypalForm").submit();
																				}
												});
			}
			
			var facebookPlaceOrder = function()
			{
				// Assign an ID - usually points to a db record 
				// found in your callback
				var order_info = document.getElementById("item_id").value;

				// calling the API ...
				var obj = {
							method: "pay",
							order_info: order_info,
							purchase_type: "item"
						};

				FB.ui(obj, callback);
			}

			var callback = function(data)
			{
				if (data["order_id"])
				{
					// Success, we received the order_id. The order states can be
					// settled or cancelled at this point.
					console.debug(data)
					return true;
				}
				else
				{
					//handle errors here
					return false;
				}
			}
			
			var buyQuantities = document.getElementById(args.id + "_buyQuantities");
			for( var i = 1; i < 4; i++ )
			{
				var newButton = document.createElement("input");
				newButton.setAttribute("type", "button");
				newButton.setAttribute("value", "Buy " + (i * 100) + " amber for " + (i * 5) + "$" );
				newButton.setAttribute("name", i );
				Application.event.add( newButton, "click", function(e)
															{
																sendOrder(e.target.getAttribute("name"));
															});
				buyQuantities.appendChild(newButton);
			}
			
			Application.event.add( document.getElementById( args.id + "_facebookBuyButton" ), "click", function()
																										{
																											facebookPlaceOrder();
																										});
		*/
		}
		
	};