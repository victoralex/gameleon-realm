<?php/*** @copyright 	Jonathon Blumenthal  2005* @author		Jonathon Blumenthal* @license http://opensource.org/licenses/gpl-license.php** This program is free software; you can redistribute it and/or* modify it under the terms of the GNU General Public License* as published by the Free Software Foundation; either version 2* of the License, or (at your option) any later version.** This program is distributed in the hope that it will be useful,* but WITHOUT ANY WARRANTY; without even the implied warranty of* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the* GNU General Public License for more details.*/	// PHP Binary Tree Node	class Btree {		private $data;		private $left;		private $right;				/* constructor */		function Btree ($data, $left, $right) {			$this->data  = $data;			$this->left  = $left;			$this->right = $right;		}				/**		* Accessor method to get the data from this node.   		* @return - the data from this node		**/		function getData( ) { return $this->data; }				/**		* Accessor method to get a reference to the left child of this node. 		* @return - a reference to the left child of this node (or the null reference if there		* is no left child)		**/		function getLeft( ) { return $this->left; }				/**		* Accessor method to get a reference to the right child of this node. 		* @return - a reference to the right child of this node (or the null reference if there		* is no left child)		**/		function getRight( ) { return $this->right; }				/**		* Accessor method to get the data from the leftmost node of the tree below this node.		* @return - the data from the deepest node that can be reached from this node by		* following left links.		**/		function getLeftmostData() {			if ($this->left == NULL)				return $this->data;			else				return $this->left->getLeftmostData( );		}				/**		* Accessor method to get the data from the rightmost node of the tree below this node.		* @return - the data from the deepest node that can be reached from this node by		* following left links.		**/		function getRightmostData() {			if ($this->right == NULL)				return $this->data;			else				return $this->right->getRightmostData( );		}				/**		* Accessor method to determine whether a node is a leaf. 		* @return - true (if this node is a leaf) or false (if this node is not a leaf.		**/		function isLeaf( ) {      		return ($this->left == NULL) && ($this->right == NULL);		} 				/**		* Modification method to set the data in this node.   		* @param - newData the new data to place in this node		* Postcondition: The data of this node has been set to newData.		**/		function setData($newData)  {			$this->data = $newData;		}				/**		* Modification method to set the link to the left child of this node.		* @param - newLeft		*		a reference to the node that should appear as the left child of this node		*  		(or the null reference if there is no left child for this node)		* Postcondition:		*		The link to the left child of this node has been set to newLeft.		*		Any other node (that used to be the left child) is no longer connected to		*		this node.		**/		function setLeft($newLeft) {                    			$this->left = $newLeft;		}  				/**		* Modification method to set the link to the right child of this node.		* @param - newRight		*		a reference to the node that should appear as the right child of this node		*  		(or the null reference if there is no right child for this node)		* Postcondition:		*		The link to the right child of this node has been set to newRight.		*		Any other node (that used to be the right child) is no longer connected to		*		this node.		**/		function setRight($newRight) {                    			$this->right = $newRight;		}				/**		* Count the number of nodes in a binary tree.		* @param - root:		*		a reference to the root of a binary tree (which may be		*		an empty tree where source is null)		* @return - the number of nodes in the binary tree		**/ 		function treeSize() {			if ($this->left  != NULL) $left_sum = $this->left->treeSize(); else	$left_sum = 0; 			if ($this->right != NULL) $right_sum = $this->right->treeSize(); else $right_sum = 0;			return 1 + $left_sum + $right_sum;		}	}?>